define('PhxDataGrid/datagrid',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', './datagridHelper'], function (exports, _helper, _http, _aureliaFramework, _datagridHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Datagrid = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var Datagrid = exports.Datagrid = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _datagridHelper.DatagridHelper), _dec(_class = function () {
    function Datagrid(helper, http, DatagridHelper) {
      _classCallCheck(this, Datagrid);

      this.helper = helper;
      this.http = http;
      this.datagridHelper = DatagridHelper;
    }

    Datagrid.prototype.activate = function activate(params) {

      console.log('window', window);

      var self = this;

      if (typeof this.helper.jwt() === 'undefined' || this.helper.jwt() == null) {
        if (params.hasOwnProperty("jwt")) {
          this.helper.processToken(params.jwt);
        }
      } else {}

      this.datagridHelper.activate();
    };

    Datagrid.prototype.attached = function attached() {
      console.log("XRAY LOADED");
      this.datagridLoaded();
    };

    Datagrid.prototype.datagridLoaded = function datagridLoaded() {
      var self = this;
      var bridge = self.helper.getBoundObject();
      if (bridge) {
        bridge.phxDataGrid_loaded();
      }
    };

    Datagrid.prototype.rowRightClick = function rowRightClick(value, rowIndex) {
      var self = this;

      var bridge = self.helper.getBoundObject();
      if (bridge) {
        var stringifiedData = JSON.stringify(self.datagridHelper.rows[rowIndex].data);
        bridge.phxDataGrid_rightClick(value, stringifiedData, rowIndex);
      }
    };

    Datagrid.prototype.rowClicked = function rowClicked(value, row, colIndex, rowIndex) {
      var self = this;
      self.datagridHelper.selectRow(row);

      var bridge = self.helper.getBoundObject();
      if (bridge) {
        var stringifiedData = JSON.stringify(row.data);
        bridge.phxDataGrid_click(value, stringifiedData, rowIndex, colIndex);
      }
    };

    Datagrid.prototype.rowDoubleClicked = function rowDoubleClicked(value, rowIndex) {
      var self = this;
      var bridge = self.helper.getBoundObject();
      if (bridge) {
        var stringifiedData = JSON.stringify(self.datagridHelper.rows[rowIndex].data);
        bridge.phxDataGrid_doubleClick(value, stringifiedData, rowIndex);
      }
    };

    return Datagrid;
  }()) || _class);
});;
define('text!PhxDataGrid/datagrid.html',[],function(){return "<template><div id=\"myDataGrid\"><table class=\"table table-sm table-hover table-bordered\"><thead class=\"thead-light\" style=\"font-weight:700;background-color:#f1f1f1\"><tr><template repeat.for=\"c of datagridHelper.columns\"><td if.bind=\"c.visible\">${c.header}</td></template></tr></thead><tbody><tr repeat.for=\"r of datagridHelper.rows\" style.bind=\"r.selected ? r.selectedStyleString : r.styleString\"><template repeat.for=\"c of datagridHelper.columns\"><td if.bind=\"c.visible\" click.delegate=\"rowClicked(r.cells[$index], r, $index, $parent.$index)\" dblclick.delegate=\"rowDoubleClicked(r.cells[$index], $parent.$index)\" contextmenu.delegate=\"rowRightClick(r.cells[$index], $parent.$index)\" innerhtml=\"${r.cells[$index]}\"></td></template></tr></tbody></table></div></template>";});;
define('PhxDataGrid/datagridHelper',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework'], function (exports, _helper, _http, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DatagridHelper = undefined;

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Row = function Row() {
    _classCallCheck(this, Row);

    this.cells = [];
    this.data;
    this.selected = false;
    this.styleString = "background-color: white";
    this.selectedStyleString = "background-color: rgb(187,209,233)";
  };

  var Column = function Column(header) {
    _classCallCheck(this, Column);

    this.header = header;
    this.visible = true;
  };

  var DatagridHelper = exports.DatagridHelper = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http), _dec(_class = function () {
    function DatagridHelper(helper, http) {
      _classCallCheck(this, DatagridHelper);

      this.rows = [];
      this.columns = [];

      this.helper = helper;
      this.http = http;
    }

    DatagridHelper.prototype.selectRow = function selectRow(row) {
      var self = this;
      for (var i = 0; i < self.rows.length; i++) {
        var aRow = self.rows[i];
        aRow.selected = false;
      }
      row.selected = true;
    };

    DatagridHelper.prototype.columnExists = function columnExists(header) {
      for (var i = 0; i < this.columns.length; i++) {
        if (this.columns[i].header === header) {
          return true;
        }
      }
      return false;
    };

    DatagridHelper.prototype.activate = function activate() {
      var self = this;
      self.columns.push(new Column("Date"));
      self.columns.push(new Column("Side"));
      self.columns.push(new Column("Part"));
      self.columns.push(new Column("Description"));
      self.columns.push(new Column("Finding"));
      self.columns.push(new Column("Instructions"));
      self.columns[5].visible = false;

      console.log("DATAGRIDHELPER ACTIVATE");
    };

    DatagridHelper.prototype.setColumnVisibility = function setColumnVisibility(columnIndex, visibility) {
      this.columns[columnIndex].visible = visibility;
    };

    DatagridHelper.prototype.newRowFromXray = function newRowFromXray(xray) {
      var self = this;
      var aRow = new Row();
      var aDate = self.helper.getISODateToFormat(xray.ExamDateTime, "MM/DD/YYYY");
      aRow.cells.push(aDate);
      aRow.cells.push(xray.Body_Side);
      aRow.cells.push(xray.Body_Part);
      aRow.cells.push(xray.Description);
      aRow.cells.push(xray.XRayFinding);

      if (xray.Instructions != null && xray.Instructions.length > 0) {
        aRow.cells.push(xray.Instructions);
        self.columns[5].visible = true;
      }

      if (xray.Type != null && xray.Type.toUpperCase() == "OUTSIDE") {
        aRow.styleString = "background-color: rgb(255,222,173)";
        aRow.selectedStyleString = "background-color: rgb(244,164,96)";
      }

      aRow.data = xray;
      return aRow;
    };

    DatagridHelper.prototype.clear = function clear() {
      var self = this;
      self.rows.splice(0, self.rows.length);
    };

    DatagridHelper.prototype.addRows = function addRows(data, refresh) {

      var self = this;

      if (refresh) {
        self.rows.splice(0, self.rows.length);
      }

      if (data.length > 0) {

        for (var i = 0; i < data.length; i++) {
          var xray = data[i];

          var aRow = self.newRowFromXray(xray);

          self.rows.push(aRow);

          if (i == 0) {
            self.selectRow(aRow);
          }
        }
      }
    };

    DatagridHelper.prototype.removeRowByIndex = function removeRowByIndex(index) {
      var self = this;
      for (var i = 0; i < self.rows.length; i++) {
        if (i == index) {
          self.rows.splice(index, 1);
          break;
        }
      }
    };

    DatagridHelper.prototype.updateRowByIndexAndXray = function updateRowByIndexAndXray(index, xray) {
      var row = this.newRowFromXray(xray);
      row.selected = true;


      this.rows.splice(index, 1, row);
    };

    DatagridHelper.prototype.getXrays = function getXrays(patientId, date) {
      var self = this;

      self.rows = [];

      var aDate = self.helper.getDateWithFormat(date, "YYYY-MM-DD");
      var url = "xrayresult/view/patients/" + patientId + "/date/" + aDate;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json.length > 0) {

          for (var i = 0; i < json.length; i++) {
            var xray = json[i];
            var aRow = new Row();

            if (i == 0) {
              aRow.selected = true;
            }
            var aDate = self.helper.getISODateToFormat(xray.ExamDateTime, "MM/DD/YYYY");
            aRow.cells.push(aDate);
            aRow.cells.push(xray.Body_Side);
            aRow.cells.push(xray.Body_Part);
            aRow.cells.push(xray.Description);
            aRow.cells.push(xray.XRayFinding);

            if (xray.Instructions != null && xray.Instructions.length > 0) {
              aRow.cells.push(xray.Instructions);
              self.columns[5].visible = true;
            }

            aRow.data = xray;
            self.rows.push(aRow);
          }
        }
      });
    };

    return DatagridHelper;
  }()) || _class);
});;
define('PhxDataGrid/index',['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var Index = exports.Index = function () {
		function Index() {
			_classCallCheck(this, Index);

			this.message = 'HELLO FROM PhxDataGrid/INDEX';
			console.log('PhxDataGrid INDEX LOADED!');
		}

		Index.prototype.configureRouter = function configureRouter(config, router) {
			config.title = 'Phoenix Data Grid';
			config.map([{ route: 'datagrid', name: 'datagrid', moduleId: 'PhxDataGrid/datagrid', nav: true, title: 'DataGrid' }]);
			this.router = router;
		};

		return Index;
	}();
});;
define('text!PhxDataGrid/index.html',[],function(){return "<template><div class=\"container-fluid\" style=\"padding:0\"><router-view></router-view></div></template>";});;
define('access',['exports', 'aurelia-framework', 'PhxDataGrid/datagridHelper', 'ptdaysheet/ptDatagridHelper'], function (exports, _aureliaFramework, _datagridHelper, _ptDatagridHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Access = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var Access = exports.Access = (_dec = (0, _aureliaFramework.inject)(_datagridHelper.DatagridHelper, _ptDatagridHelper.PtDatagridHelper), _dec(_class = function () {
    function Access(DatagridHelper, PtDatagridHelper) {
      _classCallCheck(this, Access);

      this.datagridHelper = DatagridHelper;
      this.ptdaysheetHelper = PtDatagridHelper;
    }

    Access.prototype.loadXrays = function loadXrays(patientId, date) {
      this.datagridHelper.getXrays(patientId, date);
    };

    Access.prototype.setXrayColumnVisibility = function setXrayColumnVisibility(colIndex, visible) {
      this.datagridHelper.setColumnVisibility(colIndex, visible);
    };

    Access.prototype.addXrayRows = function addXrayRows(data, refresh) {
      this.datagridHelper.addRows(data, refresh);
    };

    Access.prototype.clearXray = function clearXray() {
      this.datagridHelper.clear();
    };

    Access.prototype.removeXrayRowByIndex = function removeXrayRowByIndex(index) {
      this.datagridHelper.removeRowByIndex(index);
    };

    Access.prototype.updateXrayRowByIndexAndXray = function updateXrayRowByIndexAndXray(index, xray) {
      this.datagridHelper.updateRowByIndexAndXray(index, xray);
    };

    Access.prototype.loadPtDaysheetProviderPref = function loadPtDaysheetProviderPref(prefId) {
      this.ptdaysheetHelper.selectPreferenceByPrefId(prefId);
    };

    Access.prototype.updatePtDaysheetBodypart = function updatePtDaysheetBodypart(bodypart) {
      this.ptdaysheetHelper.bodyPart = bodypart;
    };

    Access.prototype.updatePtDaysheetPref = function updatePtDaysheetPref(description, postOpPrefId) {
      this.ptdaysheetHelper.updatePreference(description, postOpPrefId);
    };

    Access.prototype.saveNewPtDaysheetPref = function saveNewPtDaysheetPref(description, postOpPrefId, bodypart, providerId) {
      var self = this;
      self.ptdaysheetHelper.saveNewPreference(description, postOpPrefId, bodypart, providerId, function (pref) {
        self.ptdaysheetHelper.createPrefSaveObject(pref.ID, pref.PrefDescription, postOpPrefId, pref.Bodypart, false, function (prefObj) {
          var url = 'ptdaysheet/pref';
          self.ptdaysheetHelper.http.post(self.ptdaysheetHelper.helper.getApiUrl(url), prefObj, function (saveRes) {}, function (err) {
            var e = err;
          });
        });
      });
    };

    Access.prototype.savePtDaysheet = function savePtDaysheet() {
      return this.ptdaysheetHelper.saveDaysheet();
    };

    Access.prototype.testToggleTelemedSchedule = function testToggleTelemedSchedule() {
      alert("Toggle!");
    };

    return Access;
  }()) || _class);
});;
define('administration/admin',["exports", "aurelia-dependency-injection", "../helpers/helper", "../helpers/http", "../data/go/data"], function (exports, _aureliaDependencyInjection, _helper, _http, _data) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Admin = undefined;

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Page = function Page(name, path) {
    _classCallCheck(this, Page);

    this.name = name;
    this.path = path;
    this.selected = false;
  };

  var Admin = exports.Admin = (_dec = (0, _aureliaDependencyInjection.inject)(_helper.helper, _http.http, _data.Data), _dec(_class = function () {
    function Admin(helper, http, Data) {
      _classCallCheck(this, Admin);

      this.data = null;
      this.selectedPage = null;
      this.pages = [];
      this.home = null;

      this.helper = helper;
      this.http = http;
      this.goData = Data;
    }

    Admin.prototype.activate = function activate(model) {
      this.home = model;
    };

    Admin.prototype.close = function close() {
      this.goData.putWithUrlAndData('admin', this.data, function (res) {});
      this.home.adminVisible = false;
    };

    Admin.prototype.tabClicked = function tabClicked(tab) {
      this.selectedPage = tab;
      for (var i = 0; i < this.pages.length; i++) {
        var aPage = this.pages[i];
        if (aPage.name == tab.name) {
          aPage.selected = true;
        } else {
          aPage.selected = false;
        }
      }
    };

    Admin.prototype.attached = function attached() {
      var self = this;
      self.goData.getAdmin(function (res) {
        self.data = res;
      });

      var fileMaint = new Page('File Maintenance', './pages/fileMaintenance');
      fileMaint.selected = true;
      self.pages.push(fileMaint);
      self.selectedPage = self.pages[0];

      var picklist = new Page('List Management', './pages/listManagement');
      self.pages.push(picklist);

      var misc = new Page('Miscellaneous', './pages/misc');
      self.pages.push(misc);

      var db = new Page('Db Maint', './pages/dbMaintenance');
      self.pages.push(db);

      var users = new Page('Users', './pages/users');
      self.pages.push(users);

      var roles = new Page('Roles', './pages/roles');
      self.pages.push(roles);

      var groups = new Page('Groups', './pages/groups');
      self.pages.push(groups);

      var cpt = new Page('Cpt Maint', './pages/cptMaint');
      self.pages.push(cpt);

      var res = $(self.adm).closest('ux-dialog-container');
      var uxDx = res[0];
      if (uxDx) {
        uxDx.style.setProperty("z-index", "5000", "important");
      }
    };

    return Admin;
  }()) || _class);
});;
define('text!administration/admin.html',[],function(){return "<template><nav class=\"navbar navbar-expand-lg navbar-light bg-light\"><a class=\"navbar-brand\" href=\"#\"><i class=\"fa fa-cog mr-2\" aria-hidden=\"true\"></i>Settings</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span class=\"navbar-toggler-icon\"></span></button><div class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\"><div class=\"navbar-nav mr-auto\"><a repeat.for=\"p of pages\" class=\"nav-link ${p.selected ? 'active' : ''}\" href=\"#\" click.delegate=\"tabClicked(p)\">${p.name}</a></div><i class=\"fa fa-times mr-2 fa-2x\" aria-hidden=\"true\" click.delegate=\"close()\"></i></div></nav><div class=\"row px-2\"><div class=\"col-md-12\"><compose ref=\"adm\" view-model.bind=\"selectedPage.path\" model.bind=\"$this\" containerless></compose></div></div></template>";});;
define('administration/dialogs/editListItem',["exports", "aurelia-dependency-injection", "../../helpers/helper", "../../helpers/http", "../../data/go/data"], function (exports, _aureliaDependencyInjection, _helper, _http, _data) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.EditListItem = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var EditListItem = exports.EditListItem = (_dec = (0, _aureliaDependencyInjection.inject)(_helper.helper, _http.http, _data.Data), _dec(_class = function () {
    function EditListItem(helper, http, Data) {
      _classCallCheck(this, EditListItem);

      this.item = null;
      this.canSave = false;
      this.saveOrUpdate = "Save";
      this.displayBodyparts = false;
      this.displayDescription = true;
      this.dialog = null;
      this.additionalLists = [];
      this.description2ListItems = [];
      this.selectedDescription2 = null;
      this.disableDelete = false;

      this.helper = helper;
      this.http = http;
      this.goData = Data;
    }

    EditListItem.prototype.activate = function activate(item) {
      var self = this;
      self.bodyparts = self.goData.bodyparts;
      self.item = item.data;
      self.disableDelete = self.item.ListID == 0 ? true : false;
      self.dialog = item.dialog;
      self.description2ListItems = item.description2ListItems;

      var foundDesc2 = _.find(self.description2ListItems, function (r) {
        return r.description == self.item.Description2;
      });
      if (foundDesc2) {
        self.selectedDescription2 = foundDesc2;
      }

      self.additionalLists = item.additionalLists;
      self.displayBodyparts = item.displayBodypart;
      self.displayDescription = item.displayDescription;
      if (item.data.BodyPart) {
        self.selectedBodyPart = item.data.BodyPart;
      }
      self.saveOrUpdate = item.data.ListID == 0 ? "Save" : "Update";
    };

    EditListItem.prototype.attached = function attached() {
      var self = this;
      var res = $(self.newuser).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");
    };

    EditListItem.prototype.update = function update() {
      var self = this;
      self.item.BodyPart = self.selectedBodyPart;
      if (self.selectedDescription2) {
        if (self.item.Description2 != self.selectedDescription2.description) {
          self.item.remove = true;
        }
        self.item.Description2 = self.selectedDescription2.description;
      }

      self.dialog.close(true, self.item);
    };

    EditListItem.prototype.listItemClicked = function listItemClicked(item) {
      this.item.Description1 = item;
    };

    EditListItem.prototype.delete = function _delete() {
      var self = this;
      self.item.delete = true;
      self.dialog.close(true, self.item);
    };

    return EditListItem;
  }()) || _class);
});;
define('text!administration/dialogs/editListItem.html',[],function(){return "<template><style>.input-button{display:inline-block;border:none;padding-left:2px;padding-right:2px;color:#495057;left:8px;position:relative;height:36px}input:focus{outline:0}.btn:focus{box-shadow:none}.form-control:focus{box-shadow:none}</style><div ref=\"newuser\" class=\"card\"><div class=\"card-body\"><form><div class=\"form-row\"><div if.bind=\"!additionalLists\" class=\"form-group col-md-6\"><label>List Item</label> <input type=\"text\" class=\"form-control\" value.bind=\"item.Description1\"></div><div if.bind=\"additionalLists\" class=\"form-group col-md-6\"><template repeat.for=\"list of additionalLists\"><label>List Item</label><div class=\"btn-group d-flex\" style=\"border:1px solid #cedfda;border-radius:.25rem\" role=\"group\"><input type=\"text\" class=\"form-control input-button\" value.bind=\"item.Description1\"> <button type=\"button\" class=\"btn dropdown-toggle ml-auto\" data-toggle=\"dropdown\" style=\"border:none\" aria-expanded=\"false\"></button><div class=\"dropdown-menu dropdown-menu-right\" style=\"width:100%\"><a repeat.for=\"i of list.items\" style=\"font-family:arial\" class=\"dropdown-item\" href=\"#\" click.delegate=\"listItemClicked(i)\">${i}</a></div></div></template></div><div if.bind=\"displayDescription\" class=\"form-group col-md-6\"><label>Description</label> <select value.bind=\"selectedDescription2\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"b of description2ListItems\" model.bind=\"b\">${b.description}</option></select></div><div if.bind=\"displayBodyparts\" class=\"form-group col-md-6\"><label>Bodypart</label> <select value.bind=\"selectedBodyPart\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"b of bodyparts\" model.bind=\"b\">${b}</option></select></div></div></form></div><div class=\"card-footer\"><button type=\"button\" class=\"btn btn-primary float-right\" click.delegate=\"update()\">${saveOrUpdate}</button> <button type=\"button\" class=\"btn btn-danger float-right mr-2\" disabled.bind=\"disableDelete\" click.delegate=\"delete()\">Delete</button></div></div></template>";});;
define('administration/dialogs/newCptCode',["exports", "aurelia-dependency-injection", "aurelia-framework", "../../helpers/helper", "../../helpers/http", "../../data/go/data", "aurelia-dialog"], function (exports, _aureliaDependencyInjection, _aureliaFramework, _helper, _http, _data, _aureliaDialog) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NewCptCode = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var NewCptCode = exports.NewCptCode = (_dec = (0, _aureliaDependencyInjection.inject)(_helper.helper, _http.http, _data.Data, _aureliaDialog.DialogController), _dec(_class = function () {
    function NewCptCode(helper, http, Data, DialogController) {
      _classCallCheck(this, NewCptCode);

      this.buttonText = "";
      this.code = null;
      this.types = ["Arthroplasty", "Bone Scan", "CT", "CVX", "DME", "Fracture Care", "Injection", "JCODE", "MRI", "OPS", "OPX", "OT", "PT", "Surgery", "Visit", "X-RAY"];
      this.bodyparts = [];
      this.canSave = false;

      this.helper = helper;
      this.http = http;
      this.goData = Data;
      this.dialogController = DialogController;
    }

    NewCptCode.prototype.activate = function activate(obj) {
      this.code = obj;
      this.buttonText = obj.ProcedureID == 0 ? 'ADD' : 'UPDATE';

      var self = this;
      self.checkTimer = setInterval(self.checkRequirementsTick.bind(self), 1000);

      var url = 'listcombo/bodyparts';
      self.http.get(self.helper.getApiUrl(url), function (json) {
        self.bodyparts = json;

        var joint = {
          ListID: 0,
          ListType: "Bodypart",
          Description1: "Joint"
        };
        self.bodyparts.push(joint);
      });
    };

    NewCptCode.prototype.detached = function detached() {
      clearInterval(this.checkTimer);
    };

    NewCptCode.prototype.add = function add() {
      var self = this;
      if (self.checkRequirements()) {
        self.code.Body_Part = self.code.Body_Part.Description1;

        self.dialogController.close(true, self.code);
      }
    };

    NewCptCode.prototype.checkRequirementsTick = function checkRequirementsTick() {
      var self = this;
      self.canSave = self.checkRequirements();
    };

    NewCptCode.prototype.checkRequirements = function checkRequirements() {
      var self = this;

      if (self.code.CptKey && self.code.Description && self.code.Type && self.code.Body_Part && self.code.Billable && self.code.Units != null) {

        return true;
      } else {
        return false;
      }
    };

    return NewCptCode;
  }()) || _class);
});;
define('text!administration/dialogs/newCptCode.html',[],function(){return "<template><div ref=\"newuser\" class=\"card\"><div class=\"card-body\"><form><div class=\"form-row\"><div class=\"form-group col-md-3\"><label>Code</label> <input type=\"text\" class=\"form-control ${code.CptKey.length==0 || code.CptKey == null ? 'is-invalid' : ''}\" value.bind=\"code.CptKey\" aria-describedby=\"codeError\" placeholder=\"cpt code\"><div id=\"codeError\" class=\"invalid-feedback\">Cpt Code is required</div></div><div class=\"form-group col-md-9\"><label>Description</label> <input type=\"text\" class=\"form-control ${code.Description.length==0 || code.Description == null ? 'is-invalid' : ''}\" value.bind=\"code.Description\" aria-describedby=\"descError\" placeholder=\"cpt description\"><div id=\"descError\" class=\"invalid-feedback\">Cpt Description is required</div></div></div><div class=\"form-row\"><div class=\"form-group col-md-4\"><label>Type</label> <select class=\"form-control ${code.Type==null ? 'is-invalid' : ''}\" value.bind=\"code.Type\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"r of types\" model.bind=\"r\">${r}</option></select><div class=\"invalid-feedback\">Code type is required</div></div><div class=\"form-group col-md-4\"><label>Part</label> <select class=\"form-control ${code.Body_Part==null ? 'is-invalid' : ''}\" value.bind=\"code.Body_Part\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"r of bodyparts\" model.bind=\"r.Description1\">${r.Description1}</option></select><div class=\"invalid-feedback\">Body Part is required</div></div><div class=\"form-group col-md-2\"><label>Billable</label> <select class=\"form-control ${code.Billable==null ? 'is-invalid' : ''}\" value.bind=\"code.Billable\"><option model.bind=\"Yes\">Yes</option><option model.bind=\"No\">No</option></select><div class=\"invalid-feedback\">Billable is required</div></div></div><div class=\"form-row\"><div class=\"form-group col-md-6\"><label>Global</label> <input type=\"text\" class=\"form-control\" value.bind=\"code.Global\" aria-describedby=\"globalErr\" placeholder=\"global\"></div><div class=\"form-group col-md-6\"><label>Units</label> <input type=\"text\" class=\"form-control ${code.Units.length==0 || code.Units == null ? 'is-invalid' : ''}\" value.bind=\"code.Units\" aria-describedby=\"unitsErr\" placeholder=\"units\"><div id=\"unitsErr\" class=\"invalid-feedback\">Units is required</div></div></div></form></div><div class=\"card-footer\"><button type=\"button\" class=\"btn btn-primary float-right\" disabled.bind=\"!canSave\" click.delegate=\"add()\">${buttonText}</button></div></div></template>";});;
define('administration/dialogs/newUser',["exports", "aurelia-dependency-injection", "aurelia-framework", "../../helpers/helper", "../../helpers/http", "../../data/go/data", "aurelia-dialog"], function (exports, _aureliaDependencyInjection, _aureliaFramework, _helper, _http, _data, _aureliaDialog) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NewUser = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2;

  var NewUser = exports.NewUser = (_dec = (0, _aureliaDependencyInjection.inject)(_helper.helper, _http.http, _data.Data, _aureliaDialog.DialogController), _dec(_class = (_class2 = function () {
    function NewUser(helper, http, Data, DialogController) {
      _classCallCheck(this, NewUser);

      this.user = null;
      this.roleTypes = ['Administrator', 'Business Office', 'Front Desk', 'Medical Assistant', 'Medical Records', 'Provider', 'Secretaries', 'Surgical Scheduling', 'Transcription', 'Xray Admin'];
      this.selectedRole = null;
      this.licenseTypes = ['PRO', 'MID', 'NOREV'];
      this.availableLicense = null;
      this.locations = [];

      _initDefineProp(this, "typePassword", _descriptor, this);

      _initDefineProp(this, "retypePassword", _descriptor2, this);

      this.invalidPassword = true;
      this.invalidRetypePassord = true;
      this.buttonText = "";
      this.canSave = false;
      this.canCreateLicense = false;
      this.passwordMustContainTxt = "Password must contain at least 8 characters, 1 uppercase letter, 1 lowercase letter, and 1 number.";
      this.passwordsDontMatchTxt = "Passwords must match.";
      this.passwordErrorTxt = "";
      this.retypePasswordErrorTxt = "";
      this.userStatusList = ["Enabled"];
      this.newUserCreated = false;
      this.tabUserSelected = true;
      this.tabToolbarSelected = false;
      this.tabMiscSelected = false;
      this.hideKeyPicker = true;

      this.helper = helper;
      this.http = http;
      this.goData = Data;
      this.dialogController = DialogController;
    }

    NewUser.prototype.tabClicked = function tabClicked(tab) {
      if (tab == 'user') {
        this.tabUserSelected = true;
        this.tabToolbarSelected = false;
        this.tabMiscSelected = false;
      } else if (tab == "misc") {
        this.tabMiscSelected = true;
        this.tabUserSelected = false;
        this.tabToolbarSelected = false;
      } else {
        this.tabUserSelected = false;
        this.tabToolbarSelected = true;
        this.tabMiscSelected = false;
      }
    };

    NewUser.prototype.getRoles = function getRoles() {
      var self = this;
      self.goData.getWithUrl('roles', function (res) {
        self.roleTypes = res;

        var foundRole = _.find(self.roleTypes, function (r) {
          return r.RoleID == self.user.roleID;
        });
        if (foundRole) {
          self.selectedRole = foundRole;
        }
      });
    };

    NewUser.prototype.typePasswordChanged = function typePasswordChanged(newVal, oldVal) {
      this / this.checkPassword(newVal);
    };

    NewUser.prototype.checkPassword = function checkPassword(password) {
      var valid = this.validate(password);
      if (valid && this.typePassword == this.retypePassword) {
        this.invalidPassword = false;
      } else if (valid && this.typePassword != this.retypePassword) {
        this.invalidPassword = true;
        this.passwordErrorTxt = this.passwordsDontMatchTxt;
      } else {
        this.invalidPassword = true;
        this.passwordErrorTxt = this.passwordMustContainTxt;
      }
    };

    NewUser.prototype.retypePasswordChanged = function retypePasswordChanged(newVal, oldVal) {
      this.checkRetypePassword(newVal);
    };

    NewUser.prototype.checkRetypePassword = function checkRetypePassword(password) {
      var valid = this.validate(password);
      if (valid && this.typePassword == this.retypePassword) {
        this.invalidRetypePassord = false;
      } else if (valid && this.typePassword != this.retypePassword) {
        this.invalidRetypePassord = true;
        this.retypePasswordErrorTxt = this.passwordsDontMatchTxt;
      } else {
        this.invalidRetypePassord = true;
        this.retypePasswordErrorTxt = this.passwordMustContainTxt;
      }
    };

    NewUser.prototype.activate = function activate(model) {
      var self = this;
      self.user = model.user;

      if (self.user.hasOwnProperty('Json') && self.user.Json != null && self.user.Json.toLowerCase() === 'null') {
        self.user.Json = null;
      }

      if (self.user.LicenseType == 'NOREV') {
        self.hideKeyPicker = false;
      }

      self.licenseTypes = model.licenses;

      self.getRoles();

      self.checkTimer = setInterval(self.checkRequirementsTick.bind(self), 1000);

      self.buttonText = self.user.UserID == 0 ? 'ADD' : 'UPDATE';

      if (self.user.password && self.user.password.length > 0) {
        self.typePassword = self.user.password;
        self.retypePassword = self.user.password;
      }

      if (self.user.UserID != 0) {
        self.userStatusList.push("Disabled");
      }

      self.userStatus = self.user.AccountEnabled ? 'Enabled' : 'Disabled';

      if (!self.user.License) {
        self.goData.getWithUrl("license/available?licenseType=" + self.user.LicenseType, function (lic) {
          if (lic) {
            self.availableLicense = lic;
          }
        });
      }
    };

    NewUser.prototype.attached = function attached() {
      var self = this;
      var res = $(self.newuser).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");

      self.goData.getWithUrl('locations', function (locRes) {
        self.locations = locRes;
      });
    };

    NewUser.prototype.detached = function detached() {
      clearInterval(this.checkTimer);
    };

    NewUser.prototype.checkRequirementsTick = function checkRequirementsTick() {
      var self = this;
      self.canSave = self.checkRequirements();
    };

    NewUser.prototype.checkRequirements = function checkRequirements() {
      var self = this;

      self.checkPassword(self.typePassword);
      self.checkRetypePassword(self.retypePassword);

      if (self.typePassword == "" || self.retypePassword == "" || self.typePassword != self.retypePassword) {
        return false;
      }

      if (self.user.UserName && self.user.LicenseType && self.user.FirstName && self.user.LastName && self.user.email && self.selectedRole) {

        self.canCreateLicense = true;

        if (self.user.License || self.user.LicenseType == 'NOREV') {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };

    NewUser.prototype.add = function add() {
      var self = this;
      if (self.checkRequirements()) {
        if (self.user.password != self.typePassword) {
          self.user.updatePassword = true;
        }

        self.user.password = self.typePassword;

        self.user.role = self.selectedRole.RoleName;
        self.user.roleID = self.selectedRole.RoleID;

        if (self.newUserCreated) {
          self.dialogController.close(false, self.user);
        } else {
          self.dialogController.close(true, self.user);
        }
      }
    };

    NewUser.prototype.validate = function validate(value) {
      var regEx = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/gm;
      var validated = regEx.test(value);
      return validated;
    };

    NewUser.prototype.addKey = function addKey() {
      var self = this;
      if (!self.availableLicense) {

        self.goData.getWithUrl('license', function (newLicense) {
          newLicense.LicenseType = self.user.LicenseType;
          var userLicense = self.getUserLicenseObject(newLicense);

          self.goData.postWithUrlAndData('users/license', JSON.stringify(userLicense), function (res) {

            if (res) {
              self.availableLicense = null;
              self.user.License = res.License;

              if (self.user.UserID != res.UserID) {
                self.newUserCreated = true;
                self.user.UserID = res.UserID;
              }
            }
          });
        });
      }
    };

    NewUser.prototype.claimKey = function claimKey() {
      var self = this;
      if (self.availableLicense) {

        var userLicense = self.getUserLicenseObject(self.availableLicense);

        self.goData.putWithUrlAndData('users/license/claim', userLicense, function (res) {

          if (res) {
            self.availableLicense = null;
            self.user.License = res.License;
          }
        });
      }
    };

    NewUser.prototype.getUserLicenseObject = function getUserLicenseObject(ODGO_License) {
      var self = this;
      var userLicense = {
        'License': ODGO_License,
        'UserID': self.user.UserID,
        'UserName': self.user.UserName,
        'Password': self.retypePassword,
        'LicenseType': self.user.LicenseType,
        'FirstName': self.user.FirstName,
        'LastName': self.user.LastName,
        'AccountEnabled': self.user.AccountEnabled,
        'Role': self.selectedRole.RoleName,
        'RoleId': self.selectedRole.RoleID,
        'Location': self.user.Location
      };
      return userLicense;
    };

    return NewUser;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "typePassword", [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return "";
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "retypePassword", [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return "";
    }
  })), _class2)) || _class);
});;
define('text!administration/dialogs/newUser.html',[],function(){return "<template><div ref=\"newuser\" class=\"card\"><div class=\"card-header\"><ul class=\"nav nav-tabs card-header-tabs\"><li class=\"nav-item\"><a class=\"nav-link ${tabUserSelected ? 'active' : ''}\" href=\"#\" click.delegate=\"tabClicked('user')\">User</a></li><li class=\"nav-item\"><a class=\"nav-link ${tabMiscSelected ? 'active' : ''}\" href=\"#\" click.delegate=\"tabClicked('misc')\">Misc</a></li><li class=\"nav-item\"><a class=\"nav-link ${tabToolbarSelected ? 'active' : ''}\" href=\"#\" click.delegate=\"tabClicked('toolbar')\">Toolbar</a></li></ul></div><div class=\"card-body\"><div if.bind=\"tabToolbarSelected\"><compose view-model=\"../pages/toolbar\" model.bind=\"user\" containerless></compose></div><div if.bind=\"tabMiscSelected\"><compose view-model=\"../pages/userMisc\" model.bind=\"user\" containerless></compose></div><form if.bind=\"tabUserSelected\"><div class=\"form-row\"><div class=\"form-group col-md-6\"><label>Username</label> <input type=\"email\" class=\"form-control ${user.UserName.length==0 || user.UserName == null ? 'is-invalid' : ''}\" value.bind=\"user.UserName\" aria-describedby=\"usernameError\" placeholder=\"some@email.com\"><div id=\"usernameError\" class=\"invalid-feedback\">Username is required and must be a valid email address</div></div><div class=\"form-group col-md-6\"><label>Role</label> <select value.bind=\"selectedRole\" class=\"form-control ${selectedRole==null ? 'is-invalid' : ''}\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"r of roleTypes\" model.bind=\"r\">${r.RoleName}</option></select><div class=\"invalid-feedback\">Role is required</div></div></div><div class=\"form-row\"><div class=\"form-group col-md-6\"><label>Email</label> <input type=\"email\" class=\"form-control ${user.email.length==0 || user.email == null ? 'is-invalid' : ''}\" value.bind=\"user.email\" aria-describedby=\"emailError\"><div id=\"emailError\" class=\"invalid-feedback\">Email required</div></div></div><div class=\"form-row\"><div class=\"form-group col-md-6\"><label>First Name</label> <input type=\"text\" class=\"form-control ${user.FirstName.length==0 || user.FirstName == null ? 'is-invalid' : ''}\" value.bind=\"user.FirstName\" aria-describedby=\"firstNameError\"><div id=\"firstNameError\" class=\"invalid-feedback\">First name required</div></div><div class=\"form-group col-md-6\"><label>Last Name</label> <input type=\"text\" class=\"form-control ${user.LastName.length==0 || user.LastName == null ? 'is-invalid' : ''}\" value.bind=\"user.LastName\" aria-describedby=\"lastNameError\"><div id=\"lastNameError\" class=\"invalid-feedback\">Last name required</div></div></div><div class=\"form-row\"><div class=\"form-group col-md-6\"><label>Location</label> <select class=\"form-control\" value.bind=\"user.Location\"><option selected=\"selected\">Choose...</option><option repeat.for=\"l of locations\">${l.LocationName}</option></select></div><div class=\"form-group col-md-6\"><label>Status</label> <select value.bind=\"userStatus\" class=\"form-control\"><option repeat.for=\"s of userStatusList\">${s}</option></select></div></div><div class=\"form-row\"><div class=\"form-group col-md-6\"><label>User Password</label> <input type=\"password\" class=\"form-control ${invalidPassword ? 'is-invalid' : ''}\" value.bind=\"typePassword\" aria-describedby=\"passwordError\"><div id=\"passwordError\" class=\"invalid-feedback\"> ${passwordErrorTxt} </div></div><div class=\"form-group col-md-6\"><label>Retype Password</label> <input type=\"password\" class=\"form-control ${invalidRetypePassord ? 'is-invalid' : ''}\" value.bind=\"retypePassword\" aria-describedby=\"passwordRetypeError\"><div id=\"passwordRetypeError\" class=\"invalid-feedback\"> ${retypePasswordErrorTxt} </div></div></div><div class=\"form-row\"><div class=\"form-group col-md-6\"><label>License</label> <select class=\"form-control ${user.LicenseType==null ? 'is-invalid' : ''}\" value.bind=\"user.LicenseType\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"r of licenseTypes\" model.bind=\"r\">${r}</option></select><div class=\"invalid-feedback\">License type is required</div></div><div class=\"form-group col-md-6\" if.bind=\"hideKeyPicker\"><label>License Key <i class=\"fa fa-key text-secondary\" aria-hidden=\"true\"></i></label><div if.bind=\"availableLicense && !user.License\" class=\"input-group mb-3\"><input type=\"text\" class=\"form-control\" value.bind=\"user.License\" readonly=\"readonly\" placeholder=\"License Key...\" aria-label=\"license key\" aria-describedby=\"button-addon2\"><div class=\"input-group-append\"><button class=\"btn btn-success\" type=\"button\" id=\"button-addon2\" click.delegate=\"claimKey()\">Claim</button></div></div><div if.bind=\"!availableLicense && !user.License\" class=\"input-group mb-3\"><input type=\"text\" class=\"form-control ${user.License==null ? 'is-invalid' : ''}\" value.bind=\"user.License\" readonly=\"readonly\" placeholder=\"License Key Required...\" aria-label=\"license key\" aria-describedby=\"button-add\"><div class=\"input-group-append\"><button class=\"btn btn-primary\" disabled.bind=\"!canCreateLicense\" type=\"button\" id=\"button-add\" click.delegate=\"addKey()\">Add</button></div></div><input if.bind=\"user.License\" readonly=\"readonly\" type=\"text\" class=\"form-control is-valid\" value.bind=\"user.License\"></div></div></form></div><div class=\"card-footer\"><button type=\"button\" class=\"btn btn-primary float-right\" disabled.bind=\"!canSave\" click.delegate=\"add()\">${buttonText}</button></div></div></template>";});;
define('administration/index',['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var Index = exports.Index = function () {
        function Index() {
            _classCallCheck(this, Index);

            this.message = 'ITS ADMINISTRATION TIME!';
        }

        Index.prototype.configureRouter = function configureRouter(config, router) {
            config.title = 'Administration';
            config.map([{ route: 'procedure-mapper', name: 'procedure-mapper', moduleId: 'administration/procedure-mapper', nav: true, title: 'Procedure Mapper' }]);
            this.router = router;
        };

        return Index;
    }();
});;
define('text!administration/index.html',[],function(){return "<template><div class=\"container-fluid\" style=\"padding:0\"><router-view></router-view></div></template>";});;
define('administration/pages/cptMaint',["exports", "aurelia-dependency-injection", "aurelia-framework", "../../helpers/helper", "../../helpers/http", "../../data/go/data", "../../go/popupHelper", "lodash"], function (exports, _aureliaDependencyInjection, _aureliaFramework, _helper, _http, _data, _popupHelper, _lodash) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CptMaint = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor;

  var CptMaint = exports.CptMaint = (_dec = (0, _aureliaDependencyInjection.inject)(_helper.helper, _http.http, _data.Data, _popupHelper.PopupHelper), _dec(_class = (_class2 = function () {
    CptMaint.prototype.filterChanged = function filterChanged(newVal, oldVal) {
      this.filterCodes(newVal);
    };

    function CptMaint(helper, http, Data, PopupHelper) {
      _classCallCheck(this, CptMaint);

      this.codes = [];
      this.filteredCodes = [];
      this.selectedCode = null;
      this.displaySpinner = false;

      _initDefineProp(this, "filter", _descriptor, this);

      this.helper = helper;
      this.http = http;
      this.goData = Data;
      this.popupHelper = PopupHelper;
    }

    CptMaint.prototype.activate = function activate() {
      this.setup();
    };

    CptMaint.prototype.filterCodes = function filterCodes(value) {
      var num = parseInt(value);
      if (!isNaN(num)) {
        this.filteredCodes = _.filter(this.codes, function (u) {
          return u.CptKey.toLowerCase().startsWith(value.toLowerCase());
        });
      } else {
        if (value.length >= 2) {
          var val = value.substring(1);
          var num = parseInt(val);
          if (isNaN(num)) {
            this.filteredCodes = _.filter(this.codes, function (u) {
              return u.Description.toLowerCase().startsWith(value.toLowerCase());
            });
          } else {
            this.filteredCodes = _.filter(this.codes, function (u) {
              return u.CptKey.toLowerCase().startsWith(value.toLowerCase());
            });
          }
        } else {
          this.filteredCodes = _.filter(this.codes, function (u) {
            return u.Description.toLowerCase().startsWith(value.toLowerCase());
          });
        }
      }
    };

    CptMaint.prototype.setup = function setup() {
      var self = this;

      self.displaySpinner = true;

      var windowHeight = window.innerHeight;
      self.height = windowHeight - 157;

      self.goData.getAllProcedures(function (res) {
        self.codes = res;
        self.filteredCodes = res;

        self.displaySpinner = false;
      });
    };

    CptMaint.prototype.edit = function edit(user) {
      this._openCodePop(user);
    };

    CptMaint.prototype.add = function add() {
      var self = this;
      self._openCodePop(this.createNewCode());
    };

    CptMaint.prototype.delete = function _delete(code) {
      var self = this;

      var msg = "Do you wish to delete " + code.Description + "?";
      self.popupHelper.openGenericMessagePop(msg, 'Delete Image', ['YES', 'NO'], false, function (res) {
        var r = res.result;
        if (r == 'YES') {

          var saveDescription = "Deleting " + code.Description + "...";
          var saveDialog = self.helper.createNoty(saveDescription, 3000);
          saveDialog.show();

          var url = "procedures/" + code.ProcedureID;
          self.data.deleteWithUrl(url, function (res) {

            saveDialog.close();

            if (!res) {} else {
              var deleteIndex = _.indexOf(self.codes, function (c) {
                return c.ProcedureID == code.ProcedureID;
              });

              if (deleteIndex != -1) {
                codes.splice(deleteIndex, 1);
              }
            }
          });
        }
      });
    };

    CptMaint.prototype.createNewCode = function createNewCode() {

      return {
        CptKey: "",
        Description: "",
        Body_Part: "",
        Type: "",
        Cpt_Code: "",
        Billable: "No",
        Global: "",
        Units: 0,
        ProcedureID: 0
      };
    };

    CptMaint.prototype._openCodePop = function _openCodePop(code) {
      var self = this;

      var viewPath = '../administration/dialogs/newCptCode';
      var windowHeight = window.innerHeight - 100;
      var windowWidth = window.innerWidth;

      var width = windowWidth / 3 * 2;
      var left = windowWidth / 5;

      var options = {
        closeActiveDialog: false
      };

      var title = code.ProcedureID == 0 ? 'New Code' : 'Update Code';

      self.popupHelper.openViewModelPop(viewPath, code, title, width, windowHeight, 50, left, options, function (code, res) {
        if (code.hasOwnProperty("cancelled")) {
          return;
        } else {
          self.save(code);
        }
      });
    };

    CptMaint.prototype.save = function save(code) {

      var self = this;
      var url = "procedures";

      delete code.overlay;
      delete code.dialog;

      var saveDialog = self.helper.createNoty("Saving CPT...", 3000);
      saveDialog.show();

      if (code.ProcedureID == 0) {
        self.goData.postWithUrlAndData(url, JSON.stringify(code), function (res) {

          saveDialog.close();

          self.codes.push(res);
        });
      } else {
        self.goData.putWithUrlAndData(url, code, function (res) {

          saveDialog.close();
        });
      }
    };

    return CptMaint;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "filter", [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!administration/pages/cptMaint.html',[],function(){return "<template><style>.spinner-div{position:absolute;top:0;left:0;bottom:0;right:0;z-index:1000}.spinner-icon{margin-left:50%;margin-top:200px}</style><div class=\"spinner-div\" if.bind=\"displaySpinner\"><i class=\"fa fa-spinner fa-pulse fa-3x fa-fw spinner-icon\"></i></div><div class=\"card\"><div class=\"card-header d-flex align-items-center\"><h4 class=\"d-inline-block m-0 pt-1\">Cpt Maint</h4><i class=\"fa fa-filter text-secondary ml-auto mr-1\" aria-hidden=\"true\"></i> <input type=\"text\" style=\"width:350px\" placeholder=\"Search Code or Description\" class=\"form-control mr-2\" value.bind=\"filter\"> <i class=\"fa fa-plus text-primary fa-2x\" aria-hidden=\"true\" click.delegate=\"add()\"></i></div><div class=\"card-body p-0\" style=\"overflow-y:auto\" css=\"height:${height}px;\"><table class=\"table table-striped table-sm\"><thead><tr><th scope=\"col\"></th><th scope=\"col\">Code</th><th scope=\"col\">MFG Code</th><th scope=\"col\">Description</th><th scope=\"col\">Type</th><th scope=\"col\">Part</th><th scope=\"col\">Billable</th><th scope=\"col\">Global</th><th scope=\"col\">Units</th><th scope=\"col\"></th></tr></thead><tbody><tr repeat.for=\"u of filteredCodes\"><th scope=\"row\"><button type=\"button\" class=\"btn btn-primary\" click.delegate=\"edit(u)\">Edit</button></th><td style=\"vertical-align:middle\">${u.CptKey}</td><td style=\"vertical-align:middle\">${u.Cpt_Code}</td><td style=\"vertical-align:middle\">${u.Description}</td><td style=\"vertical-align:middle\">${u.Type}</td><td style=\"vertical-align:middle\">${u.Body_Part}</td><td style=\"vertical-align:middle\">${u.Billable}</td><td style=\"vertical-align:middle\">${u.Global}</td><td style=\"vertical-align:middle\">${u.Units}</td><th scope=\"row\"><button type=\"button\" class=\"btn btn-danger\" click.delegate=\"delete(u)\"><i class=\"fa fa-trash\" aria-hidden=\"true\"></i></button></th></tr></tbody></table></div></div></template>";});;
define('administration/pages/dbMaintenance',["exports", "../../helpers/helper", "../../helpers/http", "aurelia-framework", "../../data/go/data", "moment", "../../go/popupHelper"], function (exports, _helper, _http, _aureliaFramework, _data, _moment, _popupHelper) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DbMaintenance = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

  var DbMaintenance = exports.DbMaintenance = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _popupHelper.PopupHelper), _dec(_class = (_class2 = function () {
    function DbMaintenance(helper, http, Data, PopupHelper) {
      _classCallCheck(this, DbMaintenance);

      _initDefineProp(this, "deletePatientDatepicker", _descriptor, this);

      this.deletePatientVisitDate = (0, _moment2.default)().format('MM/DD/YYYY');

      _initDefineProp(this, "changeVisitOriginalDatepicker", _descriptor2, this);

      _initDefineProp(this, "changeVisitNewDatepicker", _descriptor3, this);

      this.changeVisitDateOriginal = (0, _moment2.default)().format('MM/DD/YYYY');
      this.changeVisitDateNew = (0, _moment2.default)().format('MM/DD/YYYY');

      _initDefineProp(this, "changePatientDatepicker", _descriptor4, this);

      this.changePatientDate = (0, _moment2.default)().format('MM/DD/YYYY');

      this.helper = helper;
      this.http = http;
      this.goData = Data;
      this.popupHelper = PopupHelper;
    }

    DbMaintenance.prototype.activate = function activate(obj) {
      var self = this;
    };

    DbMaintenance.prototype.openCalendar = function openCalendar() {
      this.mydatepicker.methods.toggle();
    };

    DbMaintenance.prototype.deletePatientVisit = function deletePatientVisit(callback) {
      var self = this;
      var url = "helpers/deletepatientvisit?patientId=" + self.deletePatientVisitPatientId + "&date=" + self.deletePatientVisitDate;
      self.goData.deleteWithUrl(url, function (res) {
        callback(res);
      });
    };

    DbMaintenance.prototype.changeVisitDate = function changeVisitDate(callback) {
      var self = this;
      var url = "helpers/changeVisitDate?originalDate=" + self.changeVisitDateOriginal + "&newDate=" + self.changeVisitDateNew + "&patientId=" + self.changeVisitDatePatientId;
      self.goData.getWithUrl(url, function (res) {
        callback(res);
      });
    };

    DbMaintenance.prototype.changeVisitPatient = function changeVisitPatient(callback) {
      var self = this;
      var url = "helpers/changeVisitPatient?originalPatientId=" + self.changePatientOriginalPatientId + "&newPatientId=" + self.changePatientNewPatientId + "&visitdate=" + self.changePatientDate;
      self.goData.getWithUrl(url, function (res) {
        callback(res);
      });
    };

    DbMaintenance.prototype.submit = function submit(messageType) {
      var self = this;
      var message = "This database change is permanent. Do you wish to proceed?";
      var header = 'WARNING!';
      var options = ['YES', 'NO'];
      self.popupHelper.openGenericMessagePop(message, header, options, true, function (res) {
        if (res.result == 'YES') {

          var noty = self.helper.createNoty("Updating Database...", 3000);
          noty.show();

          if (messageType == 'changeVisitPatient') {
            self.changeVisitPatient(function (res) {

              if (res == true) {
                noty.notySuccess(noty, 'Change Visit Patient Success!');
              } else {
                noty.notyError(noty, 'Change Visit Patient Failed!');
              }
              noty.close();
            });
          } else if (messageType == 'changeVisitDate') {
            self.changeVisitDate(function (res) {
              if (res == true) {
                noty.notySuccess(noty, 'Change Visit Date Success!');
              } else {
                noty.notyError(noty, 'Change Visit Date Failed!');
              }
              noty.close();
            });
          } else {
            self.deletePatientVisit(function (res) {
              if (res == true) {
                noty.notySuccess(noty, 'Delete Patient Visit Success!');
              } else {
                noty.notyError(noty, 'Delete Patient Visit Failed!');
              }
              noty.close();
            });
          }
        }
      });
    };

    return DbMaintenance;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "deletePatientDatepicker", [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "changeVisitOriginalDatepicker", [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "changeVisitNewDatepicker", [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "changePatientDatepicker", [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!administration/pages/dbMaintenance.html',[],function(){return "<template><div class=\"row\"><div class=\"col-md-12\"><div class=\"card\" css=\"height: ${height}px;\"><div class=\"card-header\"><h4 class=\"d-inline-block m-0 pt-1\">DB Maintenance</h4></div><div class=\"card-body\" style=\"overflow-y:auto\"><h5>Delete Patient Visit</h5><div class=\"d-flex\"><div class=\"pr-2 pt-2\">PatientID</div><div class=\"pr-2\"><input type=\"text\" class=\"form-control\" value.bind=\"deletePatientVisitPatientId\"></div><div class=\"pr-2 pt-2\">Date</div><abp-datetime-picker class=\"pr-2\" style=\"width:120px\" icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"deletePatientDatepicker\" value.bind=\"deletePatientVisitDate\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker><div class=\"pr-2\"><button type=\"button\" class=\"btn btn-danger\" click.delegate=\"submit('deletePatientVisit')\">SUBMIT</button></div></div><small class=\"form-text text-muted\">Deletes all records associated with patient and date.</small><br><h5>Change Visit Date</h5><div class=\"d-flex\"><div class=\"pr-2 pt-2\">PatientID</div><div class=\"pr-2\"><input type=\"text\" class=\"form-control\" value.bind=\"changeVisitDatePatientId\"></div><div class=\"pr-2 pt-2\">Original Date</div><abp-datetime-picker class=\"pr-2\" style=\"width:120px\" icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"changeVisitOriginalDatepicker\" value.bind=\"changeVisitDateOriginal\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker><div class=\"pr-2 pt-2\">New Date</div><abp-datetime-picker class=\"pr-2\" style=\"width:120px\" icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"changeVisitNewDatepicker\" value.bind=\"changeVisitDateNew\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker><div class=\"pr-2\"><button type=\"button\" class=\"btn btn-danger\" click.delegate=\"submit('changeVisitDate')\">SUBMIT</button></div></div><small class=\"form-text text-muted\">Changes all dates associated with records for patient and date.</small><br><h5>Change Patient of Specific Visit</h5><div class=\"d-flex\"><div class=\"pr-2 pt-2\">Original PatientID</div><div class=\"pr-2\"><input type=\"text\" class=\"form-control\" value.bind=\"changePatientOriginalPatientId\"></div><div class=\"pr-2 pt-2\">New PatientID</div><div class=\"pr-2\"><input type=\"text\" class=\"form-control\" value.bind=\"changePatientNewPatientId\"></div><div class=\"pr-2 pt-2\">Date</div><abp-datetime-picker class=\"pr-2\" style=\"width:120px\" icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"changePatientDatepicker\" value.bind=\"changePatientDate\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker><div class=\"pr-2\"><button type=\"button\" class=\"btn btn-danger\" click.delegate=\"submit('changeVisitPatient')\">SUBMIT</button></div></div><small class=\"form-text text-muted\">Changes patient id associated with records for original patient and date.</small><br></div></div></div></div></template>";});;
define('administration/pages/fileMaintenance',["exports", "aurelia-framework", "../../helpers/helper", "../../helpers/http", "../../data/go/data", "lodash", "../../go/popupHelper"], function (exports, _aureliaFramework, _helper, _http, _data, _lodash, _popupHelper) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FileMaintenance = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var ListItem = function ListItem(descripiton, id, data) {
    _classCallCheck(this, ListItem);

    this.data = data;
    this.description = descripiton;
    this.selected = false;
    this.item = null;
    this.id = id;
  };

  var ListGroup = function ListGroup(description, items) {
    _classCallCheck(this, ListGroup);

    this.items = items == undefined ? [] : items;
    this.description = description;
    this.headingId;
    this.collapseId;
    this.dataTarget;
    this.expanded = false;
    this.dataUrl;

    this.displayEntity = true;
    this.displayFirstName = true;
    this.displayMiddleName = true;
    this.displayLastName = true;
    this.displayTitle = true;
    this.displaySex = true;
    this.displayDob = true;
    this.displayTaxId = true;
    this.displayAddress1 = true;
    this.displayAddress2 = true;
    this.displayProviderRole = true;
    this.displayCity = true;
    this.displayState = true;
    this.displayZip = true;
    this.displaySalutation = true;
    this.displayHomePhone = true;
    this.displayWorkPhone = true;
    this.displayWorkExt = true;
    this.displayFaxPhone = true;
    this.displayCellPhone = true;
    this.displayEmail = true;
    this.displayMarried = true;
    this.displaySpouseFirst = true;
    this.displaySpouseLast = true;
    this.displayLocationType = true;
    this.displaySignatureButton = false;
  };

  var FileMaintenance = exports.FileMaintenance = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _popupHelper.PopupHelper), _dec(_class = (_class2 = function () {
    function FileMaintenance(helper, http, Data, PopupHelper) {
      _classCallCheck(this, FileMaintenance);

      this.list = [];
      this.selectedItem = null;
      this.selectedGroup = null;
      this.enableEdit = false;
      this.locationTypes = ['Clinic', 'DME', 'Imaging', 'Lab', 'Other', 'Pharmacy', 'Surgical', 'Therapy'];
      this.providerRoles = ['Surgeon', 'Assistant', 'Office Only', 'Therapy'];
      this.states = ['AK', 'AL', 'AR', 'AS', 'AZ', 'CA', 'CO', 'CT', 'DC', 'DE', 'FL', 'GA', 'GU', 'HI', 'IA', 'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME', 'MI', 'MN', 'MO', 'MP', 'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY', 'OH', 'OK', 'OR', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UM', 'UT', 'VA', 'VI', 'VT', 'WA', 'WI', 'WV', 'WY'];
      this.sexes = ['M', 'F'];
      this.saveDialog = null;

      _initDefineProp(this, "datepicker", _descriptor, this);

      this.helper = helper;
      this.http = http;
      this.goData = Data;
      this.popupHelper = PopupHelper;
    }

    FileMaintenance.prototype.activate = function activate(obj) {
      var self = this;
      self.data = obj.data;
      self.setup();
    };

    FileMaintenance.prototype.setup = function setup() {
      var self = this;

      self.height = window.innerHeight - 60;

      var locationGroup = new ListGroup('Location');
      locationGroup.displayFirstName = false;
      locationGroup.displayMiddleName = false;
      locationGroup.displayLastName = false;
      locationGroup.displayTitle = false;
      locationGroup.displaySex = false;
      locationGroup.displayDob = false;
      locationGroup.displayTaxId = false;
      locationGroup.displayProviderRole = false;
      locationGroup.displaySalutation = false;
      locationGroup.displayHomePhone = false;
      locationGroup.displayCellPhone = false;
      locationGroup.displayEmail = false;
      locationGroup.displayMarried = false;
      locationGroup.displaySpouseFirst = false;
      locationGroup.displaySpouseLast = false;

      var schoolGroup = new ListGroup('School');
      schoolGroup.displayFirstName = false;
      schoolGroup.displayMiddleName = false;
      schoolGroup.displayLastName = false;
      schoolGroup.displayTitle = false;
      schoolGroup.displaySex = false;
      schoolGroup.displayDob = false;
      schoolGroup.displayTaxId = false;
      schoolGroup.displayProviderRole = false;
      schoolGroup.displaySalutation = false;
      schoolGroup.displayHomePhone = false;
      schoolGroup.displayCellPhone = false;
      schoolGroup.displayEmail = false;
      schoolGroup.displayMarried = false;
      schoolGroup.displaySpouseFirst = false;
      schoolGroup.displaySpouseLast = false;

      var providerGroup = new ListGroup('Provider');
      providerGroup.displayLocationType = false;
      providerGroup.displayEntity = false;
      providerGroup.displaySignatureButton = true;
      self.selectGroup(providerGroup);
      var refPhysGroup = new ListGroup('Referring Physician');
      var pharmacyGroup = new ListGroup('Pharmacy');
      pharmacyGroup.displayFirstName = false;
      pharmacyGroup.displayMiddleName = false;
      pharmacyGroup.displayLastName = false;
      pharmacyGroup.displayTitle = false;
      pharmacyGroup.displaySex = false;
      pharmacyGroup.displayDob = false;
      pharmacyGroup.displayTaxId = false;
      pharmacyGroup.displayProviderRole = false;
      pharmacyGroup.displaySalutation = false;
      pharmacyGroup.displayHomePhone = false;
      pharmacyGroup.displayCellPhone = false;
      pharmacyGroup.displayEmail = false;
      pharmacyGroup.displayMarried = false;
      pharmacyGroup.displaySpouseFirst = false;
      pharmacyGroup.displaySpouseLast = false;

      var labGroup = new ListGroup('Lab');
      labGroup.displayFirstName = false;
      labGroup.displayMiddleName = false;
      labGroup.displayLastName = false;
      labGroup.displayTitle = false;
      labGroup.displaySex = false;
      labGroup.displayDob = false;
      labGroup.displayTaxId = false;
      labGroup.displayProviderRole = false;
      labGroup.displaySalutation = false;
      labGroup.displayHomePhone = false;
      labGroup.displayCellPhone = false;
      labGroup.displayEmail = false;
      labGroup.displayMarried = false;
      labGroup.displaySpouseFirst = false;
      labGroup.displaySpouseLast = false;

      var employerGroup = new ListGroup('Employer');
      employerGroup.displayLocationType = false;
      employerGroup.displayFirstName = false;
      employerGroup.displayMiddleName = false;
      employerGroup.displayLastName = false;
      employerGroup.displayTitle = false;
      employerGroup.displaySex = false;
      employerGroup.displayDob = false;
      employerGroup.displayTaxId = false;
      employerGroup.displayProviderRole = false;
      employerGroup.displaySalutation = false;
      employerGroup.displayHomePhone = false;
      employerGroup.displayCellPhone = false;
      employerGroup.displayEmail = false;
      employerGroup.displayMarried = false;
      employerGroup.displaySpouseFirst = false;
      employerGroup.displaySpouseLast = false;

      self.addGroup(locationGroup);
      self.addGroup(schoolGroup);
      self.addGroup(providerGroup);
      self.addGroup(refPhysGroup);
      self.addGroup(pharmacyGroup);
      self.addGroup(labGroup);
      self.addGroup(employerGroup);

      self.goData.getWithUrl('providers', function (res) {
        providerGroup.dataUrl = 'providers';
        for (var p = 0; p < res.length; p++) {
          providerGroup.items.push(new ListItem(res[p].ProviderEntity, res[p].ProviderID, res[p]));
        }
      });
      self.goData.getWithUrl('locations', function (res) {
        var labs = _.filter(res, function (r) {
          return r.Type.toLowerCase() == 'lab';
        });

        var pharms = _.filter(res, function (r) {
          return r.Type.toLowerCase() == 'pharmacy';
        });

        var locations = _.reject(res, function (r) {
          return r.Type.toLowerCase() == 'pharmacy' || r.Type.toLowerCase() == 'lab';
        });

        locationGroup.dataUrl = 'locations';
        pharmacyGroup.dataUrl = 'locations';
        labGroup.dataUrl = 'locations';

        for (var p = 0; p < locations.length; p++) {
          locationGroup.items.push(new ListItem(locations[p].LocationName, locations[p].LocationID, locations[p]));
        }
        for (var _p = 0; _p < pharms.length; _p++) {
          pharmacyGroup.items.push(new ListItem(pharms[_p].LocationName, pharms[_p].LocationID, pharms[_p]));
        }
        for (var _p2 = 0; _p2 < labs.length; _p2++) {
          labGroup.items.push(new ListItem(labs[_p2].LocationName, labs[_p2].LocationID, labs[_p2]));
        }
      });
      self.goData.getWithUrl('schools', function (res) {

        schoolGroup.dataUrl = 'schools';

        for (var p = 0; p < res.length; p++) {
          schoolGroup.items.push(new ListItem(res[p].SchoolName, res[p].SchoolID, res[p]));
        }
      });
      self.goData.getWithUrl('employers', function (res) {
        employerGroup.dataUrl = 'employer';

        for (var p = 0; p < res.length; p++) {
          employerGroup.items.push(new ListItem(res[p].NameEmployer, res[p].EmployerID, res[p]));
        }
      });
    };

    FileMaintenance.prototype.openSignature = function openSignature(selectedItem) {
      var self = this;
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var quarter = windowWidth / 4;
      var third = windowWidth / 3;

      var topThird = windowHeight / 3;

      var width = 634;
      var left = third / 2;
      var height = 'auto';
      var top = topThird / 2;

      var options = {
        displayHeader: false,

        scrollHeight: 228
      };
      self.popupHelper.openViewModelPop('./signature', selectedItem, '', width, height, top, quarter, options, function (res) {});
    };

    FileMaintenance.prototype.validatePhone = function validatePhone(phone) {
      var regx = /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im;
      var pass = true;
      if (!regx.test(phone)) {
        pass = false;
      }
      return pass;
    };

    FileMaintenance.prototype.itemClick = function itemClick(item, group) {
      var self = this;

      for (var g = 0; g < self.list.length; g++) {
        var aGroup = self.list[g];
        for (var i = 0; i < aGroup.items.length; i++) {
          var aItem = aGroup.items[i];
          if (aGroup.description == group.description && aItem.description == item.description) {
            aItem.selected = true;
            self.selectedItem = aItem;
            self.enableEdit = true;
            self.selectedItem.item = self.getDataItemWithGroup(aItem.data, aGroup);
          } else {
            aItem.selected = false;
          }
        }
      }
    };

    FileMaintenance.prototype.populateDataObjectWithListItemAndGroup = function populateDataObjectWithListItemAndGroup(listItem, group) {
      if (group.description == 'Provider') {

        listItem.data.ProviderEntity = listItem.item.entity;
        listItem.data.NameFirst = listItem.item.firstName;
        listItem.data.NameMiddle = listItem.item.middleName;
        listItem.data.NameLast = listItem.item.lastName;
        listItem.data.NameTitle = listItem.item.title;
        listItem.data.sex = listItem.item.sex;
        listItem.data.DOB = listItem.item.dob;
        listItem.data.ProviderRole = listItem.item.providerRole;
        listItem.data.Practice_Address = listItem.item.address1;
        listItem.data.Practice_Address_2 = listItem.item.address2;
        listItem.data.Practice_City = listItem.item.city;
        listItem.data.Practice_State = listItem.item.state;
        listItem.data.Practice_Zip = listItem.item.zip;

        var vHome = this.validatePhone(listItem.item.phoneHome);

        listItem.data.homephone = listItem.item.phoneHome;
        listItem.data.Practice_Phone = listItem.item.phoneWork;
        listItem.data.PhoneExt = listItem.item.phoneWorkExt;
        listItem.data.PhoneFax = listItem.item.phoneFax;
        listItem.data.cellPhone = listItem.item.phoneCell;
        listItem.data.Email = listItem.item.email;
        listItem.data.married = listItem.item.married;
        listItem.data.spouseFirst = listItem.item.spouseFirst;
        listItem.data.spouseLast = listItem.item.spouseLast;

        delete listItem.data.OD_Schedules;
        delete listItem.data.OD_Documents;
        delete listItem.data.OD_PDF_Instances;
      } else if (group.description == 'Location') {

        listItem.data.LocationName = listItem.item.entity;
        listItem.data.taxId = listItem.item.taxId;
        listItem.data.Address1 = listItem.item.address1;
        listItem.data.Address2 = listItem.item.address2;
        listItem.data.ProviderRole = listItem.item.providerRole;
        listItem.data.City = listItem.item.city;
        listItem.data.State = listItem.item.state;
        listItem.data.Zip = listItem.item.zip;
        listItem.data.Phone = listItem.item.phoneWork;
        listItem.data.PhoneX = listItem.item.phoneWorkExt;
        listItem.data.Fax = listItem.item.phoneFax;
        listItem.data.Type = listItem.item.locationType;
      } else if (group.description == 'School') {

        listItem.data.SchoolName = listItem.item.entity;
        listItem.data.FirstName = listItem.item.firstName;
        listItem.data.LastName = listItem.item.lastName;
        listItem.data.Title = listItem.item.title;
        listItem.data.Sex = listItem.item.sex;
        listItem.data.Address1 = listItem.item.address1;
        listItem.data.Address2 = listItem.item.address2;
        listItem.data.City = listItem.item.city;
        listItem.data.State = listItem.item.state;
        listItem.data.Zip = listItem.item.zip;
        listItem.data.phone = listItem.item.phoneWork;
        listItem.data.phoneX = listItem.item.phoneWorkExt;
        listItem.data.Fax = listItem.item.phoneFax;
        listItem.data.email = listItem.item.email;
      } else if (group.description == 'Referring Physician') {

        listItem.data.ReferringEntity = listItem.item.entity;
        listItem.data.NameFirst = listItem.item.firstName;
        listItem.data.NameMiddle = listItem.item.middleName;
        listItem.data.NameLast = listItem.item.lastName;
        listItem.data.NameTitle = listItem.item.title;
        listItem.data.Address1 = listItem.item.address1;
        listItem.data.Address2 = listItem.item.address2;
        listItem.data.AddressCity = listItem.item.city;
        listItem.data.AddressState = listItem.item.state;
        listItem.data.AddressZip = listItem.item.zip;
        listItem.data.Salutation = listItem.item.salutation;
        listItem.data.Phone = listItem.item.phoneWork;
        listItem.data.PhoneExt = listItem.item.phoneWorkExt;
        listItem.data.Email = listItem.item.email;
      } else if (group.description == 'Pharmacy' || group.description == 'Lab') {

        listItem.data.LocationName = listItem.item.entity;
        listItem.data.Type = listItem.item.locationType;
        listItem.data.Address1 = listItem.item.address1;
        listItem.data.Address2 = listItem.item.address2;
        listItem.data.City = listItem.item.city;
        listItem.data.State = listItem.item.state;
        listItem.data.Zip = listItem.item.zip;
        listItem.data.Phone = listItem.item.phoneWork;
        listItem.data.PhoneX = listItem.item.phoneWorkExt;
        listItem.data.Fax = listItem.item.phoneFax;
      } else if (group.description == 'Employer') {

        listItem.data.NameEmployer = listItem.item.entity;
        listItem.data.NameContact = listItem.item.firstName;
        listItem.data.NameContactLast = listItem.item.lastName;
        listItem.data.Address1 = listItem.item.address1;
        listItem.data.Address2 = listItem.item.address2;
        listItem.data.AddressCity = listItem.item.city;
        listItem.data.AddressState = listItem.item.state;
        listItem.data.AddressZip = listItem.item.zip;
        listItem.data.Phone = listItem.item.phoneWork;
        listItem.data.PhoneExt = listItem.item.phoneWorkExt;
        listItem.data.PhoneFax = listItem.item.phoneFax;
        listItem.data.Email = listItem.item.email;
      } else if (group.description == 'Picklist') {}

      return listItem;
    };

    FileMaintenance.prototype.getDataItemWithGroup = function getDataItemWithGroup(data, group) {

      var itm = {
        entity: "",
        firstName: "",
        middleName: "",
        lastName: "",
        title: "",
        sex: "",
        dob: "",
        taxId: "",
        address1: "",
        address2: "",
        providerRole: "",
        city: "",
        state: "",
        zip: "",
        salutation: "",
        phoneHome: "",
        phoneWork: "",
        phoneWorkExt: "",
        phoneFax: "",
        phoneCell: "",
        email: "",
        married: "",
        spouseFirst: "",
        spouseLast: "",
        locationType: ""
      };

      if (group.description == 'Provider') {
        itm.entity = data.NameFirst + " " + data.NameLast;
        itm.firstName = data.NameFirst;
        itm.middleName = data.NameMiddle;
        itm.lastName = data.NameLast;
        itm.title = data.NameTitle;
        itm.sex = data.sex;
        itm.dob = data.DOB;

        itm.address1 = data.Practice_Address;
        itm.address2 = data.Practice_Address_2;
        itm.providerRole = data.ProviderRole;
        itm.city = data.Practice_City;
        itm.state = data.Practice_State;
        itm.zip = data.Practice_Zip;

        itm.phoneHome = data.homephone;
        itm.phoneWork = data.Practice_Phone;
        itm.phoneWorkExt = data.PhoneExt;
        itm.phoneFax = data.PhoneFax;
        itm.phoneCell = data.cellPhone;
        itm.email = data.Email;
        itm.married = data.married;
        itm.spouseFirst = data.spouseFirst;
        itm.spouseLast = data.spouseLast;
      } else if (group.description == 'Location') {
        itm.entity = data.LocationName;

        itm.taxId = data.taxId;
        itm.address1 = data.Address1;
        itm.address2 = data.Address2;
        itm.providerRole = data.ProviderRole;
        itm.city = data.City;
        itm.state = data.State;
        itm.zip = data.Zip;

        itm.phoneWork = data.Phone;
        itm.phoneWorkExt = data.PhoneX;
        itm.phoneFax = data.Fax;

        itm.locationType = data.Type;
      } else if (group.description == 'School') {
        itm.entity = data.SchoolName;
        itm.firstName = data.FirstName;
        itm.lastName = data.LastName;
        itm.title = data.Title;
        itm.sex = data.Sex;

        itm.address1 = data.Address1;
        itm.address2 = data.Address2;

        itm.city = data.City;
        itm.state = data.State;
        itm.zip = data.Zip;
        itm.phoneWork = data.phone;
        itm.phoneWorkExt = data.phoneX;
        itm.phoneFax = data.Fax;
        itm.email = data.email;
      } else if (group.description == 'Referring Physician') {

        itm.entity = data.ReferringEntity;
        itm.firstName = data.NameFirst;
        itm.middleName = data.NameMiddle;
        itm.lastName = data.NameLast;
        itm.title = data.NameTitle;

        itm.address1 = data.Address1;
        itm.address2 = data.Address2;

        itm.city = data.AddressCity;
        itm.state = data.AddressState;
        itm.zip = data.AddressZip;
        itm.salutation = data.Salutation;

        itm.phoneWork = data.Phone;

        itm.phoneFax = data.phoneExt;

        itm.email = data.Email;
      } else if (group.description == 'Pharmacy' || group.description == 'Lab') {
        itm.entity = data.LocationName;

        itm.locationType = data.Type;
        itm.address1 = data.Address1;
        itm.address2 = data.Address2;

        itm.city = data.City;
        itm.state = data.State;
        itm.zip = data.Zip;
        itm.phoneWork = data.Phone;
        itm.phoneWorkExt = data.PhoneX;
        itm.phoneFax = data.Fax;
      } else if (group.description == 'Employer') {
        itm.entity = data.NameEmployer;
        itm.firstName = data.NameContact;
        itm.lastName = data.NameContactLast;

        itm.address1 = data.Address1;
        itm.address2 = data.Address2;

        itm.city = data.AddressCity;
        itm.state = data.AddressState;
        itm.zip = data.AddressZip;
        itm.phoneWork = data.Phone;
        itm.phoneWorkExt = data.PhoneExt;
        itm.phoneFax = data.PhoneFax;
        itm.email = data.Email;
      } else if (group.description == 'Picklist') {}

      return itm;
    };

    FileMaintenance.prototype.selectGroup = function selectGroup(grp) {
      var self = this;
      self.selectedItem = null;
      self.enableEdit = false;
      self.isPicklist = false;

      for (var g = 0; g < self.list.length; g++) {
        if (self.list[g].description == grp.description) {
          this.selectedGroup = self.list[g];
          self.list[g].expanded = true;
        } else {
          self.list[g].expanded = false;
        }
      }
    };

    FileMaintenance.prototype.update = function update() {
      var self = this;

      self.saveDialog = self.helper.createNoty("Saving " + self.selectedItem.description, 3000);

      if (self.selectedGroup && self.selectedItem) {
        var url = self.selectedGroup.dataUrl;
        if (self.selectedItem.id == 0) {
          var saveObj = self.createSaveObjectWithGroupAndItem(self.selectedGroup, self.selectedItem);

          self.saveDialog.show();

          self.goData.postWithUrlAndData(url, JSON.stringify(saveObj), function (res) {

            self.saveDialog.close();

            self.selectedItem.data = res;
            if (self.selectedGroup.description == 'Provider') {
              self.selectedItem.id = res.ProviderID;
            } else if (self.selectedGroup.description == 'Location' || self.selectedGroup.description == 'Lab' || self.selectedGroup.description == 'Pharmacy') {
              self.selectedItem.id = res.LocationID;
            } else if (self.selectedGroup.description == 'Referring Physician') {} else if (self.selectedGroup.description == 'School') {
              self.selectedItem.id = res.SchoolID;
            } else if (self.selectedGroup.description == 'Employer') {
              self.selectedItem.id = res.EmployerID;
            } else if (self.selectedGroup.description == 'Picklist') {}
          });
        } else {
          var updateObj = self.createSaveObjectWithGroupAndItem(self.selectedGroup, self.selectedItem);
          self.saveDialog.show();

          self.goData.putWithUrlAndData(url, updateObj, function (res) {

            self.saveDialog.close();
          });
        }
      }
    };

    FileMaintenance.prototype.createSaveObjectWithGroupAndItem = function createSaveObjectWithGroupAndItem(group, item) {
      var self = this;
      var populatedListItem = self.populateDataObjectWithListItemAndGroup(item, group);
      if (group.description == 'Lab' || group.description == 'Pharmacy') {
        var obj = {
          Location: populatedListItem.data
        };
        return obj;
      } else {
        var _obj2;

        var desc = group.description;
        var _obj = (_obj2 = {}, _obj2[desc] = populatedListItem.data, _obj2);
        return _obj;
      }
    };

    FileMaintenance.prototype.openNewItemPopup = function openNewItemPopup(header, inputArray, options) {
      var self = this;
      self.popupHelper.openGenericInputPop(header, inputArray, null, false, function (res) {
        var inputValues = res.inputs;
        var description = null;
        var url = self.selectedGroup.dataUrl + "/new";

        self.goData.getWithUrl(url, function (res) {
          if (self.selectedGroup.description == 'Provider') {
            res.NameFirst = inputValues[0].value;
            res.NameLast = inputValues[1].value;
            res.ProviderEntity = res.NameFirst + " " + res.NameLast;
            description = res.ProviderEntity;
            res.OD_Users = options.user;
          } else if (self.selectedGroup.description == 'Location' || self.selectedGroup.description == 'Lab' || self.selectedGroup.description == 'Pharmacy') {
            res.LocationName = inputValues[0].value;
            description = res.LocationName;
          } else if (self.selectedGroup.description == 'Referring Physician') {} else if (self.selectedGroup.description == 'School') {
            res.SchoolName = inputValues[0].value;
            description = res.SchoolName;
          } else if (self.selectedGroup.description == 'Employer') {
            res.NameEmployer = inputValues[0].value;
            description = res.NameEmployer;
          } else if (self.selectedGroup.description == 'Picklist') {}

          var newItem = new ListItem(description, 0, res);
          self.selectedGroup.items.push(newItem);
          self.itemClick(newItem, self.selectedGroup);
        });
      });
    };

    FileMaintenance.prototype.addClick = function addClick() {
      var self = this;
      self.selectedItem = null;
      self.enableEdit = true;
      var header = null;

      if (self.selectedGroup) {
        header = "New " + self.selectedGroup.description;

        var inputArray = [];
        if (self.selectedGroup.description == 'Provider') {
          inputArray.push('First');
          inputArray.push('Last');

          self.goData.getWithUrl('users', function (users) {
            var picklistUsers = [];
            for (var u = 0; u < users.length; u++) {
              picklistUsers.push(self.goData.getGenericPicklistItem(users[u].UserName, users[u]));
            }

            self.popupHelper.openGenericPicklistPop("User", "Select A User", picklistUsers, false, function (selectedUser) {

              self.openNewItemPopup(header, inputArray, { user: selectedUser.item.data });
            });
          });
        } else {
          inputArray.push('Name');

          self.openNewItemPopup(header, inputArray);
        }
      } else {}
    };

    FileMaintenance.prototype.addGroup = function addGroup(listGroup) {
      var self = this;
      listGroup.headingId = 'heading' + self.list.length + 1;
      listGroup.collapseId = 'collapse' + self.list.length + 1;
      listGroup.dataTarget = '#' + listGroup.collapseId;
      self.list.push(listGroup);
    };

    return FileMaintenance;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "datepicker", [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!administration/pages/fileMaintenance.html',[],function(){return "<template><style>.fa-disabled{opacity:.6;cursor:not-allowed;pointer-events:none}</style><div class=\"row\"><div class=\"col-md-4 pr-0\" css=\"height: ${height}px;\" style=\"overflow-y:auto\"><div class=\"accordion\" id=\"accordionExample\"><div repeat.for=\"group of list\" class=\"card\"><div class=\"card-header\" id.bind=\"group.headingId\"><div class=\"mb-0 d-inline-block w-100\"><button class=\"btn btn-block text-left py-0\" type=\"button\" style=\"font-size:1.2rem;font-weight:500;line-height:1.2\" data-toggle=\"collapse\" data-target.bind=\"group.dataTarget\" aria-expanded=\"true\" aria-controls.bind=\"group.collapseId\" click.delegate=\"selectGroup(group)\"> ${group.description} <i class=\"fa ${group.expanded ? 'fa-angle-down' : 'fa-angle-up'} float-right\" aria-hidden=\"true\"></i></button></div></div><div id.bind=\"group.collapseId\" class=\"collapse ${group.expanded ? 'show' : ''}\" aria-labelledby.bind=\"group.headingId\" data-parent=\"#accordionExample\"><ul class=\"list-group\"><li repeat.for=\"i of group.items\" class=\"list-group-item ${i.selected ? 'active' : ''}\" click.delegate=\"itemClick(i, group)\">${i.description}</li></ul></div></div></div></div><div if.bind=\"isPicklist\" class=\"col-md-8\"><div class=\"card\" css=\"height: ${height}px;\"><div class=\"card-body\" style=\"overflow-y:auto\"><table class=\"table table-striped table-sm\"><thead><tr><th scope=\"col\">Descrition1</th><th scope=\"col\">Description2</th><th scope=\"col\">BodyPart</th></tr></thead><tbody><tr repeat.for=\"l of selectedItem.items\"><td style=\"vertical-align:middle\">${l.data.Description1}</td><td style=\"vertical-align:middle\">${l.data.Description2}</td><td style=\"vertical-align:middle\">${l.data.BodyPart}</td></tr></tbody></table></div></div></div><div if.bind=\"!isPicklist\" class=\"col-md-8\"><div ref=\"newuser\" class=\"card\" css=\"height: ${height}px;\"><div class=\"card-header\"><ul class=\"nav nav-tabs card-header-tabs\"><li class=\"nav-item\"><a class=\"nav-link active\" href=\"#\">${selectedGroup.description}</a></li><i class=\"fa fa-plus text-primary fa-2x ml-auto pr-2 ${!selectedGroup ? 'fa-disabled' : ''}\" style=\"z-index:5001\" aria-hidden=\"true\" click.delegate=\"addClick()\"></i></ul></div><div class=\"card-body\" style=\"overflow-y:auto\"><div if.bind=\"!enableEdit\" style=\"position:absolute;background-color:#ffffffd4;left:0;right:0;bottom:0;top:0;z-index:5000\"></div><div class=\"form-row\"><div if.bind=\"selectedGroup.displayEntity\" class=\"form-group col-md-6 mr-2\"><label>Entity</label> <input type=\"text\" value.bind=\"selectedItem.item.entity\" class=\"form-control\"></div><div if.bind=\"selectedGroup.displayLocationType\" class=\"form-group col-md-3\"><label>Location Type</label> <select value.bind=\"selectedItem.item.locationType\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"l of locationTypes\" model.bind=\"l\">${l}</option></select></div><div if.bind=\"selectedGroup.displayProviderRole\" class=\"form-group col-md-3\"><label>Provider Role</label> <select value.bind=\"selectedItem.item.providerRole\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"l of providerRoles\" model.bind=\"l\">${l}</option></select></div><div if.bind=\"selectedGroup.displaySignatureButton\" class=\"form-group col-md-3 ml-auto\"><label class=\"text-light\">Signature</label> <button type=\"button\" class=\"btn btn-outline-primary d-block\" click.delegate=\"openSignature(selectedItem)\"><i class=\"fa fa-pencil pr-2\" aria-hidden=\"true\"></i>Signature</button></div></div><div class=\"form-row\"><div if.bind=\"selectedGroup.displayFirstName\" class=\"form-group col-md-4\"><label>First Name</label> <input type=\"text\" value.bind=\"selectedItem.item.firstName\" class=\"form-control\"></div><div if.bind=\"selectedGroup.displayMiddleName\" class=\"form-group col-md-3\"><label>Middle</label> <input type=\"text\" value.bind=\"selectedItem.item.middleName\" class=\"form-control\"></div><div if.bind=\"selectedGroup.displayLastName\" class=\"form-group col-md-4\"><label>Last</label> <input type=\"text\" value.bind=\"selectedItem.item.lastName\" class=\"form-control\"></div><div if.bind=\"selectedGroup.displayTitle\" class=\"form-group col-md-1\"><label>Title</label> <input type=\"text\" value.bind=\"selectedItem.item.title\" class=\"form-control\"></div></div><div class=\"form-row\"><div if.bind=\"selectedGroup.displaySex\" class=\"form-group col-md-3\"><label>Sex</label> <select value.bind=\"selectedItem.item.sex\" class=\"form-control\"><option>Choose...</option><option repeat.for=\"s of sexes\">${s}</option></select></div><div if.bind=\"selectedGroup.displayDob\" class=\"form-group col-md-2\"><label>DOB</label><abp-datetime-picker icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"datepicker\" value.bind=\"selectedItem.item.dob\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker></div><div if.bind=\"selectedGroup.displayTaxId\" class=\"form-group col-md-2\"><label>Tax ID</label> <input type=\"text\" value.bind=\"selectedItem.item.taxId\" class=\"form-control\"></div></div><div class=\"form-row\"><div if.bind=\"selectedGroup.displayAddress1\" class=\"form-group col-md-7\"><label>Address</label> <input type=\"text\" value.bind=\"selectedItem.item.address1\" class=\"form-control\"></div><div class=\"form-group col-md-1\"></div></div><div class=\"form-row\"><div if.bind=\"selectedGroup.displayAddress2\" class=\"form-group col-md-7\"><label>Address 2</label> <input type=\"text\" value.bind=\"selectedItem.item.address2\" class=\"form-control\"></div></div><div class=\"form-row\"><div if.bind=\"selectedGroup.displayCity\" class=\"form-group col-md-3\"><label>City</label> <input type=\"text\" value.bind=\"selectedItem.item.city\" class=\"form-control\"></div><div if.bind=\"selectedGroup.displayState\" class=\"form-group col-md-2\"><label>State</label> <select value.bind=\"selectedItem.item.state\" class=\"form-control\"><option>Choose...</option><option repeat.for=\"s of states\">${s}</option></select></div><div if.bind=\"selectedGroup.displayZip\" class=\"form-group col-md-2\"><label>Zip</label> <input type=\"text\" value.bind=\"selectedItem.item.zip\" class=\"form-control\"></div></div><div class=\"form-row\"><div if.bind=\"selectedGroup.displayHomePhone\" class=\"form-group col-md-4\"><label>Home</label> <input type=\"tel\" value.bind=\"selectedItem.item.phoneHome\" placeholder=\"(XXX)XXX-XXXX\" class=\"form-control\"></div><div if.bind=\"selectedGroup.displayWorkPhone\" class=\"form-group col-md-4\"><label>Work</label> <input type=\"tel\" value.bind=\"selectedItem.item.phoneWork\" class=\"form-control\"></div><div if.bind=\"selectedGroup.displayWorkExt\" class=\"form-group col-md-2\"><label>Ext</label> <input type=\"text\" value.bind=\"selectedItem.item.phoneWorkExt\" class=\"form-control\"></div></div><div class=\"form-row\"><div if.bind=\"selectedGroup.displayFaxPhone\" class=\"form-group col-md-4\"><label>Fax</label> <input type=\"tel\" value.bind=\"selectedItem.item.phoneFax\" class=\"form-control\"></div><div if.bind=\"selectedGroup.displayCellPhone\" class=\"form-group col-md-4\"><label>Cell</label> <input type=\"tel\" value.bind=\"selectedItem.item.phoneCell\" class=\"form-control\"></div></div><div class=\"form-row\"><div if.bind=\"selectedGroup.displayEmail\" class=\"form-group col-md-6\"><label>Email</label> <input type=\"email\" value.bind=\"selectedItem.item.email\" class=\"form-control\"></div></div><div class=\"form-row\"><div if.bind=\"selectedGroup.displayMarried\" class=\"form-group col-md-2\"><label>Married</label> <select value.bind=\"selectedItem.item.married\" class=\"form-control\"><option selected=\"selected\">Choose...</option><option>...</option></select></div><div if.bind=\"selectedGroup.displaySpouseFirst\" class=\"form-group col-md-4\"><label>Spouse First</label> <input type=\"text\" value.bind=\"selectedItem.item.spouseFirst\" class=\"form-control\"></div><div if.bind=\"selectedGroup.displaySpouseLast\" class=\"form-group col-md-4\"><label>Last</label> <input type=\"text\" value.bind=\"selectedItem.item.spouseLast\" class=\"form-control\"></div></div></div><div class=\"card-footer\"><button type=\"button\" class=\"btn btn-primary float-right\" click.delegate=\"update()\">Update</button></div></div></div></div></template>";});;
define('administration/pages/groups',["exports", "aurelia-dependency-injection", "../../helpers/helper", "../../helpers/http", "../../data/go/data", "lodash", "../../go/popupHelper"], function (exports, _aureliaDependencyInjection, _helper, _http, _data, _lodash, _popupHelper) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Groups = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var GroupAndUsers = function GroupAndUsers(data) {
    _classCallCheck(this, GroupAndUsers);

    this.name = data.GroupName;
    this.data = data;
    this.location = data.Location;
    this.users = data.Users;
    this.selected = false;
  };

  var Location = function Location(name, data) {
    _classCallCheck(this, Location);

    this.name = name;
    this.data = data;
  };

  var Groups = exports.Groups = (_dec = (0, _aureliaDependencyInjection.inject)(_helper.helper, _http.http, _data.Data, _popupHelper.PopupHelper), _dec(_class = function () {
    function Groups(helper, http, Data, PopupHelper) {
      _classCallCheck(this, Groups);

      this.groups = [];
      this.locations = [];
      this.selectedGroup = null;
      this.enableEdit = false;

      this.helper = helper;
      this.http = http;
      this.goData = Data;
      this.popupHelper = PopupHelper;
    }

    Groups.prototype.activate = function activate(obj) {
      var self = this;
      self.data = obj.data;
      self.setup();
    };

    Groups.prototype.setup = function setup() {
      var self = this;
      self.height = window.innerHeight - 60;

      self.goData.getWithUrl('groups/users', function (res) {
        for (var p = 0; p < res.length; p++) {
          var grpUsr = res[p];
          var aGroupAndUser = new GroupAndUsers(grpUsr);
          self.groups.push(aGroupAndUser);
        }
      });

      self.goData.getWithUrl('locations', function (res) {
        for (var p = 0; p < res.length; p++) {
          self.locations.push(new Location(res[p].LocationName, res[p]));
        }
      });
    };

    Groups.prototype.locationMatcher = function locationMatcher(a, b) {
      if (a == null || b == null) return false;

      return a.data.LocationID == b.LocationID;
    };

    Groups.prototype.locationSelected = function locationSelected() {
      var self = this;
      var selectedLocation = self.selectedGroup.location;
    };

    Groups.prototype.addUser = function addUser() {
      var self = this;
      self.popupHelper.openUserSearchPop(function (res) {
        if (res) {
          self.selectedGroup.users.push(res.data);
        }
      }, null, { closeActiveDialog: false });
    };

    Groups.prototype.deleteUser = function deleteUser(u) {
      var self = this;
      if (self.selectedGroup) {
        var users = self.selectedGroup.users;
        for (var g = 0; g < users.length; g++) {
          var aUsr = users[g];
          if (aUsr.UserID == u.UserID) {
            users.splice(g, 1);
          }
        }
      }
    };

    Groups.prototype.groupClick = function groupClick(group) {
      var self = this;
      self.selectedGroup = group;
      self.enableEdit = true;
      for (var g = 0; g < self.groups.length; g++) {
        if (self.groups[g].name == group.name) {
          self.groups[g].selected = true;
        } else {
          self.groups[g].selected = false;
        }
      }
    };

    Groups.prototype.update = function update() {
      var self = this;
      if (self.selectedGroup) {}
    };

    Groups.prototype.newGroupClick = function newGroupClick() {
      var self = this;
      self.popupHelper.openGenericInputPop('Group Name', ['New Group'], null, false, function (res) {

        var data = {
          GroupName: res.value,
          data: null,
          Location: null,
          Users: [],
          selected: false
        };

        var grpAndUsr = new GroupAndUsers(data);
        self.groups.push(grpAndUsr);
        self.groupClick(grpAndUsr);
      });
    };

    return Groups;
  }()) || _class);
});;
define('text!administration/pages/groups.html',[],function(){return "<template><div class=\"row\"><div class=\"col-md-3 pr-0\" css=\"height: ${height}px;\" style=\"overflow-y:auto\"><div class=\"card\"><div class=\"card-header\"><h4 class=\"d-inline-block m-0 pt-1\">Groups</h4><i class=\"fa fa-plus text-primary fa-2x float-right\" aria-hidden=\"true\" click.delegate=\"newGroupClick()\"></i></div><ul class=\"list-group list-group-flush\"><li repeat.for=\"g of groups\" class=\"list-group-item ${g.selected ? 'active' : ''} \" click.delegate=\"groupClick(g)\">${g.name}</li></ul></div></div><div class=\"col-md-9\"><div class=\"card\" css=\"height: ${height}px;\"><h5 class=\"card-header py-0 px-2\"><div class=\"d-flex align-items-center\"><div class=\"p-2 flex-grow-1\"> ${selectedGroup.name}</div></div></h5><div class=\"card-body\" style=\"overflow-y:auto\"><div if.bind=\"!enableEdit\" style=\"position:absolute;background-color:#ffffffd4;left:0;right:0;bottom:0;top:0;z-index:5000\"></div><div class=\"form-group\"><label for=\"exampleInputEmail1\">Location</label> <select value.bind=\"selectedGroup.location\" class=\"form-control\" id=\"exampleInputEmail1\" matcher.bind=\"locationMatcher\" change.delegate=\"locationSelected()\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"l of locations\" model.bind=\"l\">${l.name}</option></select></div><div class=\"form-group\"><label for=\"userid\">Users</label><div id=\"userid\" class=\"d-flex flex-row flex-wrap align-items-center\" style=\"border:1px solid #ced4da;border-radius:.25rem\"><div repeat.for=\"u of selectedGroup.users\" class=\"p-2 text-primary\" click.delegate=\"deleteUser(u)\"><span class=\"p-1 bg-light\"> ${u.FirstName} ${u.LastName} <i class=\"fa fa-times float-right\" aria-hidden=\"true\"></i></span></div><i class=\"fa fa-plus text-primary p-2 mr-2 ml-auto\" aria-hidden=\"true\" click.delegate=\"addUser()\"></i></div><small id=\"emailHelp\" class=\"form-text text-muted\">Add users to group...</small></div></div><div class=\"card-footer\"><button type=\"button\" class=\"btn btn-primary float-right\" click.delegate=\"update()\">Update</button></div></div></div></div></template>";});;
define('administration/pages/listManagement',["exports", "aurelia-dependency-injection", "../../helpers/helper", "../../helpers/http", "../../data/go/data", "lodash", "../../go/popupHelper", "aurelia-framework"], function (exports, _aureliaDependencyInjection, _helper, _http, _data, _lodash, _popupHelper, _aureliaFramework) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ListManagement = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  var _dec, _dec2, _dec3, _class, _desc, _value, _class2;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var ListItem = function ListItem(descripiton, id, data) {
    _classCallCheck(this, ListItem);

    this.data = data;
    this.description = descripiton;
    this.selected = false;
    this.item = null;
    this.id = id;
  };

  var ListGroup = function ListGroup(description, items) {
    _classCallCheck(this, ListGroup);

    this.items = items == undefined ? [] : items;
    this.description = description;
    this.headingId;
    this.collapseId;
    this.dataTarget;
    this.expanded = false;
    this.saveDescription;
    this.displayBodypart = true;
    this.displayBodypartColumn = true;
    this.displayDescription2Column = true;
    this.providerRequired = true;
    this.displayDescription = true;
  };

  var ListManagement = exports.ListManagement = (_dec = (0, _aureliaDependencyInjection.inject)(_helper.helper, _http.http, _data.Data, _popupHelper.PopupHelper), _dec2 = (0, _aureliaFramework.computedFrom)('selectedItem', 'selectedProvider'), _dec3 = (0, _aureliaFramework.computedFrom)('selectedProvider', 'selectedItem'), _dec(_class = (_class2 = function () {
    _createClass(ListManagement, [{
      key: "canAddItem",
      get: function get() {
        if (this.selectedItem && !this.selectedItem.providerRequired) {
          return true;
        }
        if (this.selectedItem && this.selectedProvider) {
          return true;
        }
        return false;
      }
    }, {
      key: "providerInvalid",
      get: function get() {
        if (this.selectedItem == null || this.selectedItem.providerRequired == true && this.selectedProvider == null) {
          return true;
        }
        return false;
      }
    }]);

    function ListManagement(helper, http, Data, PopupHelper) {
      _classCallCheck(this, ListManagement);

      this.list = [];
      this.selectedItem = null;
      this.selectedGroup = null;
      this.enableEdit = false;
      this.saveDialog = null;
      this.listComboData = [];

      this.helper = helper;
      this.http = http;
      this.goData = Data;
      this.popupHelper = PopupHelper;
    }

    ListManagement.prototype.activate = function activate(obj) {
      var self = this;
      self.selectedProvider = { ProviderID: 0 };
      self.data = obj.data;
      self.home = obj.home;
      self.setup();
    };

    ListManagement.prototype.filterListByBodypart = function filterListByBodypart(bodypart) {
      var self = this;
      var filterArray = self.getQueryFromListItem(self.selectedItem);

      if (bodypart != this.bodyparts[0]) {
        filterArray.push(['BodyPart', bodypart]);
      }
      self.selectedBodypartFilter = bodypart;
      var filtered = self.filterListComboDataWithFilterArray(self.listComboData, filterArray);
      self.populateItemWithListComboData(self.selectedItem, filtered);
    };

    ListManagement.prototype.setupModifierGroupWithMiscGroup = function setupModifierGroupWithMiscGroup(miscellaneousGroup) {
      var self = this;
      var modGroup = new ListGroup('Modifiers');
      modGroup.displayBodypart = false;
      modGroup.filters = [];
      modGroup.filters.push(["ListType", 'Miscellaneous']);
      modGroup.filters.push(["Description2", "Modifiers"]);
      modGroup.filters.push(["ProviderID"]);
      modGroup.additionalLists = [];
      var modList = {
        'description': 'Modifiers',
        'items': [],
        'selectedItem': null
      };
      self.goData.getModifiers(function (mods) {
        for (var i = 0; i < mods.length; i++) {
          modList.items.push(mods[i]);
        }
        modGroup.additionalLists.push(modList);
        miscellaneousGroup.items.push(modGroup);
      });
    };

    ListManagement.prototype.setupBodypartGroupWithMiscGroup = function setupBodypartGroupWithMiscGroup(miscellaneousGroup) {
      var self = this;
      var bodypartGroup = new ListGroup('Bodyparts');
      bodypartGroup.displayBodypart = false;
      bodypartGroup.displayBodypartColumn = false;
      bodypartGroup.displayDescription2Column = false;
      bodypartGroup.displayDescription = false;
      bodypartGroup.providerRequired = false;
      bodypartGroup.filters = [];
      bodypartGroup.filters.push(["ListType", 'Bodypart']);

      bodypartGroup.additionalLists = [];
      var bodyList = {
        'description': 'Bodyparts',
        'items': [],
        'selectedItem': null
      };

      for (var i = 0; i < self.goData.bodyparts.length; i++) {
        bodyList.items.push(self.goData.bodyparts[i]);
      }
      bodypartGroup.additionalLists.push(bodyList);
      miscellaneousGroup.items.push(bodypartGroup);
    };

    ListManagement.prototype.setup = function setup() {
      var self = this;

      self.bodyparts = self.goData.bodyparts;
      self.selectedBodypartFilter = self.bodyparts[0];

      self.height = window.innerHeight - 60;

      var hpiGroup = new ListGroup('HPI');
      hpiGroup.saveDescription = 'HPI';
      hpiGroup.displayBodypart = false;
      var patHxGroup = new ListGroup('Patient Hx');
      var jointInjectionGroup = new ListGroup('Joint Injection');
      var daysheetGroup = new ListGroup('Daysheet');
      daysheetGroup.saveDescription = "Modalities";
      var phonecallGroup = new ListGroup('Phone Call');
      phonecallGroup.saveDescription = "Phone Call";
      var miscGroup = new ListGroup("Miscellaneous");
      miscGroup.saveDescription = "Miscellaneous";
      var apptGroup = new ListGroup("Appointment");
      apptGroup.saveDescription = "Appointment";
      apptGroup.displayBodypart = false;
      apptGroup.displayDescription = false;

      self.setupModifierGroupWithMiscGroup(miscGroup);
      self.setupBodypartGroupWithMiscGroup(miscGroup);

      var lists = ['HPI', 'Other Diseases', 'Ortho Surgery', 'Injection Site', 'Modalities', 'Phone Call', 'Miscellaneous', 'Bodypart', 'Room', 'Pod'];
      self.addGroup(hpiGroup);
      self.addGroup(patHxGroup);
      self.addGroup(jointInjectionGroup);
      self.addGroup(daysheetGroup);
      self.addGroup(phonecallGroup);
      self.addGroup(miscGroup);
      self.addGroup(apptGroup);

      var loadDesc = "Loading list items...";
      var loadDialog = self.helper.createNoty(loadDesc, 3000);
      loadDialog.show();

      self.goData.getLists(lists, function (res) {

        loadDialog.close();

        self.listComboData = res;

        var _loop = function _loop(i) {
          var itmName = lists[i];
          if (itmName == 'HPI') {
            var sportGroup = new ListGroup('Sport');
            sportGroup.displayBodypart = false;
            sportGroup.filters = [];
            sportGroup.filters.push(["ListType", itmName]);
            sportGroup.filters.push(["Description2", "Sport"]);
            sportGroup.filters.push(["ProviderID"]);
            hpiGroup.items.push(sportGroup);
          } else if (itmName == 'Room' || itmName == 'Pod') {

            var aptGroup = new ListGroup(itmName);
            aptGroup.displayBodypart = false;
            aptGroup.displayDescription = false;
            aptGroup.displayBodypartColumn = false;
            aptGroup.displayDescription2Column = false;
            aptGroup.filters = [];
            aptGroup.filters.push(["ListType", itmName]);
            aptGroup.filters.push(["ProviderID"]);
            apptGroup.items.push(aptGroup);
          } else if (itmName == 'Other Diseases' || itmName == 'Ortho Surgery') {

            var hxGroup = new ListGroup(itmName);
            hxGroup.filters = [];
            hxGroup.filters.push(["ListType", itmName]);
            hxGroup.filters.push(["ProviderID"]);
            patHxGroup.items.push(hxGroup);
          } else if (itmName == 'Injection Site') {
            var injSiteGroup = new ListGroup('Injection Site');
            injSiteGroup.filters = [];
            injSiteGroup.filters.push(["ListType", itmName]);
            injSiteGroup.filters.push(["ProviderID"]);
            jointInjectionGroup.items.push(injSiteGroup);
          } else if (itmName == 'Modalities') {

            var mods = _.filter(res, function (i) {
              return i.ListType == itmName;
            });
            var subModalityTypes = _.uniqBy(mods, "Description2");
            subModalityTypes = _.orderBy(subModalityTypes, "Description2");
            for (var t = 0; t < subModalityTypes.length; t++) {
              var aGroup = new ListGroup(subModalityTypes[t].Description2);

              aGroup.filters = [];
              aGroup.filters.push(["ListType", itmName]);
              aGroup.filters.push(["Description2"]);
              aGroup.filters.push(["ProviderID"]);
              daysheetGroup.items.push(aGroup);
            }
          } else if (itmName == 'Phone Call') {
            var phoneMessageGroup = new ListGroup('Custom Messages');

            phoneMessageGroup.filters = [];
            phoneMessageGroup.filters.push(["ListType", itmName]);
            phoneMessageGroup.filters.push(["Description2"]);
            phoneMessageGroup.filters.push(["ProviderID"]);
            phoneMessageGroup.displayBodypart = false;
            phonecallGroup.items.push(phoneMessageGroup);
          }
        };

        for (var i = 0; i < lists.length; i++) {
          _loop(i);
        }
      });
    };

    ListManagement.prototype.openListItemPopup = function openListItemPopup(item, callback) {
      var self = this;
      var viewPath = '../administration/dialogs/editListItem';

      var windowHeight = window.innerHeight - 100;
      var windowWidth = window.innerWidth;

      var width = windowWidth / 3 * 2;
      var left = windowWidth / 5;

      var options = {
        closeActiveDialog: false
      };

      var title = item.data.ListType;

      this.popupHelper.openViewModelPop(viewPath, item, title, width, windowHeight, 50, left, options, function (res) {
        if (res.cancelled) return;

        if (res.delete) {
          self.delete(res);
        } else {
          if (res.remove) {
            self.removeFromSelectedItem(item.data.ListID);
          }
          self.update(res, callback);
        }
      });
    };

    ListManagement.prototype.removeFromSelectedItem = function removeFromSelectedItem(listId) {
      var self = this;
      if (self.selectedItem && self.selectedItem.items) {
        for (var i = 0; i < self.selectedItem.items.length; i++) {
          var aItem = self.selectedItem.items[i];
          if (aItem.id == listId) {
            self.selectedItem.items.splice(i, 1);
            break;
          }
        }
      }
    };

    ListManagement.prototype.delete = function _delete(item) {
      var self = this;
      var url = 'listcombo?id=' + item.ListID;
      self.saveDialog = self.helper.createNoty("Deleting " + item.Description1, 3000);
      self.goData.deleteWithUrl(url, function (success) {

        self.saveDialog.close();

        if (success) {
          self.removeFromSelectedItem(item.ListID);
        }
      });
    };

    ListManagement.prototype.getListComboObject = function getListComboObject() {
      return {
        "ListID": 0,
        "ListType": '',
        "Description1": '',
        "Description2": '',
        "BodyPart": '',
        "ProviderID": 0,
        "Visible": 1,
        "ListCode": null,
        "Description3": null
      };
    };

    ListManagement.prototype.editItem = function editItem(item) {
      var self = this;

      var obj = {};
      obj.data = item.data;
      obj.displayBodypart = self.selectedItem.displayBodypart;
      obj.description2ListItems = self.selectedGroup.items;
      obj.displayDescription = self.selectedGroup.displayDescription;

      var li = self.getFilterFromSelectedItem("ListType", self.selectedItem);
      if (li != null && li == "Bodypart") {
        obj.description2ListItems = _.reject(self.selectedGroup.items, function (i) {
          return i.description != "Bodyparts";
        });
      }

      this.openListItemPopup(obj);
    };

    ListManagement.prototype.getQueryFromListItem = function getQueryFromListItem(listItem) {
      var self = this;
      var query = [];

      if (!listItem.filters) return query;

      for (var x = 0; x < listItem.filters.length; x++) {
        var filter = listItem.filters[x];
        if (filter.length > 1) {
          query.push([filter[0], filter[1]]);
        } else {
          if (filter == 'Description2') {
            query.push([filter[0], listItem.description]);
          }
          if (filter == 'ProviderID') {
            var proId = self.selectedProvider ? self.selectedProvider.ProviderID.toString() : null;
            query.push([filter[0], proId]);
          }
        }
      }
      return query;
    };

    ListManagement.prototype.filterListComboDataWithFilterArray = function filterListComboDataWithFilterArray(listComboData, filterArray) {
      var self = this;
      var res = [];

      for (var q = 0; q < filterArray.length; q++) {
        var data = q == 0 ? listComboData : res;
        res = _.filter(data, filterArray[q]);
      }

      return _.sortBy(res, "Description1");
    };

    ListManagement.prototype.filterListComboDataWithProviderIdAndType = function filterListComboDataWithProviderIdAndType(providerId, type) {
      var self = this;
      var filters = {
        'ListType': type,
        'ProviderID': providerId.toString()
      };

      var query = [];
      var keys = Object.keys(filters);
      var vals = Object.values(filters);
      for (var i = 0; i < keys.length; i++) {
        query.push([keys[i], vals[i]]);
      }

      var res = null;

      for (var q = 0; q < query.length; q++) {
        var data = res ? res : self.listComboData;
        res = _.filter(data, query[q]);
      }

      return res;
    };

    ListManagement.prototype.providerSelected = function providerSelected() {
      var self = this;
      if (self.selectedItem) {
        self.loadSelectedItem();
      }
    };

    ListManagement.prototype.loadSelectedItem = function loadSelectedItem() {
      var self = this;
      if (self.selectedItem) {
        self.selectedItem.items = [];
        var filterArray = self.getQueryFromListItem(self.selectedItem);

        if (self.selectedBodypartFilter != this.bodyparts[0]) {
          filterArray.push(['BodyPart', self.selectedBodypartFilter]);
        }
        var filtered = self.filterListComboDataWithFilterArray(self.listComboData, filterArray);
        self.populateItemWithListComboData(self.selectedItem, filtered);
      }
    };

    ListManagement.prototype.populateItemWithListComboData = function populateItemWithListComboData(item, data) {
      item.items = [];
      for (var r = 0; r < data.length; r++) {
        var m = new ListItem(data[r].Description1, data[r].ListID, data[r]);
        item.items.push(m);
      }
    };

    ListManagement.prototype.itemClick = function itemClick(item, group) {
      var self = this;

      for (var g = 0; g < self.list.length; g++) {
        var aGroup = self.list[g];
        for (var i = 0; i < aGroup.items.length; i++) {
          var aItem = aGroup.items[i];
          if (aGroup.description == group.description && aItem.description == item.description) {
            aItem.selected = true;
            self.selectedItem = aItem;
            self.loadSelectedItem();
            self.enableEdit = true;
          } else {
            aItem.selected = false;
          }
        }
      }
    };

    ListManagement.prototype.selectGroup = function selectGroup(grp) {
      var self = this;
      self.selectedItem = null;
      self.enableEdit = false;

      for (var g = 0; g < self.list.length; g++) {
        if (self.list[g].description == grp.description) {
          this.selectedGroup = self.list[g];
          self.list[g].expanded = true;
        } else {
          self.list[g].expanded = false;
        }
      }
    };

    ListManagement.prototype.update = function update(item, callback) {
      var self = this;

      if (item == null) return;

      if (item.BodyPart == undefined || item.BodyPart == null) {
        item.BodyPart = '';
      }

      var description = item.ListID == 0 ? "Saving " : "Updating ";

      self.saveDialog = self.helper.createNoty(description + item.Description1, 3000);

      self.goData.postWithUrlAndData('listcombo', JSON.stringify(item), function (res) {

        self.saveDialog.close();

        if (callback) {
          callback(res);
        }
      });
    };

    ListManagement.prototype.getFilterFromSelectedItem = function getFilterFromSelectedItem(filterDescription, selectedItem) {
      if (selectedItem.filters.length > 0) {
        for (var i = 0; i < selectedItem.filters.length; i++) {
          var aFilter = selectedItem.filters[i];
          if (aFilter.length == 2 && aFilter[0].toUpperCase() == filterDescription.toUpperCase()) {
            return aFilter[1];
          }
        };
      }
      return null;
    };

    ListManagement.prototype.addClick = function addClick() {
      var self = this;
      self.enableEdit = true;
      var header = null;

      if (self.selectedGroup && self.selectedItem) {

        var url = 'listcombo/new';

        self.goData.getWithUrl(url, function (res) {
          var li = self.getFilterFromSelectedItem("ListType", self.selectedItem);
          if (li == null) {
            res.ListType = self.selectedGroup.saveDescription ? self.selectedGroup.saveDescription : self.selectedItem.description;
          } else {
            res.ListType = li;
          }

          var f_descr1 = self.getFilterFromSelectedItem("Description1", self.selectedItem);
          if (f_descr1 != null) {
            res.Description1 = f_descr1;
          }

          var f_descr2 = self.getFilterFromSelectedItem("Description2", self.selectedItem);
          if (f_descr2 != null) {
            res.Description2 = f_descr2;
          } else {
            res.Description2 = self.selectedItem.description;
          }

          res.ProviderID = self.selectedItem.providerRequired ? self.selectedProvider.ProviderID : 0;
          res.ListCode = 0;
          res.Visible = 1;
          res.BodyPart = "";

          var obj = {};
          obj.data = res;
          obj.displayBodypart = self.selectedItem.displayBodypart;
          obj.additionalLists = self.selectedItem.additionalLists;
          obj.description2ListItems = self.selectedGroup.items;
          obj.displayDescription = self.selectedGroup.displayDescription;

          self.openListItemPopup(obj, function (res) {
            var newItem = new ListItem(res.Description1, res.ListID, res);
            self.listComboData.push(res);
            self.selectedItem.items.push(newItem);
            self.itemClick(newItem, self.selectedGroup);
          });
        });
      }
    };

    ListManagement.prototype.addItemToGroup = function addItemToGroup(item, group) {
      var m = new ListItem(item.Description1, item.ListID, item);
      group.items.push(m);
    };

    ListManagement.prototype.getGroupWithDescription = function getGroupWithDescription(description) {
      return _.find(this.list, function (g) {
        return g.description == description;
      });
    };

    ListManagement.prototype.addGroup = function addGroup(listGroup) {
      var self = this;
      listGroup.headingId = 'heading' + self.list.length + 1;
      listGroup.collapseId = 'collapse' + self.list.length + 1;
      listGroup.dataTarget = '#' + listGroup.collapseId;
      self.list.push(listGroup);
    };

    return ListManagement;
  }(), (_applyDecoratedDescriptor(_class2.prototype, "canAddItem", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "canAddItem"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "providerInvalid", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "providerInvalid"), _class2.prototype)), _class2)) || _class);
});;
define('text!administration/pages/listManagement.html',[],function(){return "<template><style>.fa-disabled{opacity:.6;cursor:not-allowed;pointer-events:none}</style><div class=\"row\"><div class=\"col-md-4 pr-0\" css=\"height: ${height}px;\" style=\"overflow-y:auto\"><div class=\"accordion\" id=\"accordionExample\"><div repeat.for=\"group of list\" class=\"card\"><div class=\"card-header\" id.bind=\"group.headingId\"><div class=\"mb-0 d-inline-block w-100\"><button class=\"btn btn-block text-left py-0\" type=\"button\" style=\"font-size:1.2rem;font-weight:500;line-height:1.2\" data-toggle=\"collapse\" data-target.bind=\"group.dataTarget\" aria-expanded=\"true\" aria-controls.bind=\"group.collapseId\" click.delegate=\"selectGroup(group)\"> ${group.description} <i class=\"fa ${group.expanded ? 'fa-angle-down' : 'fa-angle-up'} float-right\" aria-hidden=\"true\"></i></button></div></div><div id.bind=\"group.collapseId\" class=\"collapse ${group.expanded ? 'show' : ''}\" aria-labelledby.bind=\"group.headingId\" data-parent=\"#accordionExample\"><ul class=\"list-group\"><li repeat.for=\"i of group.items\" class=\"list-group-item ${i.selected ? 'active' : ''}\" click.delegate=\"itemClick(i, group)\">${i.description}</li></ul></div></div></div></div><div class=\"col-md-8\"><div class=\"card\" css=\"height: ${height}px;\"><div class=\"card-header\"><div class=\"form-group mb-0 d-inline-block w-25\"><select value.bind=\"selectedProvider\" class=\"form-control custom-select ${providerInvalid ? 'is-invalid' : ''} ${selectedItem.providerRequired ? '' : 'fa-disabled'}\" change.delegate=\"providerSelected()\"><option model.bind=\"null\">Provider...</option><option scheduleprovider repeat.for=\"p of home.allProviders\" model.bind=\"p\">${p.ProviderEntity}</option></select></div><i class=\"fa fa-plus text-primary fa-2x float-right ${!canAddItem ? 'fa-disabled' : '' }\" aria-hidden=\"true\" click.delegate=\"addClick()\"></i></div><div class=\"card-body\" style=\"overflow-y:auto\"><table class=\"table table-striped table-sm\"><thead><tr><th scope=\"col\"></th><th scope=\"col\">Description1</th><th if.bind=\"selectedItem.displayDescription2Column\" scope=\"col\">Description2</th><th if.bind=\"selectedItem.displayBodypartColumn\" scope=\"col\"><div class=\"dropdown\"><button class=\"btn btn-link dropdown-toggle p-0 font-weight-bold text-dark\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"> ${selectedBodypartFilter} </button><div class=\"dropdown-menu\"><a repeat.for=\"b of bodyparts\" class=\"dropdown-item\" href=\"#\" click.delegate=\"filterListByBodypart(b)\">${b}</a></div></div></th></tr></thead><tbody><tr repeat.for=\"l of selectedItem.items\"><td style=\"vertical-align:middle\"><button type=\"button\" class=\"btn btn-primary\" click.delegate=\"editItem(l)\">Edit</button></td><td style=\"vertical-align:middle\">${l.data.Description1}</td><td if.bind=\"selectedItem.displayDescription2Column\" style=\"vertical-align:middle\">${l.data.Description2}</td><td if.bind=\"selectedItem.displayBodypartColumn\" style=\"vertical-align:middle\">${l.data.BodyPart}</td></tr></tbody></table></div></div></div></div></template>";});;
define('administration/pages/misc',["exports", "aurelia-dependency-injection", "aurelia-framework", "../../helpers/helper", "../../helpers/http", "../../data/go/data", "../../go/popupHelper", "lodash", "../../go/globals"], function (exports, _aureliaDependencyInjection, _aureliaFramework, _helper, _http, _data, _popupHelper, _lodash, _globals) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Misc = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor;

  var Misc = exports.Misc = (_dec = (0, _aureliaDependencyInjection.inject)(_helper.helper, _http.http, _data.Data, _popupHelper.PopupHelper, _globals.Globals), _dec(_class = (_class2 = function () {
    Misc.prototype.autoLogoffMinutesChanged = function autoLogoffMinutesChanged(newVal, oldVal) {
      if (!this.setup) {
        this.data.AutoLogOffTimeout = this.getMinutesToSeconds(newVal);
      }
    };

    function Misc(helper, http, Data, PopupHelper, Globals) {
      _classCallCheck(this, Misc);

      this.data = null;
      this.otherApps = null;
      this.externalapps = [];
      this.odgoUsers = [];
      this.odgoUsername = null;
      this.odgoPassword = null;
      this.halfHeight = 200;
      this.odgoAdminUserChecked = false;
      this.displayOdgoAdminUserCheckbox = true;
      this.setup = true;

      _initDefineProp(this, "autoLogoffMinutes", _descriptor, this);

      this.helper = helper;
      this.http = http;
      this.goData = Data;
      this.popupHelper = PopupHelper;
      this.globals = Globals;
    }

    Misc.prototype.activate = function activate(obj) {
      var self = this;
      self.data = obj.data;

      self.autoLogoffMinutes = self.getSecondsToMinutes(self.data.AutoLogOffTimeout);

      self.otherApps = {
        docBuilder: { name: 'Document Builder', path: self.helper._webDocsServer + '#editor' },
        email: { name: 'Email Notification Manager', path: '#systemadmin/emailnotification' },
        kiosk: { name: 'Kiosk Preferences', path: '../kioskPreferences/index' },
        mapper: { name: 'Procedure Mapper', path: '../administration/procedure-mapper' },
        formBuilder: { name: 'Form builder', path: '../formbuilder/editor' },
        reportBuilder: { name: 'Report builder', path: '../reportbuilder/editor' },
        odgo: { name: 'ODGO Admin', path: '../odgo/home' } };

      self.goData.getWithUrl('externalapps/all', function (res) {
        self.externalapps = res;
      });

      self.goData.getWithUrl('odgo/admin/users/all', function (users) {
        self.odgoUsers = users;

        for (var u = 0; u < users.length; u++) {
          var aUsr = users[u];
          if (self.isUserAdmin(aUsr.Token)) {
            self.displayOdgoAdminUserCheckbox = false;
            break;
          }
        }
      });

      self.setup = false;
    };

    Misc.prototype.isUserAdmin = function isUserAdmin(token) {
      var splitToken = token.split('.');
      var payloadString = splitToken[1];
      var payload = atob(payloadString);

      var user = JSON.parse(payload);
      if (user.Admin == 'True') {
        return true;
      }
      return false;
    };

    Misc.prototype.attached = function attached() {
      this.halfHeight = this.mainrow.clientHeight / 2 - 68;
    };

    Misc.prototype.openPopup = function openPopup(name) {
      var self = this;
      var obj = self.otherApps[name];
      var viewPath = obj.path;
      var popupTitle = "";
      var openWithUr = false;
      var backgroundColor = '#ffffff';
      var ignoreScrollCalc = false;
      var scrollHeight = '90vh';
      if (name == 'docBuilder' || name == 'email') {
        viewPath = viewPath.concat('?jwt=' + self.helper._jwt);
        openWithUr = true;
      }
      if (name === 'formBuilder' || name === 'reportBuilder') {
        popupTitle = obj.name;
        backgroundColor = '#e8e8e8';
        ignoreScrollCalc = true;
        scrollHeight = '100%';
      }
      if (name === 'kiosk') {
        ignoreScrollCalc = true;
        scrollHeight = 'auto';
      }

      var windowHeight = '100%';
      var windowWidth = '100%';

      var options = {
        closeActiveDialog: false,
        width: windowWidth,
        height: windowHeight,
        top: 0,
        left: 0,
        title: obj.name,
        popupHeight: windowHeight,
        backgroundColor: backgroundColor,
        ignoreScrollHeightCalculations: ignoreScrollCalc,
        scrollHeight: scrollHeight
      };

      if (openWithUr) {
        this.popupHelper.openUrlPathPop(viewPath, options, function (res) {});
      } else {
        this.popupHelper.openViewModelPop(viewPath, { jwt: self.helper._jwt }, popupTitle, windowWidth, windowHeight, 0, 0, options, function (res) {});
      }
    };

    Misc.prototype.getSecondsToMinutes = function getSecondsToMinutes(seconds) {
      return seconds / 60;
    };

    Misc.prototype.getMinutesToSeconds = function getMinutesToSeconds(minutes) {
      return minutes * 60;
    };

    Misc.prototype.deleteApp = function deleteApp(r, index) {
      var self = this;

      if (r.ExternalAppID == 0) {
        self.removeExternalAppFromList(index);
        return;
      }

      var url = "externalapps?id=" + r.ExternalAppID;
      self.goData.deleteWithUrl(url, function (res) {
        if (res == true) {
          self.removeExternalAppFromList(index);
        }
      });
    };

    Misc.prototype.removeExternalAppFromList = function removeExternalAppFromList(index) {
      var self = this;
      for (var i = 0; i < self.externalapps.length; i++) {
        if (i == index) {
          self.externalapps.splice(i, 1);
          break;
        }
      }
    };

    Misc.prototype.toggleExternalApp = function toggleExternalApp(r) {
      r.Enabled = r.Enabled ? false : true;
      this.saveExternalApp(r);
    };

    Misc.prototype.saveExternalApp = function saveExternalApp(r) {
      var self = this;

      var saveText = "Saving External App: " + r.ExternalAppName + "...";

      var noty = self.helper.createNoty(saveText, 3000);
      noty.show();

      if (r.ExternalAppID == 0) {
        self.goData.postWithUrlAndData('externalapps', JSON.stringify(r), function (res) {
          r.ExternalAppID = res.ExternalAppID;
          noty.close();
        });
      } else {
        self.goData.putWithUrlAndData('externalapps', r, function (res) {
          noty.close();
        });
      }
    };

    Misc.prototype.addExternalApp = function addExternalApp() {
      var self = this;
      self.goData.getWithUrl('externalapps/new', function (res) {
        res.Enabled = true;
        self.externalapps.push(res);
      });
    };

    Misc.prototype.deleteODGOUser = function deleteODGOUser(id) {
      var self = this;
      self.goData.deleteWithUrl("odgo/admin/users?id=" + id, function (res) {
        if (res == true) {
          var indexToDelete = _.findIndex(self.odgoUsers, function (u) {
            return u.Id == id;
          });
          self.odgoUsers.splice(indexToDelete, 1);
        } else {
          var noty = self.helper.createNoty("User failed to delete.", 3000);
          noty.show();
        }
      });
    };

    Misc.prototype.addODGOUser = function addODGOUser() {
      var self = this;
      if (self.odgoUsername != null && self.odgoPassword != null) {

        var saveText = "Saving ODGO User...";

        var noty = self.helper.createNoty(saveText, 3000);
        noty.show();

        var odgoUser = {
          'UserName': self.odgoUsername,
          'Password': self.odgoPassword,
          'Admin': true,
          'TenantId': self.globals.admin.TenantId
        };

        self.goData.postWithUrlAndData('odgo/admin/users', JSON.stringify(odgoUser), function (user) {
          if (user != null) {
            self.helper.notySuccess(noty, "User: " + user.Username + " created successfuly!");
            self.odgoUsers.push(user);
          } else {
            self.helper.notyError(noty, "Failed to create user.");
          }
        });
      }
    };

    return Misc;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "autoLogoffMinutes", [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return 0;
    }
  })), _class2)) || _class);
});;
define('text!administration/pages/misc.html',[],function(){return "<template><div ref=\"mainrow\" class=\"row\"><div class=\"col-md-4\"><div class=\"card\" css=\"height: ${height}px;\"><div class=\"card-header\"><h4 class=\"d-inline-block m-0 pt-1\">Miscellaneous</h4></div><div class=\"card-body\" style=\"overflow-y:auto\"><div class=\"form-row\"><div class=\"form-group\"><label for=\"docLockDays\">Date / Document Lock Days</label> <input type=\"number\" class=\"form-control\" id=\"docLockDays\" aria-describedby=\"docLockDaysHelp\" value.bind=\"data.DockLockDays\"> <small id=\"docLockDaysHelp\" class=\"form-text text-muted\">Number of days before automatically locking a visit or document.</small></div></div><div class=\"form-row\"><div class=\"form-group\"><label for=\"appLogOffTime\">Auto Log-off</label> <input type=\"number\" class=\"form-control\" id=\"appLogOffTime\" aria-describedby=\"appLogOffTimeHelp\" value.bind=\"autoLogoffMinutes\"> <small id=\"appLogOffTimeHelp\" class=\"form-text text-muted\">Minutes before automatically logging out of application.</small></div></div><div class=\"form-row\"><div class=\"form-group\"><label for=\"otherApps\">Other Settings</label> <button type=\"button\" class=\"form-control btn btn-outline-primary mb-1\" aria-describedby=\"otherAppsHelp\" click.delegate=\"openPopup('docBuilder')\">Document Builder</button> <button type=\"button\" class=\"form-control btn btn-outline-primary mb-1\" aria-describedby=\"otherAppsHelp\" click.delegate=\"openPopup('email')\">Email Notification Manager</button> <button type=\"button\" class=\"form-control btn btn-outline-primary mb-1\" aria-describedby=\"otherAppsHelp\" click.delegate=\"openPopup('kiosk')\">Portal / Kiosk Preferences</button> <button type=\"button\" id=\"otherApps\" class=\"form-control btn btn-outline-primary mb-1\" aria-describedby=\"otherAppsHelp\" click.delegate=\"openPopup('mapper')\">Procedure Mapper</button> <button type=\"button\" id=\"otherApps\" class=\"form-control btn btn-outline-primary mb-1\" aria-describedby=\"otherAppsHelp\" click.delegate=\"openPopup('formBuilder')\">Form Builder</button> <button type=\"button\" class=\"form-control btn btn-outline-primary\" aria-describedby=\"otherAppsHelp\" click.delegate=\"openPopup('reportBuilder')\">Report Builder</button> <small id=\"otherAppsHelp\" class=\"form-text text-muted\">Additional settings...</small></div></div></div></div></div><div class=\"col-md-8 pl-0\"><div class=\"row\"><div class=\"col-md-12\"><div class=\"card mb-3\"><div class=\"card-header\"><h4 class=\"d-inline-block m-0 pt-1\">External Apps</h4><i class=\"fa fa-plus fa-2x float-right text-primary\" click.delegate=\"addExternalApp()\"></i></div><div class=\"card-body\" style=\"overflow-y:auto\" css=\"height:${halfHeight}px;\"><template repeat.for=\"r of externalapps\"><div class=\"${r.altRow ? 'alert-secondary':''}\"><div class=\"d-flex flex-wrap p-2 border-bottom\"><div class=\"pr-2\"><i class=\"fa ${r.Enabled ? 'fa-check-square-o' : 'fa-square-o'} fa-2x\" click.delegate=\"toggleExternalApp(r)\"></i></div><div class=\"pr-2\"><input type=\"text\" placeholder=\"name\" class=\"form-control\" value.bind=\"r.ExternalAppName\" blur.trigger=\"saveExternalApp(r)\"></div><div class=\"pr-2 flex-fill\"><input type=\"text\" placeholder=\"path\" class=\"form-control\" value.bind=\"r.ExternalAppPathOrUrl\" blur.trigger=\"saveExternalApp(r)\"></div><div><button type=\"button\" class=\"form-control btn btn-danger\" click.delegate=\"deleteApp(r, $index)\">Delete</button></div></div></div></template></div></div></div></div><div class=\"row\"><div class=\"col-md-4\"><div class=\"card\"><div class=\"card-header\"><h4 class=\"d-inline-block m-0 pt-1\">ODGO</h4><button class=\"btn btn-sm btn-primary float-right\" type=\"button\" click.delegate=\"openPopup('odgo')\">Open</button></div><div class=\"card-body\" style=\"overflow-y:auto\" css=\"height:${halfHeight}px;\"><form><div if.bind=\"odgoUsers.length == 0\" class=\"form-row align-items-center\"><div class=\"input-group\"><input type=\"text\" class=\"form-control\" placeholder=\"username\" aria-label=\"username\" aria-describedby=\"basic-addon2\" value.bind=\"odgoUsername\"> <input type=\"password\" class=\"form-control\" placeholder=\"password\" aria-label=\"password\" aria-describedby=\"basic-addon2\" value.bind=\"odgoPassword\"><div class=\"input-group-append\"><button class=\"btn btn-outline-primary\" type=\"button\" click.delegate=\"addODGOUser()\">Add</button></div></div></div></form><ul class=\"list-group list-group-flush\"><li repeat.for=\"u of odgoUsers\" class=\"list-group-item d-flex justify-content-between align-items-center pl-1\"> ${u.Username} <i class=\"fa fa-trash-o fa-2x text-danger\" click.delegate=\"deleteODGOUser(u.Id)\"></i></li></ul></div></div></div><div class=\"col-md-8 pl-0\"><div class=\"card\"><div class=\"card-header\"><h4 class=\"d-inline-block m-0 pt-1\">ERx</h4></div><div class=\"card-body\" style=\"overflow-y:auto\" css=\"height:${halfHeight}px;\"><div class=\"form-row\"><div class=\"form-group col-md-6\"><label for=\"erxvendorname\">Vendor Name</label> <input type=\"text\" class=\"form-control\" aria-describedby=\"erxvendorname\" value.bind=\"data.ERxVendorName\"></div><div class=\"form-group col-md-6\"><label for=\"erxvendorpass\">Vendor Password</label> <input type=\"text\" class=\"form-control\" aria-describedby=\"erxvendorpass\" value.bind=\"data.ERxVendorPassword\"></div></div><div class=\"form-row\"><div class=\"form-group col-md-6\"><label for=\"erxpracticename\">Practice Name</label> <input type=\"text\" class=\"form-control\" aria-describedby=\"erxpracticename\" value.bind=\"data.ERxPracticeName\"></div><div class=\"form-group col-md-6\"><label for=\"erxpracticeuser\">Practice Username</label> <input type=\"text\" class=\"form-control\" aria-describedby=\"erxpracticeuser\" value.bind=\"data.ERxPracticeUserName\"></div></div><div class=\"form-row\"><div class=\"form-group col-md-6\"><label for=\"erxsystemname\">System Name</label> <input type=\"text\" class=\"form-control\" aria-describedby=\"erxsystemname\" value.bind=\"data.ERxSystemName\"></div></div></div></div></div></div></div></div></template>";});;
define('administration/pages/roles',["exports", "aurelia-dependency-injection", "../../helpers/helper", "../../helpers/http", "../../data/go/data", "lodash", "../../go/popupHelper"], function (exports, _aureliaDependencyInjection, _helper, _http, _data, _lodash, _popupHelper) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Roles = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Area = function Area(name, selected) {
    _classCallCheck(this, Area);

    this.name = name;
    this.selected = selected;
  };

  var Role = function Role(name, data) {
    _classCallCheck(this, Role);

    this.name = name;
    this.selectable = false;
    this.areas = [];
    this.data = data;
  };

  var Roles = exports.Roles = (_dec = (0, _aureliaDependencyInjection.inject)(_helper.helper, _http.http, _data.Data, _popupHelper.PopupHelper), _dec(_class = function () {
    function Roles(helper, http, Data, PopupHelper) {
      _classCallCheck(this, Roles);

      this.roles = [];
      this.areas = [];
      this.selectedRole = null;
      this.enableEdit = false;

      this.helper = helper;
      this.http = http;
      this.goData = Data;
      this.popupHelper = PopupHelper;
    }

    Roles.prototype.activate = function activate(obj) {
      var self = this;
      self.data = obj.data;
      self.setup();
    };

    Roles.prototype.setup = function setup() {
      var self = this;

      self.height = window.innerHeight - 60;

      var roleObj = self.getRoleObject();
      var areaKeys = Object.keys(roleObj);
      for (var i = 0; i < areaKeys.length; i++) {
        self.areas.push(new Area(areaKeys[i], false));
      }

      self.goData.getWithUrl('roles', function (res) {
        for (var p = 0; p < res.length; p++) {
          self.addRole(res[p]);
        }
      });
    };

    Roles.prototype.addRole = function addRole(role) {
      var self = this;
      if (role.Json != null) {
        var newRole = new Role(role.RoleName, role);
        var listObj = JSON.parse(role.Json);
        var keys = Object.keys(listObj);
        var vals = Object.values(listObj);

        for (var i = 0; i < keys.length; i++) {

          var selected = 0;
          if (vals[i] != null && vals[i] != '') {
            selected = vals[i];
          }
          var aArea = new Area(keys[i], selected);
          newRole.areas.push(aArea);
        }

        this.roles.push(newRole);
      } else {

        var tRole = new Role(role.RoleName, role);

        var tkeys = Object.keys(role);
        var tvals = Object.values(role);
        for (var _i = 0; _i < tkeys.length; _i++) {
          var aKey = tkeys[_i];
          if (aKey != 'RoleID' && aKey != 'RoleName' && aKey != 'Json' && aKey != 'OD_Users') {
            var _selected = 0;
            if (tvals[_i] != null && tvals[_i] != '') {
              _selected = tvals[_i];
            }
            var _aArea = new Area(aKey, _selected);
            tRole.areas.push(_aArea);
          }
        }

        this.roles.push(tRole);
      }
    };

    Roles.prototype.getRoleObject = function getRoleObject() {
      return JSON.parse('{"AdminAccess":false,"VisitManagement":false,"Clinical":true,"RX":false,"PatientDemographics":true,"DocumentGeneration":false,"FileMaintenance":false,"Location":false,"DocumentView":true,"DocumentModify":true,"DocumentEditor":false,"ImagingAdd":true,"ImagingModify":true,"ImagingAdmin":true,"PatientAlerts":false,"DeleteHistory":false,"PatientPrivacyAccess":false,"ViewAllUserTasks":false,"DeleteTasks":false}');
    };

    Roles.prototype.roleClick = function roleClick(role) {
      var self = this;
      self.selectedRole = role;
      self.enableEdit = true;
      for (var g = 0; g < self.roles.length; g++) {
        if (self.roles[g].name == role.name) {
          self.roles[g].selected = true;
        } else {
          self.roles[g].selected = false;
        }
      }
    };

    Roles.prototype.addArea = function addArea(a) {
      var self = this;
      if (self.selectedRole) {
        for (var g = 0; g < self.selectedRole.areas.length; g++) {
          var aArea = self.selectedRole.areas[g];
          if (aArea.name == a.name) {
            return;
          }
        }
        self.selectedRole.areas.push(a);
      }
    };

    Roles.prototype.deleteArea = function deleteArea(a) {
      var self = this;
      if (self.selectedRole) {
        for (var g = 0; g < self.selectedRole.areas.length; g++) {
          var aArea = self.selectedRole.areas[g];
          if (aArea.name == a.name) {
            self.selectedRole.areas.splice(g, 1);
          }
        }
      }
    };

    Roles.prototype.update = function update() {
      var self = this;
      if (self.selectedRole) {
        self.updateSelectedRoleWithAreas();
      }
    };

    Roles.prototype.newRoleClick = function newRoleClick() {
      var self = this;
      self.popupHelper.openGenericInputPop('Role Name', ['New Role'], null, false, function (res) {
        var aRole = new Role(res.value, null);
        self.roles.push(aRole);
        self.roleClick(aRole);
      });
    };

    return Roles;
  }()) || _class);
});;
define('text!administration/pages/roles.html',[],function(){return "<template><require from=\"../../go/customElements/myCheckbox\"></require><div class=\"row\"><div class=\"col-md-3 pr-0\" css=\"height: ${height}px;\" style=\"overflow-y:auto\"><div class=\"card\"><div class=\"card-header\"><h4 class=\"d-inline-block m-0 pt-1\">Roles</h4><i class=\"fa fa-plus text-primary fa-2x float-right\" aria-hidden=\"true\" click.delegate=\"newRoleClick()\"></i></div><ul class=\"list-group list-group-flush\"><li repeat.for=\"r of roles\" class=\"list-group-item ${r.selected ? 'active' : ''} \" click.delegate=\"roleClick(r)\">${r.name}</li></ul></div></div><div class=\"col-md-9\"><div class=\"card\" css=\"height: ${height}px;\"><h5 class=\"card-header\"> ${selectedRole.name} </h5><div class=\"card-body\" style=\"overflow-y:auto\"><div if.bind=\"!enableEdit\" style=\"position:absolute;background-color:#ffffffd4;left:0;right:0;bottom:0;top:0;z-index:5000\"></div><div class=\"form-group\"><label for=\"userid\">Role Access</label><div id=\"userid\" class=\"d-flex flex-row flex-wrap align-items-center\" style=\"border:1px solid #ced4da;border-radius:.25rem\"><div repeat.for=\"area of selectedRole.areas\" class=\"p-2 text-primary\" click.delegate=\"deleteArea(area)\"><span class=\"p-1 bg-light\"> ${area.name} <i class=\"fa fa-times float-right\" aria-hidden=\"true\"></i></span></div><div class=\"dropdown p-2 ml-auto\"><button class=\"btn\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-plus text-primary\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><a repeat.for=\"a of areas\" class=\"dropdown-item\" href=\"#\" click.delegate=\"addArea(a)\">${a.name}</a></div></div></div><small id=\"emailHelp\" class=\"form-text text-muted\">Add area to role...</small></div></div><div class=\"card-footer\"><button type=\"button\" class=\"btn btn-primary float-right\" click.delegate=\"update()\">Update</button></div></div></div></div></template>";});;
define('administration/pages/toolbar',["exports", "aurelia-framework", "../../helpers/helper", "../../helpers/http", "../../data/go/data", "../../go/popupHelper", "lodash"], function (exports, _aureliaFramework, _helper, _http, _data, _popupHelper, _lodash) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Toolbar = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var ToolbarItem = function ToolbarItem(name, icon) {
    _classCallCheck(this, ToolbarItem);

    this.name = name;
    this.icon = icon;
    this.index = 0;
  };

  var Toolbar = exports.Toolbar = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _popupHelper.PopupHelper), _dec(_class = function () {
    function Toolbar(helper, http, Data, PopupHelper) {
      _classCallCheck(this, Toolbar);

      this.sidebarItems = [];
      this.sidebarItemsMore = [];
      this.items = [];
      this.removedFromList = null;
      this.user = null;

      this.helper = helper;
      this.http = http;
      this.goData = Data;
      this.popupHelper = PopupHelper;
    }

    Toolbar.prototype.activate = function activate(obj) {
      var self = this;
      self.user = obj;
      if (self.user.Json == null || self.user.Json === 'null') {
        self.setup();
        self.updateLayout();
      } else {
        var jsonObj = JSON.parse(self.user.Json);
        this.sidebarItems = jsonObj.toolbar.items;
        this.sidebarItemsMore = jsonObj.toolbar.itemsMore;
      }
    };

    Toolbar.prototype.updateLayout = function updateLayout() {
      var jsonObj = {
        toolbar: {
          items: this.sidebarItems,
          itemsMore: this.sidebarItemsMore
        }
      };
      this.user.Json = jsonObj;
    };

    Toolbar.prototype.reorderableItemsChanged = function reorderableItemsChanged(orderedItems, change) {
      if (!this.isMaxSidebarItems(change, this.items)) {
        change.item.index = change.toIndex;
        this.updateLayout();
      }
    };

    Toolbar.prototype.reorderableSidebarItemsChanged = function reorderableSidebarItemsChanged(orderedItems, change) {
      if (!this.isMaxSidebarItems(change, this.sidebarItems)) {
        change.item.index = change.toIndex;
        this.updateLayout();
      }
    };

    Toolbar.prototype.reorderableSidebarItemsMoreChanged = function reorderableSidebarItemsMoreChanged(orderedItems, change) {
      if (!this.isMaxSidebarItems(change, this.sidebarItemsMore)) {
        change.item.index = change.toIndex;
        this.updateLayout();
      }
    };

    Toolbar.prototype.isMaxSidebarItems = function isMaxSidebarItems(change, list) {
      if (change.removedFromThisList) {
        this.removedFromList = list;

        if (this.sidebarItems.length > 6) {
          var index = _.findIndex(this.sidebarItems, function (i) {
            return i.name == change.item.name;
          });

          this.sidebarItems.splice(index, 1);
          list.splice(change.fromIndex, 0, change.item);

          var txt = "You may only have 6 items in main toolbar.";
          this.popupHelper.openGenericMessagePop(txt, "Too many items!", [], false, function (res) {});
          return true;
        } else {
          return false;
        }
      }
      return false;
    };

    Toolbar.prototype.setup = function setup() {
      var schedule = new ToolbarItem("Schedule", "fa-clock-o");
      schedule.index = 0;
      this.sidebarItems.push(schedule);

      var workflow = new ToolbarItem("Workflow", "fa-cubes");
      workflow.index = 1;
      this.sidebarItems.push(workflow);

      var prescription = new ToolbarItem("Prescription", "rx");
      prescription.index = 2;
      this.sidebarItems.push(prescription);

      var submitCharges = new ToolbarItem("Charges", "fa-usd");
      submitCharges.index = 3;
      this.sidebarItems.push(submitCharges);

      var tasking = new ToolbarItem("Messaging/Tasking", "fa-comment");
      tasking.index = 4;
      this.sidebarItems.push(tasking);

      var patientSearch = new ToolbarItem("Patient Search", "fa-search");
      patientSearch.index = 5;
      this.sidebarItems.push(patientSearch);

      var externalApps = new ToolbarItem("External Apps", "fa-link");
      externalApps.index = 6;
      this.sidebarItemsMore.push(externalApps);

      var kiosk = new ToolbarItem("Kiosk Dashboard", "fa-tachometer");
      kiosk.index = 7;
      this.sidebarItemsMore.push(kiosk);

      var phone = new ToolbarItem("Phone Call", "fa-phone");
      phone.index = 8;
      this.sidebarItemsMore.push(phone);

      var inboundFax = new ToolbarItem("Inbound Fax", "fa-fax");
      inboundFax.index = 9;
      this.sidebarItemsMore.push(inboundFax);

      var scan = new ToolbarItem("Scan", "fa-print");
      scan.index = 10;
      this.sidebarItemsMore.push(scan);

      var orders = new ToolbarItem("Orders Forms", 'fa-sticky-note-o');
      orders.index = 11;
      this.sidebarItemsMore.push(orders);
    };

    return Toolbar;
  }()) || _class);
});;
define('text!administration/pages/toolbar.html',[],function(){return "<template><div class=\"row\"><div class=\"col-md-4 pr-0\" css=\"height: ${height}px;\" style=\"overflow-y:auto\"><div class=\"card\"><div class=\"card-header\"><h4 class=\"d-inline-block m-0 pt-1\">Avail Items</h4></div><ul class=\"list-group list-group-flush\" reorderable-group-for.bind=\"items\"><li class=\"list-group-item\" reorderable-repeat.for=\"item of items\" reorderable-after-reordering=\"reorderableItemsChanged\" reorderable-group=\"toolbaritems\"><svg if.bind=\"item.icon=='rx'\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" style=\"width:16px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 1000 1000\" enable-background=\"new 0 0 1000 1000\" xml:space=\"preserve\" width=\"70%\" height=\"70%\"><g><g transform=\"translate(0.000000,224.000000) scale(0.100000,-0.100000)\"><path d=\"M6866,2080.7c-140.2-35-394.3-140.2-569.5-227.8c-284.8-144.6-538.8-389.9-3031.6-2878.2C781-3513.8,531.2-3772.2,386.7-4057c-394.3-771-381.1-1686.7,35-2400.7C1083.2-7588,2511.4-7986.6,3703-7373.3c284.8,144.6,543.2,394.3,3031.6,2878.2c2484,2488.4,2733.7,2746.8,2878.3,3031.6c613.3,1191.6,214.7,2619.8-915.6,3281.3C8202.2,2107,7422.4,2220.9,6866,2080.7z M6993.1,1204.5C7220.9,981,7199,950.4,5994.2-250c-915.6-915.6-1125.9-1108.4-1226.7-1108.4c-170.9,0-337.3,179.6-337.3,359.2c0,127,109.5,254.1,1086.5,1226.7C6489.3,1204.5,6616.3,1314,6743.4,1314C6839.8,1314,6923,1279,6993.1,1204.5z M4758.8-3023.1l1226.7-1226.7L4912.2-5327.5c-591.4-591.4-1187.2-1160.9-1331.8-1270.5C2804.9-7189.4,1736-7036,1144.6-6256.2c-416.2,552-455.6,1296.7-100.8,1918.8c100.8,170.8,2396.3,2540.9,2462.1,2540.9C3523.4-1796.4,4084.2-2348.4,4758.8-3023.1z\"/></g></g></svg> <i if.bind=\"item.icon !='rx'\" class=\"fa ${item.icon}\"></i> ${item.name}</li></ul></div></div><div class=\"col-md-4 pl-2 pr-0\" css=\"height: ${height}px;\" style=\"overflow-y:auto\"><div class=\"card\"><div class=\"card-header\"><h4 class=\"d-inline-block m-0 pt-1\"><i class=\"fa fa-th mr-2\" aria-hidden=\"true\"></i>Main Toolbar</h4></div><ul class=\"list-group list-group-flush\" reorderable-group-for.bind=\"sidebarItems\"><li class=\"list-group-item\" reorderable-repeat.for=\"item of sidebarItems\" reorderable-after-reordering=\"reorderableSidebarItemsChanged\" reorderable-group=\"toolbaritems\"><svg if.bind=\"item.icon=='rx'\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" style=\"width:16px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 1000 1000\" enable-background=\"new 0 0 1000 1000\" xml:space=\"preserve\" width=\"70%\" height=\"70%\"><g><g transform=\"translate(0.000000,224.000000) scale(0.100000,-0.100000)\"><path d=\"M6866,2080.7c-140.2-35-394.3-140.2-569.5-227.8c-284.8-144.6-538.8-389.9-3031.6-2878.2C781-3513.8,531.2-3772.2,386.7-4057c-394.3-771-381.1-1686.7,35-2400.7C1083.2-7588,2511.4-7986.6,3703-7373.3c284.8,144.6,543.2,394.3,3031.6,2878.2c2484,2488.4,2733.7,2746.8,2878.3,3031.6c613.3,1191.6,214.7,2619.8-915.6,3281.3C8202.2,2107,7422.4,2220.9,6866,2080.7z M6993.1,1204.5C7220.9,981,7199,950.4,5994.2-250c-915.6-915.6-1125.9-1108.4-1226.7-1108.4c-170.9,0-337.3,179.6-337.3,359.2c0,127,109.5,254.1,1086.5,1226.7C6489.3,1204.5,6616.3,1314,6743.4,1314C6839.8,1314,6923,1279,6993.1,1204.5z M4758.8-3023.1l1226.7-1226.7L4912.2-5327.5c-591.4-591.4-1187.2-1160.9-1331.8-1270.5C2804.9-7189.4,1736-7036,1144.6-6256.2c-416.2,552-455.6,1296.7-100.8,1918.8c100.8,170.8,2396.3,2540.9,2462.1,2540.9C3523.4-1796.4,4084.2-2348.4,4758.8-3023.1z\"/></g></g></svg> <i if.bind=\"item.icon !='rx'\" class=\"fa ${item.icon}\"></i> ${item.name}</li></ul></div></div><div class=\"col-md-4 pl-2 pr-3\" css=\"height: ${height}px;\" style=\"overflow-y:auto\"><div class=\"card\"><div class=\"card-header\"><h4 class=\"d-inline-block m-0 pt-1\"><i class=\"fa fa-ellipsis-h mr-2\"></i>More Items</h4></div><ul class=\"list-group list-group-flush\" reorderable-group-for.bind=\"sidebarItemsMore\"><li class=\"list-group-item\" reorderable-repeat.for=\"item of sidebarItemsMore\" reorderable-after-reordering=\"reorderableSidebarItemsMoreChanged\" reorderable-group=\"toolbaritems\"><svg if.bind=\"item.icon=='rx'\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" style=\"width:16px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 1000 1000\" enable-background=\"new 0 0 1000 1000\" xml:space=\"preserve\" width=\"70%\" height=\"70%\"><g><g transform=\"translate(0.000000,224.000000) scale(0.100000,-0.100000)\"><path d=\"M6866,2080.7c-140.2-35-394.3-140.2-569.5-227.8c-284.8-144.6-538.8-389.9-3031.6-2878.2C781-3513.8,531.2-3772.2,386.7-4057c-394.3-771-381.1-1686.7,35-2400.7C1083.2-7588,2511.4-7986.6,3703-7373.3c284.8,144.6,543.2,394.3,3031.6,2878.2c2484,2488.4,2733.7,2746.8,2878.3,3031.6c613.3,1191.6,214.7,2619.8-915.6,3281.3C8202.2,2107,7422.4,2220.9,6866,2080.7z M6993.1,1204.5C7220.9,981,7199,950.4,5994.2-250c-915.6-915.6-1125.9-1108.4-1226.7-1108.4c-170.9,0-337.3,179.6-337.3,359.2c0,127,109.5,254.1,1086.5,1226.7C6489.3,1204.5,6616.3,1314,6743.4,1314C6839.8,1314,6923,1279,6993.1,1204.5z M4758.8-3023.1l1226.7-1226.7L4912.2-5327.5c-591.4-591.4-1187.2-1160.9-1331.8-1270.5C2804.9-7189.4,1736-7036,1144.6-6256.2c-416.2,552-455.6,1296.7-100.8,1918.8c100.8,170.8,2396.3,2540.9,2462.1,2540.9C3523.4-1796.4,4084.2-2348.4,4758.8-3023.1z\"/></g></g></svg> <i if.bind=\"item.icon !='rx'\" class=\"fa ${item.icon}\"></i> ${item.name}</li></ul></div></div></div></template>";});;
define('administration/pages/userMisc',["exports", "aurelia-framework", "../../helpers/helper", "../../helpers/http", "../../data/go/data", "../../go/popupHelper", "lodash"], function (exports, _aureliaFramework, _helper, _http, _data, _popupHelper, _lodash) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.UserMisc = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor;

  var UserMisc = exports.UserMisc = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _popupHelper.PopupHelper), _dec(_class = (_class2 = function () {
    UserMisc.prototype.erxEnabledChanged = function erxEnabledChanged(newVal, oldVal) {
      this.user.CanSendERx = newVal;
      this.user.eRx = newVal;
    };

    function UserMisc(helper, http, Data, PopupHelper) {
      _classCallCheck(this, UserMisc);

      this.user = null;

      _initDefineProp(this, "erxEnabled", _descriptor, this);

      this.helper = helper;
      this.http = http;
      this.goData = Data;
      this.popupHelper = PopupHelper;
    }

    UserMisc.prototype.activate = function activate(obj) {
      var self = this;
      self.user = obj;
      if (self.user.CanSendERx) {
        self.erxEnabled = true;
      }
    };

    return UserMisc;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "erxEnabled", [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return false;
    }
  })), _class2)) || _class);
});;
define('text!administration/pages/userMisc.html',[],function(){return "<template><div class=\"form-row\"><div class=\"form-group col-md-6\"><label>Enable E-Prescribe</label> <select value.bind=\"erxEnabled\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option model.bind=\"true\">Enabled</option><option model.bind=\"false\">Disabled</option></select></div><div if.bind=\"erxEnabled\" class=\"form-group col-md-6\"><label>E-RX Username</label> <input type=\"text\" class=\"form-control ${user.eRxUserID.length==0 || user.eRxUserID == null ? 'is-invalid' : ''}\" value.bind=\"user.eRxUserID\" aria-describedby=\"usernameError\" placeholder=\"some e-prescribe username\"><div id=\"usernameError\" class=\"invalid-feedback\">E-Prescribe username is required</div></div></div></template>";});;
define('administration/pages/users',["exports", "aurelia-dependency-injection", "aurelia-framework", "../../helpers/helper", "../../helpers/http", "../../data/go/data", "../../go/popupHelper", "lodash"], function (exports, _aureliaDependencyInjection, _aureliaFramework, _helper, _http, _data, _popupHelper, _lodash) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Users = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor;

  var Users = exports.Users = (_dec = (0, _aureliaDependencyInjection.inject)(_helper.helper, _http.http, _data.Data, _popupHelper.PopupHelper), _dec(_class = (_class2 = function () {
    Users.prototype.filterChanged = function filterChanged(newVal, oldVal) {
      this.filterUsers(newVal);
    };

    function Users(helper, http, Data, PopupHelper) {
      _classCallCheck(this, Users);

      this.users = [];
      this.filteredUsers = [];
      this.selectedUser = null;

      _initDefineProp(this, "filter", _descriptor, this);

      this.helper = helper;
      this.http = http;
      this.goData = Data;
      this.popupHelper = PopupHelper;
    }

    Users.prototype.activate = function activate() {
      this.setup();
    };

    Users.prototype.filterUsers = function filterUsers(value) {
      this.filteredUsers = _.filter(this.users, function (u) {
        return u.LastName.toLowerCase().startsWith(value.toLowerCase());
      });
    };

    Users.prototype.setup = function setup() {
      var self = this;

      var windowHeight = window.innerHeight;
      self.height = windowHeight - 157;

      self.goData.getAllUsers(function (res) {
        self.users = res;
        self.filteredUsers = res;
      });
    };

    Users.prototype.edit = function edit(user) {
      var licList = [];
      licList.push(user.LicenseType);
      this._openNewUserPop(user, licList);
    };

    Users.prototype.add = function add() {
      var self = this;
      this.openPopup(this.createNewUser());
    };

    Users.prototype.checkLicenseCount = function checkLicenseCount(callback) {
      var self = this;
      self.goData.getWithUrl('licenses', function (res) {
        var total = 0;
        if (res) {
          total = res.length;
        }
        callback(total, res);
      });
    };

    Users.prototype.getAvailableLicenses = function getAvailableLicenses(licenses) {
      var licenseList = [];
      for (var i = 0; i < licenses.length; i++) {
        var lic = licenses[i];
        if (lic.License == null) {
          licenseList.push(lic.LicenseType);
        }
      }
      return licenseList;
    };

    Users.prototype.openPopup = function openPopup(user) {
      var self = this;

      self.checkLicenseCount(function (count, licenses) {

        var availLicenses = self.getAvailableLicenses(licenses);
        if (availLicenses > 0) {
          var uniqLics = _.uniq(availLicenses);
          self._openNewUserPop(user, uniqLics);
        } else {
          self.newLicensePop(user);
        }
      });
    };

    Users.prototype._openNewUserPop = function _openNewUserPop(user, licenseList) {
      var self = this;

      var viewPath = '../administration/dialogs/newUser';
      var windowHeight = window.innerHeight - 100;
      var windowWidth = window.innerWidth;

      var width = windowWidth / 3 * 2;
      var left = windowWidth / 5;

      var options = {
        closeActiveDialog: false
      };

      var model = {
        "user": user,
        "licenses": licenseList
      };

      var title = user.UserID == 0 ? 'New User' : 'Update User';

      self.popupHelper.openViewModelPop(viewPath, model, title, width, windowHeight, 50, left, options, function (user, res) {
        if (user.hasOwnProperty("cancelled")) {
          return;
        } else if (res && res.wasCancelled) {
          self.users.push(user);
        } else {
          self.save(user);
        }
      });
    };

    Users.prototype.newLicensePop = function newLicensePop(user) {
      var self = this;
      var message = "You have used all your exisitng User Licenses. Do you wish to create a new one?";
      var header = 'Add New User License?';
      var options = ['YES', 'NO'];
      self.popupHelper.openGenericMessagePop(message, header, options, true, function (res) {
        if (res.result == 'YES') {
          self._openNewUserPop(user, ['PRO', 'MID', 'NOREV']);
        } else {
          return;
        }
      });
    };

    Users.prototype.createNewUser = function createNewUser() {

      return {
        UserID: 0,
        UserName: "",
        password: "",
        LicenseType: null,
        FirstName: "",
        LastName: "",
        AccountEnabled: 1,
        role: null,
        ProviderID: 0,
        Json: null
      };
    };

    Users.prototype.save = function save(user) {
      var self = this;

      delete user.dialog;

      if (typeof user.Json === 'string' || user.Json instanceof String) {} else {
        user.Json = JSON.stringify(user.Json);
      }

      if (user.UserID == 0) {
        self.goData.getWithUrl('license', function (lic) {
          if (lic) {
            lic.LicenseType = user.LicenseType;

            var userLicense = {
              'License': lic,
              'UserID': user.UserID,
              'UserName': user.UserName,
              'Password': user.password,
              'LicenseType': user.LicenseType,
              'FirstName': user.FirstName,
              'LastName': user.LastName,
              'AccountEnabled': user.AccountEnabled,
              'Role': user.role
            };

            self.goData.postWithUrlAndData('users/license', JSON.stringify(userLicense), function (res) {
              self.users.push(res);
            });
          }
        });
      } else {
        if (user.updatePassword) {
          delete user.updatePassword;
          self.goData.putWithUrlAndData('users/newpassword', user, function (res) {});
        } else {
          self.goData.putWithUrlAndData('users', user, function (res) {});
        }
      }
    };

    return Users;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "filter", [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!administration/pages/users.html',[],function(){return "<template><div class=\"card\"><div class=\"card-header d-flex align-items-center\"><h4 class=\"d-inline-block m-0 pt-1\">Users</h4><i class=\"fa fa-filter text-secondary ml-auto mr-1\" aria-hidden=\"true\"></i> <input type=\"text\" style=\"width:250px\" placeholder=\"LastName...\" class=\"form-control mr-2\" value.bind=\"filter\"> <i class=\"fa fa-plus text-primary fa-2x\" aria-hidden=\"true\" click.delegate=\"add()\"></i></div><div class=\"card-body p-0\" style=\"overflow-y:auto\" css=\"height:${height}px;\"><table class=\"table table-striped table-sm\"><thead><tr><th scope=\"col\"></th><th scope=\"col\">User Name</th><th scope=\"col\">First</th><th scope=\"col\">Last</th><th scope=\"col\">Role</th></tr></thead><tbody><tr repeat.for=\"u of filteredUsers\"><th scope=\"row\"><button type=\"button\" class=\"btn btn-primary\" click.delegate=\"edit(u)\">Edit</button></th><td style=\"vertical-align:middle\">${u.UserName}</td><td style=\"vertical-align:middle\">${u.FirstName}</td><td style=\"vertical-align:middle\">${u.LastName}</td><td style=\"vertical-align:middle\">${u.role}</td></tr></tbody></table></div></div></template>";});;
define('administration/procedure-mapper',['exports', '../helpers/helper', '../helpers/http', 'aurelia-dialog', 'aurelia-framework', '../login/login'], function (exports, _helper, _http, _aureliaDialog, _aureliaFramework, _login) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.ProcedureMapper = undefined;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _dec, _class;

    var ProcedureMapper = exports.ProcedureMapper = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _aureliaDialog.DialogService), _dec(_class = function () {
        function ProcedureMapper(helper, http, DialogService) {
            _classCallCheck(this, ProcedureMapper);

            this.helper = helper;
            this.http = http;
            this.dialogService = DialogService;
            this.message = 'PROCEDURE MAPPER!!';
            this.allListCombos = [];
            this.procedures = [];
            this.needsLogin = false;
            this.selectedProc = null;
            this.procSearchTerm = '';
            this.procError = null;
            this.listComboSearchTerm = '';
            this.selectedModality = 'Select a Modality';
            this.mappings = [];
            this.selectedMapping = null;
            this.mode = '';
        }

        ProcedureMapper.prototype.searchListCombos = function searchListCombos() {
            var self = this;
            self.http.get(self.helper.getApiUrl('listcombo/search?pageSize=5&searchTerm=' + self.listComboSearchTerm + '&category=modalities%2Cexercise'), function (data) {
                self.allListCombos = data;
                console.log('LIST COMBOS', data);
            });
        };

        ProcedureMapper.prototype.searchProcedures = function searchProcedures() {
            var self = this;
            self.http.get(self.helper.getApiUrl('procedures/autocomplete?pageSize=5&searchTerm=' + self.procSearchTerm), function (data) {
                self.procedures = data;
                self.procError = null;
                console.log('PROCEDURES!', self.procedures);
            });
        };

        ProcedureMapper.prototype.getMappings = function getMappings() {
            var self = this;
            self.http.get(self.helper.getApiUrl('mapping?type=PROCEDURE-MAPPER'), function (data) {
                self.mappings = data;
                console.log('MAPPINGS!', self.mappings);
            });
        };

        ProcedureMapper.prototype.toggleAddMode = function toggleAddMode() {
            this.mode = this.mode === 'add' ? '' : 'add';
            this.procError = null;
        };

        ProcedureMapper.prototype.changeMode = function changeMode(newMode) {
            var self = this;
            if (self.mode === 'edit') {
                self.mappingSelected(null);
            }
            self.mode = newMode;
            self.procError = null;
        };

        ProcedureMapper.prototype.mappingSelected = function mappingSelected(mapping) {
            var self = this;
            if (self.selectedMapping === mapping || !mapping) {
                self.selectedMapping = null;
            } else {
                self.selectedMapping = mapping;
            }
            if (self.selectedMapping) {
                self.mode = 'edit';
            } else {
                self.mode = '';
            }
        };

        ProcedureMapper.prototype.deleteMapping = function deleteMapping() {
            var self = this;
            var mappingId = self.selectedMapping.Id;
            self.http.del(self.helper.getApiUrl('mapping?id=' + mappingId), function (data) {
                console.log('MAPPING DELETED SUCCESSFULLY!', data);
                self.mode = '';
                self.getMappings();
            });
        };

        ProcedureMapper.prototype.saveMapping = function saveMapping() {
            var self = this;

            if (!self.selectedProc) {
                self.procSearchTerm = '';
                self.procError = 'You must select a procedure from the search results.';
                return;
            }

            var modInList = false;
            for (var i = 0; i < self.allListCombos.length; i++) {
                var currentListCombo = self.allListCombos[i];

                if (!currentListCombo) {
                    continue;
                }
                if (currentListCombo.Description1 === self.listComboSearchTerm) {
                    modInList = true;
                    break;
                }
            }

            if (!modInList) {
                self.listComboSearchTerm = '';
                self.procError = 'You must select a modality from the search results.';
                return;
            }

            var mapping = {
                Type: "PROCEDURE-MAPPER",
                FromValue: self.listComboSearchTerm,
                ToValue: self.procSearchTerm,
                ToId: self.selectedProc.ProcedureID
            };
            var mappingString = JSON.stringify(mapping);
            console.log('POST DATA', mappingString);
            self.http.post(self.helper.getApiUrl('mapping'), mappingString, function (data) {
                console.log('MAPPING SAVED SUCCESSFULLY!', data);
                self.mode = '';
                self.listComboSearchTerm = '';
                self.procSearchTerm = '';
                self.selectedProc = null;
                self.procError = null;
                self.getMappings();
            }, { contentType: 'application/json' });
        };

        ProcedureMapper.prototype.procSelected = function procSelected(proc) {
            this.selectedProc = proc;
            this.procSearchTerm = proc.CptKey + ' | ' + proc.Description;
            this.procError = null;
        };

        ProcedureMapper.prototype.modSelected = function modSelected(mod) {
            this.listComboSearchTerm = mod.Description1;
            this.procError = null;
        };

        ProcedureMapper.prototype.setupData = function setupData() {
            var self = this;
            self.searchListCombos();
            self.searchProcedures();
            self.getMappings();
        };

        ProcedureMapper.prototype.activate = function activate(params) {
            var self = this;
            if (params.hasOwnProperty("jwt")) {
                self.helper.processToken(params.jwt);
                self.setupData();
            } else {
                self.needsLogin = true;
            }
        };

        ProcedureMapper.prototype.activatePopovers = function activatePopovers() {
            var popover = $('[data-toggle="popover"]');
            popover.popover();
        };

        ProcedureMapper.prototype.attached = function attached() {
            var self = this;

            self.activatePopovers();

            if (!self.needsLogin) {
                return;
            }
            self.dialogService.open({ viewModel: _login.Login, model: {} }).whenClosed(function (response) {
                self.setupData();
            });
        };

        return ProcedureMapper;
    }()) || _class);
});;
define('text!administration/procedure-mapper.html',[],function(){return "<template><div class=\"p-2 row\"><div class=\"col\"><span><h1 style=\"display:inline\">Procedure Mapper</h1><span class=\"p-2\"><i style=\"padding:0 5px 0 0;cursor:pointer\" class=\"fa fa-question-circle text-primary\" data-toggle=\"popover\" data-trigger=\"hover\" data-placement=\"bottom\" title=\"Map Modalities to Procedures\" data-content=\"This tool allows you to search for a modality and procedure to create a mapping. With a mapping in place, when a PT Daysheet is saved with the mapped modality, the mapped procedure will be added to the patient's chart with the units pre-calucated according to the '8-minute rule.'\"></i></span></span></div></div><div class=\"p-2 row\"><div class=\"col d-flex justify-content-end\"><template if.bind=\"mode === 'edit'\"><button click.delegate=\"deleteMapping()\" class=\"btn btn-danger mr-1\">Delete Mapping</button> <button click.delegate=\"changeMode('')\" class=\"btn btn-outline-secondary\">Cancel</button></template><template if.bind=\"mode === 'add'\"><div class=\"d-flex flex-column\"><div class=\"d-flex justify-content-end\"><button click.delegate=\"saveMapping()\" class=\"btn btn-success mr-1\">Save Mapping</button> <button click.delegate=\"toggleAddMode()\" class=\"btn btn-outline-secondary\">Cancel</button></div><div show.bind=\"procError\" class=\"text-danger p-2\">${procError}</div></div></template><template if.bind=\"mode === ''\"><button click.delegate=\"toggleAddMode()\" class=\"btn btn-success\">Add Mapping</button></template></div></div><div class=\"p-2 row\"><div class=\"col\"><table class=\"table table-striped\"><thead><tr><th scope=\"col\">#</th><th scope=\"col\">Modality</th><th scope=\"col\">&nbsp;</th><th scope=\"col\">Procedure Code</th></tr></thead><tbody><tr show.bind=\"mode === 'add'\"><th scope=\"row\">&nbsp;</th><td><div class=\"dropdown\"><input style=\"width:90%\" class=\"dropdown-toggle\" id=\"dropdownMenu2\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" placeholder=\"search modalities\" type=\"text\" keyup.delegate=\"searchListCombos()\" value.bind=\"listComboSearchTerm\"> <i style=\"padding:0 5px 0 0;cursor:pointer\" class=\"fa fa-question-circle text-primary\" data-toggle=\"popover\" data-trigger=\"hover\" data-placement=\"bottom\" title=\"Modality Search\" data-content=\"Search for a modality to map to the procedure.\"></i><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\"><button click.delegate=\"modSelected(mod)\" class=\"dropdown-item\" type=\"button\" repeat.for=\"mod of allListCombos\">${mod.Description1}</button></div></div></td><td><i class=\"fa fa-arrow-right\"></i></td><td><div class=\"dropdown mr-1\"><input style=\"width:90%\" class=\"dropdown-toggle\" id=\"dropdownMenuOffset\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" placeholder=\"search procedures\" type=\"text\" keyup.delegate=\"searchProcedures()\" value.bind=\"procSearchTerm\"> <i style=\"padding:0 5px 0 0;cursor:pointer\" class=\"fa fa-question-circle text-primary\" data-toggle=\"popover\" data-trigger=\"hover\" data-placement=\"bottom\" title=\"Procedure Search\" data-content=\"Search for a procedure to map to the modality. You can search by CPT code or description.\"></i><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuOffset\"><div click.delegate=\"procSelected(proc)\" class=\"dropdown-item\" repeat.for=\"proc of procedures\"> ${proc.CptKey} &nbsp; | &nbsp; ${proc.Description} </div></div></div></td></tr><tr style=\"cursor:pointer\" class.bind=\"mapping == selectedMapping ? 'bg-primary text-white' : ''\" click.delegate=\"mappingSelected(mapping)\" repeat.for=\"mapping of mappings\"><th scope=\"row\">${mapping.Id}</th><td> ${mapping.FromValue} </td><td><i class=\"fa fa-arrow-right\"></i></td><td> ${mapping.ToValue} </td></tr></tbody></table></div></div></template>";});;
define('app',['exports', 'helpers/helper', 'helpers/http', './access', 'aurelia-framework', 'bootstrap'], function (exports, _helper, _http, _access, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.App = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var App = exports.App = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _access.Access), _dec(_class = function () {
    function App(helper, http, Access) {
      _classCallCheck(this, App);

      this.helper = helper;
      this.http = http;
      this.access = Access;
    }

    App.prototype.configureRouter = function configureRouter(config, router) {
      config.title = 'Phoenix Next';
      config.map([{ route: 'snomed', name: 'snomed', moduleId: 'snomed/index', nav: true, title: 'Snomed' }, { route: 'phxdatagrid', name: 'phxdatagrid', moduleId: 'PhxDataGrid/index', nav: true, title: 'PhxDataGrid' }, { route: 'fax', name: 'fax', moduleId: 'fax/index', nav: true, title: 'Fax' }, { route: 'pages', name: 'pages', moduleId: 'pages/index', nav: true, title: 'Pages' }, { route: 'implantable', name: 'implantable', moduleId: 'implantableDeviceLookup/index', nav: true, title: 'Implantable Devices' }, { route: 'phxflow', name: 'phxflow', moduleId: 'phxFlow/index', nav: true, title: 'Phoenix Flow' }, { route: 'ccda', name: 'ccda', moduleId: 'ccda/index', nav: true, title: 'CCDA' }, { route: 'checkin', name: 'phxCheckinDashboard', moduleId: 'phxCheckinDashboard/index', nav: true, title: 'Checkin' }, { route: 'kioskpreferences', name: 'kioskPreferences', moduleId: 'kioskPreferences/index', nav: true, title: 'Kiosk Preferences' }, { route: 'telemed', name: 'phxTelemed', moduleId: 'phxTelemed/index', nav: true, title: 'Telemed' }, { route: 'ptdaysheet', name: 'ptdaysheet', moduleId: 'ptdaysheet/index', nav: true, title: 'Day Sheet' }, { route: 'administration', name: 'administration', moduleId: 'administration/index', nav: true, title: 'Administration' }, { route: 'login', name: 'login', moduleId: 'login/login', nav: true, title: 'Phoenix Login' }, { route: 'go', name: 'go', moduleId: 'go/index', nav: true, title: 'GO' }, { route: 'formbuilder', name: 'formbuilder', moduleId: 'formbuilder/index', nav: true, title: 'Form Builder' }, { route: 'reportbuilder', name: 'reportbuilder', moduleId: 'reportbuilder/index', nav: true, title: 'Report Builder' }, { route: 'forgotpassword', name: 'forgotpassword', moduleId: 'login/forgotPassword', nav: true, title: 'Forgot Password' }, { route: 'updatepassword', name: 'updatepassword', moduleId: 'login/updatePassword', nav: true, title: 'Update Password' }, { route: 'odgo', name: 'odgo', moduleId: 'odgo/index', nav: true, title: 'ODGO Manager' }]);
      this.router = router;
    };

    App.prototype.activate = function activate(params) {
      var self = this;
    };

    return App;
  }()) || _class);
});;
define('text!app.html',[],function(){return "<template><require from=\"bootstrap/css/bootstrap.css\"></require><require from=\"./styles/app.css\"></require><div class=\"page-host\"><router-view></router-view></div></template>";});;
define('ccda/foreign-patient-selector',['exports', 'aurelia-framework', 'aurelia-dialog', '../helpers/helper'], function (exports, _aureliaFramework, _aureliaDialog, _helper) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.ForeignPatientSelector = undefined;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _dec, _class;

    var ForeignPatientSelector = exports.ForeignPatientSelector = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _helper.helper), _dec(_class = function () {
        function ForeignPatientSelector(dialogController, helper) {
            _classCallCheck(this, ForeignPatientSelector);

            this.dialogController = dialogController;
            this.model = { patients: [] };
            this.helper = helper;
        }

        ForeignPatientSelector.prototype.formatDate = function formatDate(date) {
            return this.helper.getISODateToFormat(date, 'MM/DD/YYYY');
        };

        ForeignPatientSelector.prototype.patientSelected = function patientSelected(patient) {
            console.log('PATIENT SELECTED', patient);
            this.dialogController.ok(patient);
        };

        ForeignPatientSelector.prototype.activate = function activate(model) {
            if (model) {
                this.model = model;
            }
        };

        return ForeignPatientSelector;
    }()) || _class);
});;
define('text!ccda/foreign-patient-selector.html',[],function(){return "<template><ux-dialog><ux-dialog-body><h2>Click the Matched Patient to Confirm</h2><div class=\"container-fluid\"><div class=\"row\"><div class=\"col\" style=\"overflow:auto\"><table class=\"table table-bordered table-hover table-sm\"><thead class=\"thead-dark\"><tr><th>First Name</th><th>Last Name</th><th>DOB</th><th>Gender</th><th>Email</th><th>PatientID</th></tr></thead><tbody><tr click.delegate=\"patientSelected(patient)\" style=\"cursor:pointer\" repeat.for=\"patient of model.patients\"><td>${patient.NameFirst}</td><td>${patient.NameLast}</td><td>${formatDate(patient.DateOfBirth)}</td><td>${patient.Gender}</td><td>${patient.Email}</td><td>${patient.PatientID}</td></tr></tbody></table></div></div></div></ux-dialog-body></ux-dialog></template>";});;
define('ccda/index',['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var Index = exports.Index = function () {
        function Index() {
            _classCallCheck(this, Index);

            this.message = 'HELLO FROM ccda/index';
            console.log('ccda-index INDEX LOADED!');
        }

        Index.prototype.configureRouter = function configureRouter(config, router) {
            config.title = 'CCDA';
            config.map([{ route: 'selection', name: 'selection', moduleId: 'ccda/selection', nav: true, title: 'CCDA Selection' }, { route: 'reconciliation', name: 'reconciliation', moduleId: 'ccda/reconciliation', nav: true, title: 'Reconciliation' }]);
            this.router = router;
        };

        return Index;
    }();
});;
define('text!ccda/index.html',[],function(){return "<template><div class=\"container-fluid\" style=\"padding:0\"><router-view></router-view></div></template>";});;
define('ccda/patient-selector',['exports', 'aurelia-framework', 'aurelia-dialog', '../helpers/helper'], function (exports, _aureliaFramework, _aureliaDialog, _helper) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PatientSelector = undefined;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _dec, _class;

    var PatientSelector = exports.PatientSelector = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _helper.helper), _dec(_class = function () {
        function PatientSelector(dialogController, helper) {
            _classCallCheck(this, PatientSelector);

            this.dialogController = dialogController;
            this.model = { patients: [] };
            this.helper = helper;
        }

        PatientSelector.prototype.formatDate = function formatDate(date) {
            return this.helper.getISODateToFormat(date, 'MM/DD/YYYY');
        };

        PatientSelector.prototype.patientSelected = function patientSelected(patient) {
            console.log('PATIENT SELECTED', patient);
            this.dialogController.ok(patient);
        };

        PatientSelector.prototype.activate = function activate(model) {
            if (model) {
                this.model = model;
            }
        };

        return PatientSelector;
    }()) || _class);
});;
define('text!ccda/patient-selector.html',[],function(){return "<template><ux-dialog><ux-dialog-body><h2>Select Matched Patient</h2><div class=\"container-fluid\"><div class=\"row\"><div class=\"col\"><table class=\"table table-bordered table-hover table-sm\"><thead class=\"thead-dark\"><tr><th>First Name</th><th>Last Name</th><th>DOB</th><th>Email</th><th>PatientID</th></tr></thead><tbody><tr click.delegate=\"patientSelected(patient)\" style=\"cursor:pointer\" repeat.for=\"patient of model.patients\"><td>${patient.NameFirst}</td><td>${patient.NameLast}</td><td>${formatDate(patient.DOB)}</td><td>${patient.Email}</td><td>${patient.PatientID}</td></tr></tbody></table></div></div></div></ux-dialog-body></ux-dialog></template>";});;
define('ccda/reconciliation',['exports', 'aurelia-framework', 'aurelia-router', '../helpers/helper', '../helpers/http'], function (exports, _aureliaFramework, _aureliaRouter, _helper, _http) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.Reconciliation = undefined;

    function _initDefineProp(target, property, descriptor, context) {
        if (!descriptor) return;
        Object.defineProperty(target, property, {
            enumerable: descriptor.enumerable,
            configurable: descriptor.configurable,
            writable: descriptor.writable,
            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
        });
    }

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object['ke' + 'ys'](descriptor).forEach(function (key) {
            desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
            desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
            return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
            Object['define' + 'Property'](target, property, desc);
            desc = null;
        }

        return desc;
    }

    function _initializerWarningHelper(descriptor, context) {
        throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
    }

    var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2;

    var Reconciliation = exports.Reconciliation = (_dec = (0, _aureliaFramework.inject)(_aureliaRouter.Router, _helper.helper, _http.http), _dec(_class = (_class2 = function () {
        function Reconciliation(Router, helper, http) {
            _classCallCheck(this, Reconciliation);

            _initDefineProp(this, 'selectedItem', _descriptor, this);

            _initDefineProp(this, 'addedItems', _descriptor2, this);

            console.log('WELCOME TO RECONCILIATION');
            this.router = Router;
            this.message = "CCDA Reconciliation";
            this.helper = helper;
            this.http = http;
            this.patientId = null;
            this.xmlDocumentId = null;
            this.reconciledCCDA = null;
            this.locationId = null;
            this.visitCodeId = null;
            this.ConnectEhrPatient = {};
            this.PhoenixPatient = {};
            this.hasChanges = false;
            this.selectedItem = null;
            this.addedItems = [];
            this.savingMessage = "";
            this.savingInterval = null;
            this.ellipses = "";
            this.saving = false;
            this.counter = 0;
            this.addedItemSelected = false;
            this.incomingItemSelected = false;
        }

        Reconciliation.prototype.formatDate = function formatDate(date) {
            return this.helper.getISODateToFormat(date, 'MM/DD/YYYY');
        };

        Reconciliation.prototype.backClicked = function backClicked() {
            var self = this;
            self.router.navigateToRoute('selection', { VisitCodeId: self.visitCodeId, jwt: self.helper.jwt() });
        };

        Reconciliation.prototype.saveFinished = function saveFinished() {
            var self = this;
            self.counter = 0;
            clearInterval(self.savingInterval);
            self.saving = false;
            self.savingMessage = "";
            console.log('SAVE FINISHED!');
        };

        Reconciliation.prototype.startLoadingAnimation = function startLoadingAnimation(tempMessage) {
            var _this = this;

            var self = this;
            self.savingInterval = setInterval(function () {
                if (self.ellipses.length >= 3) {
                    self.ellipses = "";
                } else {
                    self.ellipses = self.ellipses + '.';
                }
                self.savingMessage = '' + tempMessage + self.ellipses;
                self.counter++;
                if (self.counter > 10) {
                    _this.saveFinished();
                }
            }, 200);
        };

        Reconciliation.prototype.saveClicked = function saveClicked() {
            var self = this;
            self.saving = true;
            self.startLoadingAnimation("Saving");

            var addedMeds = self.getAddedItemsFromArray(self.PhoenixPatient.Meds);
            var addedAllergies = self.getAddedItemsFromArray(self.PhoenixPatient.Allergies);
            var addedProblems = self.getAddedItemsFromArray(self.PhoenixPatient.Problems);

            self.saveAddedItems(addedMeds, 'rxs/list', function () {
                console.log('FINISHED SAVING MEDS!');
                self.saveAddedItems(addedAllergies, 'patientallergies/list', function () {
                    console.log('FINISHED SAVING ALLERGIES!');
                    self.saveAddedItems(addedProblems, 'patientdiagnosis/list', function () {
                        console.log('FINISHED SAVING PROBLEMS!');
                        self.saveFinished();
                        self.getInitialData();
                    });
                });
            });
        };

        Reconciliation.prototype.saveAddedItems = function saveAddedItems(addedItems, url, callback) {
            console.log('SAVEADDEDITEMS', addedItems);
            if (!addedItems || addedItems.length === 0) {
                callback();
                return;
            }
            var self = this;
            var finalUrl = self.helper.getApiUrl(url);
            var formattedData = JSON.stringify(addedItems);

            self.http.post(finalUrl, formattedData, function (results) {
                console.log('SAVED SUCCESSFULLY!', results);
                self.updateCCDA(url);
                if (callback) {
                    callback();
                }
            }, { contentType: 'application/json' });
        };

        Reconciliation.prototype.receiveClicked = function receiveClicked() {
            var self = this;
            var url = 'connectehrreconciledccda';
            var finalUrl = self.helper.getApiUrl(url);
            var updatedReconciledCCDA = self.reconciledCCDA;
            updatedReconciledCCDA.VisitCodeID = self.visitCodeId;
            var formattedData = JSON.stringify(updatedReconciledCCDA);

            self.http.post(finalUrl, formattedData, function (result) {
                console.log('SAVED SUCCESSFULLY!', result);
                self.reconciledCCDA = result;
            }, { contentType: 'application/json' });
        };

        Reconciliation.prototype.updateCCDA = function updateCCDA(addedItemsUrl) {
            var self = this;
            console.log('UPDATECCDA', addedItemsUrl);
            console.log('UPDATECCDA', self.reconciledCCDA);
            var finalUrl = self.helper.getApiUrl('connectehrreconciledccda');

            switch (addedItemsUrl) {
                case 'patientdiagnosis/list':
                    self.reconciledCCDA.ProblemsReconciled = true;
                    break;
                case 'rxs/list':
                    self.reconciledCCDA.MedsReconciled = true;
                    break;
                case 'patientallergies/list':
                    self.reconciledCCDA.AllergiesReconciled = true;
                    break;
            }

            var formattedData = JSON.stringify(self.reconciledCCDA);
            self.http.post(finalUrl, formattedData, function (data) {
                console.log('SAVED CCDA SUCCESSFULLY!', data);
                self.reconciledCCDA = data;
            }, { contentType: 'application/json' });
        };

        Reconciliation.prototype.getAddedItemsFromArray = function getAddedItemsFromArray(currentArray) {
            if (!currentArray) return null;
            var results = [];
            for (var i = 0; i < currentArray.length; i++) {
                var currentItem = currentArray[i];
                if (currentItem.state && currentItem.state === 'added') {
                    console.log('GETTING ADDED ITEM', currentItem);
                    results.push(currentItem);
                }
            }
            return results;
        };

        Reconciliation.prototype.isSelected = function isSelected(type, data) {
            var self = this;
            var result = 'list-group-item';
            if (self.selectedItem != null && self.selectedItem.type == type && self.selectedItem.id == data.IngID) {
                return result;
            }
            return 'selected-item ' + result;
        };

        Reconciliation.prototype.finalItemClicked = function finalItemClicked(type, data) {
            var self = this;
            if (data.state && data.state === 'added') {
                self.incomingItemClicked(type, data);
            }
        };

        Reconciliation.prototype.incomingItemClicked = function incomingItemClicked(type, data) {
            var self = this;
            if (self.selectedItem && self.selectedItem.type === type && self.selectedItem.id === data.lngID) {
                console.log('ITEM IS THE SAME AS SELECTED ITEM');
                self.selectedItem = null;
                self.incomingItemSelected = false;
                self.addedItemSelected = false;
                return;
            }
            self.selectedItem = {};
            self.selectedItem.type = type;
            self.selectedItem.data = data;
            self.selectedItem.id = data.lngID;
            if (data.state && data.state === 'added') {
                self.addedItemSelected = true;
                self.incomingItemSelected = false;
            } else {
                self.incomingItemSelected = true;
                self.addedItemSelected = false;
            }
        };

        Reconciliation.prototype.removeClicked = function removeClicked() {
            var self = this;
            var foundSelectedItem = null;
            for (var i = 0; i < self.addedItems.length; i++) {
                var currentItem = self.addedItems[i];
                if (currentItem.type === self.selectedItem.type && currentItem.id === self.selectedItem.id) {
                    console.log('found added item', currentItem);
                    foundSelectedItem = currentItem;
                    self.addedItems.splice(i, 1);
                    break;
                }
            }
            var relevantArray = null;
            switch (self.selectedItem.type) {
                case 'med':
                    relevantArray = self.PhoenixPatient.Meds;
                    break;
                case 'allergy':
                    relevantArray = self.PhoenixPatient.Allergies;
                    break;
                case 'problem':
                    relevantArray = self.PhoenixPatient.Problems;
                    break;
            }
            for (var i = 0; i < relevantArray.length; i++) {
                var _currentItem = relevantArray[i];
                if (_currentItem && _currentItem.lngID === self.selectedItem.id) {
                    relevantArray.splice(i, 1);
                    break;
                }
            }
            self.incomingItemClicked(self.selectedItem.type, self.selectedItem.data);
        };

        Reconciliation.prototype.addClicked = function addClicked() {
            var self = this;
            var containsItem = false;
            for (var i = 0; i < self.addedItems.length; i++) {
                var currentItem = self.addedItems[i];
                if (currentItem.type === self.selectedItem.type && currentItem.id === self.selectedItem.id) {
                    containsItem = true;
                    break;
                }
            }
            if (!containsItem) {
                var addedItem = {
                    type: self.selectedItem.type,

                    id: self.selectedItem.id
                };
                var data = self.selectedItem.data;
                switch (self.selectedItem.type) {
                    case 'med':
                        var med = {
                            RXPatientID: null,
                            DispenseAs: 0,
                            LastRefill: data.LastModified,
                            PatientID: self.PhoenixPatient.Patient.PatientID,

                            RX_Status: 'E',
                            Refills: 0,
                            RX_Date: data.LastModified,
                            RX_Description: 'None',
                            RxNormCode: data.Code,
                            RX_Dosage: data.Dose,
                            RX_QTY: 0,
                            RX_Sig: data.MedicationName,
                            RX_Type: '',
                            RX_Name: data.MedicationName,
                            RX_Route: data.Route,
                            RX_Notes: data.AuthorInfo,
                            UserID: 0,
                            Reconciled: new Date(),
                            Show: false,
                            state: 'added',
                            lngID: addedItem.id
                        };
                        self.PhoenixPatient.Meds.push(med);
                        addedItem.data = med;
                        break;
                    case 'allergy':
                        var severity = null;
                        switch (data.Severity) {
                            case "Mild":
                                severity = "255604002";
                                break;
                            case "Moderate":
                            case "Mild to moderate":
                                severity = "6736007";
                                break;
                            case "Severe":
                                severity = "24484000";
                                break;
                            default:
                                break;
                        }
                        var allergy = {
                            PatientID: self.PhoenixPatient.Patient.PatientID,
                            Substance: data.AllergySubstance,
                            RxNormCode: data.AllergyCode,
                            Reaction: data.Reaction,
                            Status: 'A',
                            Severity: severity,
                            Show: false,
                            DateCreated: data.LastModified,
                            Reconciled: new Date(),

                            state: 'added',
                            lngID: addedItem.id
                        };
                        console.log('ALLERGY', allergy);
                        self.PhoenixPatient.Allergies.push(allergy);
                        addedItem.data = allergy;
                        break;
                    case 'problem':
                        var problem = {
                            PatientID: self.PhoenixPatient.Patient.PatientID,

                            ExamDateTime: data.LastModified,
                            DateModified: data.LastModified,
                            DateCreated: data.LastModified,
                            Status: 'A',
                            Reconciled: new Date(),
                            OD_Patient_Dx_Sno: {
                                SnoConcept: data.Code,
                                ConceptDescription: data.ProblemDescription
                            },
                            state: 'added',
                            lngID: addedItem.id
                        };
                        self.PhoenixPatient.Problems.push(problem);
                        addedItem.data = problem;
                        break;
                }
                self.addedItems.push(addedItem);
                self.hasChanges = true;
                self.incomingItemClicked(self.selectedItem.type, self.selectedItem.data);
                self.selectedItem = null;
            }
        };

        Reconciliation.prototype.attached = function attached() {
            console.log('RECONCILIATION WAS ATTACHED!!!');

            var self = this;
        };

        Reconciliation.prototype.getInitialData = function getInitialData() {
            var self = this;
            self.startLoadingAnimation("Loading");
            var url = self.helper.getApiUrl('connectehr/patientdemographics?patientId=' + self.patientId + '&xmlDocumentId=' + self.xmlDocumentId + '&locationId=' + self.locationId);
            self.http.get(url, function (data) {
                console.log('PATIENT', data);
                self.ConnectEhrPatient = data.ConnectEhrPatient;
                self.PhoenixPatient = data.PhoenixPatient;
                self.reconciledCCDA = data.CCDA;
                self.saveFinished();
            });
        };

        Reconciliation.prototype.activate = function activate(params, arg2) {
            var self = this;
            if (params.hasOwnProperty('jwt')) {
                self.helper.processToken(params.jwt);
            }
            if (params.hasOwnProperty('patientId')) {
                self.patientId = params.patientId;
            }
            if (params.hasOwnProperty('xmlDocumentId')) {
                self.xmlDocumentId = params.xmlDocumentId;
            }
            if (params.hasOwnProperty('locationId')) {
                self.locationId = params.locationId;
            }
            if (params.hasOwnProperty('visitCodeId')) {
                self.visitCodeId = params.visitCodeId;
            }
            self.getInitialData();
        };

        return Reconciliation;
    }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'selectedItem', [_aureliaFramework.observable], {
        enumerable: true,
        initializer: null
    }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'addedItems', [_aureliaFramework.observable], {
        enumerable: true,
        initializer: null
    })), _class2)) || _class);
});;
define('text!ccda/reconciliation.html',[],function(){return "<template><style type=\"text/css\">.outline{border:1px solid #000}.card-list{margin-bottom:20px}.selected-item{color:#fff;background-color:#007bff!important}.selected-added-item{color:#fff;background-color:#dc3545!important}.waiting{position:absolute;top:0;right:0;bottom:0;left:0}.waiting-background{opacity:.5;position:absolute;top:0;right:0;bottom:0;left:0;background-color:#fff}.added{background-color:#90ee90}</style><div style=\"display:flex;flex-direction:row;flex:1;justify-content:space-between\"><h1 style=\"display:inline\" class=\"p-3\">${message}</h1><div style=\"padding:20px\"><div class=\"card\"><div class=\"card-body\" style=\"padding:3px 3px 3px 10px\"><label>receive this document for the current visit?</label> <button disabled.bind=\"reconciledCCDA.VisitCodeID > 0\" click.delegate=\"receiveClicked()\" class=\"m-3 btn btn-info\">${reconciledCCDA.VisitCodeID === 0 ? 'yes, receive' : 'received'}</button></div></div></div></div><button click.delegate=\"backClicked()\" class=\"m-3 btn btn-info\">Back</button><div class=\"container-fluid\"><div class=\"row\"><div class=\"col\"><table class=\"table\"><thead><tr><th>First Name</th><th>Last Name</th><th>DOB</th><th>Gender</th><th>PatientId</th></tr></thead><tbody><tr><td>${PhoenixPatient.Patient.NameFirst}</td><td>${PhoenixPatient.Patient.NameLast}</td><td>${PhoenixPatient.Patient.DOB}</td><td>${PhoenixPatient.Patient.Sex}</td><td>${PhoenixPatient.Patient.PatientID}</td></tr></tbody></table></div></div><div class=\"row\"><div class=\"col\"><div class=\"card\"><h3 class=\"card-header\">Incoming</h3><div class=\"card-body\"><div><span style=\"float:left\"><h4>Medications:</h4></span></div><table class=\"table table-sm table-hover table-bordered\"><thead class=\"thead-dark\"><tr><th>Name</th><th>Code</th><th>Prescribed By</th><th>Modified</th></tr></thead><tbody><tr repeat.for=\"medication of ConnectEhrPatient.tblMedications\" click.delegate=\"incomingItemClicked('med', medication)\" class=\"${selectedItem && selectedItem.data == medication ? 'selected-item' : ''}\"><td>${medication.MedicationName}</td><td>${medication.Code}</td><td>${medication.AuthorInfo}</td><td>${formatDate(medication.LastModified)}</td></tr></tbody></table><h4>Allergies:</h4><table class=\"table table-sm table-hover table-bordered\"><thead><tr class=\"thead-dark\"><th>Substance</th><th>Code</th><th>Reaction</th><th>Modified</th></tr></thead><tbody><tr repeat.for=\"allergy of ConnectEhrPatient.tblMedicationAllergies\" click.delegate=\"incomingItemClicked('allergy', allergy)\" class=\"${selectedItem && selectedItem.data == allergy ? 'selected-item' : ''}\"><td> ${allergy.AllergySubstance} </td><td> ${allergy.AllergyCode} </td><td> ${allergy.Reaction} </td><td> ${formatDate(allergy.LastModified)} </td></tr></tbody></table><h4>Problems:</h4><table class=\"table table-sm table-hover table-bordered\"><thead><tr class=\"thead-dark\"><th>Description</th><th>Code</th><th>Modified</th></tr></thead><tbody><tr repeat.for=\"problem of ConnectEhrPatient.tblProblems\" click.delegate=\"incomingItemClicked('problem', problem)\" class=\"${selectedItem && selectedItem.data == problem ? 'selected-item' : ''}\"><td> ${problem.ProblemDescription} </td><td> ${problem.Code} </td><td> ${formatDate(problem.LastModified)} </td></tr></tbody></table></div><div class=\"card-footer\"></div></div></div><div class=\"col-1\"><button class=\"mb-2 btn btn-primary\" click.delegate=\"addClicked()\" disabled.bind=\"!incomingItemSelected\">Add -></button> <button class=\"btn btn-danger\" click.delegate=\"removeClicked()\" disabled.bind=\"!addedItemSelected\">Remove</button></div><div class=\"col\"><div class=\"card\"><div style=\"padding:10px 10px 5px 20px\" class=\"card-header\"><h3 class=\"mt-1 float-left\">Patient Record</h3><button click.delegate=\"saveClicked()\" disabled.bind=\"!hasChanges\" class=\"d-inline float-right btn btn-success\">Save</button></div><div class=\"card-body\"><div><span style=\"float:left\"><h4>Medications:</h4></span><span if.bind=\"!reconciledCCDA.MedsReconciled\" style=\"float:right;margin:0 0 10px 0\"><button click.delegate=\"updateCCDA('rxs/list')\" class=\"btn btn-info\">Reconcile</button> </span><span if.bind=\"reconciledCCDA.MedsReconciled\" style=\"float:right;margin:0 0 10px 0;color:green\">Reconciled!</span></div><table class=\"table table-sm table-hover table-bordered\"><thead class=\"thead-dark\"><tr><th>Name</th><th>Code</th><th>Prescribed By</th><th>Modified</th></tr></thead><tbody><tr repeat.for=\"medication of PhoenixPatient.Meds\" click.delegate=\"finalItemClicked('med', medication)\" class=\"${selectedItem && selectedItem.data == medication ? 'selected-added-item' : ''} ${medication.state}\"><td> ${medication.RX_Sig} </td><td> ${medication.RxNormCode} </td><td> ${medication.RX_Notes} </td><td> ${formatDate(medication.RX_Date)} </td></tr></tbody></table><div><span style=\"float:left\"><h4>Allergies:</h4></span><span if.bind=\"!reconciledCCDA.AllergiesReconciled\" style=\"float:right;margin:0 0 10px 0\"><button click.delegate=\"updateCCDA('patientallergies/list')\" class=\"btn btn-info\">Reconcile</button> </span><span if.bind=\"reconciledCCDA.AllergiesReconciled\" style=\"float:right;margin:0 0 10px 0;color:green\">Reconciled!</span></div><table class=\"table table-sm table-hover table-bordered\"><thead><tr class=\"thead-dark\"><th>Substance</th><th>Code</th><th>Reaction</th><th>Modified</th></tr></thead><tbody><tr repeat.for=\"allergy of PhoenixPatient.Allergies\" click.delegate=\"finalItemClicked('allergy', allergy)\" class=\"${selectedItem && selectedItem.data == allergy ? 'selected-added-item' : ''} ${allergy.state}\"><td> ${allergy.Substance} </td><td> ${allergy.RxNormCode} </td><td> ${allergy.Reaction} </td><td> ${formatDate(allergy.DateCreated)} </td></tr></tbody></table><div><span style=\"float:left\"><h4>Problems:</h4></span><span if.bind=\"!reconciledCCDA.ProblemsReconciled\" style=\"float:right;margin:0 0 10px 0\"><button click.delegate=\"updateCCDA('patientdiagnosis/list')\" class=\"btn btn-info\">Reconcile</button> </span><span if.bind=\"reconciledCCDA.ProblemsReconciled\" style=\"float:right;margin:0 0 10px 0;color:green\">Reconciled!</span></div><table class=\"table table-sm table-hover table-bordered\"><thead><tr class=\"thead-dark\"><th>Description</th><th>Code</th><th>Modified</th></tr></thead><tbody><tr repeat.for=\"problem of PhoenixPatient.Problems\" click.delegate=\"finalItemClicked('problem', problem)\" class=\"${selectedItem && selectedItem.data == problem ? 'selected-added-item' : ''} ${problem.state}\"><td> ${problem.OD_Patient_Dx_Sno.ConceptDescription} </td><td> ${problem.OD_Patient_Dx_Sno.SnoConcept} </td><td> ${formatDate(problem.DateModified)} </td></tr></tbody></table></div><div class=\"card-footer\"></div></div></div></div></div><div show.bind=\"saving\" class=\"waiting\"><div class=\"waiting-background\"></div><h1 style=\"position:absolute;margin:auto;top:45%;left:45%;padding:20px;text-align:center\"> ${savingMessage} </h1></div></template>";});;
define('ccda/selection',['exports', 'aurelia-framework', 'aurelia-router', '../helpers/helper', '../helpers/http', 'aurelia-dialog', './patient-selector', './foreign-patient-selector'], function (exports, _aureliaFramework, _aureliaRouter, _helper, _http, _aureliaDialog, _patientSelector, _foreignPatientSelector) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Selection = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2;

  var Selection = exports.Selection = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _aureliaRouter.Router, _aureliaDialog.DialogService), _dec(_class = (_class2 = function () {
    function Selection(helper, http, Router, DialogService) {
      _classCallCheck(this, Selection);

      _initDefineProp(this, 'showReconciled', _descriptor, this);

      _initDefineProp(this, 'mode', _descriptor2, this);

      this.helper = helper;
      this.http = http;
      this.router = Router;
      this.rawCcdas = [];
      this.ccdas = [];
      this.dialogService = DialogService;
      this.locations = [];
      this.selectedLocation = null;
      this.locationsLoaded = false;
      this.loadingMessage = 'loading locations...';
      this.visitCode = null;
      this.visitCodeId = null;
      this.connectEhrPatientId = 0;
      this.visitCCDASelectionTitle = 'Visit CCDA Selection';
      this.allCCDATitle = 'All CCDAs';
      this.mode = this.visitCCDASelectionTitle;
      this.otherMode = this.allCCDATitle;
      this.totalCCDAs = 0;
      this.pageSize = 10;
      this.pageNumber = 1;
      this.pages = [];
    }

    Selection.prototype.pageClicked = function pageClicked(page) {
      var self = this;
      self.pageNumber = page;
      self.refreshCcdas();
    };

    Selection.prototype.showReconciledChanged = function showReconciledChanged(newValue, oldValue) {
      console.log('SHOW RECONCILED CHANGED, new: ' + newValue + ', old: ' + oldValue, this.showReconciled);
      this.processDisplayCcdas(newValue);
    };

    Selection.prototype.modeChanged = function modeChanged(newValue, oldValue) {
      console.log('MODE CHANGED', newValue);
    };

    Selection.prototype.modeClicked = function modeClicked() {
      var self = this;
      var tempMode = self.otherMode;
      self.otherMode = self.mode;
      self.mode = tempMode;
      self.refreshCcdas();
    };

    Selection.prototype.formatDate = function formatDate(date) {
      var self = this;
      return self.helper.getISODateToFormat(date, "MM/DD/YYYY");
    };

    Selection.prototype.ccdaClicked = function ccdaClicked(ccdaWithPatient) {
      var self = this;

      var ccda = ccdaWithPatient.xmlDocument;
      var patients = ccdaWithPatient.phoenixPatients;

      console.log('CCDA', ccda);

      if (!patients || patients.length < 1) {
        alert('No matching patient found.');
        return;
      }

      if (!self.selectedLocation.LocationID) {
        alert('You must select a location');
        return;
      } else {
        console.log('selected location', self.selectedLocation);
      }

      if (patients.length > 1) {
        self.dialogService.open({ viewModel: _patientSelector.PatientSelector, model: { patients: patients } }).whenClosed(function (response) {
          console.log('PATIENT FROM RESPONSE:', response.output);
          self.navigateToReconcilation(response.output.PatientID, ccda.EntryID, self.selectedLocation.LocationID);
        });
      } else {
        self.navigateToReconcilation(patients[0].PatientID, ccda.EntryID, self.selectedLocation.LocationID);
      }
    };

    Selection.prototype.navigateToReconcilation = function navigateToReconcilation(patientId, xmlDocumentId, locationId) {
      var self = this;
      self.router.navigateToRoute('reconciliation', { patientId: patientId, xmlDocumentId: xmlDocumentId, locationId: locationId, visitCodeId: self.visitCodeId });
    };

    Selection.prototype.attached = function attached() {
      var self = this;
    };

    Selection.prototype.setShowReconciled = function setShowReconciled() {
      this.showReconciled = !this.showReconciled;
      console.log('SET SHOW RECONCILED', this.showReconciled);
    };

    Selection.prototype.processDisplayCcdas = function processDisplayCcdas(show) {
      var self = this;
      self.ccdas = [];
      if (!show) {
        for (var i = 0; i < self.rawCcdas.length; i++) {
          var current = self.rawCcdas[i];
          if (!current.reconciled) {
            self.ccdas.push(current);
          }
        }
      } else {
        self.ccdas = self.rawCcdas;
      }
    };

    Selection.prototype.processPages = function processPages(total) {
      var self = this;
      self.totalCCDAs = total;

      var pageCount = Math.ceil(self.totalCCDAs / self.pageSize);

      var minPage = Math.ceil(self.pageNumber - 4);
      if (minPage < 1) {
        minPage = 1;
      }

      var maxPage = Math.ceil(minPage + 9);
      if (maxPage > pageCount) {
        maxPage = pageCount;
      }

      if (pageCount >= 10 && maxPage - minPage < 10) {
        minPage = maxPage - 9;
      }

      self.pages = [];

      self.pages.push({
        pageNumber: 1,
        type: 'link'
      });

      if (pageCount <= 1) {
        return;
      }

      if (minPage > 2) {
        self.pages.push({
          type: 'ellipses'
        });
      }

      if (minPage === 1) {
        minPage = 2;
      }

      for (var i = minPage; i < maxPage + 1; i++) {
        self.pages.push({
          pageNumber: i,
          type: 'link'
        });
      }

      if (pageCount > maxPage) {
        if (pageCount > maxPage + 1) {
          self.pages.push({
            type: 'ellipses'
          });
        }
      }
      if (maxPage < pageCount) {
        self.pages.push({
          pageNumber: pageCount,
          type: 'link'
        });
      }
    };

    Selection.prototype.refreshCcdas = function refreshCcdas() {
      console.log('REFRESHING CCDAS');
      var self = this;
      self.rawCcdas = [];
      self.ccdas = [];
      var url = '';
      if (self.mode === self.visitCCDASelectionTitle) {
        url = self.helper.getApiUrl('connectehr/xmldocuments/forpatient?connectEhrPatientId=' + self.connectEhrPatientId + '&phoenixPatientId=' + self.visitCode.PatientID);
      }
      if (self.mode === self.allCCDATitle) {
        url = self.helper.getApiUrl('connectehr/xmldocuments?pageSize=' + self.pageSize + '&pageNumber=' + self.pageNumber);
      }
      self.http.get(url, function (data) {
        console.log('CCDAS', data);
        self.rawCcdas = data.documents;
        self.processDisplayCcdas(self.showReconciled);
        if (self.mode === self.allCCDATitle) {
          self.processPages(data.totalResults);
        }
      });
    };

    Selection.prototype.activate = function activate(params, arg2) {
      var self = this;
      if (params.hasOwnProperty('jwt')) {
        self.helper.processToken(params.jwt);
      }
      console.log('PARAMS', params);
      if (params.hasOwnProperty('VisitCodeId')) {
        self.visitCodeId = params.VisitCodeId;
      }

      self.http.get(self.helper.getApiUrl('visitcode/' + self.visitCodeId), function (data) {
        if (data) {
          console.log('visitcode', data);
          self.visitCode = data;
          self.http.get(self.helper.getApiUrl('insecure/locations'), function (locationData) {
            if (locationData && locationData.length > 0) {
              console.log('locations', locationData);
              self.locations = locationData;
              self.locationsLoaded = true;

              console.log('VISIT LOCATIONID', data);

              for (var i = 0; i < self.locations.length; i++) {
                var currentLocation = self.locations[i];
                if (currentLocation.LocationID === self.visitCode.LocationID) {
                  self.selectedLocation = currentLocation;
                  break;
                }
              }
            } else {
              self.loadingMessage = 'No locations';
            }
          });

          self.http.get(self.helper.getApiUrl('connectehr/patientdemographics/bylocal?localPatientId=' + self.visitCode.PatientID), function (data) {
            console.log('connectehr patients', data);
            self.dialogService.open({ viewModel: _foreignPatientSelector.ForeignPatientSelector, model: { patients: data } }).whenClosed(function (response) {
              console.log('PATIENT FROM RESPONSE:', response.output);
              var connectEhrPatient = response.output;
              self.connectEhrPatientId = connectEhrPatient.PatientIdInternal;
              self.refreshCcdas();
            });
          });
        }
      });
    };

    return Selection;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'showReconciled', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'mode', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!ccda/selection.html',[],function(){return "<template><div class=\"container-fluid\"><div class=\"row\"><div class=\"col\"><div class=\"row\"><h1 class=\"p-3\">${mode}</h1></div><div class=\"row\"><div style=\"padding:0 0 0 20px;margin:-20px 0 0 0\"><a click.delegate=\"modeClicked()\" style=\"cursor:pointer;color:#0b90c4;text-decoration:underline\">${otherMode}</a></div></div></div><div class=\"col\"><div class=\"form-group\" style=\"padding:25px 0 0 0\"><p show.bind=\"locationsLoaded === false\"> ${loadingMessage} </p><select show.bind=\"locationsLoaded === true\" class=\"form-control\" value.bind=\"selectedLocation\"><option>-- Select a Location --</option><option repeat.for=\"location of locations\" model.bind=\"location\"> ${location.LocationName} </option></select><div class=\"row g-3 align-items-center\"><div class=\"col-auto\"><div class=\"form-check\"><input checked.bind=\"showReconciled\" class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckChecked\" checked=\"checked\"> <label class=\"form-check-label\" for=\"flexCheckChecked\">Show reconciled</label></div></div><div class=\"col-auto\"><button click.delegate=\"refreshCcdas()\" type=\"submit\" class=\"btn btn-primary\">Refresh</button></div></div></div></div></div></div><div class=\"container-fluid\"><div class=\"row\"><div class=\"col\"><div class=\"card\"><div class=\"card-body\"><div if.bind=\"mode === allCCDATitle\" style=\"padding:10px\"><div style=\"display:flex;justify-content:center;font-weight:700;font-size:18px\">Total CCDAs: ${totalCCDAs} </div><div style=\"display:flex;justify-content:center\"><div style=\"padding:0 10px 0 10px\" repeat.for=\"page of pages\"><div if.bind=\"page.type === 'link'\"><div click.delegate=\"pageClicked(page.pageNumber)\" if.bind=\"page.pageNumber !== pageNumber\" style=\"cursor:pointer;text-decoration:underline;color:#1e88e5\"> ${page.pageNumber} </div><div if.bind=\"page.pageNumber === pageNumber\"> ${page.pageNumber} </div></div><div if.bind=\"page.type === 'ellipses'\">...</div></div></div></div><table class=\"table table-bordered table-hover\"><thead class=\"thead-dark\"><tr><th>DocumentId</th><th>Received Time</th><th>Patient First Name</th><th>Patient Last Name</th><th>Patient DOB</th><th>Gender</th><th>Recipient</th><th>Sender</th></tr></thead><tbody><tr style=\"cursor:pointer\" repeat.for=\"ccda of ccdas\" click.delegate=\"ccdaClicked(ccda)\"><td><div> ${ccda.xmlDocument.EntryID} </div><div if.bind=\"ccda.reconciled === true\"><small style=\"color:green\">reconciled ${ccda.visit != null ? formatDate(ccda.visit.ExamDateTime) : ''} </small></div></td><td>${formatDate(ccda.xmlDocument.ReceivedTime)}</td><td if.bind=\"ccda.phoenixPatients && ccda.phoenixPatients.length > 0\"> ${ccda.xmlDocument.tblPatientDemographic.NameFirst} </td><td else><span style=\"color:red;font-weight:700\"> ${ccda.xmlDocument.tblPatientDemographic.NameFirst} </span></td><td if.bind=\"ccda.phoenixPatients && ccda.phoenixPatients.length > 0\"> ${ccda.xmlDocument.tblPatientDemographic.NameLast} </td><td else><span style=\"color:red;font-weight:700\"> ${ccda.xmlDocument.tblPatientDemographic.NameLast} </span></td><td>${formatDate(ccda.xmlDocument.tblPatientDemographic.DateOfBirth)}</td><td>${ccda.xmlDocument.tblPatientDemographic.Gender}</td><td>${ccda.xmlDocument.DirectToName}</td><td>${ccda.xmlDocument.DirectFromName}</td></tr></tbody></table></div></div></div></div></div></template>";});;
define('chatbot/action-buttons',['exports', 'aurelia-event-aggregator', 'aurelia-framework', '../helpers/http'], function (exports, _aureliaEventAggregator, _aureliaFramework, _http) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ActionButtons = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _class, _class2, _temp;

  var ActionButtons = exports.ActionButtons = (0, _aureliaFramework.autoinject)(_class = (_temp = _class2 = function () {
    function ActionButtons(eventAggregator, httpService) {
      _classCallCheck(this, ActionButtons);

      this.eventAggregator = eventAggregator;
      this.http = httpService;
      this.apiUrl = 'http://imenso-002-site5.atempurl.com/chatbot';
    }

    ActionButtons.prototype.selectAction = function selectAction(action) {
      if (action === 'office-visits') {
        this.handleChatbotOfficeVisits();
      } else if (action === 'office-visits-static') {
        this.handleStaticOfficeVisitsOpenPatient();
      } else {
        this.eventAggregator.publish('action-selected', { action: action });
      }
    };

    ActionButtons.prototype.handleChatbotOfficeVisits = function handleChatbotOfficeVisits() {
      this.eventAggregator.publish('message-sent', {
        message: 'Open office visits for Chuck Easttom',
        type: 'user',
        fromButton: true
      });

      var self = this;
      var apiOptions = {
        patientId: this.getPatientIdByName('Chuck Easttom'),
        audioFile: new File(['dummy audio content'], 'WhatsAppAudio_20_03.35.70e8f613.opus', { type: 'audio/opus' }) };

      this.callChatbotAPI('Open office visits for Chuck Easttom', apiOptions).then(function (response) {
        var responseText = typeof response === 'string' ? response : JSON.stringify(response);

        self.eventAggregator.publish('message-sent', {
          message: responseText,
          type: 'assistant'
        });

        self.eventAggregator.publish('office-visits-requested', {
          patientName: 'Chuck Easttom',
          patientId: apiOptions.patientId,
          apiResponse: responseText
        });
      }).catch(function (error) {
        console.error('Error calling chatbot API:', error);
        self.eventAggregator.publish('message-sent', {
          message: 'Sorry, I encountered an error processing your request. Please try again.',
          type: 'assistant'
        });
      });
    };

    ActionButtons.prototype.handleStaticOfficeVisitsOpenPatient = function handleStaticOfficeVisitsOpenPatient() {
      this.eventAggregator.publish('message-sent', {
        message: 'Open office visits for Chuck Easttom Static',
        type: 'user',
        fromButton: true
      });

      this.eventAggregator.publish('message-sent', {
        message: 'Opening Chuck Easttom\'s patient record with most recent visit...',
        type: 'assistant'
      });

      this.eventAggregator.publish('open-patient-static', {
        patientId: 'PAT1000000013',
        patientName: 'Chuck Easttom'
      });
    };

    ActionButtons.prototype.callChatbotAPI = function callChatbotAPI(content) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var self = this;
      return new Promise(function (resolve, reject) {
        try {
          console.log('ActionButtons: Making API call to:', self.apiUrl);
          console.log('Content:', content);
          console.log('Options:', options);

          var formData = new FormData();

          formData.append('Content', content || '');

          if (options.audioFile instanceof File) {
            formData.append('AudioFile', options.audioFile);
          }

          if (options.providerId && typeof options.providerId === 'number') {
            formData.append('ProviderId', options.providerId.toString());
          }

          if (options.patientId && typeof options.patientId === 'number') {
            formData.append('PatientId', options.patientId.toString());
          }

          console.log('ActionButtons FormData contents:');
          for (var _iterator = formData.entries(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var pair = _ref;

            console.log(pair[0] + ': ' + pair[1]);
          }

          var config = {
            processData: false,
            contentType: false,
            timeout: 30000,
            headers: {
              'Accept': 'application/json, text/plain, */*'
            }
          };

          self.http.postNoAuth(self.apiUrl, formData, function (response) {
            console.log('ActionButtons: API Response received:', response);
            try {
              if (typeof response === 'string') {
                var jsonResponse = JSON.parse(response);
                resolve(jsonResponse);
              } else {
                resolve(response);
              }
            } catch (parseError) {
              console.log('ActionButtons: Response is not JSON, returning as-is');
              resolve(response);
            }
          }, config, function (error) {
            console.error('ActionButtons HTTP Error:', {
              status: error.status,
              statusText: error.statusText,
              responseText: error.responseText,
              readyState: error.readyState
            });
            reject(new Error('API call failed: ' + error.status + ' - ' + (error.statusText || 'Network Error')));
          });
        } catch (error) {
          console.error('ActionButtons: Exception in API call:', error);
          reject(error);
        }
      });
    };

    ActionButtons.prototype.getPatientIdByName = function getPatientIdByName(patientName) {
      var patientMap = {
        'Chuck Easttom': 1000000013,
        'Sandra McCune': 1000000014
      };

      return patientMap[patientName] || null;
    };

    ActionButtons.prototype.getCurrentProviderId = function getCurrentProviderId() {
      return 1;
    };

    return ActionButtons;
  }(), _class2.inject = [_aureliaEventAggregator.EventAggregator, _http.http], _temp)) || _class;
});;
define('text!chatbot/action-buttons.html',[],function(){return "<template><div class=\"actions-container\"><button class=\"action-button\" click.delegate=\"selectAction('office-visits')\">Open office visits for Chuck Easttom</button> <button class=\"action-button\" click.delegate=\"selectAction('office-visits-static')\">Open office visits for Chuck Easttom Static</button> <button class=\"action-button\" click.delegate=\"selectAction('hip-bursitis')\">Add/Insert Hip Bursitis Protocol</button> <button class=\"action-button\" click.delegate=\"selectAction('patient-count')\">How many patients did Dr. Smith see last month?</button> <button class=\"action-button\" click.delegate=\"selectAction('compliance')\">Show my compliance with MIPS for 2025</button> <button class=\"action-button\" click.delegate=\"selectAction('close-note')\">Close office note</button> <button class=\"action-button\" click.delegate=\"selectAction('generate-note')\">Generate office note</button></div></template>";});;
define('chatbot/assistance-header',["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var AssistanceHeader = exports.AssistanceHeader = function AssistanceHeader() {
    _classCallCheck(this, AssistanceHeader);
  };
});;
define('text!chatbot/assistance-header.html',[],function(){return "<template><div class=\"header\"><div class=\"logo\"><div class=\"logo-circle\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\" fill=\"white\"/></svg></div></div><h2>How may I help you?</h2></div></template>";});;
define('chatbot/chat-input',['exports', 'aurelia-event-aggregator', 'aurelia-framework', '../helpers/http'], function (exports, _aureliaEventAggregator, _aureliaFramework, _http) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.ChatInput = undefined;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _class, _class2, _temp;

    var ChatInput = exports.ChatInput = (0, _aureliaFramework.autoinject)(_class = (_temp = _class2 = function () {
        function ChatInput(element, eventAggregator, httpService) {
            _classCallCheck(this, ChatInput);

            this.element = element;
            this.eventAggregator = eventAggregator;
            this.http = httpService;
            this.chatText = '';
            this.isRecording = false;
            this.waveformInterval = null;
            this.isLoading = false;
            this.audioFile = null;
            this.apiUrl = 'http://imenso-002-site5.atempurl.com/chatbot';
            this.useRealAPI = true;
            this.maxRetries = 2;
        }

        ChatInput.prototype.attached = function attached() {
            try {
                this.waveBars = this.element.querySelectorAll('.wave-bar');
            } catch (error) {
                console.warn('Wave bars not found:', error);
            }
        };

        ChatInput.prototype.toggleRecording = function toggleRecording() {
            this.isRecording = !this.isRecording;

            if (this.isRecording) {
                this.startWaveformAnimation();

                this.audioFile = new File(['dummy audio content'], 'WhatsAppAudio_20_03.35.70e8f613.opus', { type: 'audio/opus' });
            } else {
                this.stopWaveformAnimation();
                if (!this.chatText.trim()) {
                    this.chatText = "Voice message recorded at " + new Date().toLocaleTimeString();
                }
            }
        };

        ChatInput.prototype.startWaveformAnimation = function startWaveformAnimation() {
            if (this.waveBars && this.waveBars.length > 0) {
                var self = this;
                this.waveformInterval = setInterval(function () {
                    self.waveBars.forEach(function (bar) {
                        var height = Math.floor(Math.random() * 16) + 4;
                        bar.style.height = height + 'px';
                    });
                }, 150);
            }
        };

        ChatInput.prototype.stopWaveformAnimation = function stopWaveformAnimation() {
            if (this.waveformInterval) {
                clearInterval(this.waveformInterval);
                this.waveformInterval = null;
            }

            if (this.waveBars && this.waveBars.length > 0) {
                this.waveBars.forEach(function (bar) {
                    bar.style.height = '8px';
                });
            }
        };

        ChatInput.prototype.onTranscribeClick = function onTranscribeClick() {
            console.log('Transcribe clicked - feature to be implemented');
        };

        ChatInput.prototype.sendMessage = function sendMessage() {
            var _this = this;

            if (!this.chatText && !this.audioFile) {
                return;
            }

            if (this.isLoading) {
                console.log('Already processing a message...');
                return;
            }

            console.log('Sending message:', this.chatText);

            this.isLoading = true;

            this.eventAggregator.publish('message-sent', {
                message: this.chatText || 'Voice message',
                type: 'user'
            });

            var userMessage = this.chatText || '';

            this.chatText = '';

            var apiOptions = {
                audioFile: this.audioFile,
                providerId: 1,
                patientId: 1000000013 };
            this.audioFile = null;
            this.callChatbotAPIWithRetry(userMessage, 0, apiOptions).then(function (response) {
                _this.handleSuccessfulResponse(response, userMessage);
            }).catch(function (error) {
                _this.handleAPIError(error, userMessage);
            }).finally(function () {
                _this.isLoading = false;
            });
        };

        ChatInput.prototype.callChatbotAPIWithRetry = function callChatbotAPIWithRetry(content, retryCount) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            var self = this;
            return new Promise(function (resolve, reject) {
                self.callChatbotAPI(content, options).then(resolve).catch(function (error) {
                    console.error('API call failed (attempt ' + (retryCount + 1) + '):', error);

                    if (retryCount < self.maxRetries) {
                        console.log('Retrying... (' + (retryCount + 1) + '/' + self.maxRetries + ')');
                        setTimeout(function () {
                            self.callChatbotAPIWithRetry(content, retryCount + 1, options).then(resolve).catch(reject);
                        }, 1000 * (retryCount + 1));
                    } else {
                        reject(error);
                    }
                });
            });
        };

        ChatInput.prototype.callChatbotAPI = function callChatbotAPI(content) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var self = this;
            return new Promise(function (resolve, reject) {
                try {
                    console.log('Making API call to:', self.apiUrl);
                    console.log('Content:', content);
                    console.log('Options:', options);

                    var formData = new FormData();

                    formData.append('Content', content || '');

                    if (options.audioFile instanceof File) {
                        formData.append('AudioFile', options.audioFile);
                    }

                    if (options.providerId && typeof options.providerId === 'number') {
                        formData.append('ProviderId', options.providerId.toString());
                    }

                    if (options.patientId && typeof options.patientId === 'number') {
                        formData.append('PatientId', options.patientId.toString());
                    }

                    console.log('FormData contents:');
                    for (var _iterator = formData.entries(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                        var _ref;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref = _i.value;
                        }

                        var pair = _ref;

                        console.log(pair[0] + ': ' + pair[1]);
                    }

                    var config = {
                        processData: false,
                        contentType: false,
                        timeout: 30000,
                        headers: {
                            'Accept': 'application/json, text/plain, */*'
                        }
                    };

                    self.http.postNoAuth(self.apiUrl, formData, function (response) {
                        console.log('API Response received:', response);
                        try {
                            if (typeof response === 'string') {
                                var jsonResponse = JSON.parse(response);
                                resolve(jsonResponse);
                            } else {
                                resolve(response);
                            }
                        } catch (parseError) {
                            console.log('Response is not JSON, returning as-is');
                            resolve(response);
                        }
                    }, config, function (error) {
                        console.error('HTTP Error details:', {
                            status: error.status,
                            statusText: error.statusText,
                            responseText: error.responseText,
                            readyState: error.readyState
                        });
                        reject(new Error('API call failed: ' + error.status + ' - ' + (error.statusText || 'Network Error')));
                    });
                } catch (error) {
                    console.error('Exception in API call:', error);
                    reject(error);
                }
            });
        };

        ChatInput.prototype.handleSuccessfulResponse = function handleSuccessfulResponse(response, userMessage) {
            console.log('Processing successful API response');

            this.eventAggregator.publish('message-sent', {
                message: response,
                type: 'assistant'
            });

            this.handleSpecialResponses(userMessage, response);
        };

        ChatInput.prototype.handleAPIError = function handleAPIError(error, userMessage) {
            var _this2 = this;

            console.error('Final API error after retries:', error);

            if (this.useRealAPI) {
                console.log('API failed, using mock response as fallback...');
                this.callChatbotAPIMock(userMessage).then(function (mockResponse) {
                    _this2.eventAggregator.publish('message-sent', {
                        message: mockResponse + '\n\n(Note: Using simulated response due to API connection issue)',
                        type: 'assistant'
                    });
                    _this2.handleSpecialResponses(userMessage, mockResponse);
                }).catch(function (mockError) {
                    console.error('Mock API also failed:', mockError);
                    _this2.publishErrorMessage();
                });
            } else {
                this.publishErrorMessage();
            }
        };

        ChatInput.prototype.publishErrorMessage = function publishErrorMessage() {
            this.eventAggregator.publish('message-sent', {
                message: 'Sorry, I encountered an error processing your request. Please try again.',
                type: 'assistant'
            });
        };

        ChatInput.prototype.handleSpecialResponses = function handleSpecialResponses(userMessage, response) {
            if (userMessage.toLowerCase().includes('office visits')) {
                var contextInfo = this.extractContextFromMessage(userMessage);
                if (contextInfo.patientName) {
                    this.handleOfficeVisitsRequest(contextInfo.patientName, response);
                }
            }

            if (userMessage.toLowerCase().includes('hip bursitis')) {
                this.eventAggregator.publish('protocol-added', {
                    protocol: 'Hip Bursitis',
                    response: response
                });
            }
        };

        ChatInput.prototype.callChatbotAPIMock = function callChatbotAPIMock(content) {
            return new Promise(function (resolve, reject) {
                setTimeout(function () {
                    try {
                        var response = '';
                        var lowerContent = content.toLowerCase();

                        if (lowerContent.includes('office visits')) {
                            var patientMatch = content.match(/office visits for (.+?)$/i);
                            var name = patientMatch ? patientMatch[1].trim() : 'the patient';

                            response = 'Here are the office visits for ' + name + ':\n\n' + '• 01/15/2025 at 9:00 AM - Scheduled\n' + '• 01/18/2025 at 2:30 PM - Completed\n' + '• 01/22/2025 at 11:15 AM - Scheduled\n' + '• 01/25/2025 at 3:45 PM - Pending\n\n' + 'Would you like me to help with any of these appointments?';
                        } else if (lowerContent.includes('hip bursitis')) {
                            response = 'Hip Bursitis Protocol has been added to the patient\'s treatment plan. The protocol includes:\n\n' + '• Anti-inflammatory medication (Ibuprofen 600mg TID)\n' + '• Physical therapy exercises (3x weekly)\n' + '• Ice therapy instructions (15-20 min, 3-4x daily)\n' + '• Follow-up appointment scheduled in 2 weeks\n\n' + 'The protocol has been saved to the patient\'s chart.';
                        } else if (lowerContent.includes('patient count') || lowerContent.includes('dr. smith')) {
                            response = 'Dr. Smith saw 127 patients last month. Here\'s the breakdown:\n\n' + '• Week 1: 32 patients\n' + '• Week 2: 35 patients\n' + '• Week 3: 28 patients\n' + '• Week 4: 32 patients\n\n' + 'This represents a 12% increase from the previous month.';
                        } else if (lowerContent.includes('compliance') || lowerContent.includes('mips')) {
                            response = 'Your current MIPS compliance score is 85/100. Areas breakdown:\n\n' + '• Quality measures: 92/100 ✅\n' + '• Cost measures: 78/100 ⚠️\n' + '• Improvement activities: 85/100\n' + '• Promoting interoperability: 84/100\n\n' + 'Recommendation: Focus on cost optimization measures to improve overall score.';
                        } else if (lowerContent.includes('close note')) {
                            response = 'Office note has been successfully closed and saved to the patient\'s electronic health record. The note is now available for review and billing purposes.';
                        } else if (lowerContent.includes('generate note')) {
                            response = 'New office note has been generated based on the current patient encounter. The note includes:\n\n' + '• Chief complaint and history\n' + '• Physical examination findings\n' + '• Assessment and plan\n' + '• Recommended follow-up\n\n' + 'Please review and sign the note to complete the documentation.';
                        } else {
                            response = 'I understand your request. How can I assist you further with this matter?';
                        }

                        resolve(response);
                    } catch (error) {
                        reject(error);
                    }
                }, Math.random() * 1000 + 500);
            });
        };

        ChatInput.prototype.extractContextFromMessage = function extractContextFromMessage(message) {
            var context = {};

            var patientMatch = message.match(/(?:for|patient)\s+(.+?)(?:\s|$)/i);
            if (patientMatch) {
                var patientName = patientMatch[1].trim();

                context.patientId = this.getPatientIdByName(patientName);
                context.patientName = patientName;
            }

            return context;
        };

        ChatInput.prototype.getPatientIdByName = function getPatientIdByName(patientName) {
            var patientMap = {
                'Chuck Easttom': 1000000013,
                'Sandra McCune': 1000000014
            };

            return patientMap[patientName] || null;
        };

        ChatInput.prototype.getCurrentProviderId = function getCurrentProviderId() {
            return null;
        };

        ChatInput.prototype.getCurrentPatientId = function getCurrentPatientId() {
            return null;
        };

        ChatInput.prototype.handleOfficeVisitsRequest = function handleOfficeVisitsRequest(patientName, apiResponse) {
            this.eventAggregator.publish('office-visits-requested', {
                patientName: patientName,
                apiResponse: apiResponse,
                timestamp: new Date()
            });
        };

        ChatInput.prototype.handleKeyPress = function handleKeyPress(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                this.sendMessage();
                return false;
            }
            return true;
        };

        ChatInput.prototype.detached = function detached() {
            this.stopWaveformAnimation();
            this.isLoading = false;
        };

        return ChatInput;
    }(), _class2.inject = [Element, _aureliaEventAggregator.EventAggregator, _http.http], _temp)) || _class;
});;
define('text!chatbot/chat-input.html',[],function(){return "<template><div class=\"chat-input-container\"><div class=\"chat-input-top\"><label class=\"chat-placeholder\" show.bind=\"!chatText && !isRecording\">Ask POGO AI...</label><div class=\"voice-input\" class.bind=\"isRecording ? 'show' : ''\"><div class=\"recording-indicator\"><span class=\"recording-dot\"></span> <span class=\"recording-text\">Listening...</span></div><div class=\"waveform\"><div class=\"wave-bar\" repeat.for=\"i of 10\"></div></div></div><textarea value.bind=\"chatText\" class=\"chat-textarea\" keydown.delegate=\"handleKeyPress($event)\" placeholder=\"\" style.bind=\"isRecording ? 'display: none' : 'display: block'\">\r\n      </textarea></div><div class=\"chat-divider\"></div><div class=\"chat-input-bottom\"><button class=\"transcribe-label-btn\" click.delegate=\"onTranscribeClick()\"><svg class=\"clip-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16.5 6.5L7 16c-1.1 1.1-1.1 2.9 0 4s2.9 1.1 4 0l9.5-9.5c1.6-1.6 1.6-4.2 0-5.8s-4.2-1.6-5.8 0L6.5 13\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg> Transcribe</button><div class=\"input-controls\"><button class=\"transcribe-btn\" class.bind=\"isRecording ? 'recording' : ''\" click.delegate=\"toggleRecording()\" title=\"${isRecording ? 'Stop recording' : 'Start voice recording'}\"><svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 14c1.66 0 3-1.34 3-3V5c0-1.66-1.34-3-3-3S9 3.34 9 5v6c0 1.66 1.34 3 3 3z\" fill=\"currentColor\"/><path d=\"M17 11c0 2.76-2.24 5-5 5s-5-2.24-5-5H5c0 3.53 2.61 6.43 6 6.92V21h2v-3.08c3.39-.49 6-3.39 6-6.92h-2z\" fill=\"currentColor\"/></svg></button> <button class=\"send-btn\" click.delegate=\"sendMessage()\" title=\"Send message\"><svg class=\"send-icon\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\" fill=\"currentColor\"/></svg></button></div></div></div></template>";});;
define('chatbot/chatbot-api-handler',['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var ChatbotAPIResponseHandler = exports.ChatbotAPIResponseHandler = function () {
    function ChatbotAPIResponseHandler() {
      _classCallCheck(this, ChatbotAPIResponseHandler);
    }

    ChatbotAPIResponseHandler.parsePatientData = function parsePatientData(responseText, patientName) {
      try {
        var parsedResponse = void 0;
        try {
          parsedResponse = JSON.parse(responseText);
        } catch (e) {
          parsedResponse = this.parseTextResponse(responseText, patientName);
        }

        return this.extractPatientInfo(parsedResponse, patientName);
      } catch (error) {
        console.error('Error parsing patient data:', error);
        return null;
      }
    };

    ChatbotAPIResponseHandler.parseTextResponse = function parseTextResponse(responseText, patientName) {
      var result = {
        patientName: patientName,
        visits: [],
        success: true
      };

      var visitPattern = /(\d{2}\/\d{2}\/\d{4})\s+at\s+(\d{1,2}:\d{2}\s+[AP]M)\s+-\s+(\w+)/g;
      var match = void 0;

      while ((match = visitPattern.exec(responseText)) !== null) {
        result.visits.push({
          date: match[1],
          time: match[2],
          status: match[3]
        });
      }

      return result;
    };

    ChatbotAPIResponseHandler.extractPatientInfo = function extractPatientInfo(parsedResponse, patientName) {
      var patientInfo = {
        patientId: null,
        providerId: null,
        locationId: null,
        visits: [],
        success: false
      };

      if (parsedResponse) {
        if (parsedResponse.patientId) {
          patientInfo.patientId = parsedResponse.patientId;
        } else if (patientName === 'Chuck Easttom') {
          patientInfo.patientId = this.getKnownPatientId(patientName);
        }

        if (parsedResponse.providerId) {
          patientInfo.providerId = parsedResponse.providerId;
        }

        if (parsedResponse.locationId) {
          patientInfo.locationId = parsedResponse.locationId;
        }

        if (parsedResponse.visits && Array.isArray(parsedResponse.visits)) {
          patientInfo.visits = parsedResponse.visits;
        }

        patientInfo.success = true;
      }

      return patientInfo;
    };

    ChatbotAPIResponseHandler.getKnownPatientId = function getKnownPatientId(patientName) {
      var patientIdMap = {
        'Chuck Easttom': 'CHUCK_EASTTOM_001',
        'Sandra McCune': 'SANDRA_MCCUNE_001' };

      return patientIdMap[patientName] || null;
    };

    ChatbotAPIResponseHandler.formatVisitsForChat = function formatVisitsForChat(visits) {
      if (!visits || visits.length === 0) {
        return 'No visits found.';
      }

      var formattedVisits = 'Office visits:\n\n';
      visits.forEach(function (visit) {
        formattedVisits += '\u2022 ' + visit.date + ' at ' + visit.time + ' - ' + visit.status + '\n';
      });

      return formattedVisits;
    };

    ChatbotAPIResponseHandler.createScheduleObject = function createScheduleObject(patientInfo) {
      return {
        ProviderID: patientInfo.providerId || 0,
        LocationID: patientInfo.locationId || 1 };
    };

    return ChatbotAPIResponseHandler;
  }();
});;
define('chatbot/chatbot-overlay',['exports', 'aurelia-event-aggregator', 'aurelia-framework'], function (exports, _aureliaEventAggregator, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ChatbotOverlay = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _class3, _temp;

  var ChatbotOverlay = exports.ChatbotOverlay = (0, _aureliaFramework.autoinject)(_class = (_class2 = (_temp = _class3 = function () {
    function ChatbotOverlay(eventAggregator) {
      _classCallCheck(this, ChatbotOverlay);

      _initDefineProp(this, 'isOpen', _descriptor, this);

      _initDefineProp(this, 'showMainView', _descriptor2, this);

      _initDefineProp(this, 'showDetailView', _descriptor3, this);

      _initDefineProp(this, 'currentDetail', _descriptor4, this);

      _initDefineProp(this, 'chatMessages', _descriptor5, this);

      _initDefineProp(this, 'onClose', _descriptor6, this);

      _initDefineProp(this, 'onBack', _descriptor7, this);

      this.eventAggregator = eventAggregator;
    }

    ChatbotOverlay.prototype.closeOverlay = function closeOverlay() {
      if (this.onClose) {
        this.onClose();
      }
    };

    ChatbotOverlay.prototype.goBack = function goBack() {
      if (this.onBack) {
        this.onBack();
      }
    };

    ChatbotOverlay.prototype.handleBackdropClick = function handleBackdropClick(event) {
      if (event.target === event.currentTarget) {
        this.closeOverlay();
      }
    };

    return ChatbotOverlay;
  }(), _class3.inject = [_aureliaEventAggregator.EventAggregator], _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'isOpen', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'showMainView', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'showDetailView', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, 'currentDetail', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, 'chatMessages', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, 'onClose', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, 'onBack', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class;
});;
define('text!chatbot/chatbot-overlay.html',[],function(){return "<template><div class=\"chatbot-overlay\" show.bind=\"isOpen\" click.delegate=\"handleBackdropClick($event)\"><div class=\"chatbot-modal\"><button class=\"chatbot-close-btn\" click.delegate=\"closeOverlay()\"><svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M18 6L6 18M6 6l12 12\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg></button><div class=\"container\" show.bind=\"showMainView\"><div class=\"header-with-back\" if.bind=\"chatMessages && chatMessages.length > 0\"><button class=\"back-button\" click.delegate=\"goBack()\"><svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M19 12H5M12 19l-7-7 7-7\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg> Back</button><h2>Chat</h2></div><assistance-header show.bind=\"!chatMessages || chatMessages.length === 0\"></assistance-header><div class=\"chat-messages\" if.bind=\"chatMessages && chatMessages.length > 0\"><div class=\"chat-message\" repeat.for=\"message of chatMessages\" class.bind=\"message.type\"><span>${message.content}</span></div></div><action-buttons show.bind=\"!showDetailView && (!chatMessages || chatMessages.length === 0)\"></action-buttons><detail-view if.bind=\"showDetailView\" detail-type.bind=\"currentDetail\"></detail-view><chat-input></chat-input></div></div></div></template>";});;
define('chatbot/detail-view',['exports', 'aurelia-event-aggregator', 'aurelia-framework'], function (exports, _aureliaEventAggregator, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DetailView = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _class, _desc, _value, _class2, _descriptor, _class3, _temp;

  var DetailView = exports.DetailView = (0, _aureliaFramework.autoinject)(_class = (_class2 = (_temp = _class3 = function () {
    function DetailView(eventAggregator) {
      _classCallCheck(this, DetailView);

      _initDefineProp(this, 'detailType', _descriptor, this);

      this.eventAggregator = eventAggregator;
      this.detailTitle = '';
      this.detailContent = '';
    }

    DetailView.prototype.detailTypeChanged = function detailTypeChanged() {
      this.updateDetailContent();
    };

    DetailView.prototype.updateDetailContent = function updateDetailContent() {
      var detailMap = {
        'hip-bursitis': {
          title: 'Hip Bursitis Protocol',
          content: 'Hip Bursitis Protocol has been added to the patient\'s treatment plan.'
        },
        'patient-count': {
          title: 'Patient Count - Dr. Smith',
          content: 'Dr. Smith saw 127 patients last month.'
        },
        'compliance': {
          title: 'MIPS Compliance 2025',
          content: 'Your current MIPS compliance score is 85/100.'
        },
        'close-note': {
          title: 'Close Office Note',
          content: 'Office note has been closed and saved to patient record.'
        },
        'generate-note': {
          title: 'Generate Office Note',
          content: 'New office note has been generated and is ready for review.'
        }
      };

      var detail = detailMap[this.detailType];
      if (detail) {
        this.detailTitle = detail.title;
        this.detailContent = detail.content;
      }
    };

    DetailView.prototype.closeDetail = function closeDetail() {
      this.eventAggregator.publish('close-detail');
    };

    return DetailView;
  }(), _class3.inject = [_aureliaEventAggregator.EventAggregator], _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'detailType', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class;
});;
define('text!chatbot/detail-view.html',[],function(){return "<template><div class=\"chatbot-overlay\" show.bind=\"isOpen\" click.delegate=\"handleBackdropClick($event)\"><div class=\"chatbot-modal\"><button class=\"chatbot-close-btn\" click.delegate=\"closeOverlay()\"><svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M18 6L6 18M6 6l12 12\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg></button><div class=\"container\" show.bind=\"showMainView\"><assistance-header></assistance-header><div class=\"chat-messages\" if.bind=\"chatMessages.length > 0\"><div class=\"chat-message\" repeat.for=\"message of chatMessages\" class.bind=\"message.type\"> ${message.content} </div></div><action-buttons show.bind=\"!showDetailView && chatMessages.length === 0\"></action-buttons><detail-view if.bind=\"showDetailView\" detail-type.bind=\"currentDetail\"></detail-view><chat-input></chat-input></div></div></div></template>";});;
define('chatbot/floating-chatbot',['exports', 'aurelia-event-aggregator', 'aurelia-framework'], function (exports, _aureliaEventAggregator, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FloatingChatbot = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _class, _class2, _temp;

  var FloatingChatbot = exports.FloatingChatbot = (0, _aureliaFramework.autoinject)(_class = (_temp = _class2 = function () {
    function FloatingChatbot(eventAggregator) {
      _classCallCheck(this, FloatingChatbot);

      this.eventAggregator = eventAggregator;
      this.isOpen = false;
      this.showMainView = true;
      this.showDetailView = false;
      this.currentDetail = '';
      this.chatMessages = [];

      this.setupEventListeners();
    }

    FloatingChatbot.prototype.setupEventListeners = function setupEventListeners() {
      var _this = this;

      this.eventAggregator.subscribe('action-selected', function (data) {
        _this.handleAction(data.action);
      });

      this.eventAggregator.subscribe('close-detail', function () {
        _this.closeDetail();
      });

      this.eventAggregator.subscribe('message-sent', function (data) {
        if (data.type === 'user') {
          _this.addUserMessage(data.message);

          if (!data.fromButton) {
            _this.generateAssistantResponse(data.message);
          }
        } else if (data.type === 'assistant') {
          _this.addAssistantMessage(data.message);
        }
      });

      this.eventAggregator.subscribe('office-visits-requested', function (data) {
        console.log('FloatingChatbot: Handling chatbot office visits request');
        _this.handleOfficeVisitsRequest(data.patientName, data.apiResponse, false, null);
      });

      this.eventAggregator.subscribe('open-patient-static', function (data) {
        console.log('FloatingChatbot: Static patient opening for:', data.patientName);
      });

      this.eventAggregator.subscribe('patient-opened-successfully', function (data) {
        _this.addAssistantMessage('\u2705 Successfully opened ' + data.patientName + '\'s record. ' + (data.message || ''));
      });

      this.eventAggregator.subscribe('patient-not-found', function (data) {
        _this.addAssistantMessage('\u274C Patient ' + data.patientName + ' was not found in the current schedule. ' + (data.message || ''));
      });

      this.eventAggregator.subscribe('patient-open-error', function (data) {
        _this.addAssistantMessage('\u26A0\uFE0F Error opening ' + data.patientName + '\'s record: ' + data.error);
      });
    };

    FloatingChatbot.prototype.toggleChatbot = function toggleChatbot() {
      this.isOpen = !this.isOpen;
    };

    FloatingChatbot.prototype.closeChatbot = function closeChatbot() {
      this.isOpen = false;
      this.resetViews();
    };

    FloatingChatbot.prototype.goBackToMain = function goBackToMain() {
      this.chatMessages = [];
      this.showDetailView = false;
      this.currentDetail = '';
      this.showMainView = true;
    };

    FloatingChatbot.prototype.handleAction = function handleAction(action) {
      if (action === 'office-visits' || action === 'office-visits-static') {} else {
        this.showDetailView = true;
        this.currentDetail = action;
      }
    };

    FloatingChatbot.prototype.handleOfficeVisitsRequest = function handleOfficeVisitsRequest(patientName, apiResponse, isStatic, patientData) {
      console.log('FloatingChatbot: Handling office visits request for:', patientName);
      console.log('Static data:', isStatic);

      if (isStatic && patientData) {
        console.log('Processing static patient data:', patientData);

        this.eventAggregator.publish('static-office-visits-requested', {
          patientName: patientName,
          patientData: patientData,
          apiResponse: apiResponse
        });
      } else {}
    };

    FloatingChatbot.prototype.addUserMessage = function addUserMessage(message) {
      this.chatMessages.push({
        type: 'user',
        content: message,
        timestamp: new Date()
      });
    };

    FloatingChatbot.prototype.addAssistantMessage = function addAssistantMessage(message) {
      this.chatMessages.push({
        type: 'assistant',
        content: message,
        timestamp: new Date()
      });
    };

    FloatingChatbot.prototype.generateOfficeVisitsResponse = function generateOfficeVisitsResponse() {
      var _this2 = this;

      setTimeout(function () {
        var response = 'Chuck Easttom has the following office visits:\n\n\u2022 01/15/2025 at 9:00 AM - Scheduled\n\u2022 01/18/2025 at 2:30 PM - Completed  \n\u2022 01/22/2025 at 11:15 AM - Scheduled\n\u2022 01/25/2025 at 3:45 PM - Pending\n\nWould you like me to help you with any of these appointments or provide more details?';

        _this2.addAssistantMessage(response);
      }, 1000);
    };

    FloatingChatbot.prototype.generateAssistantResponse = function generateAssistantResponse(userMessage) {
      var _this3 = this;

      if (userMessage.toLowerCase().includes('office visits')) {
        var patientName = this.extractPatientName(userMessage);
        if (patientName) {
          this.handleOfficeVisitsRequest(patientName, 'Processing office visits request...', false, null);
        } else {
          this.generateOfficeVisitsResponse();
        }
      } else {
        setTimeout(function () {
          _this3.addAssistantMessage('I can help you with that request. What would you like me to do?');
        }, 1000);
      }
    };

    FloatingChatbot.prototype.extractPatientName = function extractPatientName(message) {
      var match = message.match(/office visits for (.+?)$/i);
      return match ? match[1].trim() : null;
    };

    FloatingChatbot.prototype.closeDetail = function closeDetail() {
      this.showDetailView = false;
      this.currentDetail = '';
    };

    FloatingChatbot.prototype.resetViews = function resetViews() {
      this.showMainView = true;
      this.showDetailView = false;
      this.currentDetail = '';
      this.chatMessages = [];
    };

    return FloatingChatbot;
  }(), _class2.inject = [_aureliaEventAggregator.EventAggregator], _temp)) || _class;
});;
define('text!chatbot/floating-chatbot.html',[],function(){return "<template><div class=\"floating-chat-button\" click.delegate=\"toggleChatbot()\" show.bind=\"!isOpen\"><div class=\"chat-button-icon\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\" fill=\"white\"/></svg></div><span class=\"chat-button-text\">How may I help you?</span></div><chatbot-overlay is-open.bind=\"isOpen\" show-main-view.bind=\"showMainView\" show-detail-view.bind=\"showDetailView\" current-detail.bind=\"currentDetail\" chat-messages.bind=\"chatMessages\" on-close.call=\"closeChatbot()\" on-back.call=\"goBackToMain()\"></chatbot-overlay></template>";});;
define('chatbot/office-visits-detail',['exports', 'aurelia-event-aggregator', 'aurelia-framework'], function (exports, _aureliaEventAggregator, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.OfficeVisitsDetail = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _class, _class2, _temp;

  var OfficeVisitsDetail = exports.OfficeVisitsDetail = (0, _aureliaFramework.autoinject)(_class = (_temp = _class2 = function () {
    function OfficeVisitsDetail(eventAggregator) {
      _classCallCheck(this, OfficeVisitsDetail);

      this.eventAggregator = eventAggregator;
      this.visits = [{
        date: '01/15/2025',
        time: '9:00 AM',
        status: 'Scheduled'
      }, {
        date: '01/18/2025',
        time: '2:30 PM',
        status: 'Completed'
      }, {
        date: '01/22/2025',
        time: '11:15 AM',
        status: 'Scheduled'
      }, {
        date: '01/25/2025',
        time: '3:45 PM',
        status: 'Pending'
      }];
    }

    OfficeVisitsDetail.prototype.closeDetail = function closeDetail() {
      this.eventAggregator.publish('close-detail');
    };

    OfficeVisitsDetail.prototype.showMoreDetails = function showMoreDetails(event) {
      event.preventDefault();
      console.log('Show more details clicked');
    };

    OfficeVisitsDetail.prototype.openVisit = function openVisit() {
      console.log('Opening visit...');
    };

    OfficeVisitsDetail.prototype.addToDashboard = function addToDashboard() {
      console.log('Adding to dashboard...');
    };

    OfficeVisitsDetail.prototype.closeExpanded = function closeExpanded() {
      this.isVisible = false;
      this.eventAggregator.publish('expanded-view-closed');
    };

    return OfficeVisitsDetail;
  }(), _class2.inject = [_aureliaEventAggregator.EventAggregator], _temp)) || _class;
});;
define('text!chatbot/office-visits-detail.html',[],function(){return "<template><div class=\"office-visits-detail\"><div class=\"detail-header\"><h3>Office Visits</h3><button class=\"close-btn\" click.delegate=\"closeDetail()\">×</button></div><p class=\"detail-subtitle\">Sandra McCune has the following open office visits:</p><div class=\"visits-table\"><div class=\"table-header\"><span>Date</span> <span>Time</span> <span>Status</span></div><div class=\"table-row\" repeat.for=\"visit of visits\"><span>${visit.date}</span><span>${visit.time}</span><span class=\"status\" class.bind=\"visit.status.toLowerCase()\">${visit.status}</span></div></div><p class=\"detail-footer\">Please let me know if you'd like to make changes to any of these appointments or <a href=\"#\" click.delegate=\"showMoreDetails($event)\">click here</a> for more details.</p><div class=\"action-buttons\"><button class=\"primary-button\" click.delegate=\"openVisit()\">Open</button> <button class=\"secondary-button\" click.delegate=\"addToDashboard()\">Add to Dashboard</button></div></div></template>";});;
define('chatbot/office-visits-expanded',['exports', 'aurelia-event-aggregator', 'aurelia-framework'], function (exports, _aureliaEventAggregator, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.OfficeVisitsExpanded = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _class, _class2, _temp;

  var OfficeVisitsExpanded = exports.OfficeVisitsExpanded = (0, _aureliaFramework.autoinject)(_class = (_temp = _class2 = function () {
    function OfficeVisitsExpanded(eventAggregator) {
      _classCallCheck(this, OfficeVisitsExpanded);

      this.eventAggregator = eventAggregator;
      this.chatMessages = [];
      this.isVisible = true;

      this.setupEventListeners();
    }

    OfficeVisitsExpanded.prototype.setupEventListeners = function setupEventListeners() {
      var _this = this;

      this.eventAggregator.subscribe('message-sent', function (data) {
        _this.chatMessages.push({
          type: 'user',
          content: data.message
        });

        setTimeout(function () {
          _this.chatMessages.push({
            type: 'assistant',
            content: 'I can help you with that request.'
          });
        }, 1000);
      });

      this.eventAggregator.subscribe('close-detail', function () {
        _this.closeExpanded();
      });

      this.eventAggregator.subscribe('close-expanded-view', function () {
        _this.closeExpanded();
      });
    };

    OfficeVisitsExpanded.prototype.closeExpanded = function closeExpanded() {
      this.isVisible = false;

      this.eventAggregator.publish('expanded-view-closed');
    };

    return OfficeVisitsExpanded;
  }(), _class2.inject = [_aureliaEventAggregator.EventAggregator], _temp)) || _class;
});;
define('text!chatbot/office-visits-expanded.html',[],function(){return "<template><div class=\"expanded-container\" class.bind=\"isVisible ? 'show' : ''\"><button class=\"expanded-close-btn\" click.delegate=\"closeExpanded()\">×</button><div class=\"sidebar\"><div class=\"logo\"><div class=\"logo-circle\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\" fill=\"white\"/></svg></div></div></div><div class=\"chat-section\"><div class=\"chat-history\"><div class=\"chat-message user\">Open office visits for Sandra McCune</div><div class=\"chat-message assistant\">Sandra McCune has the following open office visits:</div><div class=\"chat-message\" repeat.for=\"message of chatMessages\" class.bind=\"message.type\"> ${message.content} </div></div><chat-input></chat-input></div><div class=\"detail-section\"><office-visits-detail></office-visits-detail></div></div></template>";});;
define('data/go/data',['exports', 'moment', 'lodash', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', '../../go/globals', 'packery'], function (exports, _moment, _lodash, _helper, _http, _aureliaFramework, _globals, _packery) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Data = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  var _packery2 = _interopRequireDefault(_packery);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var TaskPopupObject = function TaskPopupObject(patientId, providerId, date, objectId, taskTypeId) {
    _classCallCheck(this, TaskPopupObject);

    this.patientId = patientId;
    this.patientName = null;
    this.providerId = providerId;
    this.date = date;
    this.objectId = objectId;
    this.taskTypeId = taskTypeId;
  };

  var ParentChildItem = function () {
    function ParentChildItem(description, data, parent) {
      _classCallCheck(this, ParentChildItem);

      this.description = description;
      this.data = data;
      this.items = [];
      this.parent = parent ? parent : null;
      this.selected = false;
      this.id = 0;
    }

    ParentChildItem.prototype.addItem = function addItem(item) {
      var id = this.items.length + 1;
      item.id = id;
      this.items.push(item);
    };

    return ParentChildItem;
  }();

  var GenericTableRow = function GenericTableRow(cells, data) {
    _classCallCheck(this, GenericTableRow);

    this.cells = cells;
    this.data = data;
    this.selected = false;
    this.id = 0;
  };

  var GenericPicklistItem = function GenericPicklistItem(description, data) {
    _classCallCheck(this, GenericPicklistItem);

    this.description = description;
    this.data = data;
  };

  var PreferenceObj = function PreferenceObj(description, data, bodypart) {
    _classCallCheck(this, PreferenceObj);

    this.description = description;
    this.data = data;
    this.bodypart = bodypart;
    this.selected = false;
  };

  var ExamData = function ExamData(exam, hpi, plan) {
    _classCallCheck(this, ExamData);

    this.exam = exam;
    this.plan = plan;
    this.hpi = hpi;
  };

  var BodypartSide = function BodypartSide(part, side) {
    _classCallCheck(this, BodypartSide);

    this.part = part;
    this.side = side;
  };

  var MessageTarget = function MessageTarget(id, first, last, targetType, targetId, photo) {
    _classCallCheck(this, MessageTarget);

    this.id = id;
    this.firstName = first;
    this.lastName = last;
    this.selected = false;
    this.matchedLast = false;
    this.targetType = targetType;
    this.targetId = targetId;
    this.photo = photo;
  };

  var Px = function () {
    function Px(id, code, desc, date, data) {
      _classCallCheck(this, Px);

      this.id = id;
      this.selected = false;
      this.code = code;
      this.description = desc;
      this.date = date;
      this.data = data;
      this.modifier = null;
      if (data && data.Modifier) {
        this.modifier = data.Modifier;
      }
      this.index = 0;
      this.displayDelete = false;
      this.side;
      this.part;
      this.type;
      this.outside;
      this.canDelete = false;
    }

    Px.prototype.isEven = function isEven() {
      return this.index % 2 == 0;
    };

    return Px;
  }();

  var filterData = function filterData(type, data) {
    _classCallCheck(this, filterData);

    this.type = type;
    this.data = data;
  };

  var MedRow = function () {
    function MedRow(id, description, lastRefill, status) {
      _classCallCheck(this, MedRow);

      this.id = id;
      this.description = description;
      this.lastRefill = lastRefill;
      this.status = status;
      this.displayDelete = false;
      this.index = 0;
    }

    MedRow.prototype.isEven = function isEven() {
      return this.index % 2 == 0;
    };

    return MedRow;
  }();

  var AllergyRow = function () {
    function AllergyRow(id, description, date, reaction) {
      _classCallCheck(this, AllergyRow);

      this.id = id;
      this.description = description;
      this.date = date;
      this.reaction = reaction;
      this.displayDelete = false;
      this.index = 0;
    }

    AllergyRow.prototype.isEven = function isEven() {
      return this.index % 2 == 0;
    };

    AllergyRow.prototype.testMethod = function testMethod() {};

    return AllergyRow;
  }();

  var DxRow = function DxRow(id, code, desc, date, data) {
    _classCallCheck(this, DxRow);

    this.id = id;
    this.code = code;
    this.description = desc;
    this.date = date;
    this.data = data;
    this.selected = false;
    this.displayDelete = false;
  };

  var Patient = function () {
    function Patient(patient, admin, imageRoot, fileRoot) {
      _classCallCheck(this, Patient);

      var self = this;
      self.helper = _helper.helper;
      this.data = patient.Patient;
      console.log('Patient:', this.data);
      this.latestVisitDate = patient.Visit ? (0, _moment2.default)(patient.Visit.ExamDateTime).format('MM-DD-YYYY') : null;

      this.imagepath = this.getImagePathWithPatientAndGoServerUrl(patient.Patient, admin.GoServerUrl, imageRoot, fileRoot);
    }

    Patient.prototype.PatientName = function PatientName() {
      return this.data.NameLast + ", " + this.data.NameFirst;
    };

    Patient.prototype.getImagePathWithPatientAndGoServerUrl = function getImagePathWithPatientAndGoServerUrl(patient, goServerUrl, imageRoot, fileRoot) {
      var self = this;

      if (patient.Photo === undefined || patient.Photo === null || patient.Photo.length == 0) {
        return fileRoot + 'images/blank.png';
      } else {
        return imageRoot + 'Photos/' + patient.Photo;
      }
    };

    Patient.prototype.Age = function Age() {
      var now = (0, _moment2.default)();
      var dob = (0, _moment2.default)(this.data.DOB);
      var d = _moment2.default.duration(now.diff(dob));
      return Math.floor(d.asYears());
    };

    return Patient;
  }();

  var ScheduleRow = function () {
    function ScheduleRow(id, name, time, patientId, isNewPatient, latestVisit, status, room, pod, type, data) {
      _classCallCheck(this, ScheduleRow);

      this.id = id;
      this.name = name;
      this.time = time;
      this.status = status;
      this.room = room;
      this.pod = pod;
      this.type = type;
      this.patientId = patientId;
      this.isNewPatient = isNewPatient;
      this.latestVisitDate = latestVisit ? (0, _moment2.default)(latestVisit.ExamDateTime).format('MM-DD-YYYY') : null;
      this.latestVisitBodyPart = latestVisit ? latestVisit.VisitBodyPart : null;
      this.latestVisitDateMoment = latestVisit ? (0, _moment2.default)(latestVisit.ExamDateTime) : null;
      this.data = data;
      this.bgColor = '';
      this.txtColor = '#495057';
      this.providerName = data ? this.getProviderName(data.Schedule) : undefined;
      this.reasonForVisit = data ? data.Schedule.Reason_for_Visit : undefined;
      this.nearestSchedule = false;
    }

    ScheduleRow.prototype.getProviderName = function getProviderName(data) {
      var provider = data.OD_Provider_ID;
      if (provider == null) {
        return undefined;
      }
      return provider.NameFirst.toUpperCase().substring(0, 1) + " " + provider.NameLast;
    };

    return ScheduleRow;
  }();

  var VisitInfo = function () {
    function VisitInfo(date, visitType, bodypart) {
      _classCallCheck(this, VisitInfo);

      this.date = date;
      this.visitType = visitType;
      this.bodypart = bodypart;
      this.bodyside = null;
      this.providerId = null;
      this.patientId = null;
      this.boardId = null;
      this.visitCodeId = null;
      this.isPt = this.checkForPt(visitType);
      this.typeForSave = this.getVisitTypeForSave(visitType);
      this.visitCode = null;
      this.locked = false;
      this.bodyparts = [];
      this.examBodyPartsToLoad = [];
      this.hpiBodyPartsToLoad = [];
      this.planBodyPartsToLoad = [];
      this.selectedBodypart;
    }

    VisitInfo.prototype.getDisplayedCode = function getDisplayedCode() {
      var txtCode = 'Code';

      if (this.visitCode == null) {
        return txtCode;
      } else {
        return this.visitCode.Visit_Code_System;
      }
    };

    VisitInfo.prototype.getFirstAvailBodypartForExam = function getFirstAvailBodypartForExam(examType) {
      var self = this;
      if (examType == 'exam') {
        var examBp = self.examBodyPartsToLoad.shift();
        if (examBp == undefined) {
          return self.bodyparts[0];
        } else {
          return examBp;
        }
      } else if (examType == 'hpi') {
        var hpiBp = self.hpiBodyPartsToLoad.shift();
        if (hpiBp == undefined) {
          return self.bodyparts[0];
        } else {
          return hpiBp;
        }
      } else {
        var planBp = self.planBodyPartsToLoad.shift();
        if (planBp == undefined) {
          return self.bodyparts[0];
        } else {
          return planBp;
        }
      }
    };

    VisitInfo.prototype.removeBodypartToLoad = function removeBodypartToLoad(type, bodypart) {

      if (bodypart == null || bodypart == undefined) return;

      if (type.toLowerCase() == 'exam') {
        for (var i = 0; i < this.examBodyPartsToLoad.length; i++) {
          if (this.examBodyPartsToLoad[i].part.toLowerCase() == bodypart.toLowerCase()) {
            this.examBodyPartsToLoad.splice(i, 1);
          }
        }
      }
      if (type.toLowerCase() == 'plan') {
        for (var _i = 0; _i < this.planBodyPartsToLoad.length; _i++) {
          if (this.planBodyPartsToLoad[_i].part.toLowerCase() == bodypart.toLowerCase()) {
            this.planBodyPartsToLoad.splice(_i, 1);
          }
        }
      }
      if (type.toLowerCase() == 'hpi') {
        for (var _i2 = 0; _i2 < this.hpiBodyPartsToLoad.length; _i2++) {
          if (this.hpiBodyPartsToLoad[_i2].part.toLowerCase() == bodypart.toLowerCase()) {
            this.hpiBodyPartsToLoad.splice(_i2, 1);
          }
        }
      }
    };

    VisitInfo.prototype.hasBodypartToLoad = function hasBodypartToLoad(type, bodypart) {

      if (bodypart == null || bodypart == undefined) return false;

      if (type.toLowerCase() == 'exam') {
        for (var i = 0; i < this.examBodyPartsToLoad.length; i++) {
          if (this.examBodyPartsToLoad[i].part.toLowerCase() == bodypart.toLowerCase()) {
            return true;
          }
        }
      }
      if (type.toLowerCase() == 'plan') {
        for (var _i3 = 0; _i3 < this.planBodyPartsToLoad.length; _i3++) {
          if (this.planBodyPartsToLoad[_i3].part.toLowerCase() == bodypart.toLowerCase()) {
            return true;
          }
        }
      }
      if (type.toLowerCase() == 'hpi') {
        for (var _i4 = 0; _i4 < this.hpiBodyPartsToLoad.length; _i4++) {
          if (this.hpiBodyPartsToLoad[_i4].part.toLowerCase() == bodypart.toLowerCase()) {
            return true;
          }
        }
      }
      return false;
    };

    VisitInfo.prototype.addBodypartSide = function addBodypartSide(BodypartSide) {
      this.bodyparts.push(BodypartSide);
    };

    VisitInfo.prototype.hasBodypart = function hasBodypart(bodypart) {
      for (var i = 0; i < this.bodyparts.length; i++) {
        if (this.bodyparts[i].part.toLowerCase() == bodypart.toLowerCase()) {
          return true;
        }
      }
      return false;
    };

    VisitInfo.prototype.checkForPt = function checkForPt(visitType) {
      if (visitType == undefined || visitType == null) return false;

      var lowerVisitType = visitType.toLowerCase();

      if (lowerVisitType.indexOf('pt') > -1 || lowerVisitType.indexOf('ot') > -1) {
        return true;
      } else {
        return false;
      }
    };

    VisitInfo.prototype.getVisitTypeForSave = function getVisitTypeForSave(visitType) {
      if (visitType == null || visitType == undefined) return null;

      var lowerVisitType = visitType.toLowerCase();
      if (lowerVisitType.indexOf('pt') > -1) {
        return 'PT';
      } else if (lowerVisitType.indexOf('ot') > -1) {
        return 'OT';
      } else if (lowerVisitType.indexOf('follow') > -1) {
        return 'FOLLOW';
      } else if (lowerVisitType.indexOf('telemed') > -1) {
        return 'TELEMED';
      } else {
        return 'FOLLOW';
      }
    };

    return VisitInfo;
  }();

  var BlockData = function () {
    function BlockData(description) {
      _classCallCheck(this, BlockData);

      this.widthCls = 'pack-w25';
      this.widthMult = 1;
      this.heightMult = 1;
      this.heightCls = 'pack-h25';
      this.description = description;
      this.editing = false;
      this.blockType;
      this.element;
      this.id;
      this.x = 0;
      this.data;
      this.showResizeButton = false;
      this.loadData = true;
      this.objectId = 0;
      this.options;
      this.sortIndex = 0;
      this.dataObject = null;
      this.dontSave = false;
      this.pinned = false;
      this.goFormId;
      this.goFormInstanceId;
      this.bodyparts = [];
    }

    BlockData.prototype.setBlockType = function setBlockType(blockType) {
      this.blockType = blockType;
      var resizables = ['hpi', 'exam', 'plan'];
      for (var i = 0; i < resizables.length; i++) {
        if (resizables[i] == blockType) {
          this.showResizeButton = true;
          break;
        }
      }
    };

    BlockData.prototype.toggleEditing = function toggleEditing() {
      this.editing = this.editing ? false : true;

      if (this.editing && this.element) {
        this.element.style.height = "";
      }
    };

    return BlockData;
  }();

  var Board = function () {
    function Board(description) {
      _classCallCheck(this, Board);

      this.blocks = [];
      this.description = description;
      this.editing = false;
      this.quickAdd = false;
      this.draggies = [];
      this.elementsToBeAdded = [];
      this.positions = [];
      this.visitInfo = null;
      this.id = 0;
      this.userId;
      this.providerId;
      this.patientId;
      this.date;
      this.hasChanged = false;
      this.documents = [];
      this.blockLayout = true;
      this.userBoardEdit = false;
      this.topToBottomBlocks = [];
      this.isDefault = false;
    }

    Board.prototype.getPositions = function getPositions(altBlocks) {
      var pos = [];

      var blks = altBlocks ? altBlocks : this.blocks;

      for (var i = 0; i < blks.length; i++) {
        var aBlock = blks[i];
        var p = {
          attr: aBlock.id,
          x: aBlock.x
        };
        pos.push(p);
      }
      return pos;
    };

    Board.prototype.addDocument = function addDocument(docBlock) {
      var add = true;

      for (var i = 0; i < this.documents.length; i++) {
        var aDoc = this.documents[i];
        if (aDoc.id == docBlock.id) {
          this.documents.splice(i, 1, docBlock);
          add = false;
          break;
        }
      }

      if (add) {
        this.documents.push(docBlock);
      }

      return add;
    };

    Board.prototype.displayBlockLayout = function displayBlockLayout() {
      var pos = this.getPositions();
      if (pos.length > 0) {
        var pckry = _packery2.default.data('#blockContainer');
        var els = document.getElementsByClassName('block');

        pckry.initShiftLayout(pos, 'data-id');

        for (var e = 0; e < els.length; e++) {
          var eHeight = window.getComputedStyle(els[e]).height;

          els[e].style.height = eHeight;
        }
      }
    };

    Board.prototype.toggleLayout = function toggleLayout(layout) {

      this.blockLayout = layout == 'block' ? true : false;

      var widthMultiplier = 4;
      var heightMultipler = 1;

      for (var b = 0; b < this.blocks.length; b++) {
        var aBlock = this.blocks[b];

        if (!aBlock.hasOwnProperty('originalHeightMult')) {
          aBlock.originalHeightMult = aBlock.heightMult;
        }
        if (!aBlock.hasOwnProperty('originalWidthMult')) {
          aBlock.originalWidthMult = aBlock.widthMult;
        }
        if (!aBlock.hasOwnProperty('originalHeight')) {
          aBlock.originalHeight = aBlock.element.style.height;
        }

        if (this.blockLayout) {
          widthMultiplier = aBlock.originalWidthMult;
          heightMultipler = aBlock.originalHeightMult;
          aBlock.element.style.height = aBlock.originalHeight;
        } else {
          widthMultiplier = 4;
          heightMultipler = 2;
          aBlock.element.style.height = '';
        }

        aBlock.widthMult = widthMultiplier;
        aBlock.heightMult = heightMultipler;

        var width = widthMultiplier * 25;
        var height = heightMultipler * 25;

        $(aBlock.element).removeClass([aBlock.widthCls, 'pack-w25']);
        $(aBlock.element).removeClass([aBlock.heightCls, 'pack-h25']);

        aBlock.widthCls = 'pack-w' + width;
        aBlock.heightCls = 'pack-h' + height;

        $(aBlock.element).addClass(aBlock.widthCls);
        $(aBlock.element).addClass(aBlock.heightCls);
      }

      if (this.blockLayout) {
        this.displayBlockLayout();
      } else {
        var pckry = _packery2.default.data('#blockContainer');

        this.sortBlocksForListLayout(pckry, this.blocks);
      }
    };

    Board.prototype.sortBlocksForListLayout = function sortBlocksForListLayout(packery, blocks) {

      var self = this;
      var sortedBlocks = _.orderBy(blocks, 'x', 'asc');
      var pos = [];
      for (var i = 0; i < sortedBlocks.length; i++) {
        var p = {
          "attr": sortedBlocks[i].id,
          "x": 0
        };
        pos.push(p);
      }

      packery.initShiftLayout(pos, 'data-id');
    };

    Board.prototype.layoutPackery = function layoutPackery(packery) {
      packery.layout();
    };

    Board.prototype.toggleEditing = function toggleEditing(callback) {
      this.editing = this.editing ? false : true;
      for (var i = 0; i < this.blocks.length; i++) {
        var aBlock = this.blocks[i];

        aBlock.toggleEditing();
        var aDraggy = this.draggies[i];
        aDraggy[this.editing ? 'enable' : 'disable']();
      }

      if (!this.editing) {

        this.updatePositions();

        this.quickAdd = false;
      }

      if (callback != null && callback != undefined) {
        callback();
      }
    };

    Board.prototype.updatePositions = function updatePositions() {
      var pckry = _packery2.default.data('#blockContainer');
      var positions = pckry.getShiftPositions('data-id');
      this.positions = positions;

      for (var i = 0; i < this.positions.length; i++) {
        var pos = this.positions[i];
        var blockToUpdate = _.find(this.blocks, function (b) {
          return b.id == pos.attr;
        });
        blockToUpdate.x = pos.x;
      }
    };

    Board.prototype.getPositionWithId = function getPositionWithId(id) {
      for (var i = 0; i < this.positions.length; i++) {
        var pos = this.positions[i];
        if (pos.attr == id) {
          return pos;
        }
      }
      return null;
    };

    Board.prototype.addBlockCopyExistingSize = function addBlockCopyExistingSize(blockType, options) {
      var tBlock = _.find(this.blocks, function (b) {
        return b.blockType == blockType;
      });
      var tOptions = {
        editing: false,
        widthMult: 2,
        heightMult: 1,
        x: 0,
        soapSort: false
      };

      if (options && options.hasOwnProperty('x')) {
        tOptions.x = options.x;
      }
      if (options && options.hasOwnProperty('soapSort')) {
        tOptions.soapSort = options.soapSort;
      }

      if (tBlock) {
        tOptions.widthMult = tBlock.widthMult;
        tOptions.heightMult = tBlock.heightMult;
      }
      return this.addBlock(blockType, tOptions);
    };

    Board.prototype.getBlockWithTypeAndObjectId = function getBlockWithTypeAndObjectId(type, objectId) {
      return _.find(this.blocks, function (b) {
        return b.blockType == type && b.objectId == objectId;
      });
    };

    Board.prototype.getBlockWithType = function getBlockWithType(type) {
      return _.find(this.blocks, function (b) {
        return b.blockType == type;
      });
    };

    Board.prototype.getSortIndex = function getSortIndex(blockType) {
      var sortArray = ['hpi', 'exam', 'plan', 'jointInjection', 'diagnosis', 'order', 'procedure'];
      var sortINdex = _.findIndex(sortArray, function (i) {
        return i == blockType;
      });
      if (sortINdex == undefined) {
        if (this.blocks.length > sortArray.length) {
          return this.blocks.length;
        } else {
          return sortArray.length;
        }
      } else {
        return sortINdex;
      }
    };

    Board.prototype.addBlock = function addBlock(blockType, optional) {
      var aBlock = new BlockData(blockType);

      var editing = true;
      var load = true;
      var wMult = 2;
      var hMult = 2;
      var x = 0;
      var soapSort = false;
      var objectId = 0;
      var leftToRightSort = false;
      var openPopup = false;
      var loadPreferenceCallback = null;
      var sortIndex = this.getSortIndex(blockType);
      var dataObject = null;

      if (optional != undefined) {
        if (optional.hasOwnProperty('loadPreferenceCallback')) {
          loadPreferenceCallback = optional.loadPreferenceCallback;
        }
        if (optional.hasOwnProperty('editing')) {
          editing = optional.editing;
        }
        if (optional.hasOwnProperty('loadData')) {
          load = optional.loadData;
        }
        if (optional.hasOwnProperty('dataObject')) {
          dataObject = optional.dataObject;
          load = false;
        }
        if (optional.hasOwnProperty('widthMult')) {
          wMult = optional.widthMult;
        }
        if (optional.hasOwnProperty('heightMult')) {
          hMult = optional.heightMult;
        }
        if (optional.hasOwnProperty('x')) {
          x = optional.x;
        }
        if (optional.hasOwnProperty('soapSort')) {
          soapSort = optional.soapSort;
        }
        if (optional.hasOwnProperty('objectId')) {
          objectId = optional.objectId;
        }
        if (optional.hasOwnProperty('leftToRightSort')) {
          leftToRightSort = optional.leftToRightSort;
        }
        if (optional.hasOwnProperty('openPopup')) {
          openPopup = optional.openPopup;
        }
      }

      aBlock.sortIndex = sortIndex;
      aBlock.blockType = blockType;
      aBlock.editing = editing;
      aBlock.widthMult = wMult;
      aBlock.heightMult = hMult;
      var newId = this.getNewBlockId();
      aBlock.id = newId;
      aBlock.x = x;
      aBlock.loadData = load;
      aBlock.objectId = objectId;
      aBlock.openPopup = openPopup;
      aBlock.loadPreferenceCallback = loadPreferenceCallback;
      aBlock.dataObject = dataObject;
      this.hasChanged = true;

      if (soapSort == true) {
        var soapBlocks = this.addBlockWithSoapSort(this.blocks, aBlock);
        this.blocks = soapBlocks;
      } else if (leftToRightSort == true) {
        this.addBlockLeftToRight(this.blocks, aBlock);
      } else {
        this.blocks.push(aBlock);
      }

      return aBlock;
    };

    Board.prototype.addBlockLeftToRight = function addBlockLeftToRight(blocks, newBlock) {
      var blockCount = blocks.length;
      var oddEven = blockCount % 2;
      if (oddEven == 1) {
        newBlock.x = 0.5;
      }
      blocks.push(newBlock);
    };

    Board.prototype.addBlockWithSoapSort = function addBlockWithSoapSort(blocks, newBlock) {

      var self = this;


      var xPositions = {
        hpi: 0,
        exam: 0,
        plan: 0,
        jointInjection: 0,
        diagnosis: 0.5,
        order: 0.5,
        procedure: 0.5
      };

      var sortArray = ['hpi', 'exam', 'plan', 'jointInjection', 'diagnosis', 'order', 'procedure'];

      var _loop = function _loop(b) {
        var exists = _.find(sortArray, function (s) {
          return s == blocks[b].blockType;
        });
        if (!exists) {
          blocks[b].sortIndex = 20;
        }
      };

      for (var b = 0; b < blocks.length; b++) {
        _loop(b);
      }

      blocks.push(newBlock);

      blocks = _.sortBy(blocks, function (s) {
        return s.sortIndex;
      });

      for (var i = 0; i < blocks.length; i++) {
        var aBlock = blocks[i];
        var x = xPositions[aBlock.blockType];
        aBlock.x = x == undefined ? 0.5 : x;
        aBlock.id = i + 1;
      }

      return blocks;
    };

    Board.prototype.findNextAvailableSortIndex = function findNextAvailableSortIndex(sortIndex, blocks) {
      var finalIndex = sortIndex;
      for (var i = 0; i < blocks.length; i++) {
        var nextBlock = _.find(blocks, function (b) {
          return b.sortIndex == finalIndex;
        });
        if (nextBlock) {
          finalIndex++;
        } else {
          return finalIndex;
        }
      }
    };

    Board.prototype.deleteBlock = function deleteBlock(id) {
      for (var i = 0; i < this.blocks.length; i++) {
        if (this.blocks[i].id == id) {
          this.blocks.splice(i, 1);
        }
      }
    };

    Board.prototype.clearDraggables = function clearDraggables() {
      this.draggies = [];
      this.elementsToBeAdded = [];
    };

    Board.prototype.addDraggable = function addDraggable(draggy) {
      this.draggies.push(draggy);
      this.elementsToBeAdded.push(draggy);
    };

    Board.prototype.removeDraggable = function removeDraggable(id) {
      for (var i = 0; i < this.draggies.length; i++) {
        var drag = this.draggies[i];
        if (drag.element.dataset.id == id) {
          this.draggies.splice(i, 1);
        }
      }
    };

    Board.prototype.getBlockElementsToBeAdded = function getBlockElementsToBeAdded() {
      var els = [];
      for (var i = 0; i < this.elementsToBeAdded.length; i++) {
        var aDrag = this.elementsToBeAdded[i];
        if (aDrag.$element) {
          els.push(aDrag.$element[0]);
        }
      }

      this.elementsToBeAdded = [];

      return els;
    };

    Board.prototype.getBlockElements = function getBlockElements() {
      var els = [];
      for (var i = 0; i < this.draggies.length; i++) {
        var aDrag = this.draggies[i];
        if (aDrag.$element) {
          els.push(aDrag.$element[0]);
        }
      }
      return els;
    };

    Board.prototype.getNewBlockId = function getNewBlockId() {
      var res = _.orderBy(this.blocks, ['id'], ['desc']);
      var lastId = res.length > 0 ? res[0].id : 0;
      lastId++;
      return lastId;
    };

    Board.prototype.addPosition = function addPosition(id, x) {
      var aPosition = {
        attr: id,
        x: x
      };
      this.positions.push(aPosition);
    };

    Board.prototype.removePosition = function removePosition(id) {
      for (var i = 0; i < this.positions.length; i++) {
        var pos = this.positions[i];
        if (pos.attr == id) {
          this.positions.splice(i, 1);
        }
      }
    };

    return Board;
  }();

  var Data = exports.Data = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _globals.Globals), _dec(_class = function () {
    function Data(helper, http, Globals) {
      _classCallCheck(this, Data);

      this.admin = null;
      this.bodyparts = [];

      this.helper = helper;
      this.http = http;
      this.globals = Globals;
      this.TARGETTYPE = {
        PATIENT: "patient",
        USER: "user",
        GROUP: "group"
      };
    }

    Data.prototype.lateralityFromIcd10Code = function lateralityFromIcd10Code(code) {
      var split = code.split(".");
      var finalDigits = split[1];
      var length = finalDigits.length;
      for (var i = length; i > -1; i--) {
        var place = finalDigits[i - 1];
        var aInt = parseInt(place);
        if (!isNaN(aInt)) {
          if (aInt == 1) {
            return 'RIGHT';
          } else if (aInt == 2) {
            return 'LEFT';
          } else if (aInt == 3) {
            return 'BILATERAL';
          } else {
            return "UNSPECIFIED";
          }
        } else {
          continue;
        }
      }
    };

    Data.prototype.lateralitySidePartFromIcd10Code = function lateralitySidePartFromIcd10Code(data) {

      var side = this.lateralityFromIcd10Code(data.Code);

      var split = data.Descriptor.split(" ");
      var part = null;
      var length = split.length;

      var lastHalfSplit = split;
      for (var i = 0; i < lastHalfSplit.length; i++) {

        var foundSide = false;

        if (lastHalfSplit[i].toUpperCase() == 'RIGHT') {
          foundSide = true;
        } else if (lastHalfSplit[i].toUpperCase() == 'LEFT') {
          foundSide = true;
        } else if (lastHalfSplit[i].toUpperCase() == 'BILATERAL') {
          foundSide = true;
        } else if (lastHalfSplit[i].toUpperCase() == 'UNSPECIFIED') {
          foundSide = true;
        }

        if (foundSide) {
          if (lastHalfSplit[i + 1].toUpperCase() == 'UPPER') {
            part = lastHalfSplit[i + 1] + " " + lastHalfSplit[i + 2];
          } else {
            part = lastHalfSplit[i + 1];
          }

          var regex = /[^a-zA-Z\d\s:]/g;
          part = part.replace(regex, "");
          break;
        }
      }

      return {
        "part": part,
        "side": side
      };
    };

    Data.prototype.getParentChildItem = function getParentChildItem(description, data, parent) {
      return new ParentChildItem(description, data, parent);
    };

    Data.prototype.getGenericTableRow = function getGenericTableRow(cells, data) {
      return new GenericTableRow(cells, data);
    };

    Data.prototype.getGenericPicklistItem = function getGenericPicklistItem(description, data) {
      return new GenericPicklistItem(description, data);
    };

    Data.prototype.getPreferenceObj = function getPreferenceObj(description, data, bodypart) {
      return new PreferenceObj(description, data, bodypart);
    };

    Data.prototype.getPreviousExamData = function getPreviousExamData(patientId, bodypart, date, callback) {
      var self = this;
      var url = 'examfollowup/previous/patients/' + patientId + '/bodypart/' + bodypart + '/date/' + date;
      var data = new ExamData(null, null, null);
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {
          var exam = {
            PostOpID: 0,
            PatientID: patientId,
            UserID: json.UserID,
            ProviderID: json.ProviderID,
            ExamDateTime: date,
            DateSurgery: json.DateSurgery,
            CaseID: json.CaseID,
            PostOpDays: json.PostOpDays,
            Surgeron: json.Surgeron,
            PreOpDiag: json.PreOpDiag,
            PostOpDiag: json.PostOpDiag,
            Procedure: json.Procedure,
            Timeframe: json.Timeframe,
            TYPE: json.TYPE,
            IsComplete: json.IsComplete,
            DateCreated: json.DateCreated,
            DateModified: json.DateModified,
            BodyPart: json.BodyPart,
            ChartNoteExam: json.ChartNoteExam
          };
          data.exam = exam;

          var plan = {
            PlanID: 0,
            PlanText: json.PlanText,
            PatientID: patientId,
            UserID: json.UserID,
            ProviderID: json.ProviderID,
            ExamDateTime: date,
            BodyPart: json.BodyPart
          };

          data.plan = plan;

          var hpi = {
            HPIID: 0,
            BodyPart: json.BodyPart,
            BodySide: json.BodySide,
            VisitDate: date,
            HpiText: json.HpiText,
            PatientID: patientId,
            UserID: json.UserID,
            ProviderID: json.ProviderID
          };

          data.hpi = hpi;
        }
        callback(data);
      });
    };

    Data.prototype.getXrayUrl = function getXrayUrl(studyId) {
      var ip = this.helper.xraypath != undefined ? this.helper.xraypath : window.location.host;
      return ip + '/viewer?StudyInstanceUIDs=' + studyId;
    };

    Data.prototype.getHpiLists = function getHpiLists(listNames, callback) {
      var self = this;
      var url = 'hpilist';
      self.http.post(self.helper.getApiUrl(url), listNames, function (res) {
        callback(res);
      }, null, function (err) {
        var e = 'oops';
      });
    };

    Data.prototype.getLoinc = function getLoinc(callback) {
      var self = this;
      var url = 'loinc';
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.searchLoinc = function searchLoinc(term, callback) {
      var self = this;
      var url = 'loinc/search?term=' + term;
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.getLabOrders = function getLabOrders(patientId, date, callback) {
      var self = this;
      var date = self.helper.getDateWithFormat(date, "MM-DD-YYYY");
      var url = 'laborder/query';

      var queryObject = {
        PatientId: patientId,

        Date: date
      };

      self.http.post(self.helper.getApiUrl(url), JSON.stringify(queryObject), function (res) {
        if (callback) {
          callback(res);
        }
      }, { contentType: "application/json" }, function (err) {
        var e = 'oops';
      });
    };

    Data.prototype.saveLabOrders = function saveLabOrders(orders, callback) {
      var self = this;
      var url = 'laborders';

      var saveObject = {
        Orders: orders
      };

      self.http.post(self.helper.getApiUrl(url), saveObject, function (res) {
        if (callback) {
          callback(res);
        }
      }, null, function (err) {
        var e = 'oops';
      });
    };

    Data.prototype.updateLabOrders = function updateLabOrders(orders, callback) {

      var saveObject = {
        Orders: orders
      };

      var self = this;
      var url = 'laborders';
      self.http.put(self.helper.getApiUrl(url), saveObject, function (returnData) {
        callback(returnData);
      }, null, function (error) {
        alert(error.responseText);
        callback(false);
      });
    };

    Data.prototype.searchDrugs = function searchDrugs(search, callback) {
      var self = this;
      var url = 'drugs?search=' + search;
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.getPatientAllergiesMeds = function getPatientAllergiesMeds(patientId, callback) {
      var self = this;
      var url = 'patientportal/allergiesmeds?patientId=' + patientId;
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.savePatientMeds = function savePatientMeds(meds, callback) {
      var self = this;
      var url = 'rxs/list2';
      self.http.post(self.helper.getApiUrl(url), meds, function (returnData) {
        callback(returnData);
      }, null, function (error) {
        alert(error.responseText);
        callback(false);
      });
    };

    Data.prototype.updatePatientMeds = function updatePatientMeds(meds, callback) {
      var self = this;
      var url = 'rxs/list2';
      self.http.put(self.helper.getApiUrl(url), meds, function (returnData) {
        callback(returnData);
      }, null, function (error) {
        alert(error.responseText);
      });
    };

    Data.prototype.savePatientAllergies = function savePatientAllergies(allergies, callback) {
      var self = this;
      var url = 'patientallergies/list2';
      self.http.post(self.helper.getApiUrl(url), allergies, function (returnData) {
        callback(returnData);
      }, null, function (error) {
        alert(error.responseText);
        callback(false);
      });
    };

    Data.prototype.updatePatientAllergies = function updatePatientAllergies(allergies, callback) {
      var self = this;
      var url = 'patientallergies/list2';
      self.http.put(self.helper.getApiUrl(url), allergies, function (returnData) {
        callback(returnData);
      }, null, function (error) {
        alert(error.responseText);
      });
    };

    Data.prototype.updateVitalSigns = function updateVitalSigns(vital, callback) {
      var self = this;
      var url = 'vitalsigns';
      self.http.post(self.helper.getApiUrl(url), vital, function (res) {
        callback(res);
      }, null, function (err) {
        var e = 'oops';
      });
    };

    Data.prototype.getNewPatientHistory = function getNewPatientHistory(callback) {
      var self = this;
      var url = 'patienthistory';
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.createPatientHistory = function createPatientHistory(history, callback) {
      var self = this;
      var url = 'patienthistory';
      self.http.post(self.helper.getApiUrl(url), history, function (returnData) {
        callback(returnData);
      }, null, function (error) {
        callback(false);
      });
    };

    Data.prototype.updatePatientHistory = function updatePatientHistory(history, callback) {
      var self = this;
      var url = 'patienthistory';
      self.http.put(self.helper.getApiUrl(url), history, function (returnData) {
        callback(returnData);
      }, null, function (error) {
        callback(error);
      });
    };

    Data.prototype.getReportingColumnInfoWithCategory = function getReportingColumnInfoWithCategory(category, callback) {
      var self = this;
      var url = 'reportingcolumninfo/getbycategory?category=' + category;
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.getBodypartSide = function getBodypartSide(part, side) {
      return new BodypartSide(part, side);
    };

    Data.prototype.getBodypartList = function getBodypartList() {
      var self = this;
      self.getList("Bodypart", function (res) {
        var bps = _.map(res, "Description1");
        self.bodyparts = bps;
      });
    };

    Data.prototype.getPatientHistory = function getPatientHistory(patientId, callback) {
      var self = this;

      var url = 'patienthistory/latest?patientId=' + patientId;
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.getPatientHistoryWithPatientIdAndDate = function getPatientHistoryWithPatientIdAndDate(patientId, date, callback) {
      var self = this;
      var aDate = self.helper.getDateWithFormat(date, 'MM-DD-YYYY');
      var url = 'patienthistory/latestWithDate?patientId=' + patientId + '&date=' + aDate;
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.getList = function getList(description, callback) {
      var self = this;
      var url = 'listcombo?listType=' + description;
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.getModifiers = function getModifiers(callback) {
      var self = this;
      var url = 'listcombo/modifiers';
      var mods = [];
      self.http.get(self.helper.getApiUrl(url), function (res) {
        for (var i = 0; i < res.length; i++) {
          mods.push(res[i].Description1);
        }
        callback(mods);
      });
    };

    Data.prototype.getLists = function getLists(descriptionArray, callback) {
      var self = this;
      var url = 'listcombos';

      var lc = {
        listTypes: descriptionArray
      };

      self.http.post(self.helper.getApiUrl(url), lc, function (res) {
        callback(res);
      }, null, function (err) {
        var e = 'oops';
      });
    };

    Data.prototype.getListWithProviderId = function getListWithProviderId(description, providerId, callback) {
      var self = this;
      var url = 'listcombo?listType=' + description + '&providerId=' + providerId;
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.getListWithListTypeDescription2AndProviderId = function getListWithListTypeDescription2AndProviderId(listType, desc2, providerId, callback) {
      var self = this;
      var url = 'listcombos?listType=' + listType + '&description2=' + desc2 + '&providerId=' + providerId;
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.getEmployers = function getEmployers(callback) {
      var self = this;
      var url = 'employers';
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.getAdmin = function getAdmin(callback) {
      var self = this;
      var url = 'admin';
      self.http.get(self.helper.getApiUrl(url), function (res) {
        self.admin = res;
        callback(res);
      });
    };

    Data.prototype.getMessageConversationsWithUserId = function getMessageConversationsWithUserId(userId, callback) {
      var self = this;
      var url = 'messages/conversations?userId=' + userId;
      self.http.get(self.helper.getApiUrl(url), function (res) {
        var sorted = _.orderBy(res, 'DateCreated', 'desc');
        callback(sorted);
      });
    };

    Data.prototype.getConversationTargetsWithConversationIds = function getConversationTargetsWithConversationIds(idArray, callback) {
      var self = this;
      var url = 'messages/conversationtargets';
      self.http.post(self.helper.getApiUrl(url), JSON.stringify(idArray), function (res) {
        callback(res);
      }, { contentType: "application/json" }, function (err) {
        var e = 'oops';
      });
    };

    Data.prototype.updateConversationStatusWithIdsAndStatus = function updateConversationStatusWithIdsAndStatus(conversationIds, status, callback) {
      var self = this;
      var url = 'messages/conversations/status';

      var conversations = {
        'Ids': conversationIds,
        'Status': status
      };

      self.http.put(self.helper.getApiUrl(url), conversations, function (returnData) {
        callback(returnData);
      }, null, function (error) {
        alert(error.responseText);
      });
    };

    Data.prototype.getConversationTargetsWithConversationResult = function getConversationTargetsWithConversationResult(result, callback, optionalIndexToReturn) {
      var self = this;
      var targetUrl = 'messages/targets?conversationId=' + result.ConversationID;
      self.http.get(self.helper.getApiUrl(targetUrl), function (targs) {
        callback(targs, optionalIndexToReturn, result);
      });
    };

    Data.prototype.getNewMessageTarget = function getNewMessageTarget(id, first, last, targetType, targetId, photo) {
      return new MessageTarget(id, first, last, targetType, targetId, photo);
    };

    Data.prototype.getXrayWithId = function getXrayWithId(id, callback) {
      var self = this;
      var url = 'xrayresult/' + id;
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.getXrayResultNew = function getXrayResultNew(callback) {
      var self = this;
      var url = 'xrayresult';
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.saveXrayResult = function saveXrayResult(xray, callback) {
      var self = this;
      var url = 'xrayresult';
      self.http.post(self.helper.getApiUrl(url), xray, function (returnData) {
        callback(returnData);
      }, null, function (error) {
        alert(error.responseText);
      });
    };

    Data.prototype.deleteXrayResult = function deleteXrayResult(id, callback) {
      var self = this;
      var url = 'xrayresult?id=' + id;
      self.http.del(self.helper.getApiUrl(url), function (returnData) {
        callback(returnData);
      }, null, function (error) {
        alert(error.responseText);
      });
    };

    Data.prototype.updateXrayResult = function updateXrayResult(xray, callback) {
      var self = this;
      var url = 'xrayresult';
      self.http.put(self.helper.getApiUrl(url), xray, function (returnData) {
        callback(returnData);
      }, null, function (error) {
        alert(error.responseText);
      });
    };

    Data.prototype.getAllUsers = function getAllUsers(callback) {
      var self = this;
      var url = 'login/users';
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.getUser = function getUser(id, callback) {
      var self = this;
      var url = 'users/' + id;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.getAllGroups = function getAllGroups(callback) {
      var self = this;
      var url = 'groups';
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.getTaskObject = function getTaskObject(taskTypeId, objectId) {

      var aTask = {
        "Date": "",
        "Patient Name": null,
        "Subject": null,
        "Type": null,
        "Description": null,
        "Priority": null,
        "Status": null,
        "UserID": null,
        "TaskID": 0,
        "formID": objectId,
        "CreatedByID": null,
        "AssignedToID": null,
        "PatientID": null,
        "GroupId": null,
        "DueDate": null,
        "TypeID": taskTypeId,
        "ProviderID": null,
        "DateCreated": null,
        "DateModified": null,
        "DisplayOnVisitConsole": 0
      };

      return aTask;
    };

    Data.prototype.saveTask = function saveTask(od_task, callback) {
      var self = this;
      var url = 'task';

      self.http.post(self.helper.getApiUrl(url), od_task, function (returnData) {
        callback(returnData);
      }, null, function (error) {
        alert(error.responseText);
        callback(false);
      });
    };

    Data.prototype.saveTaskNew = function saveTaskNew(taskTypeId, objectId, patientName, taskTypeStr, taskDescription, priority, userId, createdById, patientId, assignedToId, groupId, dueDate, providerId, objectDate, callback) {

      var taskToSave = this.getTaskObject(taskTypeId, objectId);

      taskToSave['Patient_Name'] = patientName;
      taskToSave.Type = taskTypeStr;
      taskToSave.Description = taskDescription;
      taskToSave.Priority = priority;
      taskToSave.Status = 'ASSIGNED';
      taskToSave.UserID = userId;
      taskToSave.CreatedByID = createdById;
      taskToSave.PatientID = patientId;
      taskToSave.AssignedToID = assignedToId;
      taskToSave.GroupId = groupId;

      taskToSave.DueDate = dueDate;
      taskToSave.ProviderID = providerId;
      taskToSave.objectDate = objectDate;

      this.saveTask(taskToSave, function (res) {
        if (callback) {
          callback(res);
        }
      });
    };

    Data.prototype.updateTask = function updateTask(od_task, callback) {
      var self = this;
      var url = 'task';

      self.http.put(self.helper.getApiUrl(url), od_task, function (returnData) {
        callback(returnData);
      }, null, function (error) {
        alert(error.responseText);
        callback(false);
      });
    };

    Data.prototype.getAllowableTaskTypes = function getAllowableTaskTypes(callback) {

      var tts = [];

      var self = this;
      var url = 'tasktype';
      self.http.get(self.helper.getApiUrl(url), function (json) {

        var docs = _.filter(json, function (t) {
          return t.TypeAsString.toLowerCase() == 'document';
        });
        for (var d = 0; d < docs.length; d++) {
          tts.push(docs[d]);
        }

        var xray = _.find(json, function (t) {
          return t.TypeAsString.toLowerCase() == 'order' && t.Description.toLowerCase() == 'xray';
        });
        var board = _.find(json, function (t) {
          return t.TypeAsString.toLowerCase() == 'board';
        });

        var examHpiPlan = _.filter(json, function (t) {
          return t.TypeAsString.toLowerCase() == 'exam' || t.TypeAsString.toLowerCase() == 'plan' || t.TypeAsString.toLowerCase() == 'hpi';
        });
        for (var e = 0; e < examHpiPlan.length; e++) {
          tts.push(examHpiPlan[e]);
        }

        var phone = _.find(json, function (t) {
          return t.TypeAsString.toLowerCase() == 'phone' && t.Description.toLowerCase() == 'phone call';
        });

        tts.push(xray);
        tts.push(board);
        tts.push(phone);

        callback(tts, json);
      });
    };

    Data.prototype.updateSelectedCode = function updateSelectedCode(patientPx, callback) {
      var self = this;
      var url = 'patientprocedures';
      self.http.put(self.helper.getApiUrl(url), patientPx, function (returnData) {
        callback(returnData);
      }, function (error) {
        alert(error.responseText);
      });
    };

    Data.prototype.saveSelectedCode = function saveSelectedCode(patientPx, callback) {
      var self = this;
      var url = 'patientprocedures';
      self.http.post(self.helper.getApiUrl(url), patientPx, function (returnData) {
        callback(returnData);
      }, null, function (error) {
        alert(error.responseText);
      });
    };

    Data.prototype.getJointInjectionPreferencesWithProviderIdAndBodypart = function getJointInjectionPreferencesWithProviderIdAndBodypart(providerId, bodypart, callback) {
      var self = this;
      var url = 'injection/pref?providerid=' + providerId + '&bodypart=' + bodypart;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.getJointInjectionPreferencesWithProviderId = function getJointInjectionPreferencesWithProviderId(providerId, callback) {
      var self = this;
      var url = 'injection/pref?providerid=' + providerId;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.getProceduresWithType = function getProceduresWithType(type, callback) {
      var self = this;
      var url = 'procedures?type=' + type;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.getAllProcedures = function getAllProcedures(callback) {
      var self = this;
      var url = 'procedures';
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.saveProcedure = function saveProcedure(Px, patientId, providerId, date, callback) {
      var self = this;

      var hasData = Px.data ? true : false;
      var dataJcodeUnits = hasData ? Px.data.JCodeUnits : 0;

      var patientCptId = 0;
      if (hasData && Px.data.hasOwnProperty('PatientCPTID')) {
        patientCptId = Px.data.PatientCPTID;
      }

      var patientPx = {
        CptCode: Px.code,
        CodeDescr: Px.description,
        PatientID: patientId,
        ProviderID: providerId,
        ExamDateTime: date,
        UserID: self.helper._user.UserID,
        Type: hasData ? Px.data.Type : null,
        BodyPart: Px.bodypart,
        BodySide: Px.bodyside,
        Modifier: Px.modifier,
        MfgCode: hasData ? Px.data.Cpt_Code : null,
        PatientCPTID: patientCptId,
        ProcedureID: hasData ? Px.data.ProcedureID : 0,
        InjectSite: Px.injectSite,
        NotePx: Px.note,
        JCodeUnits: Px.hasOwnProperty('jcodeunits') ? Px.jcodeunits : dataJcodeUnits
      };

      if (patientPx.PatientCPTID == 0) {
        self.saveSelectedCode(patientPx, function (returnData) {

          var px = {
            "id": returnData.PatientCPTID,
            "selected": false,
            "code": returnData.CptCode,
            "description": returnData.CodeDescr,
            "modifier": returnData.Modifier,
            "data": returnData
          };


          self.helper.createNotySuccess(px.description + ' Saved Successfully!');
          if (callback) callback(returnData);
        });
      } else {
        self.updateSelectedCode(patientPx, function (returnData) {

          var px = {
            "id": returnData.PatientCPTID,
            "selected": false,
            "code": returnData.CptCode,
            "description": returnData.CodeDescr,
            "modifier": returnData.Modifier,
            "data": returnData
          };


          self.helper.createNotySuccess(px.description + ' Updated Successfully!');
          if (callback) callback(returnData);
        });
      }
    };

    Data.prototype.createVisitCode = function createVisitCode(visitCode, callback) {
      var self = this;
      var url = 'visitcode';
      self.http.post(self.helper.getApiUrl(url), JSON.stringify(visitCode), function (schedule) {
        callback(schedule);
      }, { contentType: "application/json" });
    };

    Data.prototype.updateVisitCode = function updateVisitCode(visitCode, callback) {
      var self = this;
      var url = 'visitcode';
      self.http.put(self.helper.getApiUrl(url), visitCode, function (returnData) {
        if (callback != undefined) callback(returnData);
      }, function (error) {
        alert(error.responseText);
      });
    };

    Data.prototype.getVisitInfo = function getVisitInfo(date, patientId, providerId, visitType, bodyparts, boardId, visitCodeId, locked) {

      var part = bodyparts != undefined ? bodyparts[0].part : null;
      var side = bodyparts != undefined ? bodyparts[0].side : null;

      var vi = new VisitInfo(date, visitType, this.formatBodypart(part));
      vi.patientId = patientId;
      vi.providerId = providerId;
      vi.bodyside = side;
      vi.boardId = boardId;
      vi.visitCodeId = visitCodeId;
      vi.locked = locked;
      vi.bodyparts = bodyparts;
      if (bodyparts != undefined) {
        vi.examBodyPartsToLoad = JSON.parse(JSON.stringify(bodyparts));
        vi.planBodyPartsToLoad = JSON.parse(JSON.stringify(bodyparts));
        vi.hpiBodyPartsToLoad = JSON.parse(JSON.stringify(bodyparts));
      }

      return vi;
    };

    Data.prototype.getNewPx = function getNewPx(id, code, desc, date, data) {
      return new Px(id, code, desc, date, data);
    };

    Data.prototype.getVisitCodeObject = function getVisitCodeObject(callback) {
      var self = this;
      var url = 'visitcode';
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.getVisitCode = function getVisitCode(id, callback) {
      var self = this;
      var url = 'visitcode/' + id;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.getVisitCodeWithPatientIdProviderIdAndDate = function getVisitCodeWithPatientIdProviderIdAndDate(patientId, providerId, date, callback) {
      var self = this;
      var url = 'visitcode/patients/' + patientId + '/providers/' + providerId + '/date/' + date;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.getNewExamData = function getNewExamData() {
      return new ExamData();
    };

    Data.prototype.getNewDxRow = function getNewDxRow(id, code, desc, date, data) {
      return new DxRow(id, code, desc, date, data);
    };

    Data.prototype.getWithUrl = function getWithUrl(url, callback) {
      var self = this;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.getWithFaxUrl = function getWithFaxUrl(url, callback) {
      var self = this;
      self.http.getNoAuth(self.helper.getFilewatcherUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.postWithFaxUrlAndData = function postWithFaxUrlAndData(url, data, callback) {
      var self = this;
      self.http.postNoAuth(self.helper.getFilewatcherUrl(url), data, function (res) {
        if (callback) {
          callback(res);
        }
      }, { contentType: "application/json" }, function (err) {
        if (callback) {
          callback(err.responseText, err);
        }
      });
    };

    Data.prototype.postWithUrlAndData = function postWithUrlAndData(url, data, callback) {
      var self = this;
      self.http.post(self.helper.getApiUrl(url), data, function (res) {
        if (callback) {
          callback(res);
        }
      }, { contentType: "application/json" }, function (err) {
        if (callback) {
          callback(err.responseText, err);
        }
      });
    };

    Data.prototype.putWithUrlAndData = function putWithUrlAndData(url, data, callback) {
      var self = this;
      self.http.put(self.helper.getApiUrl(url), data, function (success) {
        if (callback) {
          callback(success);
        }
      }, function (error) {
        if (callback) {
          callback(error.responseText);
        }
      });
    };

    Data.prototype.deleteWithUrl = function deleteWithUrl(url, callback) {
      var self = this;

      self.http.del(self.helper.getApiUrl(url), function (success) {
        if (callback) {
          callback(success);
        }
      }, function (err) {
        if (callback) {
          callback(err);
        }
      });
    };

    Data.prototype.deleteWithFaxUrl = function deleteWithFaxUrl(url, callback) {
      var self = this;

      self.http.delNoAuth(self.helper.getFilewatcherUrl(url), function (success) {
        if (callback) {
          callback(success);
        }
      }, function (err) {
        if (callback) {
          callback(err);
        }
      });
    };

    Data.prototype.getProviders = function getProviders(includeDisabledProviders, callback) {
      var self = this;
      var url = 'providers';
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {
          if (!includeDisabledProviders) {
            json = _.filter(json, function (r) {
              return r.OD_Users.AccountEnabled && r.OD_Users.AccountEnabled == 1;
            });
          }
          callback(json);
        }
      });
    };

    Data.prototype.getProvider = function getProvider(id, callback) {
      var self = this;
      var url = 'providers/' + id;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.createSchedule = function createSchedule(OD_Schedule, callback) {
      var self = this;
      self.postWithUrlAndData('schedule', JSON.stringify(OD_Schedule), function (res) {
        callback(res);
      });
    };

    Data.prototype.getScheduledProviders = function getScheduledProviders(date, callback) {
      var self = this;
      var today = date == null ? (0, _moment2.default)().format('MM/DD/YYYY') : (0, _moment2.default)(date).format('MM/DD/YYYY');
      var url = 'providers?date=' + today;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {
          callback(json);
        }
      });
    };

    Data.prototype.getScheduleWithProviderAndDate = function getScheduleWithProviderAndDate(providerId, date, callback) {
      var self = this;
      var url = 'schedule?providerId=' + providerId + '&date=' + date;
      self.getWithUrl(url, function (res) {
        callback(res);
      });
    };

    Data.prototype.getScheduleWithDate = function getScheduleWithDate(date, callback) {
      var self = this;
      var url = 'schedule/withisnew?date=' + date;
      self.getWithUrl(url, function (res) {
        callback(res);
      });
    };

    Data.prototype.getScheduleWithDateAndPatientId = function getScheduleWithDateAndPatientId(date, patientId, callback) {
      var self = this;

      var url = 'schedule/patients/' + patientId + '/date/' + date;
      self.getWithUrl(url, function (res) {
        callback(res);
      });
    };

    Data.prototype.getSchedule = function getSchedule(providerId, scheduleDate, visitTypeFilter, getAll, locationId, callback) {
      var self = this;
      var date = (0, _moment2.default)(scheduleDate).format("MM-DD-YYYY");
      var schedule = [];
      var types = [];
      if (visitTypeFilter && visitTypeFilter.length > 0) {
        types.push(visitTypeFilter);
      }
      var qObject = {
        'ProviderId': providerId,
        'Date': date,
        'Types': types,
        'GetAll': getAll,
        'LocationID': locationId
      };

      var url = 'schedule/withisnew';
      self.http.post(self.helper.getApiUrl(url), JSON.stringify(qObject), function (json) {

        var final = json;

        for (var i = 0; i < final.length; i++) {
          var r = final[i];
          var row = new ScheduleRow(r.Schedule.ScheduleID, r.Schedule.Patient_Name, self.helper.utcDateToTimeString(r.Schedule.Time), r.Schedule.PatientID, r.IsNewPatient, r.LatestVisit, r.Schedule.Status, r.Schedule.Room, r.Schedule.Pod, r.Schedule.Type, r);

          if (r.Schedule.Status == 'Waiting') {
            row.bgColor = 'table-primary';
            row.txtColor = '#004085';
          } else if (r.Schedule.Status == 'Ready') {
            row.bgColor = 'table-success';
            row.txtColor = '#155724';
          } else if (r.Schedule.Status == 'Next') {
            row.bgColor = 'table-danger';
            row.txtColor = '#721c24';
          }
          schedule.push(row);
        }

        callback(schedule);
      }, { contentType: "application/json" });
    };

    Data.prototype.getPatientVisits = function getPatientVisits(patientId, callback) {
      var self = this;
      var url = 'patients/' + patientId + '/visits?filter=none';
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.getPatientVisitsAndDocuments = function getPatientVisitsAndDocuments(patientId, callback) {
      var self = this;
      var url = 'patients/' + patientId + '/visitsanddocuments';
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.getVisitTypes = function getVisitTypes() {
      return ["New Patient", "Established Patient", "PT Visit", "OT Visit", "Work Comp Visit", "Telemed", "Other Visit"];
    };

    Data.prototype.getPatientVisitData = function getPatientVisitData(patientId, date, callback) {
      var self = this;
      var url = 'patients/' + patientId + '/visit/' + date + "/html?filter=none";
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.getPatientEmpty = function getPatientEmpty(admin) {
      var patient = { 'data': {} };

      patient.imagepath = _helper.helper.goFileurl + 'images/blank.png';
      patient.data.PatientID = "";
      return patient;
    };

    Data.prototype.getPatient = function getPatient(patientId, callback) {
      var self = this;

      var url = 'patients/withvisit?patientId=' + patientId;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        var patient = new Patient(json, self.admin, self.helper.imageTenantRoot, self.helper.goFileUrl);
        console.log('PATIIENT:', patient);
        callback(patient);
      });
    };

    Data.prototype.updatePatient = function updatePatient(patient, callback) {
      var self = this;
      var url = 'patients';
      var p = {
        Patient: patient
      };
      self.http.put(self.helper.getApiUrl(url), p, function (success) {
        if (callback) {
          callback(success);
        }
      }, function (error) {
        alert(error.responseText);
      });
    };

    Data.prototype.createPatient = function createPatient(patient, callback) {
      var self = this;
      var url = 'patients';
      var p = {
        Patient: patient
      };
      self.http.post(self.helper.getApiUrl(url), p, function (res) {
        if (callback) {
          callback(res);
        }
      }, null, function (err) {
        var e = 'oops';
      });
    };

    Data.prototype.getPtDaysheetPref = function getPtDaysheetPref(providerId, bodypart, callback) {
      var self = this;
      var url = 'ptdaysheet/prefs?providerId=' + providerId + '&bodypart=';
      if (bodypart) {
        url += '' + bodypart;
      }

      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.saveFollowUpPref = function saveFollowUpPref(preference, callback) {
      var self = this;
      var url = 'examfollowup/preferences';
      var stringifiedData = JSON.stringify(preference);
      self.http.post(self.helper.getApiUrl(url), stringifiedData, function (returnData) {
        callback(returnData);
      }, { contentType: 'application/json' });
    };

    Data.prototype.updateFollowUpPref = function updateFollowUpPref(preference, callback) {
      var self = this;
      var url = 'examfollowup/preferences';
      self.http.put(self.helper.getApiUrl(url), preference, function (returnData) {
        if (callback) callback();
      }, function (error) {
        if (callback) callback(error.responseText);
      });
    };

    Data.prototype.getFollowUpPref = function getFollowUpPref(providerId, part, type, callback) {
      var self = this;
      var url = "examfollowup/preferences?providerId=" + providerId + "&part=" + part + "&type=" + type;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        var list = _.orderBy(json, 'ProviderID', 'desc');
        list = _.uniqBy(list, 'PostOpProcedure');
        callback(list);
      });
    };

    Data.prototype.getFollowUpPrefsAndMaps = function getFollowUpPrefsAndMaps(providerId, part, type, callback) {
      var self = this;
      var url = "examfollowup/preferences/maps?providerId=" + providerId + "&part=" + part + "&type=" + type;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        var prefs = _.orderBy(json.Prefs, 'ProviderID', 'desc');
        prefs = _.uniqBy(prefs, 'PostOpProcedure');
        var final = {
          'prefs': prefs,
          'maps': json.Maps,
          'suppressed': json.Suppressed
        };
        callback(final);
      });
    };

    Data.prototype.getImpressionMaps = function getImpressionMaps(providerId, bodypart, type, callback) {
      var self = this;
      var isFollowUp = type.toLowerCase() == "follow" ? true : false;
      var url = 'impressionmap?providerId=' + providerId + '&bodypart=' + bodypart + '&followup=' + isFollowUp + '&maptype=' + type;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.getFollowUpPrefPopulated = function getFollowUpPrefPopulated(prefId, patientId, providerId, date, callback) {
      var self = this;
      var url = "examfollowup/preferences/populate?preferenceId=" + prefId + "&providerId=" + providerId + "&patientId=" + patientId + "&examDateTime=" + date;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.getNewScheduleRow = function getNewScheduleRow() {
      return new ScheduleRow();
    };

    Data.prototype.getNewBlock = function getNewBlock() {
      return new BlockData();
    };

    Data.prototype.getNewBoard = function getNewBoard() {
      return new Board("New Board");
    };

    Data.prototype.getNewMedRow = function getNewMedRow(id, description, lastRefill, status) {
      return new MedRow(id, description, lastRefill, status);
    };

    Data.prototype.getNewAllergyRow = function getNewAllergyRow(id, description, date, reaction) {
      return new AllergyRow(id, description, date, reaction);
    };

    Data.prototype.getNewExam = function getNewExam(callback) {
      var self = this;
      var url = "examfollowup";
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {
          callback(json);
        }
      });
    };

    Data.prototype.getNewHpi = function getNewHpi(callback) {
      var self = this;
      var url = "hpi";
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {
          callback(json);
        }
      });
    };

    Data.prototype.getNewPlan = function getNewPlan(callback) {
      var self = this;
      var url = "plan";
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {
          callback(json);
        }
      });
    };

    Data.prototype.getNewTaskPopupObject = function getNewTaskPopupObject(patientId, providerId, date, objectId, taskTypeId) {
      return new TaskPopupObject(patientId, providerId, date, objectId, taskTypeId);
    };

    Data.prototype.createDocumentUrl = function createDocumentUrl(docId) {
      var self = this;
      var userId = self.helper._user.UserID;
      var url = self.helper._webDocsServer + ('#document?docid=' + docId + '&locked=False&print=False&create=False&docType=&date=&patientId=&providerId=0&isAddendum=False&userId=&loggedInUserId=' + userId + '&filePath=&webDocId=&bodyparts=');
      url = url + '&jwt=' + self.helper.jwt();
      return url;
    };

    Data.prototype.createPdfUrl = function createPdfUrl(patientId, filepath) {
      var self = this;

      if (self.globals.selfHosted) {
        var patientIdIndex = filepath.lastIndexOf(patientId);
        var patDocName = filepath.substring(patientIdIndex);
        return self.helper._server + ('/documents/patientDocuments/' + patDocName);
      } else {
        return filepath;
      }
    };

    Data.prototype.createPttUrl = function createPttUrl(patientId, providerId, userId, bodypart, date) {
      var self = this;
      var url = self.helper._server + ('/phoenixnext/#ptdaysheet/datagrid?patientid=' + patientId + '&bodypart=' + bodypart + '&providerid=' + providerId + '&userid=' + userId + '&visitdate=' + date + '&type=PT');
      url = url + '&jwt=' + self.helper.jwt();

      return url;
    };

    Data.prototype.buildAdditionalSqlFromBodyparts = function buildAdditionalSqlFromBodyparts(bodyparts) {
      if (!bodyparts || bodyparts.length == 0) {
        return null;
      }

      var adtlSqlList = [];
      var bpListNOTXray = [];
      var bpListXray = [];
      var whereCount = 0;
      for (var i = 0; i < bodyparts.length; i++) {
        if (bodyparts[i] != null && bodyparts[i].length > 0 && bodyparts[i] != ' ') {
          var current = bodyparts[i];
          bpListNOTXray.push("BodyPart = '" + current + "'");
          bpListXray.push("Body_Part = '" + current + "'");
          var mappedBodyPart = null;
          switch (current) {
            case 'Thigh':
              mappedBodyPart = 'Femur';
              break;
            case 'Upperarm':
              mappedBodyPart = 'Humerus';
              break;
            case 'Forearm':
              mappedBodyPart = 'Rad Ulna';
              break;
            case 'Lowerleg':
              mappedBodyPart = 'Tib Fib';
              break;
            case 'Thoracic':
              mappedBodyPart = 'Rib';
              break;
          }
          if (mappedBodyPart != null) {
            bpListNOTXray.push("BodyPart = '" + mappedBodyPart + "'");
            bpListXray.push("Body_Part = '" + mappedBodyPart + "'");
          }
          whereCount++;
        }
      }

      if (whereCount == 0) {
        return null;
      }

      var hpiSql = {
        TableName: "OD_HPI",
        WhereConditions: bpListNOTXray
      };
      adtlSqlList.push(hpiSql);

      var poArthSql = {
        TableName: "OD_POSTOPARTH",
        WhereConditions: bpListNOTXray
      };
      adtlSqlList.push(poArthSql);

      var patPx = {
        TableName: "OD_PATIENT_PX",
        WhereConditions: bpListNOTXray
      };
      adtlSqlList.push(patPx);

      var patDx = {
        TableName: "OD_PATIENT_DX",
        WhereConditions: bpListNOTXray
      };
      adtlSqlList.push(patDx);

      var planSql = {
        TableName: "OD_PLAN_TX",
        WhereConditions: bpListNOTXray
      };
      adtlSqlList.push(planSql);

      var xraySql = {
        TableName: "OD_XRAY_RESULTS",
        WhereConditions: bpListXray
      };
      adtlSqlList.push(xraySql);

      return adtlSqlList;
    };

    Data.prototype.createDocumentName = function createDocumentName(webdoc, patientId, providerId, userId, date, isAddendum, bodypartsides, callback) {
      var self = this;
      var url = 'documents/createname';
      var doc = self.getNewDocument(patientId, providerId, userId, date, webdoc);

      if (bodypartsides != null) {
        for (var i = 0; i < bodypartsides.bodyparts.length; i++) {
          doc.DocumentName += "-" + bodypartsides.bodyparts[i].part;
        }
      }

      var obj = {
        "isAddendum": isAddendum,
        "OD_Documents": doc
      };
      self.http.post(self.helper.getApiUrl(url), JSON.stringify(obj), function (res) {
        if (res == undefined || res == null) return;
        if (callback) {
          callback(res);
        }
      }, { contentType: "application/json" }, function (err) {
        var e = 'oops';
      });
    };

    Data.prototype.generateDocument = function generateDocument(webdoc, patientId, providerId, userId, date, additionalSql, callback) {
      var self = this;
      var url = 'documents';
      var addendum = false;

      var documentCreate = {
        document: self.getNewDocument(patientId, providerId, userId, date, webdoc),
        isAddendum: addendum,
        absolutePath: "",
        additionalSql: additionalSql
      };

      self.http.post(self.helper.getApiUrl(url), JSON.stringify(documentCreate), function (res) {
        if (res == undefined || res == null) return;
        if (callback) {
          callback(res);
        }
      }, { contentType: "application/json" }, function (err) {
        var e = 'oops';
      });
    };

    Data.prototype.generateDocumentExtractName = function generateDocumentExtractName(webdoc, patientId, providerId, userId, date, additionalSql, filePath, callback) {
      var self = this;
      var url = 'documents/createextractname';
      var addendum = false;

      var documentCreate = {
        document: self.getNewDocument(patientId, providerId, userId, date, webdoc),
        isAddendum: addendum,
        absolutePath: "",
        additionalSql: additionalSql
      };
      documentCreate.document.DocumentLocation = filePath;

      self.http.post(self.helper.getApiUrl(url), JSON.stringify(documentCreate), function (res) {
        if (res == undefined || res == null) return;
        if (callback) {
          callback(res);
        }
      }, { contentType: "application/json" }, function (err) {
        var e = 'oops';
      });
    };

    Data.prototype.getNewDocument = function getNewDocument(patientId, providerId, userId, date, webdoc) {
      var doc = {
        DocumentName: webdoc.Description,
        UserID: userId,
        ProviderID: providerId,
        PatientID: patientId,
        CreationDate: (0, _moment2.default)(date).format("MM-DD-YYYY"),
        DocumentType: webdoc.Description,
        WebDocId: webdoc.Id
      };
      return doc;
    };

    Data.prototype.getHistoryResultObject = function getHistoryResultObject() {
      return {
        TaskTypeID: null,
        TaskTypeDescription: null,
        TaskType: null,
        Locked: null,
        Description: null,
        Type: null,
        ExamDateTime: null,
        CreateDate: null,
        ProviderID: null,
        ObjectID: null,
        DocPath: null,
        Part: null,
        Details: null,
        DetailsMore: null,
        BoardId: null
      };
    };

    Data.prototype.getBlockTypes = function getBlockTypes() {
      return [{ component: 'caseManager', name: 'Case Manager' }, { component: 'diagnosis', name: 'Diagnosis' }, { component: 'exam', name: 'Exam' }, { component: 'goForm', name: 'Go Form' }, { component: 'hpi', name: 'HPI' }, { component: 'jointInjection', name: 'Joint Injection' }, { component: 'medAllergy', name: 'Medication Allergy' }, { component: 'order', name: 'Orders' }, { component: 'plan', name: 'Plan' }, { component: 'ptAuthorization', name: 'PT Authorization' }, { component: 'procedure', name: 'Procedures' }, { component: 'surgery', name: 'Surgery' }];
    };

    Data.prototype.bodypartsToString = function bodypartsToString(BodypartSideArray) {
      var strBodyparts = "";
      for (var i = 0; i < BodypartSideArray.length; i++) {
        var part = BodypartSideArray[i].part == null ? "" : BodypartSideArray[i].part;
        var side = BodypartSideArray[i].side == null ? "" : BodypartSideArray[i].side;
        var sidePart = "";

        if (side.length > 0) {
          sidePart = side;
        }
        if (part.length > 0) {
          if (side.length > 0) {
            sidePart += " " + part;
          } else {
            sidePart += part;
          }
        }

        strBodyparts += sidePart + " Complaint,";
      }
      var lastComma = strBodyparts.lastIndexOf(",");
      strBodyparts = strBodyparts.substr(0, lastComma);
      return strBodyparts;
    };

    Data.prototype.formatBodypart = function formatBodypart(bodypart) {

      if (bodypart == null) return null;

      var newBp = bodypart.replace(/complaint/gi, "");
      newBp = newBp.replace(/right/gi, "");
      newBp = newBp.replace(/left/gi, "");
      newBp = newBp.trim();
      return newBp;
    };

    Data.prototype.parseVisitBodyparts = function parseVisitBodyparts(visitBodyParts) {

      if (visitBodyParts == null) return null;

      var bodyparts = [];

      var splitComma = visitBodyParts.split(',');
      for (var i = 0; i < splitComma.length; i++) {

        var bodypart = new BodypartSide(null, null);

        var bp = splitComma[i].trim();

        bp = bp.replace(/complaint/gi, "");

        bp = bp.trim();

        bp = bp.split(' ');
        if (bp.length == 1) {
          bodypart = this.getBodypartSide(bp[0], null);
        } else if (bp.length == 2) {
          bodypart = this.getBodypartSide(bp[1], bp[0]);
        } else {
          bodypart = this.getBodypartSide(bp[1] + " " + bp[2], bp[0]);
        }
        if (bodypart.part != null) bodyparts.push(bodypart);
      }

      return bodyparts;
    };

    Data.prototype.getWebDocsWithProviderID = function getWebDocsWithProviderID(providerId, callback) {
      var self = this;
      var url = "webdoc/provider/" + providerId + "/default";
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.getBlocksWithVisitData = function getBlocksWithVisitData(visitData) {
      var self = this;
      var blocks = [];

      var tFilter = _.filter(visitData, function (d) {
        return d.Type.toLowerCase() != 'visit' && d.Type.toLowerCase() != 'document' && d.Type.toLowerCase() != 'history';
      });

      var filtered = tFilter;

      var _loop2 = function _loop2(i) {

        var aType = filtered[i].Type.toLowerCase();
        var taskType = filtered[i].TaskType.toLowerCase();
        var desc = filtered[i].Description.toLowerCase();

        if (aType == 'order' && desc == 'surgery' || aType == 'procedure' && desc == 'cast application' || aType == 'exam' && desc == 'physical exam' || aType == 'comments' || aType == 'order' && (desc == 'ot order' || desc == 'pt order') || aType == 'work release' || aType == 'note' || taskType == 'exam' && aType == 'exam' || taskType == 'custompdf') {
          return 'continue';
        }

        if (aType == 'procedure' && filtered[i].Description.toLowerCase() == 'injection') {
          aType = 'jointInjection';
        }

        if (taskType == 'exam') {
          aType = 'exam';
        }

        if (aType == 'order' || aType == 'jointInjection' || aType == 'diagnosis' || aType == 'plan' || aType == 'procedure') {
          var found = _.find(blocks, function (b) {
            return b.blockType == aType;
          });
          if (found) return 'continue';
        }

        aBlock = self.getNewBlock();

        aBlock.setBlockType(aType);
        aBlock.widthMult = 2;
        aBlock.heightMult = 2;
        aBlock.id = i;

        aBlock.objectId = filtered[i].ObjectID == undefined ? 0 : filtered[i].ObjectID;

        if (aType == 'hpi' || aType == 'exam' || aType == 'plan') {
          aBlock.x = 0;
        } else {
          aBlock.x = 0.5;
        }

        if (aType == 'hpi') {
          blocks.splice(0, 0, aBlock);
          return 'continue';
        }

        if (aType == 'exam') {
          blocks.splice(1, 0, aBlock);
          return 'continue';
        }

        if (aType == 'plan') {
          blocks.splice(2, 0, aBlock);
          return 'continue';
        }

        blocks.push(aBlock);
      };

      for (var i = 0; i < filtered.length; i++) {
        var aBlock;

        var _ret2 = _loop2(i);

        if (_ret2 === 'continue') continue;
      }

      return blocks;
    };

    Data.prototype.getDefaultFollowUpBlocks = function getDefaultFollowUpBlocks() {

      var self = this;
      var blocks = [];

      var hpi = self.getNewBlock();
      hpi.setBlockType('hpi');
      hpi.widthMult = 2;
      hpi.heightMult = 1;
      hpi.id = 0;
      blocks.push(hpi);

      var exam = self.getNewBlock();
      exam.setBlockType('exam');
      exam.widthMult = 2;
      exam.heightMult = 1;
      exam.id = 1;
      blocks.push(exam);

      var plan = self.getNewBlock();
      plan.setBlockType('plan');
      plan.widthMult = 2;
      plan.heightMult = 1;
      plan.id = 2;
      blocks.push(plan);

      var dx = self.getNewBlock();
      dx.blockType = 'diagnosis';
      dx.widthMult = 2;
      dx.heightMult = 1;
      dx.id = 3;
      dx.x = 0.5;
      blocks.push(dx);

      var surg = self.getNewBlock();
      surg.blockType = 'surgery';
      surg.widthMult = 2;
      surg.heightMult = 1;
      surg.id = 4;
      surg.x = 0.5;
      blocks.push(surg);

      var alg = self.getNewBlock();
      alg.blockType = 'medAllergy';
      alg.widthMult = 2;
      alg.heightMult = 1;
      alg.id = 5;
      alg.x = 0.5;
      blocks.push(alg);

      return blocks;
    };

    Data.prototype.filterPatientVisitData = function filterPatientVisitData(visitData, providerId) {

      var results = [];

      var obj = {
        "data": {
          "ObjectID": null,
          "Description": ""
        }
      };

      results.push(new filterData('hpi', obj));

      results.push(new filterData('exam', obj));

      results.push(new filterData('plan', obj));

      var docs = _.filter(visitData, function (d) {
        return d.Type == 'Document' && d.ProviderID == providerId;
      });
      if (docs.length > 0) {
        for (var d = 0; d < docs.length; d++) {
          results.push(new filterData('document', docs[d]));
        }
      }
      var customPdfs = _.filter(visitData, function (d) {
        return d.Type == 'KIOSK' && d.ProviderID == providerId;
      });
      if (customPdfs.length > 0) {
        for (var c = 0; c < customPdfs.length; c++) {
          results.push(new filterData('document', customPdfs[c]));
        }
      }

      var xrays = _.filter(visitData, function (d) {
        return d.TaskTypeDescription == 'XRAY' && d.ProviderID == providerId;
      });
      if (xrays.length > 0) {
        for (var c = 0; c < xrays.length; c++) {
          results.push(new filterData('document', xrays[c]));
        }
      }

      return results;
    };

    Data.prototype.createVisitBoardWithData = function createVisitBoardWithData(description, data, patientId, providerId, userId, date, callback) {
      var aBoard = new Board(description);

      aBoard.patientId = patientId;
      aBoard.providerId = providerId;
      aBoard.userId = userId;
      aBoard.date = (0, _moment2.default)(date).format("MM/DD/YYYY");

      if (data == null) {
        return aBoard;
      }

      aBoard.id = data.id;

      if (data.Blocks == null) {
        return aBoard;
      }

      var blocks = data.Blocks;
      for (var b = 0; b < blocks.length; b++) {
        var block = blocks[b];
        var aBlock = new BlockData(block.name);

        aBlock.setBlockType(block.name);
        aBlock.sortIndex = b;
        aBlock.blockType = block.name;
        aBlock.id = block.id;
        aBlock.x = block.x;
        aBlock.widthMult = block.widthMult;
        aBlock.heightMult = block.heightMult;
        aBlock.objectId = block.objectId;
        aBlock.pinned = block.pinned;
        aBlock.goFormId = block.goFormId;
        aBlock.goFormInstanceId = block.goFormInstanceId;
        aBoard.blocks.push(aBlock);

        aBoard.addPosition(block.id, block.x);
      }

      return aBoard;
    };

    Data.prototype.getVisitBoardData = function getVisitBoardData(patientId, providerId, date, callback) {
      var self = this;
      self.loadVisitBoard(patientId, providerId, date, function (res) {
        var data = res;
        var aBoard = self.createVisitBoardWithData("", data, patientId, providerId, self.helper._user.UserID, (0, _moment2.default)(date).format("MM/DD/YYYY"));
        callback(aBoard);
      });
    };

    Data.prototype.getVisitBoardDataWithBoardId = function getVisitBoardDataWithBoardId(id, callback) {
      var self = this;
      self.loadVisitBoardWithId(id, function (res) {
        var data = res;
        var aBoard = self.createVisitBoardWithData("", data, res.PatientId, res.ProviderId, self.helper._user.UserID, (0, _moment2.default)(res.ExamDateTime).format("MM/DD/YYYY"));
        callback(aBoard);
      });
    };

    Data.prototype.getUserBoardData = function getUserBoardData(callback) {

      var self = this;

      self.loadUserBoard(self.helper._user.UserID, function (res) {

        var boards = [];

        if (res != null) {
          for (var i = 0; i < res.length; i++) {
            var OD_UserBoard = res[i];
            var aBoard = new Board(OD_UserBoard.Description);
            aBoard.id = OD_UserBoard.id;
            aBoard.userId = OD_UserBoard.UserID;
            aBoard.isDefault = OD_UserBoard.IsDefault == null ? false : OD_UserBoard.IsDefault;

            var blocks = OD_UserBoard.Blocks;
            for (var b = 0; b < blocks.length; b++) {
              var block = blocks[b];
              var aBlock = new BlockData(block.name);
              aBlock.sortIndex = b;
              aBlock.blockType = block.name;
              aBlock.id = block.id;
              aBlock.x = block.x;
              aBlock.widthMult = block.widthMult;
              aBlock.heightMult = block.heightMult;
              aBoard.blocks.push(aBlock);

              aBoard.addPosition(block.id, block.x);
            }
            boards.push(aBoard);
          }
        }

        callback(boards);
      });
    };

    Data.prototype.loadVisitBoard = function loadVisitBoard(patientId, providerId, date, callback) {
      var self = this;
      var url = 'visit/boards?patientId=' + patientId + '&providerId=' + providerId + '&examDate=' + date;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.loadVisitBoardWithId = function loadVisitBoardWithId(id, callback) {
      var self = this;
      var url = 'visit/board?id=' + id;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.saveVisitBoard = function saveVisitBoard(board, callback) {
      var self = this;
      var url = "visit/boards";

      var newBoard = {
        'id': board.id,
        'ProviderId': board.providerId,
        'PatientId': board.patientId,
        'ExamDateTime': board.date,
        'Blocks': null,
        'VisitCodeId': board.visitCodeId == undefined ? board.visitInfo.visitCodeId : board.visitCodeId
      };

      var blocks = [];
      if (board.positions.length == 0) {
        for (var b = 0; b < board.blocks.length; b++) {
          board.addPosition(board.blocks[b].id, board.blocks[b].x);
        }
      }

      var pos = board.getPositions();

      var _loop3 = function _loop3(p) {
        var aPos = pos[p];

        var tBlock = _.find(board.blocks, function (b) {
          return b.id == aPos.attr;
        });

        newBlock = {
          'id': tBlock.id,
          'x': aPos.x,
          'widthMult': tBlock.widthMult,
          'heightMult': tBlock.heightMult,
          'name': tBlock.blockType,
          'objectId': tBlock.objectId,
          'pinned': tBlock.pinned,
          'goFormInstanceId': tBlock.goFormInstanceId,
          'goFormId': tBlock.goFormId
        };

        if (tBlock.childModel && tBlock.childModel.viewModel) {
          if (newBlock.goFormInstanceId == null && tBlock.childModel.viewModel.instanceId != null) {
            newBlock.goFormInstanceId = tBlock.childModel.viewModel.instanceId;
          }
          if (newBlock.goFormId == null && tBlock.childModel.viewModel.formId != null) {
            newBlock.goFormId = tBlock.childModel.viewModel.formId;
          }
        }

        blocks.push(newBlock);
      };

      for (var p = 0; p < pos.length; p++) {
        var newBlock;

        _loop3(p);
      }

      newBoard.Blocks = blocks;

      if (board.id == 0) {
        self.http.post(self.helper.getApiUrl(url), JSON.stringify(newBoard), function (res) {

          board.id = res.id;

          if (board.visitInfo != null) {
            board.visitInfo.visitCode.VisitBoardId = board.id;
            self.updateVisitCode(board.visitInfo.visitCode);
          }

          if (callback) {
            callback(res);
          }
        }, { contentType: "application/json" }, function (err) {
          var e = 'oops';
        });
      } else {
        self.http.put(self.helper.getApiUrl(url), newBoard, function (success) {
          if (callback && success) {
            callback(newBoard);
          }
        }, function (error) {
          alert(error.responseText);
        });
      }
    };

    Data.prototype.loadUserBoard = function loadUserBoard(userId, callback) {
      var self = this;
      var url = 'users/boards?userId=' + userId;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.saveUserBoard = function saveUserBoard(board, callback) {
      var self = this;
      var url = "users/board";

      var newBoard = {
        'id': board.id,
        'Description': board.description,
        'UserID': self.helper._user.UserID,
        'Blocks': null,
        'IsDefault': board.isDefault
      };

      var blocks = [];
      for (var b = 0; b < board.blocks.length; b++) {
        var aBlock = board.blocks[b];
        var newBlock = {
          'id': aBlock.id,
          'x': aBlock.x,
          'widthMult': aBlock.widthMult,
          'heightMult': aBlock.heightMult,
          'name': aBlock.blockType,
          'pinned': aBlock.pinned
        };
        blocks.push(newBlock);
      }

      newBoard.Blocks = blocks;

      if (board.id == 0) {
        self.http.post(self.helper.getApiUrl(url), JSON.stringify(newBoard), function (res) {

          board.id = res.id;
          if (callback) {
            callback(res);
          }
        }, { contentType: "application/json" }, function (err) {
          var e = 'oops';
        });
      } else {
        self.http.put(self.helper.getApiUrl(url), newBoard, function (success) {
          if (callback) {
            callback(success);
          }
        }, function (error) {
          alert(error.responseText);
        });
      }
    };

    return Data;
  }()) || _class);
});;
define('data/kiosk-preferences/data',['exports'], function (exports) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var KioskPreferencesData = exports.KioskPreferencesData = function KioskPreferencesData() {
        _classCallCheck(this, KioskPreferencesData);

        this.data = {

            pageInstructions: 'This tool allows you to create \'layouts\' for the Kiosk. A \'layout\' is a collection of the pages and PDFs a patient will see, as well as the order of those pages and PDFs, when they login to the Kiosk.',
            providerDropdownInstructions: 'The \'All Providers\' layout will apply to all providers, while selecting a specific provider will allow you to create and save a layout for patients of that provider, instead of those patients seeing the \'All Providers\' layout.',
            typeDropdownInstructions: 'The \'History Required\' layout will be shown to patients whose latest history on file is older than the amount entered in \'Days Patient History Valid.\' The \'History Current\' layout will be shown if the patient\'s latest history on file is not older than the amount in \'Days Patient History Valid.\' The Type also respects providers, so a selected provider can have both a \'History Required\' as well as a \'History Current\' layout.',
            patientHistoryValidInstructions: 'If the patient\'s latest history is older than the entered amount, or if they have no history on file, they will be shown the \'History Required\' layout. Otherwise, they will see the \'History Current\' layout.',
            layoutInstructions: 'Click and drag the items in the list below to determine the order of the pages and PDFs the patient will see in this layout. Note: PDFs still respect the rules defined in the PDF Administration screen of Phoenix Ortho. Also, a history page will not be shown to the patient if that page has already been completed for the current visit'

        };
    };
});;
define('data/patient-info/options',['exports', 'moment'], function (exports, _moment) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.PatientInfoOptions = undefined;

	var _moment2 = _interopRequireDefault(_moment);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : {
			default: obj
		};
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var PatientInfoOptions = exports.PatientInfoOptions = function () {
		function PatientInfoOptions() {
			_classCallCheck(this, PatientInfoOptions);

			this.data = [{ name: 'patientName', friendlyName: 'Patient Name', showName: true, columns: ['NameFirst', 'NameLast'], entity: 'patient', showThis: true }, { name: 'patientAge', friendlyName: 'Patient Age', showName: true, columns: ['DOB'], entity: 'patient', showThis: true, transform: this.patientAgeTransform }, { name: 'employerName', friendlyName: 'Employer Name', showName: true, columns: ['NameEmployer'], entity: 'employer', showThis: true }, { name: 'insuranceName', friendlyName: 'Insurance Name', showName: true, columns: ['OD_Insurance.OD_InsuranceCompany.Name'], entity: 'patient', showThis: false }, { name: 'insurancePlanType', friendlyName: 'Insurance Plan Type', showName: true, columns: ['OD_Insurance.PlanType'], entity: 'patient', showThis: false }, { name: 'paymentGroups', friendlyName: 'Payment Groups', showName: false, columns: [], entity: null, showThis: true }];
		}

		PatientInfoOptions.prototype.patientAgeTransform = function patientAgeTransform(patientDOB) {
			if (!patientDOB || patientDOB == '') {
				return;
			}
			var m = (0, _moment2.default)(patientDOB, 'MM/DD/YYYY');
			var years = (0, _moment2.default)().diff(m, 'years', false);
			return years;
		};

		return PatientInfoOptions;
	}();
});;
define('environment',["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    debug: true,
    testing: true
  };
});;
define('fax/dashboard',['exports', '../helpers/helper', '../helpers/http', '../helpers/jsBridge', 'aurelia-framework', 'aurelia-binding', 'jquery', 'lodash', 'moment', 'aurelia-dialog', '../fax/login', '../implantableDeviceLookup/devicePop', 'ms-signalr-client'], function (exports, _helper, _http, _jsBridge, _aureliaFramework, _aureliaBinding, _jquery, _lodash, _moment, _aureliaDialog, _login, _devicePop) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Dashboard = undefined;

	var _jquery2 = _interopRequireDefault(_jquery);

	var _ = _interopRequireWildcard(_lodash);

	var _moment2 = _interopRequireDefault(_moment);

	function _interopRequireWildcard(obj) {
		if (obj && obj.__esModule) {
			return obj;
		} else {
			var newObj = {};

			if (obj != null) {
				for (var key in obj) {
					if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
				}
			}

			newObj.default = obj;
			return newObj;
		}
	}

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : {
			default: obj
		};
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var _dec, _class;

	var Dashboard = exports.Dashboard = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _jsBridge.JsBridge, _aureliaBinding.BindingEngine, _aureliaDialog.DialogService), _dec(_class = function () {
		function Dashboard(helper, http, jsBridge, bindingEngine, dialogService) {
			_classCallCheck(this, Dashboard);

			var self = this;
			this.helper = helper;
			this.http = http;
			this.jsBridge = jsBridge;
			this.faxes = [];
			this.totalFaxes = 0;
			this.pageSize = 200;
			this.selectedFax = null;
			this.name = '';
			this.proxy = {};
			this.jwt = '';

			this.sourcePath = 'C:\\Phoenix\\fax\\demo';
			this.destPath = 'C:\\Phoenix\\fax\\inbound';
			this.hasSelectedFax = false;
			this.dialogService = dialogService;
			this.headerHeight = 70;
			this.leftColumnWidth = 230;
			this.enableButtons = false;
			this.columnHeaderHeight = 40;
			this.selectedFaxSubscription = bindingEngine.propertyObserver(this, 'selectedFax').subscribe(function (newValue, oldValue) {
				if (newValue && newValue.Status === 'succeeded') {
					console.log('opening pdf');
					self.jsBridge.openPdf(newValue.Data);
				} else if (newValue && newValue.Status !== "succeeded") {
					console.log('closing pdf');
					self.jsBridge.closeCurrentPdf();
				}
			});

			this.urlPrepender = '';
		}

		Dashboard.prototype.getUrl = function getUrl(fragment) {
			return this.urlPrepender + this.helper.getApiUrl(fragment);
		};

		Dashboard.prototype.sendClicked = function sendClicked() {
			var self = this;
			self.proxy.invoke('send', self.name, self.messageText);
			self.messageText = '';
		};

		Dashboard.prototype.getFileName = function getFileName(fullPath) {
			return fullPath.replace(/^.*[\\\/]/, '');
		};

		Dashboard.prototype.startTest = function startTest() {
			var self = this;
			console.log('START TEST CLICKED!');

			var closed = self.jsBridge.closeCurrentPdf();
			console.log('CLOSED:', closed);
			var url = self.helper.getApiUrl('jobqueue/starttest');
			self.http.get(url + '?sourcePath=' + self.sourcePath + '&destPath=' + self.destPath + '&amount=' + self.pageSize, function (data) {
				console.log('STARTED TEST', data);
				self.hasSelectedFax = false;
			}, function (error) {
				console.log('FAILED STARTING TEST', error);
				var errorObject = { Status: 'failed', Title: 'Error starting test' };
				self.faxes.push(errorObject);
			});
		};

		Dashboard.prototype.clearAndReset = function clearAndReset() {
			var self = this;

			var closed = self.jsBridge.closeCurrentPdf();
			console.log('CLOSED:', closed);
			var url = self.getUrl('jobqueue/clearandreset');
			url = url + '?sourcePath=' + self.sourcePath;
			self.http.get(url, function (data) {
				console.log('CLEARED AND RESET', data);
			});
		};

		Dashboard.prototype.getFaxes = function getFaxes() {
			var self = this;
			var url = self.getUrl('jobqueue');
			var date = (0, _moment2.default)().format('MM-DD-YYYY');
			this.http.get(url + '?pageSize=' + self.pageSize + '&pageNumber=1&date=' + date, function (data) {
				console.log('GOT FAXES', data);
				_.each(data, function (returnedFax) {
					var preExistingFax = _.find(self.faxes, function (fax) {
						return fax.Id === returnedFax.Id;
					});
					if (!preExistingFax) {
						var filename = returnedFax.Data.replace(/^.*[\\\/]/, '');
						returnedFax.Title = filename;
						try {
							returnedFax.JobLog = JSON.parse(returnedFax.JobLog);
						} catch (err) {
							returnedFax.JobLog = { LogMessages: [{ LogStep: 1, Message: returnedFax.JobLog }] };
						}
						self.faxes.push(returnedFax);
					}
				});
				self.removeMissingFaxes(data);
				if (self.totalFaxes !== self.faxes.length) {
					self.totalFaxes = self.faxes.length;
				}
				self.setSelectedFax();
				self.enableButtons = true;
			});
		};

		Dashboard.prototype.removeMissingFaxes = function removeMissingFaxes(data) {
			var self = this;
			var removedFax = false;
			_.each(self.faxes, function (fax) {
				var returnedFaxFromFaxes = _.find(data, function (returnedItem) {
					return returnedItem.Id === fax.Id;
				});
				if (!returnedFaxFromFaxes) {
					var faxesLength = self.faxes.length;
					for (var i = 0; i < faxesLength; i++) {
						var currentFax = self.faxes[i];
						if (currentFax == fax) {
							if (self.selectedFax == fax) {
								self.hasSelectedFax = false;
							}
							self.faxes.splice(i, 1);
							removedFax = true;
							console.log('REMOVED FAX!', currentFax);
							break;
						}
					}
				}
				if (removedFax == true) {
					return false;
				}
			});
			if (removedFax) {
				self.removeMissingFaxes(data);
			}
		};

		Dashboard.prototype.faxSelected = function faxSelected(fax) {
			var self = this;
			self.selectedFax = fax;
			console.log('FAX SELECTED', fax);
			console.log('SELECTED FAX LOG', fax.JobLog);
			self.hasSelectedFax = true;
		};

		Dashboard.prototype.isParent = function isParent(log) {
			var match = false;

			if (!log || !log.LogMessages) {
				return false;
			}

			for (var i = 0; i < log.LogMessages.length; i++) {
				var message = log.LogMessages[i];
				console.log('IS PARENT CHECK:', message);
				if (message.Message.search(/\bsplit into\b/i) > -1) {
					console.log('PARENT FOUND');
					match = true;
					break;
				}
			}

			return match;
		};

		Dashboard.prototype.isChild = function isChild(log) {
			var match = false;

			if (!log || !log.LogMessages) {
				return false;
			}

			for (var i = 0; i < log.LogMessages.length; i++) {
				var message = log.LogMessages[i];
				if (message.Message.search(/\bsplit from\b/i) > -1) {
					console.log('CHILD FOUND');
					match = true;
					break;
				}
			}


			return match;
		};

		Dashboard.prototype.setSelectedCardStyle = function setSelectedCardStyle(fax) {
			var self = this;
			var styles = '';
			var status = fax.Status;
			var confidence = fax.Confidence;


			if (self.isParent(fax.JobLog)) {
				return 'text-parent';
			}

			if (self.isChild(fax.JobLog)) {
				return 'text-child';
			}

			switch (status) {
				case 'succeeded':
					console.log('CONFIDENCE', confidence);
					switch (confidence) {
						case 'High':
							styles = 'border-success text-success';
							break;
						case 'Medium':
							styles = 'border-warning text-warning';
							break;
						case 'Low':
							styles = 'border-secondary text-secondary';
							break;
						default:
							styles = 'border-danger text-danger';
							break;
					}
					break;
				case 'failed':
					styles = 'border-danger text-danger';
					break;
				default:
					styles = 'border-primary text-primary';
					break;
			}
			return styles;
		};

		Dashboard.prototype.setCardStyle = function setCardStyle(fax) {
			var self = this;
			var styles = '';
			var status = fax.Status;
			var confidence = fax.Confidence;

			if (self.isParent(fax.JobLog)) {
				return 'fax-parent';
			}

			if (self.isChild(fax.JobLog)) {
				return 'fax-child';
			}

			switch (status) {
				case 'succeeded':
					console.log('CONFIDENCE', confidence);
					styles = 'text-white ';
					switch (confidence) {
						case 'High':
							styles = styles + 'bg-success';
							break;
						case 'Medium':
							styles = styles + 'bg-warning';
							break;
						case 'Low':
							styles = styles + 'bg-secondary';
							break;
						default:
							styles = styles + 'bg-danger';
							break;
					}
					break;
				case 'failed':
					styles = 'text-white bg-danger';
					break;
				case 'processing':
					styles = 'text-white bg-primary';
					break;
				default:
					styles = 'border-secondary text-secondary';
					break;
			}
			return styles;
		};

		Dashboard.prototype.setSelectedFax = function setSelectedFax() {
			var self = this;
			if (!self.hasSelectedFax) {
				var processingFax = _.find(self.faxes, function (fax) {
					return fax.Status == 'processing';
				});
				if (!processingFax && self.faxes.length > 0) {
					processingFax = self.faxes[self.faxes.length - 1];
				}
				self.selectedFax = processingFax;
			}
		};

		Dashboard.prototype.attached = function attached() {
			var self = this;
			console.log('THE DASHBOARD!!!');
			self.dialogService.open({ viewModel: _login.Login, model: { url: self.urlPrepender } }).whenClosed(function (response) {
				console.log('DIALOG RETURN VALUE:', response);
				self.getFaxes();
			});
		};

		Dashboard.prototype.setupSignalR = function setupSignalR() {
			var self = this;
			var connectionUrl = self.getUrl('');
			connectionUrl = connectionUrl.substr(0, connectionUrl.length - 1);
			console.log('ABOUT TO CONNECT TO SIGNAL R:', connectionUrl);
			var connection = _jquery2.default.hubConnection(connectionUrl);
			self.proxy = connection.createHubProxy('faxLoggerHub');
			self.proxy.on('totalFaxes', function (total) {
				console.log('TOTAL FAXES', total);
				console.log('PREVIOUS TOTAL', self.totalFaxes);
				if (total !== self.totalFaxes) {
					self.getFaxes();
				}
				if (total === 0) {
					self.faxes.splice(0);
					self.selectedFax = null;

					self.hasSelectedFax = false;
				}
			});
			self.proxy.on('statusChange', function (changes) {
				_.forEach(self.faxes, function (fax) {
					var change = _.find(changes, function (changeObject) {
						return changeObject.Id === fax.Id;
					});
					if (change) {
						_.forEach(fax, function (value, key) {
							var newValue = change[key];
							if (key === 'JobLog') {
								try {
									newValue = JSON.parse(change[key]);
								} catch (err) {
									newValue = { LogMessages: [{ LogStep: 1, Message: change[key] }] };
								}
							}
							if (newValue) {
								fax[key] = newValue;
							}
						});
					}
				});
				self.setSelectedFax();
			});
			self.proxy.on('broadcastProcessingLog', function (log) {
				console.log(log);

				var faxForLog = _.find(self.faxes, function (fax) {
					return fax.Id === log.Id;
				});
				if (faxForLog) {
					faxForLog.JobLog = log;
				}
			});
			connection.start({ jsonp: true }).done(function () {
				console.log('CONNECTED!');
			}).fail(function (error) {
				console.log('ERROR CONNECTING', error);
			});
		};

		Dashboard.prototype.activate = function activate() {
			var self = this;
		};

		Dashboard.prototype.deactivate = function deactivate() {
			this.selectedFaxSubscription.dispose();
		};

		return Dashboard;
	}()) || _class);
});;
define('text!fax/dashboard.html',[],function(){return "<template><require from=\"./reverse\"></require><style>.card{margin-bottom:10px}.item-list-title{margin-left:15px}.button-holder{margin-bottom:15px}.fax{cursor:pointer}#header{position:absolute;top:0;left:0;right:0;height: ${headerHeight}px}#body{position:absolute;top: ${headerHeight}px;left:0;right:0;bottom:0}#left-col{position:absolute;top:0;left:0;bottom:0;width: ${leftColumnWidth}px}#right-col{position:absolute;top:0;left: ${leftColumnWidth}px;right:0;bottom:0;overflow-y:auto}.col-header{position:absolute;top:0;left:0;right:0;height: ${columnHeaderHeight}px;padding:0 0 0 10px}.col-body{position:absolute;top: ${columnHeaderHeight}px;left:0;right:0;bottom:0;overflow-y:auto}</style><div id=\"header\"><div class=\"container-fluid\"><div class=\"form-row\"><small class=\"form-text text-muted\">fax pdf's: ${sourcePath},</small> <span>&nbsp;</span> <small class=\"form-text text-muted\">watched folder: ${destPath}</small></div><div class=\"form-row button-holder\"><div class=\"col-auto\"><button disabled.bind=\"!enableButtons\" type=\"button\" class=\"btn btn-primary\" click.delegate=\"startTest()\">Start Test</button> <button disabled.bind=\"!enableButtons\" type=\"button\" class=\"btn btn-danger\" click.delegate=\"clearAndReset()\">Clear and Reset</button></div></div></div></div><div id=\"body\"><div class=\"container-fluid\"><div class=\"row\"><div id=\"left-col\" class=\"col-sm-auto\"><div class=\"col-header\"><h3>Faxes (${totalFaxes}):</h3></div><div class=\"col-body\"><div class=\"card\"><div class=\"card-body\"><ul class=\"list-group list-group-flush\"><template if.bind=\"faxes.length > 0\"><template repeat.for=\"fax of faxes | reverse\"><li click.delegate=\"faxSelected(fax)\" class=\"fax list-group-item ${selectedFax == fax ? setSelectedCardStyle(fax) : setCardStyle(fax)}\"><h5 class=\"card-title\">${fax.Title}</h5><h6 if.bind=\"fax.Status !== 'succeeded'\" class=\"card-subtitle\">${fax.Status == 'succeeded' ? 'finished' : fax.Status}</h6><template if.bind=\"fax.Result\"><div><small><strong>Matched PatientId:</strong></small></div><div style=\"margin:-8px 0 0 0\"><small> ${fax.Result}</small></div><div><small>Confidence: ${fax.Confidence}</small></div></template><template if.bind=\"!fax.Result && fax.Status === 'succeeded'\"><small>No match found</small></template></li></template></template><template if.bind=\"faxes.length == 0\"><p class=\"card-text\">Click \"Start Test\" to get started</p></template></ul></div></div></div></div><div id=\"right-col\" class=\"col-auto\"><div class=\"col-header\"><h3>Match Steps for ${selectedFax.Title}:</h3></div><div class=\"col-body\"><template repeat.for=\"message of selectedFax.JobLog.LogMessages | reverse\"><div class=\"card\"><div class=\"card-body\"><p class=\"card-text\"><strong>${message.LogStep}</strong>: <span innerhtml.bind=\"message.Message\"></span></p></div><template if.bind=\"message.Items\"><div if.bind=\"message.Items.ItemType !== '' && message.Items.ItemType\" class=\"card-title item-list-title\"><strong innerhtml.bind=\"message.Items.ItemType\"></strong>:</div><ul class=\"list-group list-group-flush\"><template repeat.for=\"item of message.Items.Items\"><li class=\"list-group-item\" innerhtml.bind=\"item\"></li></template></ul></template></div></template></div></div></div></div></div></template>";});;
define('fax/faxFunctions',["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var FaxFunctions = exports.FaxFunctions = function FaxFunctions() {
    _classCallCheck(this, FaxFunctions);
  };
});;
define('fax/inbound',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper', '../data/go/data', '../go/popupHelper', 'aurelia-event-aggregator', '../go/task/taskHelper', '../go/globals'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper, _data, _popupHelper, _aureliaEventAggregator, _taskHelper, _globals) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Inbound = undefined;

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var FaxObject = function () {
    function FaxObject(fax, helper) {
      _classCallCheck(this, FaxObject);

      this.helper = helper;
      this.data = fax;
      this.date = null;
      this.successClass = "table-primary";
      this.setup(fax);
      this.checked = false;
      this.sendToFolder = false;
    }

    FaxObject.prototype.setup = function setup(fax) {
      if (fax.Meta.Confidence != null) {
        if (fax.Meta.Confidence == 'High') {
          this.successClass = 'table-success';
        } else if (fax.Meta.Confidence == 'Medium') {
          this.successClass = 'table-warning';
        } else if (fax.Meta.Confidence == 'Low') {
          this.successClass = 'table-danger';
        }
      }

      var dtStr = Date.parse(fax.CreationTime);
      var newDate = new Date(dtStr);
      var month = newDate.getMonth() + 1;

      if (month.toString().length == 1) {
        month = "0" + month;
      }
      this.date = month + '/' + newDate.getDate() + '/' + newDate.getFullYear();
    };

    return FaxObject;
  }();

  var Inbound = exports.Inbound = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper, _data.Data, _popupHelper.PopupHelper, _aureliaEventAggregator.EventAggregator, _taskHelper.TaskHelper, _globals.Globals), _dec(_class = function () {
    function Inbound(DialogController, http, helper, Data, PopupHelper, EventAggregator, TaskHelper, Globals) {
      _classCallCheck(this, Inbound);

      this.goHome = null;
      this.confidenceList = ["", "HIGH", "MEDIUM", "LOW"];
      this.confidenceFilter = null;
      this.inboundFaxFolders = [];
      this.folderFilter = null;
      this.faxes = [];
      this.folders = [];
      this.inboundFaxCompleteListener = null;
      this.filefolderListener = null;
      this.demographicsClosedLIstener = null;
      this.canAutoImport = false;
      this.filewatcherType = null;
      this.fileFolderOpenedListener = null;
      this.openFileFolderPatientId = null;

      this.message = "test login message";
      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
      this.goData = Data;
      this.popupHelper = PopupHelper;
      this.eventAggregator = EventAggregator;
      this.taskHelper = TaskHelper;
      this.globals = Globals;
    }

    Inbound.prototype.activate = function activate(model) {
      var self = this;
      self.goHome = model.home;
      self.filewatcherType = model.filewatcherType;

      self.filefolderListener = this.eventAggregator.subscribe("fileFolderClosed", function () {
        self.setAllSendToFolderForFaxes(false);
      });

      self.filefolderOpenedListener = this.eventAggregator.subscribe("fileFolderOpened", function (patientId) {
        self.openFileFolderPatientId = patientId;
        self.setAllSendToFolderForFaxes(true);
      });

      self.demographicsClosedLIstener = this.eventAggregator.subscribe("demographicsClosed", function () {
        self.setAllSendToFolderForFaxes(false);
      });

      self.inboundFaxCompleteListener = self.eventAggregator.subscribe('inboundFaxClickComplete', function (fax) {
        var faxIndex = _.findIndex(self.faxes, function (f) {
          return f.data.DisplayName == fax.data.DisplayName;
        });
        if (faxIndex) {
          self.faxes.splice(faxIndex, 1);
        }
      });

      if (self.filewatcherType == 'fax') {
        self.getFolders();
      }

      self.getFilewatcherFolderWithTenantAndType(self.globals.admin.TenantId, self.filewatcherType);
    };

    Inbound.prototype.close = function close() {
      this.dialogController.cancel();
    };

    Inbound.prototype.attached = function attached() {
      var style = {
        'opacity': 0
      };
      $('ux-dialog-overlay').css(style);

      var uxStyle = {
        'padding': 0
      };
      $('ux-dialog').css(uxStyle);

      var dxContainer = $('ux-dialog-container');
      dxContainer[0].style.setProperty("z-index", 3999, "important");
    };

    Inbound.prototype.detached = function detached() {
      this.inboundFaxCompleteListener.dispose();
      this.filefolderListener.dispose();
      this.demographicsClosedLIstener.dispose();
      this.filefolderOpenedListener.dispose();
    };

    Inbound.prototype.viewPdf = function viewPdf(fax, event) {
      event.stopPropagation();
      var options = {
        closeActiveDialog: false,
        width: window.innerWidth - 71 + "px",
        height: '100%',
        popupHeight: '100%'
      };

      this.popupHelper.openUrlPathPop(fax.data.FilePath, options);
    };

    Inbound.prototype.addToFolder = function addToFolder(fax, e) {
      var self = this;
      e.stopPropagation();

      if (self.openFileFolderPatientId != null) {
        fax.data.Meta.PatientID = self.openFileFolderPatientId;
      }

      this.eventAggregator.publish('inboundFaxClick', fax);
    };

    Inbound.prototype.autoAttach = function autoAttach(task) {
      var self = this;
      var checkedFaxes = _.filter(self.faxes, function (f) {
        return f.checked;
      });
      var taskType = self.taskHelper.getTaskTypeWithTypeAndDescription('Image', "Image");

      var batched = {
        Images: []
      };
      var url = 'images/move/batch';
      for (var i = 0; i < checkedFaxes.length; i++) {
        var fax = checkedFaxes[i];

        var foundFolder = _.find(self.folders, function (f) {
          return f.FolderName == self.folderFilter.Description;
        });
        if (!foundFolder) {
          foundFolder = _.find(self.folders, function (f) {
            return f.FolderName == 'Other';
          });
        }

        var od_image = {
          ImageID: 0,
          PatientID: fax.data.Meta.PatientID,
          Date: fax.date,
          ImageType: "File",
          ImageName: fax.data.DisplayName,
          ImagePath: fax.data.FilePath,
          ImageLogicalFolder: foundFolder.LogicalPath,
          Folder_Id: foundFolder.Folder_Id
        };
        batched.Images.push(od_image);
      }

      var saveDescription = 'Auto-attaching selected images...';
      var saveDialog = self.helper.createNoty(saveDescription, 3000);
      saveDialog.show();

      self.goData.postWithUrlAndData(url, JSON.stringify(batched), function (res) {

        var taskObjectList = [];

        for (var i = 0; i < res.length; i++) {
          var aImg = res[i];
          var faxIndex = _.findIndex(self.faxes, function (f) {
            return f.data.DisplayName == res[i].ImageName;
          });
          if (faxIndex) {
            if (task) {
              var todayDate = new Date();
              var dateStr = self.helper.getMMDDYYYYDateWithDate(todayDate);
              var provId = self.goHome.currentProvider ? self.goHome.currentProvider.ProviderID : 0;
              var taskPopupObject = self.goData.getNewTaskPopupObject(self.faxes[faxIndex].data.Meta.PatientID, provId, dateStr, aImg.ImageID, taskType.Id);
              taskPopupObject.patientName = self.faxes[faxIndex].data.Meta.PatientName;
              taskObjectList.push(taskPopupObject);
            }
            self.faxes.splice(faxIndex, 1);
          }
        }

        if (taskObjectList.length > 0) {
          self.goHome.taskObjectList(taskObjectList, false);
        }

        saveDialog.close();
      });
    };

    Inbound.prototype.toggleCheck = function toggleCheck(fax, e) {
      fax.checked = fax.checked ? false : true;
      e.stopPropagation();

      var foundChecked = _.find(this.faxes, function (f) {
        return f.checked;
      });
      this.canAutoImport = foundChecked ? true : false;
    };

    Inbound.prototype.deleteSelectedItems = function deleteSelectedItems() {
      var self = this;
      var foundChecked = _.filter(self.faxes, function (f) {
        return f.checked;
      });
      for (var i = 0; i < foundChecked.length; i++) {
        var url = 'faxing/inbound/delete';
        var itemToDelete = {
          "FilePath": foundChecked[i].data.FilePath,
          "XmlFilePath": foundChecked[i].data.XmlFilePath
        };
        self.goData.postWithUrlAndData(url, JSON.stringify(itemToDelete), function (res) {
          if (res) {
            var index = _.findIndex(self.faxes, function (f) {
              return f.data.FilePath == res.FilePath;
            });
            self.faxes.splice(index, 1);
          }
        });
      }
    };

    Inbound.prototype.moveToPending = function moveToPending() {
      var self = this;
      var foundChecked = _.filter(self.faxes, function (f) {
        return f.checked;
      });
      for (var i = 0; i < foundChecked.length; i++) {
        var url = 'faxing/inbound/pending';
        var itemToDelete = {
          "FilePath": foundChecked[i].data.FilePath,
          "XmlFilePath": foundChecked[i].data.XmlFilePath
        };
        self.goData.postWithUrlAndData(url, JSON.stringify(itemToDelete), function (res) {
          if (res) {
            var index = _.findIndex(self.faxes, function (f) {
              return f.data.FilePath == res.FilePath;
            });
            self.faxes.splice(index, 1);
          }
        });
      }
    };

    Inbound.prototype.reprocess = function reprocess() {
      var self = this;
      var foundChecked = _.filter(self.faxes, function (f) {
        return f.checked;
      });
      var url = 'PDFOCR/files';
      var filesObject = {
        "files": [],
        "tenantId": self.globals.admin.TenantId,
        "filewatcherType": 'fax'
      };
      for (var i = 0; i < foundChecked.length; i++) {
        filesObject.files.push(foundChecked[i].data.FilePath);
      }
      self.goData.postWithFaxUrlAndData(url, JSON.stringify(filesObject), function (res) {
        if (res) {}
      });
    };

    Inbound.prototype.getFolders = function getFolders() {
      var self = this;
      var url = 'folders';
      self.goData.getWithUrl(url, function (res) {
        var autoMatch = _.find(res, function (f) {
          return f.FolderName == 'PHX Auto-Match';
        });
        self.folders = _.filter(res, function (af) {
          return af.Parent_Id == autoMatch.Folder_Id;
        });
      });
    };

    Inbound.prototype.getFilewatcherFolderWithTenantAndType = function getFilewatcherFolderWithTenantAndType(tenantId, type) {
      var self = this;


      var inboundFolder = {
        "FullPath": "inboundFaxes",
        "Description": "inboundFaxes"
      };
      self.folderFilter = inboundFolder;
      self.inboundFaxFolders.push(inboundFolder);
      self.getInboundWithConfidence();
    };

    Inbound.prototype.getInboundWithConfidence = function getInboundWithConfidence() {
      var self = this;
      self.faxes = [];


      var tenantIdDashed = self.helper.getTenantIdDashed(self.helper._user.TenantId);

      var url = 'inboundfaxing/directory/uris?tenantId=' + tenantIdDashed + '&directory=' + self.folderFilter.FullPath;
      self.goData.getWithUrl(url, function (res) {
        for (var i = 0; i < res.length; i++) {

          var fax = {
            "Meta": {
              "Confidence": "Low"
            },
            "CreationTime": new Date(),
            "DisplayName": self.parseDisplayNameFromAzureDirectoryUri(res[i]),
            "FilePath": res[i]
          };

          var aFax = new FaxObject(fax);
          self.faxes.push(aFax);
        }
      });
    };

    Inbound.prototype.parseDisplayNameFromAzureDirectoryUri = function parseDisplayNameFromAzureDirectoryUri(uri) {
      var lastSlashIndex = uri.lastIndexOf("/");
      var displayName = uri.slice(lastSlashIndex + 1, uri.length);
      return decodeURI(displayName);
    };

    Inbound.prototype.confidenceSelected = function confidenceSelected() {
      this.getInboundWithConfidence();
    };

    Inbound.prototype.folderSelected = function folderSelected() {
      this.getInboundWithConfidence();
    };

    Inbound.prototype.setSendToFolderForFaxesWithData = function setSendToFolderForFaxesWithData(data) {
      var self = this;
      for (var i = 0; i < self.faxes.length; i++) {
        var aFax = self.faxes[i];
        if (data.DisplayName == aFax.data.DisplayName) {
          aFax.sendToFolder = true;
        } else {
          aFax.sendToFolder = false;
        }
      }
    };

    Inbound.prototype.setAllSendToFolderForFaxes = function setAllSendToFolderForFaxes(sendToFolder) {
      var self = this;
      for (var i = 0; i < self.faxes.length; i++) {
        var aFax = self.faxes[i];
        aFax.sendToFolder = sendToFolder;
      }
    };

    Inbound.prototype.openPatientFolder = function openPatientFolder(data, event) {
      var self = this;
      event.stopPropagation();
      self.goHome.loadPatient(data.Meta.PatientID, function (patient) {
        self.goHome.showDemographics(false);
        setTimeout(function () {
          self.eventAggregator.publish('showDemographicsFiles', patient);

          self.setSendToFolderForFaxesWithData(data);
        }, 500);
      });
    };

    return Inbound;
  }()) || _class);
});;
define('text!fax/inbound.html',[],function(){return "<template><style>.fa-disabled{opacity:.4;cursor:not-allowed;pointer-events:none}</style><div class=\"card border-0\"><div class=\"card-header d-flex align-items-center\"><i class=\"fa ${filewatcherType == 'fax' ? 'fa-fax' : 'fa-print'} fa-2x mr-2\" aria-hidden=\"true\"></i><div class=\"form-group w-25 mb-0 mr-1\"><select value.bind=\"confidenceFilter\" class=\"form-control custom-select\" change.delegate=\"confidenceSelected()\"><option model.bind=\"null\">Confidence...</option><option repeat.for=\"c of confidenceList\" model.bind=\"c\">${c}</option></select></div><div class=\"form-group w-25 mb-0 mr-1\"><select value.bind=\"folderFilter\" class=\"form-control custom-select\" change.delegate=\"folderSelected()\"><option model.bind=\"null\">Folder...</option><option repeat.for=\"f of inboundFaxFolders\" model.bind=\"f\">${f.FullPath}</option></select></div><div class=\"dropdown\"><button class=\"btn btn-outline-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-cog\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a class=\"dropdown-item ${!canAutoImport ? 'disabled' : ''}\" href=\"#\" click.delegate=\"autoAttach()\"><i class=\"fa fa-arrow-circle-left\" aria-hidden=\"true\"></i> Auto-attach</a> <a class=\"dropdown-item ${!canAutoImport ? 'disabled' : ''}\" href=\"#\" click.delegate=\"autoAttach(true)\"><i class=\"fa fa-thumb-tack\" aria-hidden=\"true\"></i> Auto-attach & Task</a> <a class=\"dropdown-item ${!canAutoImport ? 'disabled' : ''}\" href=\"#\" click.delegate=\"deleteSelectedItems()\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\"></i> Delete Item</a> <a class=\"dropdown-item ${!canAutoImport ? 'disabled' : ''}\" href=\"#\" click.delegate=\"moveToPending()\"><i class=\"fa fa-share\" aria-hidden=\"true\"></i> Move to pending</a> <a class=\"dropdown-item ${!canAutoImport ? 'disabled' : ''}\" href=\"#\" click.delegate=\"reprocess()\"><i class=\"fa fa-refresh\" aria-hidden=\"true\"></i> Reprocess</a></div></div><i class=\"fa fa-times fa-2x ml-auto mr-1\" aria-hidden=\"true\" click.delegate=\"close()\"></i></div><div class=\"card-body px-0 pt-0\" style=\"overflow-y:auto\"><table class=\"table table-striped table-sm\"><thead><tr><th scope=\"col\"></th><th scope=\"col\"></th><th scope=\"col\">File</th><th scope=\"col\">Patient</th><th scope=\"col\">Date</th></tr></thead><tbody><tr repeat.for=\"fax of faxes\" class=\"${fax.successClass}\"><td style=\"vertical-align:middle;padding-left:20px!important\"><i class=\"${fax.checked ? 'fa fa-check-square-o' : 'fa fa-square-o'}\" aria-hidden=\"true\" click.delegate=\"toggleCheck(fax, $event)\"></i></td><td style=\"vertical-align:middle\"><i class=\"fa fa-arrow-circle-left ${!fax.sendToFolder ? 'fa-disabled' : ''}\" aria-hidden=\"true\" click.delegate=\"addToFolder(fax, $event)\"></i></td><td style=\"vertical-align:middle\" click.delegate=\"openPatientFolder(fax.data, $event)\">${fax.data.DisplayName}</td><td style=\"vertical-align:middle\">${fax.data.Meta.PatientName}</td><td style=\"vertical-align:middle\">${fax.date}</td><td style=\"vertical-align:middle;padding-right:20px!important\"><i class=\"fa fa-file-pdf-o\" aria-hidden=\"true\" click.delegate=\"viewPdf(fax, $event)\"></i></td></tr></tbody></table></div></div></template>";});;
define('fax/index',['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var Index = exports.Index = function () {
		function Index() {
			_classCallCheck(this, Index);

			this.message = 'HELLO FROM fax/index';
			console.log('fax-dashboard INDEX LOADED!');
		}

		Index.prototype.configureRouter = function configureRouter(config, router) {
			config.title = 'Phoenix Data Grid';
			config.map([{ route: 'dashboard', name: 'dashboard', moduleId: 'fax/dashboard', nav: true, title: 'Dashboard' }, { route: 'inbound', name: 'inbound', moduleId: 'fax/inbound', nav: true, title: 'Inbound Fax' }]);
			this.router = router;
		};

		return Index;
	}();
});;
define('text!fax/index.html',[],function(){return "<template><div class=\"container-fluid\" style=\"padding:0\"><router-view></router-view></div></template>";});;
define('fax/login',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Login = undefined;

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var _dec, _class;

	var Login = exports.Login = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
		function Login(DialogController, http, helper) {
			_classCallCheck(this, Login);

			this.message = "test login message";
			this.dialogController = DialogController;
			this.http = http;
			this.helper = helper;
		}

		Login.prototype.loginClicked = function loginClicked() {
			var self = this;
			console.log('UserName', self.userName);
			console.log('Password', self.password);
			self.http.login(self.helper.getApiUrl("login"), { Username: self.userName, Password: self.password }, function (data) {
				self.dialogController.close(true, data);
			}, function () {
				console.log('ERROR GETTING JWT');
			});
		};

		Login.prototype.activate = function activate(model) {
			var self = this;
			self.urlPrepender = model.url;
			console.log('LOGIN ACTIVATE', model);
		};

		return Login;
	}()) || _class);
});;
define('text!fax/login.html',[],function(){return "<template><ux-dialog><ux-dialog-header><div class=\"row\"><div class=\"col-sm-12\"><h4>Login</h4></div></div></ux-dialog-header><ux-dialog-body><form><div class=\"form-group\"><label>UserName:</label> <input value.bind=\"userName\" type=\"text\" class=\"form-control\" placeholder=\"Enter UserName\"></div><div class=\"form-group\"><label>Password:</label> <input value.bind=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Password\"></div></form></ux-dialog-body><ux-dialog-footer><button click.delegate=\"loginClicked()\">Login</button></ux-dialog-footer></ux-dialog></template>";});;
define('fax/outboundFax',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper', '../go/popupHelper', '../data/go/data'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper, _popupHelper, _data) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.OutboundFax = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Recipient = function Recipient(name, faxNumber, location) {
    _classCallCheck(this, Recipient);

    this.name = name;
    this.faxNumber = faxNumber;
    this.location = location;
  };

  var OutboundFax = exports.OutboundFax = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper, _popupHelper.PopupHelper, _data.Data), _dec(_class = (_class2 = function () {
    OutboundFax.prototype.showRecipientPickerChanged = function showRecipientPickerChanged(newVal, oldVal) {
      if (newVal) {
        this.setupRecepientPicker();
      }
    };

    function OutboundFax(DialogController, http, helper, PopupHelper, Data) {
      var _this = this;

      _classCallCheck(this, OutboundFax);

      this.locations = [];
      this.pharmacies = [];
      this.labs = [];
      this.referringProviders = [];
      this.recipientTypes = ['Referring', 'Locations', 'Pharmacy', 'Lab'];
      this.selectedRecipientType = 'Referring';
      this.filteredRecipients = [];
      this.faxRecipients = [];
      this.faxItems = [];
      this.disableRecipientPicker = false;

      _initDefineProp(this, 'showRecipientPicker', _descriptor, this);

      this.canSend = false;
      this.recipientClickListener = false;
      this.displayPhoneInputButton = false;

      this.windowClickedListener = function () {
        var self = _this;
        if (self.showRecipientPicker == true) {
          self.showRecipientPicker = false;
        }
      };

      this.recipientPlusClickListener = function (event) {
        if (event.srcElement.id == "faxAddRecipientButton") {
          _this.addRecipient();
        }
        event.stopPropagation();
      };

      this.plusClickedListener = function (event) {
        var self = _this;

        self.disableRecipientPicker = true;

        self.dialogController.controller.viewModel.showSpinner();

        setTimeout(function () {

          window.addEventListener("click", self.windowClickedListener);

          self.recipientpicker.addEventListener("click", self.recipientPlusClickListener.bind(self));

          self.dialogController.controller.viewModel.hideSpinner();

          self.disableRecipientPicker = false;
        }, 1000);
      };

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
      this.popupHelper = PopupHelper;
      this.data = Data;
    }

    OutboundFax.prototype.activate = function activate(obj) {
      var self = this;

      self.faxItems = obj.faxItems;
      self.getReferring();
    };

    OutboundFax.prototype.attached = function attached() {
      var style = {
        'opacity': 0
      };
      $('ux-dialog-overlay').css(style);

      var uxStyle = {
        'padding': 0
      };
      $('ux-dialog').css(uxStyle);

      var width = window.innerWidth / 2;

      var dxContainer = $('ux-dialog-container');
      dxContainer[0].style.setProperty("z-index", 4001, "important");
      dxContainer[0].style.setProperty("left", width + "px");
    };

    OutboundFax.prototype.detached = function detached() {
      window.removeEventListener("click", this.windowClickedListener);
      if (this.recipientpicker) {
        this.recipientpicker.removeEventListener("click", this.recipientPlusClickListener);
      }
    };

    OutboundFax.prototype.plusClicked = function plusClicked(event) {
      var self = this;
      event.stopPropagation();
      self.showRecipientPicker = true;
    };

    OutboundFax.prototype.setupRecepientPicker = function setupRecepientPicker() {
      var self = this;
      if (!self.recipientClickListener) {
        self.recipientClickListener = true;
        self.plusClickedListener();
      }
    };

    OutboundFax.prototype.filterRecipients = function filterRecipients() {
      var self = this;

      if (self.selectedRecipientType == 'Referring') {
        self.getReferring();
      } else {
        self.getLocations(self.selectedRecipientType);
      }
    };

    OutboundFax.prototype.getReferring = function getReferring() {
      var self = this;

      if (self.referringProviders.length > 0) {
        self.filteredRecipients = self.referringProviders;
      }

      var url = 'referring/all';
      self.data.getWithUrl(url, function (res) {
        for (var i = 0; i < res.length; i++) {
          var aRecip = new Recipient(res[i].ReferringEntity, res[i].PhoneFax, res[i].Address1);
          self.referringProviders.push(aRecip);
        }

        self.filteredRecipients = self.referringProviders;
      });
    };

    OutboundFax.prototype.getLocations = function getLocations(type) {
      var self = this;

      if (type == 'Locations' && self.locations.length > 0) {
        self.filteredRecipients = self.locations;
        return;
      }
      if (type == 'Pharmacy' && self.pharmacies.length > 0) {
        self.filteredRecipients = self.pharmacies;
        return;
      }
      if (type == 'Lab' && self.labs.length > 0) {
        self.filteredRecipients = self.labs;
        return;
      }

      var url = 'locations';
      if (type != 'Locations') {
        url += "?type=" + type;
      }
      self.data.getWithUrl(url, function (res) {
        for (var i = 0; i < res.length; i++) {
          var aRecip = new Recipient(res[i].LocationName, res[i].Fax, res[i].Address1);
          if (type == 'Locations') {
            self.locations.push(aRecip);
          }
          if (type == 'Pharmacy') {
            self.pharmacies.push(aRecip);
          }
          if (type == 'Lab') {
            self.labs.push(aRecip);
          }
        }

        if (type == 'Locations') {
          self.filteredRecipients = self.locations;
        }
        if (type == 'Pharmacy') {
          self.filteredRecipients = self.pharmacies;
        }
        if (type == 'Lab') {
          self.filteredRecipients = self.labs;
        }
      });
    };

    OutboundFax.prototype.addRecipient = function addRecipient() {
      if (this.selectedRecipient) {
        this.faxRecipients.push(this.selectedRecipient);
        this.showRecipientPicker = false;
        this.checkCanSend();
      }
    };

    OutboundFax.prototype.addRecipientWithPhoneInput = function addRecipientWithPhoneInput() {
      var aRecip = new Recipient(this.phoneInputValue, this.phoneInputValue, null);
      this.faxRecipients.push(aRecip);
      this.displayPhoneInputButton = false;
      this.phoneInputValue = null;
      this.checkCanSend();
    };

    OutboundFax.prototype.cancelPhoneInput = function cancelPhoneInput() {
      this.displayPhoneInputButton = false;
      this.phoneInputValue = null;
    };

    OutboundFax.prototype.removeRecipient = function removeRecipient(index) {
      this.faxRecipients.splice(index, 1);
      this.checkCanSend();
    };

    OutboundFax.prototype.removeFaxItem = function removeFaxItem(index) {
      this.faxItems.splice(index, 1);
      this.checkCanSend();
    };

    OutboundFax.prototype.checkCanSend = function checkCanSend() {
      if (this.faxItems.length > 0 && this.faxRecipients.length > 0) {
        this.canSend = true;
      } else {
        this.canSend = false;
      }
    };

    OutboundFax.prototype.buildFaxRecipientsForPost = function buildFaxRecipientsForPost() {
      var self = this;
      var recips = [];
      for (var i = 0; i < self.faxRecipients.length; i++) {
        recips.push(self.faxRecipients[i]);
      }
      return recips;
    };

    OutboundFax.prototype.buildFaxDataForPost = function buildFaxDataForPost() {
      var self = this;
      var data = [];
      for (var i = 0; i < self.faxItems.length; i++) {
        var aItm = self.faxItems[i];
        data.push({ "Id": aItm.Id, "Type": aItm.Type });
      }
      return data;
    };

    OutboundFax.prototype.sendFax = function sendFax() {
      var self = this;

      if (self.faxRecipients.length == 0 || self.faxItems.length == 0) return;

      self.dialogController.controller.viewModel.showSpinner();

      var n = self.helper.createNoty("Sending fax...", 30000);
      n.show();

      var url = 'faxing/send';
      var faxData = {
        Username: self.helper._user.UserData.eFaxUser,
        Password: self.helper._user.UserData.eFaxPassword,
        Recipients: self.buildFaxRecipientsForPost(),
        Data: self.buildFaxDataForPost()
      };
      self.data.postWithUrlAndData(url, JSON.stringify(faxData), function (res) {

        self.dialogController.controller.viewModel.hideSpinner();

        if (res.Error.errorStringField == "Success") {
          self.helper.updateNoty(n, "Fax sent!", "success", 3000);
        } else {
          self.helper.updateNoty(n, "Fax failed!", "error", 3000);
        }
      });
    };

    OutboundFax.prototype.faxPhoneInput = function faxPhoneInput() {
      this.displayPhoneInputButton = true;
    };

    OutboundFax.prototype.openPatientSearch = function openPatientSearch() {
      var self = this;
      self.popupHelper.openPatientPop(false, true, function (pat) {});
    };

    OutboundFax.prototype.cancel = function cancel() {
      this.dialogController.cancel();
    };

    return OutboundFax;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'showRecipientPicker', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return false;
    }
  })), _class2)) || _class);
});;
define('text!fax/outboundFax.html',[],function(){return "<template><style>.to-border-left{border-bottom:1px solid #dee2e6}.to-border-right{border-bottom:1px solid #dee2e6}.recipient-picker{position:absolute;background-color:#fff;z-index:2;top:35px;right:20px;box-shadow:5px 10px 7px 1px rgba(1,1,1,.25)}.send-toolbar{border-top:1px solid rgba(0,0,0,.125);background-color:rgba(0,0,0,.03);padding:.75rem 1.25rem;position:absolute;width:100%;bottom:0}.fax-number-input{display:inline-block;width:auto;border:none;height:auto;padding:0;width:140px}</style><div class=\"row mx-0 px-2 pb-2\"><div class=\"col-md-12\"><div class=\"form-row mx-0\"><div if.bind=\"showRecipientPicker\" ref=\"recipientpicker\" class=\"card recipient-picker\"><div class=\"form-group col-md-12\"><small id=\"nameFirstHelp\" class=\"form-text text-muted\">Recipient</small><div class=\"input-group\"><div class=\"input-group-prepend\"><select class=\"custom-select\" value.bind=\"selectedRecipientType\" change.delegate=\"filterRecipients()\" disabled.bind=\"disableRecipientPicker\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"r of recipientTypes\" model.bind=\"r\">${r}</option></select></div><select class=\"custom-select\" value.bind=\"selectedRecipient\" disabled.bind=\"disableRecipientPicker\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"r of filteredRecipients\" model.bind=\"r\">${r.name}</option></select><div class=\"input-group-append\"><button class=\"btn ${selectedRecipient ? 'btn-outline-primary' : 'btn-outline-secondary'}\" click.delegate=\"addRecipient()\" style=\"border-color:#ced4da\" type=\"button\" disabled.bind=\"disableRecipientPicker\"><i class=\"fa fa-plus\" id=\"faxAddRecipientButton\"></i></button></div></div></div></div><div class=\"form-group col-md-12 d-flex align-items-stretch px-0 py-1 border-bottom\"><div class=\"w-100\"><label class=\"my-1 mx-2 text-muted\">To:</label><template repeat.for=\"r of faxRecipients\"><span click.delegate=\"removeRecipient($index)\" class=\"p-1 text-primary d-inline-block\">${r.name} <i class=\"fa fa-times float-right\" aria-hidden=\"true\"></i></span></template><input type=\"text\" class=\"form-control fax-number-input\" value.bind=\"phoneInputValue\" input.delegate=\"faxPhoneInput()\"><div if.bind=\"displayPhoneInputButton\" class=\"btn-group\" role=\"group\" aria-label=\"Basic example\"><button type=\"button\" class=\"btn btn-primary btn-sm\" click.delegate=\"addRecipientWithPhoneInput()\">Add</button> <button type=\"button\" class=\"btn btn-primary btn-sm\" click.delegate=\"cancelPhoneInput()\">X</button></div></div><div><i class=\"fa fa-plus p-2 mx-2 text-primary\" click.delegate=\"plusClicked($event)\" aria-hidden=\"true\"></i></div></div><ul class=\"list-group list-group-flush w-100\"><li repeat.for=\"i of faxItems\" class=\"list-group-item px-0 d-flex align-items-center\"> ${i.Description} <i class=\"fa fa-trash-o ml-auto mx-1 text-danger\" click.delegate=\"removeFaxItem($index)\" aria-hidden=\"true\"></i></li></ul></div></div></div><div class=\"send-toolbar d-flex align-items-center\"><button class=\"btn btn-primary ml-auto\" disabled.bind=\"!canSend\" click.delegate=\"sendFax()\" type=\"button\">Send</button></div></template>";});;
define('fax/reverse',["exports"], function (exports) {
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var ReverseValueConverter = exports.ReverseValueConverter = function () {
		function ReverseValueConverter() {
			_classCallCheck(this, ReverseValueConverter);
		}

		ReverseValueConverter.prototype.toView = function toView(array) {
			return array ? array.slice().reverse() : null;
		};

		return ReverseValueConverter;
	}();
});;
define('formbuilder/box',['exports', 'aurelia-framework', 'bcx-aurelia-dnd'], function (exports, _aureliaFramework, _bcxAureliaDnd) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Box = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _dec2, _class, _desc, _value, _class2, _descriptor;

  var Box = exports.Box = (_dec = (0, _aureliaFramework.inject)(_bcxAureliaDnd.DndService), _dec2 = (0, _aureliaFramework.computedFrom)('item', 'item.x', 'item.y', 'item.width', 'item.height', 'item.editing'), _dec(_class = (_class2 = function () {
    function Box(dndService) {
      _classCallCheck(this, Box);

      _initDefineProp(this, 'item', _descriptor, this);

      this.isTextarea = false;
      this.isNumber = false;
      this.isBoolean = false;
      this.isText = false;
      this.isDate = false;
      this.isLabel = false;
      this.selected = false;

      this.dndService = dndService;
    }

    Box.prototype.attached = function attached() {
      this.dndService.addSource(this, { noPreview: true });
      switch (this.item.data.DisplayType) {
        case 'bigint':
          this.isNumber = true;
          break;
        case 'int':
          this.isNumber = true;
          break;
        case 'datetime':
          this.isDate = true;
          break;
        case 'bit':
          this.isBoolean = true;
          break;
        case 'label':
          this.isLabel = true;
          break;
        default:
          this.isTextarea = true;
      }
    };

    Box.prototype.detached = function detached() {
      this.dndService.removeSource(this);
    };

    Box.prototype.dndModel = function dndModel() {
      return {
        type: 'moveItem',
        id: this.item.id
      };
    };

    _createClass(Box, [{
      key: 'positionCss',
      get: function get() {
        var x = this.item && this.item.x || 0;
        var y = this.item && this.item.y || 0;
        var width = this.item && this.item.width || 0;
        var height = this.item && this.item.height || 0;
        var boxCursor = this.item && this.item.editing ? "pointer" : "default";

        return {
          left: x + 'px',
          top: y + 'px',
          width: width + 'px',
          height: height + 'px',
          cursor: boxCursor
        };
      }
    }]);

    return Box;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'item', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, 'positionCss', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'positionCss'), _class2.prototype)), _class2)) || _class);
});;
define('text!formbuilder/box.html',[],function(){return "<template><require from=\"./styles/box.css\"></require><require from=\"./resize-corner\"></require><div ref=\"dndElement\" class=\"box\" style.bind=\"positionCss\" id.bind=\"item.id\"><div class=\"card w-100 h-100\"><div ref=\"cardbody\" class=\"card-body p-1\" style=\"overflow-y:scroll\"><div if.bind=\"isTextarea\" class=\"form-group\"><label for=\"exampleFormControlTextarea1\">${item.data.ColumnFriendlyName}</label> <textarea id.bind=\"item.data.ColumnID\" class=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"3\" style=\"width:100%;height:100%;overflow-y:scroll\"></textarea></div><div if.bind=\"isBoolean\" class=\"form-check form-check-inline\"><input class=\"form-check-input\" type=\"checkbox\" id.bind=\"item.data.ColumnID\"> <label class=\"form-check-label\" for=\"inlineCheckbox2\">${item.data.ColumnFriendlyName}</label></div><div if.bind=\"isNumber\" class=\"form-group\"><label for=\"exampleFormControlInput1\">${item.data.ColumnFriendlyName}</label> <input id.bind=\"item.data.ColumnID\" type=\"number\" class=\"form-control\"></div><div if.bind=\"isDate\" class=\"form-group\"><label for=\"exampleFormControlInput1\">${item.data.ColumnFriendlyName}</label> <input id.bind=\"item.data.ColumnID\" type=\"date\" class=\"form-control\"></div><div if.bind=\"isLabel\"><div id.bind=\"item.data.ColumnID\" contenteditable=\"true\" innerhtml.bind=\"item.data.text\"></div></div></div></div><box-toolbar></box-toolbar><resize-corner repeat.for=\"mode of ['e', 'se', 's', 'sw', 'w', 'nw', 'n', 'ne']\" mode.bind=\"mode\" item-id.bind=\"item.id\" editing.bind=\"item.selected\"></resize-corner></div></template>";});;
define('formbuilder/charts/chart-bar',['exports', 'aurelia-framework', 'bcx-aurelia-dnd', 'aurelia-event-aggregator', '../editor', 'chart.js', '../formhelper'], function (exports, _aureliaFramework, _bcxAureliaDnd, _aureliaEventAggregator, _editor, _chart, _formhelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ChartBar = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _dec2, _class, _desc, _value, _class2, _descriptor;

  var ChartBar = exports.ChartBar = (_dec = (0, _aureliaFramework.inject)(_bcxAureliaDnd.DndService, _aureliaEventAggregator.EventAggregator, _aureliaFramework.BindingEngine, _editor.Editor, _formhelper.formhelper), _dec2 = (0, _aureliaFramework.computedFrom)('item', 'item.x', 'item.y', 'item.width', 'item.height', 'item.selected'), _dec(_class = (_class2 = function () {
    function ChartBar(dndService, EventAggregator, BindingEngine, Editor, formhelper) {
      _classCallCheck(this, ChartBar);

      _initDefineProp(this, 'item', _descriptor, this);

      this.elementClass = null;
      this.myChart = null;

      this.dndService = dndService;
      this.ea = EventAggregator;
      this.bindingEngine = BindingEngine;
      this.editor = Editor;
      this.formhelper = formhelper;
    }

    ChartBar.prototype.activate = function activate(model) {

      var refreshChartObject = this.item ? true : false;

      this.item = model.item;

      if (refreshChartObject && this.item) {
        var ops = this.formhelper.defaultChartOptions(this.item.data.type);
        var data = this.formhelper.defaultChartData(this.item.data.type);
        this.setChartType(this.item.data.type, ops, data);
        this.updateChart();
      }
    };

    ChartBar.prototype.getConfig = function getConfig(type, data, options, plugins) {
      return {
        type: type ? type : 'bar',
        data: data ? data : {},
        options: options ? options : {},
        plugins: plugins ? plugins : []
      };
    };

    ChartBar.prototype.setDataset = function setDataset(index, data) {
      var self = this;
      if (self.myChart) {
        self.myChart.data.datasets[index].data = data;
      }
    };

    ChartBar.prototype.removeLabels = function removeLabels() {
      var self = this;
      if (self.myChart) {
        self.myChart.data.labels = [];
        self.myChart.update();
      }
    };

    ChartBar.prototype.updateLabels = function updateLabels(labelArray) {
      var self = this;
      if (self.myChart) {
        self.myChart.data.labels = labelArray;
        self.myChart.update();
      }
    };

    ChartBar.prototype.updateChart = function updateChart() {
      var self = this;
      if (self.myChart) {
        self.myChart.update();
      }
    };

    ChartBar.prototype.updateAxesTimeUnit = function updateAxesTimeUnit(axes, timeUnit) {
      var frmt = this.getTooltipFormatForTimeUnit(timeUnit);
      var self = this;
      if (self.myChart) {
        if (axes == 'x') {
          self.myChart.options.scales.xAxes[0].time = {
            unit: timeUnit,
            round: timeUnit,
            tooltipFormat: frmt
          };
        } else {
          self.myChart.options.scales.yAxes[0].time = {
            unit: timeUnit,
            round: timeUnit,
            tooltipFormat: frmt
          };
        }
        self.myChart.update();
      }
    };

    ChartBar.prototype.getTooltipFormatForTimeUnit = function getTooltipFormatForTimeUnit(timeUnit) {
      if (timeUnit == 'month') {
        return 'MMM YYYY';
      } else if (timeUnit == 'day') {
        return 'MMM D';
      } else {
        return 'YYYY';
      }
    };

    ChartBar.prototype.setAxesForTime = function setAxesForTime(axes, timeUnit) {
      var self = this;
      if (self.myChart) {
        if (axes == 'x') {
          self.myChart.options.scales.xAxes[0] = {
            type: 'time',
            scaleLabel: {
              display: true,
              labelString: 'Some Dates!'
            },
            distribution: 'linear',
            bounds: 'data',
            time: {
              unit: timeUnit,
              round: timeUnit,
              tooltipFormat: 'MMM YYYY'
            }
          };
        } else {
          self.myChart.options.scales.yAxes[0] = {
            type: 'time',
            scaleLabel: {
              display: true,
              labelString: 'Some Dates!'
            },
            distribution: 'linear',
            bounds: 'data',
            time: {
              unit: timeUnit,
              round: timeUnit,
              tooltipFormat: self.getTooltipFormatForTimeUnit(timeUnit)
            }
          };
        }
      }
    };

    ChartBar.prototype.setAxesScaleTicks = function setAxesScaleTicks(axes, beginAtZero, minScale, maxScale) {
      var self = this;
      if (self.myChart) {
        if (axes == 'x') {
          self.myChart.options.scales.xAxes[0] = {
            type: 'linear',
            ticks: {
              stepSize: 1,
              beginAtZero: beginAtZero,
              min: minScale,
              max: maxScale
            }
          };
        } else {
          self.myChart.options.scales.yAxes[0] = {
            type: 'linear',
            ticks: {
              stepSize: 1,
              beginAtZero: beginAtZero,
              min: minScale,
              max: maxScale
            }
          };
        }
      }
      self.myChart.update();
    };

    ChartBar.prototype.setAxesAsLinear = function setAxesAsLinear(axes) {
      var self = this;
      if (self.myChart) {
        if (axes == 'x') {
          self.myChart.options.scales.xAxes[0] = {
            type: 'linear',
            ticks: {
              stepSize: 1,
              beginAtZero: true
            }
          };
        } else {
          self.myChart.options.scales.yAxes[0] = {
            type: 'linear',
            ticks: {
              stepSize: 1,
              beginAtZero: true
            }
          };
        }
      }
    };

    ChartBar.prototype.setChartType = function setChartType(type, options, data) {
      var self = this;
      if (self.myChart) {
        var tOps = options ? options : _.cloneDeep(self.myChart.options);
        var tData = data ? data : _.cloneDeep(self.myChart.data);
        self.myChart.destroy();
        self.myChart = new _chart.Chart(self.canvasChart, {
          type: type,
          data: tData,
          options: tOps
        });
        self.item.data.type = type;
      }
    };

    ChartBar.prototype.setAxesForCategory = function setAxesForCategory() {};

    ChartBar.prototype.setChartAxesType = function setChartAxesType(axes, type, timeUnit) {
      var self = this;
      if (self.myChart) {
        if (axes == 'x') {
          self.myChart.options.scales.xAxes[0].type = type;
          if (type == 'time' && timeUnit) {
            if (self.myChart.options.scales.xAxes[0].hasOwnProperty('time')) {
              self.myChart.options.scales.xAxes[0].time.unit = timeUnit;
            } else {
              self.myChart.options.scales.xAxes[0].time = {
                unit: timeUnit
              };
            }

            self.myChart.options.scales.xAxes[0].scaleLabel = undefined;
          }
        } else {
          self.myChart.options.scales.yAxes[0].type = type;
          if (type == 'time' && timeUnit) {
            if (self.myChart.options.scales.yAxes[0].hasOwnProperty('time')) {
              self.myChart.options.scales.yAxes[0].time.unit = timeUnit;
            } else {
              self.myChart.options.scales.yAxes[0].time = {
                unit: timeUnit
              };
            }
          }
        }
        self.myChart.update();
      }
    };

    ChartBar.prototype.runChart = function runChart() {
      var ctx = this.canvasChart;

      this.myChart = new _chart.Chart(ctx, {
        type: this.item.data.type,
        data: this.item.data.data,
        options: this.item.data.options
      });
    };

    ChartBar.prototype.attached = function attached() {
      var self = this;

      if (self.item) {

        self.elementClass = self.item.addBoxClass ? 'box' : 'table-style';

        var elem = document.getElementById(self.item.id);
        self.dndService.addSource(self, { noPreview: true, element: elem });

        self.bindingEngine.propertyObserver(self.item, 'style').subscribe(function (newVal, oldVal) {
          self.editor.updateItem(self.item);
        });

        self.bindingEngine.propertyObserver(self.item, 'html').subscribe(function (newVal, oldVal) {
          self.editor.updateItem(self.item);
        });
      }

      self.runChart();
    };

    ChartBar.prototype.detached = function detached() {
      this.dndService.removeSource(this);
    };

    ChartBar.prototype.itemClicked = function itemClicked(e) {

      this.ea.publish("itemClicked", this.item);
      e.stopPropagation();
    };

    ChartBar.prototype.dndModel = function dndModel() {
      return {
        type: 'moveItem',
        id: this.item.id
      };
    };

    _createClass(ChartBar, [{
      key: 'positionCss',
      get: function get() {
        var x = this.item && this.item.x || 0;
        var y = this.item && this.item.y || 0;
        var width = this.item && this.item.width || 0;
        width = width == '100%' || width == 'auto' ? width : width + 'px';
        var height = this.item && this.item.height || 0;
        var boxCursor = this.item && this.item.selected ? "pointer" : "default";
        var border = this.item && this.item.selected ? "1px dashed #007bff" : "none";

        return {
          left: x + 'px',
          top: y + 'px',
          width: width,
          height: height + 'px',
          cursor: boxCursor,
          border: border
        };
      }
    }]);

    return ChartBar;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'item', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, 'positionCss', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'positionCss'), _class2.prototype)), _class2)) || _class);
});;
define('text!formbuilder/charts/chart-bar.html',[],function(){return "<template><require from=\"../styles/box.css\"></require><require from=\"../resize-corner\"></require><style>.table-style{display:inline-block;width:auto}</style><div ref=\"dndElement\" class.bind=\"elementClass\" style.bind=\"positionCss\" id.bind=\"item.id\" pointerup.delegate=\"itemClicked($event)\"><div class=\"card w-100 h-100 mb-1 bg-transparent border-0\"><div ref=\"cardbody\" class=\"card-body p-1 d-flex align-items-center\"><canvas ref=\"canvasChart\"></canvas></div></div><resize-corner if.bind=\"item.addBoxClass\" repeat.for=\"mode of ['se','sw','nw','ne']\" mode.bind=\"mode\" item-id.bind=\"item.id\" editing.bind=\"item.selected\"></resize-corner></div></template>";});;
define('formbuilder/container',['exports', 'aurelia-framework', 'bcx-aurelia-dnd', 'aurelia-event-aggregator', 'lodash', './snap-to-grid', './snap-to-edge'], function (exports, _aureliaFramework, _bcxAureliaDnd, _aureliaEventAggregator, _lodash, _snapToGrid, _snapToEdge) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Container = undefined;

  var _lodash2 = _interopRequireDefault(_lodash);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _dec2, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3;

  var MIN_HEIGHT = 30;
  var MIN_WIDTH = 30;

  var Container = exports.Container = (_dec = (0, _aureliaFramework.inject)(_bcxAureliaDnd.DndService, _aureliaEventAggregator.EventAggregator), _dec2 = (0, _aureliaFramework.computedFrom)('items', 'intention'), _dec(_class = (_class2 = function () {
    function Container(dndService, ea) {
      _classCallCheck(this, Container);

      this.snapMode = 'grid';
      this.showResizeArea = false;
      this.width = 600;
      this.height = 800;

      _initDefineProp(this, 'items', _descriptor, this);

      _initDefineProp(this, 'edit', _descriptor2, this);

      _initDefineProp(this, 'fullwidth', _descriptor3, this);

      this.drawMarquee = false;
      this.marqueeShape = null;
      this.selections = [];
      this.wasMarqueeSelecting = false;
      this.dragOffsets = [];
      this.showGrid = false;

      this.dndService = dndService;
      this.ea = ea;
    }

    Container.prototype.attached = function attached() {
      var _this = this;

      var self = this;

      this.dndService.addSource(this, { noPreview: true });

      this.dndService.addTarget(this);
      this.subscribers = [this.ea.subscribe('dnd:willStart', function () {
        return _this.resetIntention();
      }), this.ea.subscribe('dnd:didEnd', function () {
        return _this.resetIntention();
      }), this.ea.subscribe('dnd:didCancel', function () {
        return _this.resetIntention();
      })];

      this.ea.subscribe('clearSelections', function () {
        self.selections = [];
      });

      this.ea.subscribe('toggleGrid', function () {
        self.showGrid = self.showGrid ? false : true;
      });
    };

    Container.prototype.deselectAll = function deselectAll(e) {

      if (this.wasMarqueeSelecting) {
        this.wasMarqueeSelecting = false;
        return;
      }

      console.log('Deselect All!');

      this.ea.publish('deselectAll');

      for (var i = 0; i < this.items.length; i++) {
        this.items[i].selected = false;
        this.items[i].showToolbar = false;
      }
    };

    Container.prototype.dndModel = function dndModel() {
      return { type: 'marquee' };
    };

    Container.prototype.detached = function detached() {
      this.dndService.removeTarget(this);
      this.subscribers.forEach(function (s) {
        return s.dispose();
      });
    };

    Container.prototype.dndCanDrop = function dndCanDrop(model) {
      return model.type === 'moveItem' || model.type === 'resizeItem' || model.type === 'marquee';
    };

    Container.prototype.resetWasMarqueeSelecting = function resetWasMarqueeSelecting() {
      this.wasMarqueeSelecting = false;
    };

    Container.prototype.findMarqueeSelectedItems = function findMarqueeSelectedItems(marqueeShape) {
      this.selections = [];
      for (var c = 0; c < this.items.length; c++) {
        this.items[c].selected = false;
      }

      for (var i = 0; i < this.items.length; i++) {
        var itm = this.items[i];
        if (marqueeShape.x < itm.x && marqueeShape.y < itm.y && marqueeShape.x + marqueeShape.width > itm.x + itm.width && marqueeShape.y + marqueeShape.height > itm.y + itm.height) {
          itm.selected = true;
          this.selections.push(itm);
        }
      }
    };

    Container.prototype.getMarqueeSelection = function getMarqueeSelection(mouseStartAt, mouseEndAt, targetElementRect) {
      var start = {
        x: mouseStartAt.x - targetElementRect.x,
        y: mouseStartAt.y - targetElementRect.y
      };

      var end = {
        x: mouseEndAt.x - targetElementRect.x,
        y: mouseEndAt.y - targetElementRect.y
      };

      var x = Math.min(start.x, end.x);
      var y = Math.min(start.y, end.y);
      var width = Math.abs(start.x - end.x);
      var height = Math.abs(start.y - end.y);
      this.marqueeShape = { type: 'rect', x: x, y: y, width: width, height: height };

      this.wasMarqueeSelecting = true;
    };

    Container.prototype.dndHover = function dndHover(location) {
      var mouseStartAt = location.mouseStartAt,
          mouseEndAt = location.mouseEndAt,
          previewElementRect = location.previewElementRect,
          targetElementRect = location.targetElementRect;
      var model = this.dnd.model;

      if (model.type === 'marquee' && this.drawMarquee) {
        this.getMarqueeSelection(mouseStartAt, mouseEndAt, targetElementRect);
        return;
      }

      this._dndHoverRoutine(model, mouseStartAt, mouseEndAt, previewElementRect, targetElementRect);
    };

    Container.prototype._dndHoverRoutine = function _dndHoverRoutine(model, mouseStartAt, mouseEndAt, previewElementRect, targetElementRect) {
      var _this2 = this;

      var item = _lodash2.default.find(this.items, { id: model.id });
      if (!item || !item.selected) return;

      var _intention = [];
      if (model.type === 'moveItem') {

        var newLoc = {
          x: previewElementRect.x - targetElementRect.x,
          y: previewElementRect.y - targetElementRect.y
        };

        var dragItems = this.getMultiDragItems();
        if (this.dragOffsets.length == 0) {
          for (var _i = 0; _i < dragItems.length; _i++) {
            this.dragOffsets.push({
              id: dragItems[_i].id,
              xOff: dragItems[_i].x - newLoc.x,
              yOff: dragItems[_i].y - newLoc.y
            });
          }
        }

        var tIntentions = [];

        for (var off = 0; off < this.dragOffsets.length; off++) {
          var o = this.dragOffsets[off];

          var offIindex = _lodash2.default.findIndex(this.items, { id: o.id });
          var offItm = this.items[offIindex];

          var aInt = {
            id: offItm.id,
            x: newLoc.x + o.xOff,
            y: newLoc.y + o.yOff,
            width: offItm.width,
            height: offItm.height
          };
          tIntentions.push(aInt);
        }

        _intention = tIntentions;
      } else if (model.type === 'resizeItem') {
        var dragItems;
        var i;

        (function () {
          dragItems = _this2.getMultiDragItems();

          for (var _i2 = 0; _i2 < dragItems.length; _i2++) {
            _intention.push({
              id: dragItems[_i2].id,
              x: dragItems[_i2].x,
              y: dragItems[_i2].y,
              width: dragItems[_i2].width,
              height: dragItems[_i2].height
            });
          }

          var delta = {
            x: Math.round(mouseEndAt.x - mouseStartAt.x),
            y: Math.round(mouseEndAt.y - mouseStartAt.y)
          };

          for (i = 0; i < _intention.length; i++) {

            _lodash2.default.each(model.resize, function (char) {
              switch (char) {
                case 'n':
                  if (delta.y > _intention[i].height - MIN_HEIGHT) delta.y = _intention[i].height - MIN_HEIGHT;
                  _intention[i].y += delta.y;
                  _intention[i].height -= delta.y;
                  break;
                case 's':
                  if (delta.y < MIN_HEIGHT - _intention[i].height) delta.y = MIN_HEIGHT - _intention[i].height;
                  _intention[i].height += delta.y;
                  break;
                case 'w':
                  if (delta.x > _intention[i].width - MIN_WIDTH) delta.x = _intention[i].width - MIN_WIDTH;
                  _intention[i].x += delta.x;
                  _intention[i].width -= delta.x;
                  break;
                case 'e':
                  if (delta.x < MIN_WIDTH - _intention[i].width) delta.x = MIN_WIDTH - _intention[i].width;
                  _intention[i].width += delta.x;
                  break;
                default:
              }
            });
          }
        })();
      }

      if (this.snapMode === 'grid') {
        Object.assign(_intention[0], (0, _snapToGrid.snapToGrid)(_intention[0], { resize: model.resize }));
      } else {
        var others = _lodash2.default.reject(this.items, { id: model.id });
        var container = { x: 0, y: 0, width: this.width, height: this.height };
        Object.assign(_intention, (0, _snapToEdge.snapToEdge)(_intention[0], { resize: model.resize, container: container, neighbourPositions: others }));
      }

      this.intention = _intention;
    };

    Container.prototype.dndDrop = function dndDrop() {

      var self = this;
      var items = this.items,
          intention = this.intention;

      if (this.marqueeShape) {
        this.findMarqueeSelectedItems(this.marqueeShape);
        this.marqueeShape = null;
        this.drawMarquee = false;
        this.ea.publish('selectionFinished', self.selections);
        setTimeout(self.resetWasMarqueeSelecting.bind(self), 1000);
        return;
      }

      if (!intention) return;

      for (var i = 0; i < intention.length; i++) {
        var intent = intention[i];
        var oIndex = _lodash2.default.findIndex(items, { id: intent.id });
        var item = items[oIndex];
        items.splice(oIndex, 1);

        items.push(_extends({}, item, {
          x: intent.x,
          y: intent.y,
          width: intent.width,
          height: intent.height
        }));
      }
    };

    Container.prototype.getMultiDragItems = function getMultiDragItems() {
      var self = this;
      return _lodash2.default.filter(self.items, function (i) {
        return i.selected;
      });
    };

    Container.prototype.resetIntention = function resetIntention() {
      this.intention = null;

      this.dragOffsets = [];
    };

    _createClass(Container, [{
      key: 'patchedItems',
      get: function get() {
        var items = this.items,
            intention = this.intention;

        if (!intention) return items;

        var patched = [];
        var itemArray = [];

        if (Array.isArray(intention)) {
          var idList = _lodash2.default.map(intention, function (x) {
            return x.id;
          });
          patched = _lodash2.default.reject(items, function (i) {
            return idList.includes(i.id);
          });
          itemArray = _lodash2.default.filter(this.items, function (i) {
            return idList.includes(i.id);
          });
        } else {
          patched = _lodash2.default.reject(items, { id: intention.id });
          itemArray = _lodash2.default.filter(this.items, { id: intention.id });
        }

        for (var i = 0; i < itemArray.length; i++) {
          var aItm = itemArray[i];
          var intent = Array.isArray(intention) ? _lodash2.default.find(intention, { id: aItm.id }) : intention;

          patched.push(_extends({}, aItm, {
            x: intent.x,
            y: intent.y,
            width: intent.width,
            height: intent.height
          }));
        }

        return patched;
      }
    }]);

    return Container;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'items', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'edit', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'fullwidth', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: function initializer() {
      return false;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, 'patchedItems', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'patchedItems'), _class2.prototype)), _class2)) || _class);
});;
define('text!formbuilder/container.html',[],function(){return "<template><require from=\"./styles/container.css\"></require><require from=\"./box\"></require><require from=\"./tools/static-text\"></require><require from=\"./tools/checkbox\"></require><require from=\"./tools/textbox\"></require><require from=\"./tools/listbox\"></require><require from=\"./tools/signature\"></require><require from=\"./tools/imagebox\"></require><require from=\"./tools/mytable\"></require><require from=\"./charts/chart-bar\"></require><style>.show-grid{box-sizing:border-box;margin:0;height:100%;width:100%;background-size:10px 10px;background-image:repeating-linear-gradient(0deg,transparent,transparent 9px,#e0e0e0 9px,#e0e0e0 10px),repeating-linear-gradient(-90deg,transparent,transparent 9px,#e0e0e0 9px,#e0e0e0 10px)}</style><div ref=\"dndElement\" class=\"container ${showGrid ? 'show-grid' : ''} w-100 h-100 p-0 m-0 ${showResizeArea ? 'show-resize-area' : ''}\" style=\"max-width:none\" css=\"overflow: ${edit ? 'hidden' : 'visible'};\" pointerup.delegate=\"deselectAll($event)\"><template repeat.for=\"item of patchedItems\"><template if.bind=\"item.toolType==='STATICTEXT'\"><static-text item.bind=\"item\"></static-text></template><template if.bind=\"item.toolType==='HR'\"><static-text item.bind=\"item\"></static-text></template><template if.bind=\"item.toolType=='CHECKBOX'\"><checkbox item.bind=\"item\"></checkbox></template><template if.bind=\"item.toolType=='TEXTBOX'\"><textbox item.bind=\"item\"></textbox></template><template if.bind=\"item.toolType=='LISTBOX'\"><listbox item.bind=\"item\"></listbox></template><template if.bind=\"item.toolType=='SIGNATURE'\"><signature item.bind=\"item\"></signature></template><template if.bind=\"item.toolType=='IMAGEBOX'\"><imagebox item.bind=\"item\"></imagebox></template><template if.bind=\"item.toolType=='MYTABLE'\"><mytable item.bind=\"item\" fullwidth.bind=\"fullwidth\"></mytable></template><template if.bind=\"item.toolType=='CHARTBAR' || item.toolType=='CHARTLINE'\"><chart-bar item.bind=\"item\"></chart-bar></template></template><div css=\"position: ${drawMarquee ? 'absolute' : 'unset'}\"><svg ref=\"dndElement\" width=\"816\" height=\"1056\"><rect if.bind=\"drawMarquee\" x.bind=\"marqueeShape.x\" y.bind=\"marqueeShape.y\" width.bind=\"marqueeShape.width\" height.bind=\"marqueeShape.height\" stroke=\"blue\" stroke-width=\"1\" fill=\"transparent\"></rect></svg></div></div></template>";});;
define('formbuilder/customElements/datasetPicker',['exports', 'aurelia-framework'], function (exports, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DatasetPicker = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _dec2, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

  var DatasetPicker = exports.DatasetPicker = (_dec = (0, _aureliaFramework.customElement)('dataset-picker'), _dec2 = (0, _aureliaFramework.inject)(_aureliaFramework.ObserverLocator), _dec(_class = _dec2(_class = (_class2 = function () {
    function DatasetPicker(ObserverLocator) {
      _classCallCheck(this, DatasetPicker);

      _initDefineProp(this, 'datacolumncallback', _descriptor, this);

      _initDefineProp(this, 'categories', _descriptor2, this);

      _initDefineProp(this, 'formhelper', _descriptor3, this);

      _initDefineProp(this, 'data', _descriptor4, this);

      this.selectedCategory = null;

      this.observerLocator = ObserverLocator;
    }

    DatasetPicker.prototype.categoryClicked = function categoryClicked(category) {
      var self = this;
      if (category.items.length > 0) {
        self.selectCategory(category);
      } else {
        if (category.isCustom) {
          self.getCustomValuesWithCategory(category, function (res) {
            self.selectCategory(category);
          });
        } else {
          self.getReportingColumnsWithCategory(category, function (res) {
            self.selectCategory(category);
          });
        }
      }
    };

    DatasetPicker.prototype.dataColumnClicked = function dataColumnClicked(dc) {
      var self = this;
      if (self.datacolumncallback != undefined) {
        self.datacolumncallback({ dataColumn: dc });
      }
    };

    DatasetPicker.prototype.selectCategory = function selectCategory(category) {
      var self = this;
      for (var g = 0; g < self.categories.length; g++) {
        if (self.categories[g].name == category.name) {
          self.selectedCategory = self.categories[g];
          self.categories[g].expanded = true;
        } else {
          self.categories[g].expanded = false;
        }
      }
    };

    DatasetPicker.prototype.getReportingColumnsWithCategory = function getReportingColumnsWithCategory(category, callback) {
      var self = this;
      var url = 'reportingcolumninfo/elements/lists?category=' + category.data.TableFriendlyName;
      self.data.getWithUrl(url, function (res) {
        for (var c = 0; c < res.length; c++) {
          var rc = self.formhelper.getNewDataColumn(res[c]);
          rc.name = res[c].ColumnFriendlyName;
          rc.editable = res[c].Editable;
          rc.listId = res[c].ListId;
          rc.id = res[c].ColumnID;
          rc.displayType = res[c].DisplayType;
          rc.tableName = res[c].TableName;
          rc.columnName = res[c].ColumnName;
          rc.columnAlias = res[c].ColumnAlias;
          category.items.push(rc);
        }
        if (callback) {
          callback();
        }
      });
    };

    DatasetPicker.prototype.getCustomValuesWithCategory = function getCustomValuesWithCategory(category, callback) {
      var self = this;
      var url = 'customvalues?dataset=' + category.name;
      self.data.getWithUrl(url, function (res) {
        for (var c = 0; c < res.length; c++) {
          var rc = self.formhelper.getNewDataColumn(res[c]);
          rc.name = res[c].Name;
          rc.editable = true;
          rc.listId = res[c].ListId;
          rc.id = res[c].Id;
          rc.displayType = res[c].Datatype;
          rc.tableName = 'OD_GO_Forms_Custom_Values_Instance';
          rc.columnName = 'Value';
          category.items.push(rc);
        }
        if (callback) {
          callback();
        }
      });
    };

    return DatasetPicker;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'datacolumncallback', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'categories', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'formhelper', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, 'data', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class) || _class);
});;
define('text!formbuilder/customElements/datasetPicker.html',[],function(){return "<template><style>.point-three-border{border:1px solid rgba(0,0,0,.3)}</style><div repeat.for=\"c of categories\" class=\"card point-three-border\"><div class=\"card-header\"><h2 class=\"mb-0\"><button class=\"btn btn-link btn-block text-left\" type=\"button\" style=\"font-size:1.2rem;font-weight:500;line-height:1.2\" data-toggle=\"collapse\" data-target.bind=\"c.dataTarget\" aria-expanded=\"true\" click.delegate=\"categoryClicked(c)\"><i class=\"fa fa-database mr-1\" aria-hidden=\"true\"></i>${c.name} <i class=\"fa ${c.expanded ? 'fa-angle-down' : 'fa-angle-up'} float-right\" aria-hidden=\"true\"></i></button></h2></div><div id.bind=\"c.collapseId\" class=\"collapse\" data-parent=\"#accordionExample\"><ul class=\"list-group list-group-flush\"><li repeat.for=\"rc of c.items\" class=\"list-group-item ${rc.selected ? 'active' : ''} d-flex align-items-center\" click.delegate=\"dataColumnClicked(rc)\"><span class=\"fa-stack text-muted mr-1\"><i class=\"fa fa-database fa-stack-1x\" aria-hidden=\"true\"></i> <i if.bind=\"!rc.editable\" class=\"fa fa-ban fa-stack-2x\" aria-hidden=\"true\"></i> </span><span>${rc.name}</span><i if.bind=\"rc.listId\" class=\"fa fa-list-ul text-muted ml-auto\" aria-hidden=\"true\"></i></li></ul></div></div></template>";});;
define('formbuilder/customValuesBuilder',['exports', '../helpers/helper', 'aurelia-framework', '../data/go/data', 'aurelia-event-aggregator', './formhelper', 'lodash', 'aurelia-dialog', '../go/popupHelper'], function (exports, _helper, _aureliaFramework, _data, _aureliaEventAggregator, _formhelper, _lodash, _aureliaDialog, _popupHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CustomValuesBuilder = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _dec2, _class2, _desc, _value, _class3, _descriptor, _descriptor2;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var List = function List(name, id) {
    _classCallCheck(this, List);

    this.name = name;
    this.id = id;
    this.options = [];
    this.showSaveButton = false;
    this.showNormal = true;
    this.showName = true;
    this.canAdd = true;
  };

  var ReportingColumnInfo = function () {
    function ReportingColumnInfo(data, parent) {
      _classCallCheck(this, ReportingColumnInfo);

      this.data = data;
      this.checked = false;
      this.parent = parent;
    }

    ReportingColumnInfo.prototype.checkItem = function checkItem() {
      this.checked = this.checked ? false : true;
      this.parent.itemCheckedChanged = this.checked;
    };

    return ReportingColumnInfo;
  }();

  var Category = function Category() {
    _classCallCheck(this, Category);

    this.itemCheckedChanged = false;

    this.items = [];
  };

  var CustomValuesBuilder = exports.CustomValuesBuilder = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _data.Data, _aureliaEventAggregator.EventAggregator, _formhelper.formhelper, _aureliaDialog.DialogService, _popupHelper.PopupHelper), _dec2 = (0, _aureliaFramework.computedFrom)('selectedCategory', 'selectedCategory.itemCheckedChanged', 'selectedList'), _dec(_class2 = (_class3 = function () {
    CustomValuesBuilder.prototype.selectedCategoryNameChanged = function selectedCategoryNameChanged(newval, oldVal) {
      this.loadCategory(newval);
    };

    _createClass(CustomValuesBuilder, [{
      key: 'canUpdate',
      get: function get() {
        if (this.selectedCategory == null || this.selectedList == null) {
          return false;
        }
        var checked = _.filter(this.selectedCategory.items, function (c) {
          return c.checked;
        });
        return checked.length > 0 ? true : false;
      }
    }]);

    function CustomValuesBuilder(helper, Data, EventAggregator, formhelper, DialogService, PopupHelper) {
      _classCallCheck(this, CustomValuesBuilder);

      _initDefineProp(this, 'selectedList', _descriptor, this);

      this.lists = [];
      this.reportingColumnInfos = [];
      this.categories = ['Ankle Exam', 'Knee Exam', 'Hip Exam', 'Hand Exam', 'Elbow Exam', 'Shoulder Exam', 'Cervical Exam', 'Lumbo Thoracic'];

      _initDefineProp(this, 'selectedCategoryName', _descriptor2, this);

      this.selectedCategory = null;

      this.helper = helper;
      this.data = Data;
      this.ea = EventAggregator;
      this.formhelper = formhelper;
      this.dialogService = DialogService;
      this.popupHelper = PopupHelper;
    }

    CustomValuesBuilder.prototype.activate = function activate(params) {
      var self = this;

      self.selectedList = { showSaveButton: false, showNormal: true, showName: true, canAdd: false };

      self.loadLists();


      this.ea.subscribe("listboxOptionChanged", function (options) {
        self.selectedList.options = options;
      });
    };

    CustomValuesBuilder.prototype.loadCategory = function loadCategory(category) {
      var self = this;
      self.selectedCategory = null;;
      var url = 'reportingcolumninfo/elements/lists?category=' + category;
      self.data.getWithUrl(url, function (res) {
        var items = [];
        var cat = new Category();
        for (var i = 0; i < res.length; i++) {
          items.push(new ReportingColumnInfo(res[i], cat));
        }
        cat.items = items;
        self.selectedCategory = cat;
      });
    };

    CustomValuesBuilder.prototype.loadLists = function loadLists() {
      var self = this;
      self.lists = [];
      self.data.getWithUrl('goformslist/all', function (res) {
        for (var i = 0; i < res.length; i++) {
          var aList = new List(res[i].Name, res[i].Id);
          var json = res[i].Json ? JSON.parse(res[i].Json) : null;
          if (json != null) {
            for (var x = 0; x < json.length; x++) {
              var itm = json[x];
              var aItm = self.formhelper.getNewListItem(itm.text, itm.normal);
              aList.options.push(aItm);
            }
          }
          self.lists.push(aList);
        }
      });
    };

    CustomValuesBuilder.prototype.loadReportingColumns = function loadReportingColumns() {
      var self = this;
      self.data.getWithUrl('reportingcolumninfo/elements/lists', function (res) {
        self.reportingColumnInfos = res;
      });
    };

    CustomValuesBuilder.prototype.newList = function newList() {
      var self = this;
      self.popupHelper.openGenericInputPop("Create New List", ['Name'], null, false, function (res) {
        var imageName = res.inputs[0].value;
        var newList = new List(imageName, 0);
        self.lists.push(newList);
        self.selectedList = newList;
      });
    };

    CustomValuesBuilder.prototype.deleteList = function deleteList() {
      var self = this;

      if (self.selectedList == null) return;

      var msg = 'This will delete all associations to ' + self.selectedList.name + ' and database elements! Are you sure?';
      self.popupHelper.openGenericMessagePop(msg, 'Delete Picklist', ['YES', 'NO'], false, function (res) {
        var r = res.result;
        if (r == 'YES') {

          var saveDescription = 'Deleting ' + self.selectedList.name + '...';
          var saveDialog = self.helper.createNoty(saveDescription, 3000);
          saveDialog.show();

          if (self.selectedList && self.selectedList.id > 0) {
            var url = 'goformslist?id=' + self.selectedList.id;
            self.data.deleteWithUrl(url, function (res) {
              var getUrl = 'reportingcolumninfo/list/xref?listId=' + self.selectedList.id;
              self.data.getWithUrl(getUrl, function (getRes) {

                var reportingData = {
                  ReportingColumnInfos: []
                };
                for (var x = 0; x < getRes.length; x++) {
                  var d = getRes[x];
                  d.ListId = null;
                  reportingData.ReportingColumnInfos.push(d);
                }

                var putUrl = 'reportingcolumninfo/list/xref';
                self.data.putWithUrlAndData(putUrl, reportingData, function (res) {

                  var checked = _.filter(self.selectedCategory.items, function (c) {
                    return c.checked;
                  });

                  for (var i = 0; i < checked.length; i++) {
                    checked[i].data.ListId = null;
                    checked[i].data.ListName = null;
                  }
                });
              });

              var index = _.findIndex(self.lists, function (l) {
                return l.id == self.selectedList.id;
              });
              self.lists.splice(index, 1);
              self.selectedList = null;
              self.helper.updateNoty(saveDialog, "Deleted list!", "success", 1000);
            });
          } else {
            var index = _.findIndex(self.lists, function (l) {
              return l.id == self.selectedList.id;
            });
            self.lists.splice(index, 1);
            self.selectedList = null;
            self.helper.updateNoty(saveDialog, "Deleted list!", "success", 1000);
          }
        }
      });
    };

    CustomValuesBuilder.prototype.saveList = function saveList() {
      var self = this;

      var saveDescription = 'Saving ' + self.selectedList.name + '...';
      var saveDialog = self.helper.createNoty(saveDescription, 3000);
      saveDialog.show();

      if (self.selectedList && self.selectedList.id > 0) {
        var list = {
          Id: self.selectedList.id,
          Name: self.selectedList.name,
          Json: JSON.stringify(self.selectedList.options)
        };
        self.data.putWithUrlAndData('goformslist', list, function (res) {
          self.helper.updateNoty(saveDialog, "Saved list!", "success", 1000);
        });
      } else {
        var list = {
          Id: 0,
          Name: self.selectedList.name,
          Json: JSON.stringify(self.selectedList.options)
        };
        self.data.postWithUrlAndData('goformslist', JSON.stringify(list), function (res) {
          self.helper.updateNoty(saveDialog, "Saved list!", "success", 1000);
        });
      }
    };

    CustomValuesBuilder.prototype.removeListFromItem = function removeListFromItem(item) {
      var self = this;

      var data = {
        ReportingColumnInfos: []
      };

      var itm = {
        ReportingColumnInfoId: item.data.ColumnID,
        ListId: null
      };
      data.ReportingColumnInfos.push(itm);

      var saveDescription = 'Disassociating list from ' + item.data.ColumnFriendlyName + '...';
      var saveDialog = self.helper.createNoty(saveDescription, 3000);
      saveDialog.show();

      var url = 'reportingcolumninfo/list/xref';
      self.data.putWithUrlAndData(url, data, function (res) {
        item.data.ListId = null;
        item.data.ListName = null;
        self.helper.updateNoty(saveDialog, "Disassociated list!", "success", 1000);
      });
    };

    CustomValuesBuilder.prototype.applyListToSelected = function applyListToSelected() {
      var self = this;

      if (self.selectedList == null) return;

      var checked = _.filter(self.selectedCategory.items, function (c) {
        return c.checked;
      });

      var data = {
        ReportingColumnInfos: []
      };
      for (var i = 0; i < checked.length; i++) {
        var itm = {
          ReportingColumnInfoId: checked[i].data.ColumnID,
          ListId: self.selectedList.id
        };
        data.ReportingColumnInfos.push(itm);
      }

      var saveDescription = 'Applying list to selected items...';
      var saveDialog = self.helper.createNoty(saveDescription, 3000);
      saveDialog.show();

      var url = 'reportingcolumninfo/list/xref';
      self.data.putWithUrlAndData(url, data, function (res) {
        for (var _i = 0; _i < checked.length; _i++) {
          checked[_i].data.ListId = self.selectedList.id;
          checked[_i].data.ListName = self.selectedList.name;
        }
        self.helper.updateNoty(saveDialog, "Applied list successfully!", "success", 1000);
      });
    };

    return CustomValuesBuilder;
  }(), (_descriptor = _applyDecoratedDescriptor(_class3.prototype, 'selectedList', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class3.prototype, 'selectedCategoryName', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class3.prototype, 'canUpdate', [_dec2], Object.getOwnPropertyDescriptor(_class3.prototype, 'canUpdate'), _class3.prototype)), _class3)) || _class2);
});;
define('text!formbuilder/customValuesBuilder.html',[],function(){return "<template><div class=\"row\"><div class=\"col-md-12\"><p class=\"lead\">Create and associate list (on left) with data elements (on right).</p></div></div><div class=\"row\"><div class=\"col-md-5 pr-0\" style=\"overflow-y:auto;height:80vh\"><div class=\"card\"><h5 class=\"card-header d-flex align-items-center\"><i class=\"fa fa-list-ul\" aria-hidden=\"true\"></i><div class=\"input-group mx-2\"><select class=\"custom-select\" aria-label=\"Picklist\" value.bind=\"selectedList\"><option model.bind=\"null\">Lists...</option><option repeat.for=\"l of lists\" model.bind=\"l\">${l.name}</option></select><div class=\"input-group-append\"><button type=\"button\" class=\"btn btn-outline-primary\" click.delegate=\"newList()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button></div></div><div class=\"btn-group ml-auto\"><button type=\"button\" class=\"btn btn-primary\" disabled.bind=\"!selectedList\" click.delegate=\"saveList()\"><i class=\"fa fa-floppy-o\" aria-hidden=\"true\"></i></button> <button type=\"button\" class=\"btn btn-primary dropdown-toggle dropdown-toggle-split\" disabled.bind=\"!selectedList\" data-toggle=\"dropdown\" aria-expanded=\"false\"><span class=\"sr-only\">Toggle Dropdown</span></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"deleteList()\"><i class=\"fa fa-trash-o mr-2\" aria-hidden=\"true\"></i>Delete</a></div></div></h5><div class=\"card-body\"><compose view-model=\"./dialogs/listboxOptionsDialog\" model.bind=\"selectedList\" containerless></compose></div></div></div><div class=\"col-md-7\" style=\"height:80vh\"><div class=\"card\" style=\"height:80vh\"><h5 class=\"card-header d-flex align-items-center\"><i class=\"fa fa-database\" aria-hidden=\"true\"></i> <select class=\"form-control ml-2\" style=\"width:150px\" aria-label=\"Picklist\" value.bind=\"selectedCategoryName\"><option model.bind=\"null\">Data...</option><option repeat.for=\"l of categories\" model.bind=\"l\">${l}</option></select> <button type=\"button\" class=\"btn btn-primary ml-auto\" disabled.bind=\"!canUpdate\" click.delegate=\"applyListToSelected()\"><i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i> Update</button></h5><ul class=\"list-group list-group-flush\" style=\"overflow-y:auto\"><li repeat.for=\"c of selectedCategory.items\" class=\"list-group-item d-flex align-items-center\"><i class=\"fa ${c.checked ? 'fa-check-square-o' : 'fa-square-o'} text-muted fa-2x mr-2\" aria-hidden=\"true\" click.delegate=\"c.checkItem()\"></i> <span class=\"font-weight-bold\">${c.data.ColumnFriendlyName}</span><span if.bind=\"c.data.ListId\" class=\"ml-auto\"><span class=\"text-muted\"><i class=\"fa fa-list-ul mr-1\" aria-hidden=\"true\"></i>${c.data.ListName}</span><button type=\"button\" class=\"btn btn-danger ml-2\" click.delegate=\"removeListFromItem(c)\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\"></i></button></span></li></ul></div></div></div></template>";});;
define('formbuilder/dialogs/customSearchDialog',['exports', 'aurelia-dialog', 'aurelia-framework', '../../go/popupHelper', '../../data/go/data', 'lodash'], function (exports, _aureliaDialog, _aureliaFramework, _popupHelper, _data, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CustomSearchDialog = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  var _dec, _desc, _value, _class, _dec2, _dec3, _class2, _desc2, _value2, _class3;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Row = function Row() {
    _classCallCheck(this, Row);

    this.cells = [];
  };

  var Cell = function Cell() {
    _classCallCheck(this, Cell);

    this.value = null;
    this.index = 0;
  };

  var EditTableItem = (_dec = (0, _aureliaFramework.computedFrom)('editIndex'), (_class = function () {
    function EditTableItem(itm) {
      _classCallCheck(this, EditTableItem);

      this.item = itm;
      this.cell = null;
    }

    _createClass(EditTableItem, [{
      key: 'displayIndex',
      get: function get() {
        return this.editIndex == -1 ? 'X' : this.editIndex + 1;
      }
    }]);

    return EditTableItem;
  }(), (_applyDecoratedDescriptor(_class.prototype, 'displayIndex', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'displayIndex'), _class.prototype)), _class));
  var CustomSearchDialog = exports.CustomSearchDialog = (_dec2 = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _popupHelper.PopupHelper, _data.Data), _dec3 = (0, _aureliaFramework.computedFrom)('sqlObj'), _dec2(_class2 = (_class3 = function () {
    _createClass(CustomSearchDialog, [{
      key: 'searchPlaceholderDescription',
      get: function get() {
        var placeHolder = "Search...";
        if (this.sqlObj && this.sqlObj.where) {
          placeHolder = "Search ";
          for (var i = 0; i < this.sqlObj.where.length; i++) {
            if (this.sqlObj.where[i].data.ColumnFriendlyName) {
              placeHolder += this.sqlObj.where[i].data.ColumnFriendlyName.toLowerCase() + " ";
            }
          }
          placeHolder += "...";
        }
        return placeHolder;
      }
    }]);

    function CustomSearchDialog(DialogController, PopupHelper, Data) {
      _classCallCheck(this, CustomSearchDialog);

      this.popupTop = 0;
      this.popupLeft = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.sqlObj = null;
      this.searchResults = [];
      this.tableHeaders = [];
      this.searchTerm = null;
      this.headerClass = "flex-fill";
      this.editMode = true;
      this.editTableObject = null;

      this.dialogController = DialogController;
      this.popupHelper = PopupHelper;
      this.data = Data;
    }

    CustomSearchDialog.prototype.activate = function activate(obj) {
      var self = this;
      self.popupWidth = obj.popupWidth / 2;
      self.popupHeight = obj.popupHeight / 2;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;

      if (obj.myTable) {
        self.setupEditTableObject(obj.myTable);
      }
    };

    CustomSearchDialog.prototype.setupEditTableObject = function setupEditTableObject(myTable) {

      this.editTableObject = {
        items: []
      };

      var aRow = null;
      if (myTable.displayHeaders) {
        aRow = myTable.rows[1];
      } else {
        aRow = myTable.rows[0];
      }

      for (var c = 0; c < aRow.cells.length; c++) {
        var aEditTableItem = new EditTableItem(aRow.cells[c].item);
        this.editTableObject.items.push(aEditTableItem);
      }
    };

    CustomSearchDialog.prototype.attached = function attached() {
      var self = this;
      var res = $(self.cSearchDialog).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");

      var overlays = $('ux-dialog-overlay');
      for (var i = 0; i < overlays.length; i++) {
        var over = overlays[i];
        over.style.setProperty("z-index", "5001", "important");
      }

      var windowHeight = window.innerHeight;
      this.maxScrollHeight = windowHeight / 3;

      if (this.editMode && this.sqlObj == null) {
        this.openSqlSelector();
      }
    };

    CustomSearchDialog.prototype.search = function search() {
      var self = this;


      for (var i = 0; i < self.sqlObj.where.length; i++) {
        self.sqlObj.where[i].value = self.searchTerm;
      }

      self.data.postWithUrlAndData('helpers/sqlselector', JSON.stringify(self.sqlObj), function (dt) {
        self.buildResultRows(dt);
      });
    };

    CustomSearchDialog.prototype.buildResultRows = function buildResultRows(dataTable) {
      var self = this;
      for (var r = 0; r < dataTable.length; r++) {
        var dRow = dataTable[r];
        var first = r == 0 ? true : false;
        var props = Object.keys(dRow);
        var vals = Object.values(dRow);
        var aRow = new Row();
        for (var c = 0; c < props.length; c++) {
          var prop = props[c];
          var val = vals[c];
          var aCell = new Cell();
          aCell.value = val;
          aRow.cells.push(aCell);
        }
        self.searchResults.push(aRow);
      }
    };

    CustomSearchDialog.prototype.openSqlSelector = function openSqlSelector() {
      var self = this;
      self.popupHelper.openSqlSelector(function (res) {

        self.sqlObj = res;

        for (var i = 0; i < self.sqlObj.columns.length; i++) {
          var aCell = new Cell();
          aCell.value = self.sqlObj.columns[i].ColumnFriendlyName;
          aCell.index = i;
          self.tableHeaders.push(aCell);
        }
      }, {});
    };

    CustomSearchDialog.prototype.ok = function ok() {
      var self = this;
      self.dialogController.close(true, { name: self.formName, type: self.selectedType });
    };

    CustomSearchDialog.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    return CustomSearchDialog;
  }(), (_applyDecoratedDescriptor(_class3.prototype, 'searchPlaceholderDescription', [_dec3], Object.getOwnPropertyDescriptor(_class3.prototype, 'searchPlaceholderDescription'), _class3.prototype)), _class3)) || _class2);
});;
define('text!formbuilder/dialogs/customSearchDialog.html',[],function(){return "<template><style>.dialog-header-content{display:flex!important}.result-header{background-color:#d3d3d3}.result-row{border-bottom:1px solid #d3d3d3;height:50px}.edit-table{display:flex;flex-flow:column nowrap;border:1px solid #d3d3d3;border-bottom:none!important;border-right:none!important}.edit-row{display:flex;border-bottom:1px solid #d3d3d3}.edit-heading{font-weight:700}.edit-cell{display:flex;flex:1;align-items:center;border-right:1px solid}</style><ux-dialog ref=\"cSearchDialog\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\">Search</h4><i class=\"fa fa-times fa-2x ml-auto mr-2\" style=\"cursor:pointer\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body><div class=\"row mx-0\"><div class=\"input-group\"><input type=\"text\" class=\"form-control\" value.bind=\"searchTerm\" placeholder.bind=\"searchPlaceholderDescription\" aria-describedby=\"button-addon4\"><div class=\"input-group-append\" id=\"button-addon4\"><button class=\"btn btn-outline-secondary\" type=\"button\" click.delegate=\"search()\"><i class=\"fa fa-search\" aria-hidden=\"true\"></i></button> <button if.bind=\"editMode\" class=\"btn btn-outline-secondary\" type=\"button\" click.delegate=\"openSqlSelector()\"><i class=\"fa fa-cog\" aria-hidden=\"true\"></i></button></div></div></div><div class=\"card-body p-0 overflow-auto\" css=\"max-height: ${maxScrollHeight}px;\"><div class=\"tableFixHeadLight\" style=\"height:auto\"><table class=\"table table-sm\"><thead><tr><th repeat.for=\"h of tableHeaders\" scope=\"col\">${h.value}</th></tr></thead><tbody><tr repeat.for=\"r of searchResults\"><td repeat.for=\"c of r.cells\">${c.value}</td></tr></tbody></table></div><div class=\"d-flex flex-column\"><h5 class=\"text-secondary\">Table format...</h5><small>Search result selections will be added to current table with the following format. Set table columns to the search result columns you wish to populate.</small><div if.bind=\"editMode\" class=\"edit-table\"><div class=\"edit-row edit-heading\"><div repeat.for=\"i of editTableObject.items\" class=\"edit-cell pl-2\">${i.item.name} </div></div><div class=\"edit-row\"><div repeat.for=\"i of editTableObject.items\" class=\"edit-cell\"><select value.bind=\"i.cell.value\" class=\"form-control\" aria-describedby=\"languageHelp\"><option model.bind=\"null\">Column...</option><option repeat.for=\"c of tableHeaders\" model.bind=\"c\">${c.value}</option></select></div></div></div></div></div></ux-dialog-body><ux-dialog-footer style=\"position:absolute;bottom:0;width:99%\"><button disabled.bind=\"incomplete\" click.delegate=\"ok()\">OK</button></ux-dialog-footer></ux-dialog></template>";});;
define('formbuilder/dialogs/datasetPickerDialog',['exports', 'aurelia-dialog', 'aurelia-framework'], function (exports, _aureliaDialog, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DatasetPickerDialog = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var DatasetPickerDialog = exports.DatasetPickerDialog = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController), _dec(_class = function () {
    function DatasetPickerDialog(DialogController) {
      _classCallCheck(this, DatasetPickerDialog);

      this.popupTop = 0;
      this.popupLeft = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;

      this.dialogController = DialogController;
    }

    DatasetPickerDialog.prototype.activate = function activate(obj) {
      var self = this;
      self.popupWidth = obj.popupWidth / 3;
      self.popupHeight = obj.popupHeight / 4;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;
      self.editor = obj.editor;
    };

    DatasetPickerDialog.prototype.attached = function attached() {
      var self = this;
      var res = $(self.datasetPicker).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");

      var overlays = $('ux-dialog-overlay');
      for (var i = 0; i < overlays.length; i++) {
        var over = overlays[i];
        over.style.setProperty("z-index", "5001", "important");
      }
    };

    DatasetPickerDialog.prototype.dataColumnClicked = function dataColumnClicked(dataColumn) {
      var d = dataColumn;
    };

    DatasetPickerDialog.prototype.ok = function ok() {
      var self = this;
      self.dialogController.close(true, { name: self.formName, type: self.selectedType });
    };

    DatasetPickerDialog.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    return DatasetPickerDialog;
  }()) || _class);
});;
define('text!formbuilder/dialogs/datasetPickerDialog.html',[],function(){return "<template><require from=\"../customElements/datasetPicker\"></require><style>.dialog-header-content{display:flex!important}</style><ux-dialog ref=\"datasetPicker\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\">Dataset Picker</h4><i class=\"fa fa-times fa-2x ml-auto mr-2\" style=\"cursor:pointer\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body style=\"overflow-y:auto;height:inherit\"><dataset-picker datacolumncallback.call=\"dataColumnClicked(dataColumn)\" categories.bind=\"editor.categories\" formhelper.bind=\"editor.formhelper\" data.bind=\"editor.data\"></dataset-picker></ux-dialog-body><ux-dialog-footer><button click.delegate=\"ok()\">OK</button></ux-dialog-footer></ux-dialog></template>";});;
define('formbuilder/dialogs/listboxOptionsDialog',['exports', 'aurelia-dialog', 'aurelia-framework', '../formhelper', 'aurelia-event-aggregator', '../../go/popupHelper', 'lodash'], function (exports, _aureliaDialog, _aureliaFramework, _formhelper, _aureliaEventAggregator, _popupHelper, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ListboxOptionsDialog = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _dec, _class;

  var ListboxOptionsDialog = exports.ListboxOptionsDialog = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _formhelper.formhelper, _aureliaEventAggregator.EventAggregator, _popupHelper.PopupHelper), _dec(_class = function () {
    _createClass(ListboxOptionsDialog, [{
      key: 'enableAdd',
      get: function get() {
        if (this.canAdd) {
          var sql = _.find(this.options, function (o) {
            return o.sql != null;
          });
          return !sql ? true : false;
        } else {
          return false;
        }
      }
    }, {
      key: 'enableAddSql',
      get: function get() {
        return this.canAdd && this.options.length == 0 ? true : false;
      }
    }]);

    function ListboxOptionsDialog(DialogController, formhelper, EventAggregator, PopupHelper) {
      _classCallCheck(this, ListboxOptionsDialog);

      this.popupTop = 0;
      this.popupLeft = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.options = [];
      this.optionToAdd = null;
      this.showSaveButton = true;
      this.showNormal = false;
      this.showName = false;
      this.listName = null;
      this.canAdd = true;
      this.listHeight = 200;

      this.dialogController = DialogController;
      this.formHelper = formhelper;
      this.ea = EventAggregator;
      this.popupHelper = PopupHelper;
    }

    ListboxOptionsDialog.prototype.activate = function activate(obj) {
      var self = this;

      if (obj && obj.hasOwnProperty('showSaveButton')) {
        this.showSaveButton = obj.showSaveButton;
      }
      if (obj && obj.hasOwnProperty('showNormal')) {
        this.showNormal = obj.showNormal;
      }
      if (obj && obj.hasOwnProperty('showName')) {
        this.showName = obj.showName;
        this.listName = obj.name;
      }
      if (obj && obj.hasOwnProperty('canAdd')) {
        this.canAdd = obj.canAdd;
      }

      if (obj && obj.options) {
        self.options = this.convertOptionsToNewFormat(obj.options);
      }

      if (obj && obj.hasOwnProperty('listHeight')) {
        self.listHeight = obj.listHeight;
      }
    };

    ListboxOptionsDialog.prototype.convertOptionsToNewFormat = function convertOptionsToNewFormat(options) {
      var newFormat = _.find(options, function (o) {
        return o.text;
      });
      if (!newFormat) {
        var newOptions = [];
        for (var i = 0; i < options.length; i++) {
          var listItm = this.formHelper.getNewListItem(options[i], false);
          newOptions.push(listItm);
        }
        return newOptions;
      } else {
        return options;
      }
    };

    ListboxOptionsDialog.prototype.normalClicked = function normalClicked(o) {
      var normal = o.normal ? false : true;
      for (var i = 0; i < this.options.length; i++) {
        if (this.options[i].text == o.text) {
          this.options[i].normal = normal;
        } else {
          this.options[i].normal = normal ? false : true;
        }
      }
    };

    ListboxOptionsDialog.prototype.editClicked = function editClicked(o) {
      var self = this;
      self.popupHelper.openSqlSelector(function (sqlObj) {

        if (self.options.length > 0) {
          self.options[0].sql = sqlObj;
        } else {
          var listItm = self.formHelper.getNewListItem('SQL', false);
          listItm.sql = sqlObj;
          self.options.push(listItm);
          self.optionToAdd = null;
          self.ea.publish("listboxOptionChanged", self.options);
        }
      }, { sqlObj: o.sql });
    };

    ListboxOptionsDialog.prototype.ok = function ok() {
      var self = this;
      self.dialogController.close(true, { options: self.options });
    };

    ListboxOptionsDialog.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    ListboxOptionsDialog.prototype.addOption = function addOption() {
      if (this.optionToAdd && this.optionToAdd.length > 0) {
        var listItm = this.formHelper.getNewListItem(this.optionToAdd, false);
        this.options.push(listItm);
        this.optionToAdd = null;
        this.ea.publish("listboxOptionChanged", this.options);
      }
    };

    ListboxOptionsDialog.prototype.addSql = function addSql() {
      var self = this;
      self.popupHelper.openSqlSelector(function (sqlObj) {
        var listItm = self.formHelper.getNewListItem('SQL', false);
        listItm.sql = sqlObj;
        self.options.push(listItm);
        self.optionToAdd = null;
        self.ea.publish("listboxOptionChanged", self.options);
      }, null);
    };

    ListboxOptionsDialog.prototype.deleteOption = function deleteOption(o) {
      for (var i = 0; i < this.options.length; i++) {
        var op = this.options[i];
        if (op.text == o.text) {
          this.options.splice(i, 1);
          this.ea.publish("listboxOptionChanged", this.options);
          break;
        }
      }
    };

    return ListboxOptionsDialog;
  }()) || _class);
});;
define('text!formbuilder/dialogs/listboxOptionsDialog.html',[],function(){return "<template><div class=\"row\"><div class=\"col-md-12\"><h5 if.bind=\"showName\" class=\"text-uppercase\">${listName}</h5><div class=\"input-group mb-3\"><input type=\"text\" class=\"form-control\" placeholder=\"add option\" value.bind=\"optionToAdd\"><div class=\"input-group-append\"><button disabled.bind=\"!enableAdd\" class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" click.delegate=\"addOption()\">Add</button> <button disabled.bind=\"!enableAddSql\" class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" click.delegate=\"addSql()\">SQL</button></div></div><ul class=\"list-group list-group-flush\" style=\"overflow-y:scroll\" css=\"height: ${listHeight}px;\"><li repeat.for=\"o of options\" class=\"list-group-item px-0\"><div class=\"d-inline-block\" style=\"width:70%\"><i if.bind=\"o.sql\" class=\"fa fa-code mr-1\" aria-hidden=\"true\"></i>${o.text}</div><div class=\"d-inline-block\" style=\"width:135px;vertical-align:top\"><button if.bind=\"showNormal && !o.sql\" class=\"btn ${o.normal ? 'btn-primary' : 'btn-outline-primary'} mr-2\" type=\"button\" id=\"button-addon2\" click.delegate=\"normalClicked(o)\">Normal</button> <button if.bind=\"showNormal && o.sql\" class=\"btn btn-outline-primary mr-2\" type=\"button\" id=\"button-addon2\" click.delegate=\"editClicked(o)\">Edit</button> <button class=\"btn btn-outline-danger\" type=\"button\" id=\"button-addon2\" click.delegate=\"deleteOption(o)\"><i class=\"fa fa-trash-o\"></i></button></div></li></ul></div></div><div class=\"row\"><div class=\"col-md-12\"><button if.bind=\"showSaveButton\" class=\"btn btn-primary float-right\" click.delegate=\"ok()\">OK</button></div></div></template>";});;
define('formbuilder/dialogs/newCustomValueDialog',['exports', 'aurelia-dialog', 'aurelia-framework', 'lodash'], function (exports, _aureliaDialog, _aureliaFramework, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NewCustomValueDialog = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  var _dec, _dec2, _class, _desc, _value, _class2;

  var NewCustomValueDialog = exports.NewCustomValueDialog = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController), _dec2 = (0, _aureliaFramework.computedFrom)('customValueName', 'datasetName', 'dataType'), _dec(_class = (_class2 = function () {
    _createClass(NewCustomValueDialog, [{
      key: 'incomplete',
      get: function get() {
        if (this.customValueName === null || this.datasetName === null || this.dataType === null) {
          return true;
        }
        return false;
      }
    }]);

    function NewCustomValueDialog(DialogController) {
      _classCallCheck(this, NewCustomValueDialog);

      this.popupTop = 0;
      this.popupLeft = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.datasetList = [];
      this.customValueName = null;
      this.datasetName = null;
      this.dataType = null;
      this.dataTypes = [{ "name": 'text', "type": 'varchar' }, { "name": 'number', "type": 'int' }, { "name": 'date', "type": 'datetime' }, { "name": 'boolean', "type": 'bit' }];

      this.dialogController = DialogController;
    }

    NewCustomValueDialog.prototype.activate = function activate(obj) {
      var self = this;
      self.datasetList = obj.datasetList;
      self.datasetName = obj.datasetName;
      self.popupWidth = obj.popupWidth / 2;
      self.popupHeight = obj.popupHeight / 4;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = obj.popupWidth / 4;

      if (obj.options) {
        if (obj.options.isCheckbox) {
          var boolType = _.find(self.dataTypes, function (f) {
            return f.name == 'boolean';
          });
          self.dataTypes = [];
          self.dataTypes.push(boolType);
        }

        if (obj.options.isTextbox) {
          var boolIndex = _.indexOf(self.dataTypes, function (f) {
            return f.name == 'boolean';
          });
          self.dataTypes.splice(boolIndex, 1);
        }
      }
    };

    NewCustomValueDialog.prototype.attached = function attached() {
      var self = this;
      var res = $(self.genpicklist).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");

      var overlays = $('ux-dialog-overlay');
      for (var i = 0; i < overlays.length; i++) {
        var over = overlays[i];
        over.style.setProperty("z-index", "5001", "important");
      }
    };

    NewCustomValueDialog.prototype.selectDataset = function selectDataset(dataset) {
      this.datasetName = dataset;
    };

    NewCustomValueDialog.prototype.selectDataType = function selectDataType(datatype) {
      this.dataType = datatype;
    };

    NewCustomValueDialog.prototype.searchDatasetList = function searchDatasetList() {
      var self = this;
      return _.find(self.datasetList, function (d) {
        return d.toLowerCase() == self.datasetName.toLowerCase();
      });
    };

    NewCustomValueDialog.prototype.ok = function ok() {
      var self = this;
      var foundDataset = this.searchDatasetList();
      if (foundDataset) {
        self.datasetName = foundDataset;
      }
      self.dialogController.close(true, { name: self.customValueName, dataset: self.datasetName, datatype: self.dataType.type });
    };

    NewCustomValueDialog.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    return NewCustomValueDialog;
  }(), (_applyDecoratedDescriptor(_class2.prototype, 'incomplete', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'incomplete'), _class2.prototype)), _class2)) || _class);
});;
define('text!formbuilder/dialogs/newCustomValueDialog.html',[],function(){return "<template><style>.is-invalid{border-color:#dc3545;padding-right:calc(.75em + 2.3125rem);display:block}.is-invalid-color{border-color:#dc3545!important}.invalid-feedback{display:block!important}.dialog-header-content{display:flex!important}</style><ux-dialog ref=\"genpicklist\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\"><i class=\"fa fa-database mr-2\"></i>New Custom Value</h4><i class=\"fa fa-times fa-2x ml-auto mr-2\" style=\"cursor:pointer\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body><div class=\"row\"><div class=\"col-md-12\"><label for=\"nameInput\">Name</label> <input id=\"nameInput\" type=\"text\" value.bind=\"customValueName\" class=\"form-control ${!customValueName ? 'is-invalid': ''}\"><div if.bind=\"!customValueName\" class=\"invalid-feedback\">Name is required.</div></div></div><div class=\"row\"><div class=\"col-md-6\"><label for=\"typePicker\">Dataset</label><div class=\"input-group\"><input type=\"text\" class=\"form-control ${!datasetName ? 'is-invalid': ''}\" style=\"border-right:none\" value.bind=\"datasetName\"><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary ${!datasetName ? 'is-invalid-color': ''}\" style=\"border-top-right-radius:.25rem;border-bottom-right-radius:.25rem;border-left:none;border-color:#ced4da\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-caret-down\"></i></button><div class=\"dropdown-menu dropdown-menu-right\"><a class=\"dropdown-item\" repeat.for=\"t of datasetList\" href=\"#\" click.delegate=\"selectDataset(t)\">${t}</a></div></div></div><div if.bind=\"!datasetName\" class=\"invalid-feedback\">Dataset is required.</div></div><div class=\"col-md-auto\"><label for=\"typePicker\">Datatype</label><div class=\"input-group\"><input type=\"text\" class=\"form-control ${!dataType ? 'is-invalid': ''}\" style=\"border-right:none\" value.bind=\"dataType.name\"><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary ${!dataType ? 'is-invalid-color': ''}\" style=\"border-top-right-radius:.25rem;border-bottom-right-radius:.25rem;border-left:none;border-color:#ced4da\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-caret-down\"></i></button><div class=\"dropdown-menu dropdown-menu-right\"><a class=\"dropdown-item\" repeat.for=\"t of dataTypes\" href=\"#\" click.delegate=\"selectDataType(t)\">${t.name}</a></div></div></div><div if.bind=\"!dataType\" class=\"invalid-feedback\">Datatype is required.</div></div></div></ux-dialog-body><ux-dialog-footer><button disabled.bind=\"incomplete\" click.delegate=\"ok()\">OK</button></ux-dialog-footer></ux-dialog></template>";});;
define('formbuilder/dialogs/newFormDialog',['exports', 'aurelia-dialog', 'aurelia-framework'], function (exports, _aureliaDialog, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NewFormDialog = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  var _dec, _dec2, _class, _desc, _value, _class2;

  var NewFormDialog = exports.NewFormDialog = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController), _dec2 = (0, _aureliaFramework.computedFrom)('formName', 'selectedType'), _dec(_class = (_class2 = function () {
    _createClass(NewFormDialog, [{
      key: 'incomplete',
      get: function get() {
        if (this.formName === null || this.selectedType === null) {
          return true;
        }
        return false;
      }
    }]);

    function NewFormDialog(DialogController) {
      _classCallCheck(this, NewFormDialog);

      this.popupTop = 0;
      this.popupLeft = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.typeList = ['GO', 'PDF', 'REPORT'];
      this.selectedType = null;
      this.formName = null;

      this.dialogController = DialogController;
    }

    NewFormDialog.prototype.activate = function activate(obj) {
      var self = this;
      self.popupWidth = obj.popupWidth / 3;
      self.popupHeight = obj.popupHeight / 4;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;
    };

    NewFormDialog.prototype.attached = function attached() {
      var self = this;
      var res = $(self.genpicklist).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");

      var overlays = $('ux-dialog-overlay');
      for (var i = 0; i < overlays.length; i++) {
        var over = overlays[i];
        over.style.setProperty("z-index", "5001", "important");
      }
    };

    NewFormDialog.prototype.ok = function ok() {
      var self = this;
      self.dialogController.close(true, { name: self.formName, type: self.selectedType });
    };

    NewFormDialog.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    return NewFormDialog;
  }(), (_applyDecoratedDescriptor(_class2.prototype, 'incomplete', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'incomplete'), _class2.prototype)), _class2)) || _class);
});;
define('text!formbuilder/dialogs/newFormDialog.html',[],function(){return "<template><style>.dialog-header-content{display:flex!important}</style><ux-dialog ref=\"genpicklist\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\">New Form</h4><i class=\"fa fa-times fa-2x ml-auto mr-2\" style=\"cursor:pointer\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body><div class=\"row justify-content-center\"><div class=\"col\"><label for=\"nameInput\">Name</label> <input id=\"nameInput\" type=\"text\" value.bind=\"formName\" class=\"form-control\"></div><div class=\"col-auto\"><label for=\"typePicker\">Type</label> <select value.bind=\"selectedType\" class=\"custom-select ${!selectedType ? 'is-invalid': ''}\" id=\"typePicker\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"t of typeList\" model.bind=\"t\">${t}</option></select><div id=\"validationServer04Feedback\" class=\"invalid-feedback\">Please select a form type.</div></div></div></ux-dialog-body><ux-dialog-footer><button disabled.bind=\"incomplete\" click.delegate=\"ok()\">OK</button></ux-dialog-footer></ux-dialog></template>";});;
define('formbuilder/dialogs/sqlSelector',['exports', 'aurelia-dialog', 'aurelia-framework', '../../data/go/data', 'lodash'], function (exports, _aureliaDialog, _aureliaFramework, _data, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SqlSelector = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _dec2, _dec3, _class, _desc, _value, _class2, _descriptor, _descriptor2;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var WhereColumn = function WhereColumn(data, operator, value, andOrWhere) {
    _classCallCheck(this, WhereColumn);

    this.data = data;
    this.andOrWhere = andOrWhere;
    this._operator = operator;
    this.value = value;
  };

  var SqlSelector = exports.SqlSelector = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _data.Data), _dec2 = (0, _aureliaFramework.computedFrom)('column'), _dec3 = (0, _aureliaFramework.computedFrom)('whereColumn', 'whereColumnOperator', 'whereColumnValue'), _dec(_class = (_class2 = function () {
    SqlSelector.prototype.tableChanged = function tableChanged(newVal, oldVal) {
      if (newVal) {
        this.getDataColumnsForTable(newVal);

        if (newVal && oldVal && newVal.TableAlias != oldVal.TableAlias) {
          this.selectedColumns = [];
          this.selectedWhereColumns = [];
          this.andOrWhereOperator = 'WHERE';
          this.whereColumn = null;
          this.whereColumnOperator = null;
          this.whereColumnValue = null;
          this.isAndSelected = true;
          this.isOrSelected = false;
        }
      }
    };

    SqlSelector.prototype.columnChanged = function columnChanged(newVal, oldVal) {};

    _createClass(SqlSelector, [{
      key: 'isColumnAdded',
      get: function get() {
        return this.column == null ? true : false;
      }
    }, {
      key: 'isWhereAdded',
      get: function get() {
        if (this.whereColumn == null && this.whereColumnOperator == null && (this.whereColumnValue == null || this.whereColumnValue == "")) {
          return true;
        } else {
          return false;
        }
      }
    }]);

    function SqlSelector(DialogController, Data) {
      _classCallCheck(this, SqlSelector);

      this.popupTop = 0;
      this.popupLeft = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.dataTables = [];
      this.dataColumns = [];
      this.selectedColumns = [];
      this.selectedWhereColumns = [];

      _initDefineProp(this, 'table', _descriptor, this);

      this.tableMatcher = function (a, b) {
        return a != null && b != null && a.TableFriendlyName === b.TableFriendlyName;
      };

      _initDefineProp(this, 'column', _descriptor2, this);

      this.isAndSelected = true;
      this.isOrSelected = false;
      this.andOrWhereOperator = 'WHERE';
      this.sqlObjToLoad = null;
      this.stringFilterValues = [{
        friendlyOperator: 'Equal to',
        op: '=',
        not: false
      }, {
        friendlyOperator: 'Not Equal to',
        op: '!=',
        not: true
      }, {
        friendlyOperator: 'Begins with',
        op: 'LIKE',
        not: false
      }, {
        friendlyOperator: 'Not Begins with',
        op: 'NOT LIKE',
        not: true
      }, {
        friendlyOperator: 'Ends with',
        op: 'LIKE',
        not: false
      }, {
        friendlyOperator: 'Not Ends with',
        op: 'NOT LIKE',
        not: true
      }, {
        friendlyOperator: 'Contains',
        op: 'LIKE',
        not: false
      }, {
        friendlyOperator: 'Not Contains',
        op: 'NOT LIKE',
        not: true
      }];
      this.numberFilterValues = [{
        friendlyOperator: 'Equal to',
        op: '=',
        not: false
      }, {
        friendlyOperator: 'Not Equal to',
        op: '!=',
        not: true
      }, {
        friendlyOperator: 'Greater than',
        op: '>',
        not: false
      }, {
        friendlyOperator: 'Not Greater than',
        op: '!>',
        not: true
      }, {
        friendlyOperator: 'Less than',
        op: '<',
        not: false
      }, {
        friendlyOperator: 'Not Less than',
        op: '!<',
        not: true
      }, {
        friendlyOperator: 'Greater or Equal to',
        op: '>=',
        not: false
      }, {
        friendlyOperator: 'Not Greater or Equal to',
        op: '<',
        not: true
      }, {
        friendlyOperator: 'Less or Equal to',
        op: '<=',
        not: false
      }, {
        friendlyOperator: 'Not Less or Equal to',
        op: '>',
        not: true
      }];

      this.dialogController = DialogController;
      this.data = Data;
    }

    SqlSelector.prototype.activate = function activate(obj) {
      var self = this;
      self.popupWidth = obj.popupWidth / 2;
      self.popupHeight = obj.popupHeight / 2;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;
      if (obj.options) {
        if (obj.options.sqlObj) {
          self.sqlObjToLoad = obj.options.sqlObj;
        }
      }
    };

    SqlSelector.prototype.attached = function attached() {
      var self = this;

      self.getDataTables(function () {
        if (self.sqlObjToLoad) {
          setTimeout(self.setupSqlObjToLoad.bind(self), 500);
        }
      });

      var res = $(self.genpicklist).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");

      var overlays = $('ux-dialog-overlay');
      for (var i = 0; i < overlays.length; i++) {
        var over = overlays[i];
        over.style.setProperty("z-index", "5001", "important");
      }
    };

    SqlSelector.prototype.setupSqlObjToLoad = function setupSqlObjToLoad() {
      if (this.sqlObjToLoad) {
        this.table = this.sqlObjToLoad.table;
        this.selectedWhereColumns = this.sqlObjToLoad.where;
        this.selectedColumns = this.sqlObjToLoad.columns;
      }
    };

    SqlSelector.prototype.getDataTables = function getDataTables(callback) {
      var self = this;
      self.data.getWithUrl('reportingcolumninfo/categories', function (res) {
        self.dataTables = res;
        callback();
      });
    };

    SqlSelector.prototype.getDataColumnsForTable = function getDataColumnsForTable(table) {
      var self = this;
      self.data.getWithUrl('reportingcolumninfo?category=' + table.TableFriendlyName, function (res) {
        self.dataColumns = res;
      });
    };

    SqlSelector.prototype.addColumn = function addColumn() {
      var self = this;
      if (self.column) {
        if (!_.find(self.selectedColumns, function (c) {
          return c.ColumnID == self.column.ColumnID;
        })) {
          self.selectedColumns.push(self.column);
          self.column = null;
        }
      }
    };

    SqlSelector.prototype.addWhereColumn = function addWhereColumn() {
      var self = this;
      if (self.whereColumn && self.whereColumnOperator && self.whereColumnValue) {
        if (self.selectedWhereColumns.length == 0) {
          self.andOrWhereOperator = 'WHERE';
        } else if (self.isAndSelected) {
          self.andOrWhereOperator = 'AND';
        } else {
          self.andOrWhereOperator = 'OR';
        }

        if (!_.find(self.selectedWhereColumns, function (c) {
          return c.data.ColumnID == self.whereColumn.ColumnID;
        })) {
          var wc = new WhereColumn(self.whereColumn, self.whereColumnOperator, self.whereColumnValue, self.andOrWhereOperator);
          self.selectedWhereColumns.push(wc);
          self.whereColumn = null;
          self.whereColumnOperator = null;
          self.whereColumnValue = null;
        }
      }
    };

    SqlSelector.prototype.toggleAndOr = function toggleAndOr() {
      this.isAndSelected = this.isAndSelected ? false : true;
      this.isOrSelected = this.isAndSelected ? false : true;
    };

    SqlSelector.prototype.removeWhere = function removeWhere(wc) {
      var self = this;

      var foundIndex = _.findIndex(self.selectedWhereColumns, function (c) {
        return c.data.ColumnID == wc.data.ColumnID;
      });
      if (foundIndex > -1) {
        self.selectedWhereColumns.splice(foundIndex, 1);
      }

      for (var i = 0; i < self.selectedWhereColumns.length; i++) {
        self.selectedWhereColumns[i].andOrWhere = i == 0 ? 'WHERE' : self.selectedWhereColumns[i].andOrWhere;
      }
    };

    SqlSelector.prototype.removeSelect = function removeSelect(column) {
      var self = this;

      var foundIndex = _.findIndex(self.selectedColumns, function (c) {
        return c.ColumnID == column.ColumnID;
      });
      if (foundIndex > -1) {
        self.selectedColumns.splice(foundIndex, 1);
      }
    };

    SqlSelector.prototype.ok = function ok() {
      var self = this;
      self.dialogController.close(true, { table: self.table, where: self.selectedWhereColumns, columns: self.selectedColumns });
    };

    SqlSelector.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    return SqlSelector;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'table', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'column', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, 'isColumnAdded', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'isColumnAdded'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'isWhereAdded', [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, 'isWhereAdded'), _class2.prototype)), _class2)) || _class);
});;
define('text!formbuilder/dialogs/sqlSelector.html',[],function(){return "<template><style>.dialog-header-content{display:flex!important}.sql{font-family:monospace}.sql-blue{color:#00f}.sql-red{color:red}.sql-operator{color:gray}.sql-border{border:1px solid #d3d3d3;border-radius:.25rem}.sql-x{position:relative;top:0;right:0;color:#d3d3d3}.invalid-feedback{display:block}</style><ux-dialog ref=\"genpicklist\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\"><i class=\"fa fa-code mr-1\" aria-hidden=\"true\"></i>SQL Selector</h4><i class=\"fa fa-times fa-2x ml-auto mr-2\" style=\"cursor:pointer\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body><div class=\"row mb-2\"><div class=\"col-5\"><label for=\"nameInput\">Table</label><div class=\"form-group mb-0\"><select value.bind=\"table\" matcher.bind=\"tableMatcher\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"t of dataTables\" model.bind=\"t\">${t.TableFriendlyName}</option></select></div></div><div class=\"col pl-0\"><label for=\"nameInput\">Column</label><div class=\"input-group\"><select value.bind=\"column\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"c of dataColumns\" model.bind=\"c\">${c.ColumnFriendlyName}</option></select><div class=\"input-group-append\"><button type=\"button\" class=\"btn btn-outline-secondary btn-sm\" style=\"border-color:#ced4da\" click.delegate=\"addColumn()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button></div></div><div if.bind=\"!isColumnAdded\" class=\"invalid-feedback\">Click + to add to query.</div></div></div><div class=\"row justify-content-center mb-2\"><div class=\"col-5\"><label for=\"nameInput\" class=\"d-flex align-items-center\" style=\"min-height:31px\">Where<div if.bind=\"selectedWhereColumns.length > 0\" class=\"btn-toolbar ml-auto\" role=\"toolbar\" aria-label=\"Toolbar with button groups\"><div class=\"btn-group mr-2\" role=\"group\" aria-label=\"First group\"><button type=\"button\" class=\"btn btn-outline-primary btn-sm ${isAndSelected ? 'active' : ''}\" click.delegate=\"toggleAndOr()\">AND</button> <button type=\"button\" class=\"btn btn-outline-primary btn-sm ${isOrSelected ? 'active' : ''}\" click.delegate=\"toggleAndOr()\">OR</button></div></div></label><div class=\"form-group mb-0\"><select value.bind=\"whereColumn\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"c of dataColumns\" model.bind=\"c\">${c.ColumnFriendlyName}</option></select></div></div><div class=\"col pl-0\" style=\"align-content:flex-end\"><label style=\"color:transparent;height:31px\">Where Col</label><div class=\"input-group\"><div class=\"input-group-prepend\"><select value.bind=\"whereColumnOperator\" class=\"form-control\" style=\"max-width:120px\"><option model.bind=\"null\">Operator...</option><option repeat.for=\"o of stringFilterValues\" model.bind=\"o\">${o.friendlyOperator}</option></select></div><input type=\"text\" class=\"form-control\" placeholder=\"where...\" value.bind=\"whereColumnValue\"><div class=\"input-group-append\"><button type=\"button\" class=\"btn btn-outline-secondary btn-sm\" style=\"border-color:#ced4da\" click.delegate=\"addWhereColumn()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button></div></div><div if.bind=\"!isWhereAdded\" class=\"invalid-feedback\">Click + to add to query.</div></div></div><div class=\"row\"><div class=\"col\"><div class=\"card p-4\"><div class=\"d-flex flex-wrap align-items-start sql\" style=\"flex-direction:unset\"><template repeat.for=\"c of selectedColumns\"><span if.bind=\"$first\" class=\"mr-2 sql-blue d-inline-flex\">SELECT</span><div class=\"mr-2 d-inline-flex sql-border\" click.delegate=\"removeSelect(c)\"><span class=\"d-inline-flex\">${c.ColumnAlias}</span><i class=\"fa fa-times sql-x\" aria-hidden=\"true\"></i></div><span if.bind=\"!$last\" class=\"mr-2 d-inline-flex\">,</span></template></div><div if.bind=\"table\" class=\"d-flex flex-wrap align-items-start sql\" style=\"flex-direction:unset\"><span class=\"sql-blue\">FROM</span> <span class=\"ml-2\">${table.TableAlias}</span></div><div class=\"d-flex flex-wrap align-items-start sql\" style=\"flex-direction:unset\"><template repeat.for=\"wc of selectedWhereColumns\"><span class=\"mr-2 d-inline-flex ${$first ? 'sql-blue' : 'sql-operator'}\">${wc.andOrWhere}</span><div class=\"mr-2 d-inline-flex sql-border\" click.delegate=\"removeWhere(wc)\"><span class=\"d-inline-flex mr-2\">${wc.data.ColumnAlias}</span><span class=\"d-inline-flex mr-2 sql-operator\">${wc._operator.op}</span><span class=\"d-inline-flex mr-2 sql-red\">'${wc.value}'</span> <i class=\"fa fa-times sql-x\" aria-hidden=\"true\"></i></div></template></div></div></div></div></ux-dialog-body><ux-dialog-footer><button disabled.bind=\"incomplete\" click.delegate=\"ok()\">OK</button></ux-dialog-footer></ux-dialog></template>";});;
define('formbuilder/dialogs/tableCellOptions',['exports', 'aurelia-dialog', 'aurelia-framework', '../formhelper', 'lodash'], function (exports, _aureliaDialog, _aureliaFramework, _formhelper, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TableCellOptions = undefined;

  var _lodash2 = _interopRequireDefault(_lodash);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;

  var TableCellOptions = exports.TableCellOptions = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _formhelper.formhelper), _dec(_class = (_class2 = function () {
    TableCellOptions.prototype.cellChanged = function cellChanged(newVal, oldVal) {
      this.setupTableCellOptions(newVal);
    };

    TableCellOptions.prototype.paddingChanged = function paddingChanged(newVal, oldVal) {
      if (this.setup == true) return;

      this.updateCellPadding(newVal);
    };

    TableCellOptions.prototype.cellWidthChanged = function cellWidthChanged(newVal, oldVal) {
      if (this.setup == true) return;
      this.updateCellWidth(newVal);
    };

    TableCellOptions.prototype.cellHeightChanged = function cellHeightChanged(newVal, oldVal) {
      if (this.setup == true) return;
      this.updateCellHeight(newVal);
    };

    TableCellOptions.prototype.colorPickerVisibleChanged = function colorPickerVisibleChanged(newVal, oldVal) {
      if (newVal == false && oldVal == true) {
        if (this.updateBorderColor) {
          this.setBorderColor(this.pickerColor);
        } else {
          this.setBackgroundColor(this.pickerColor);
        }
      }
    };

    function TableCellOptions(DialogController, formhelper) {
      _classCallCheck(this, TableCellOptions);

      this.popupTop = 0;
      this.popupLeft = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.setup = true;
      this.options = null;

      _initDefineProp(this, 'item', _descriptor, this);

      _initDefineProp(this, 'cell', _descriptor2, this);

      _initDefineProp(this, 'editor', _descriptor3, this);

      this.borderPositionsList = [{ name: 'TOP', checked: false, value: 'border-top' }, { name: 'RIGHT', checked: false, value: 'border-right' }, { name: 'BOTTOM', checked: false, value: 'border-bottom' }, { name: 'LEFT', checked: false, value: 'border-left' }];
      this.borderSizes = [1, 2, 3, 4];
      this.borderSize = 1;
      this.borderColor = '#000000';
      this.backgroundColor = '#000000';
      this.updateBorderColor = true;
      this.pickerColor = null;
      this.pickerTop = 0;
      this.pickerLeft = 0;
      this.cellMode = true;

      _initDefineProp(this, 'padding', _descriptor4, this);

      _initDefineProp(this, 'cellWidth', _descriptor5, this);

      _initDefineProp(this, 'cellHeight', _descriptor6, this);

      this.myTableObject = null;

      _initDefineProp(this, 'colorPickerVisible', _descriptor7, this);

      this.dialogController = DialogController;
      this.formHelper = formhelper;
    }

    TableCellOptions.prototype.attached = function attached() {
      this.myTableObject = this.item.table;

      this.parseCellWidthHeight();
      this.setup = false;
    };

    TableCellOptions.prototype.setupTableCellOptions = function setupTableCellOptions(cell) {
      for (var c = 0; c < this.borderPositionsList.length; c++) {
        var border = this.borderPositionsList[c];
        var borderStyle = _lodash2.default.find(cell.styles, function (b) {
          return b.name == border.value;
        });
        border.checked = borderStyle ? true : false;
      }
    };

    TableCellOptions.prototype.toggleCellOrTable = function toggleCellOrTable() {
      this.cellMode = this.cellMode ? false : true;
    };

    TableCellOptions.prototype.parseCellWidthHeight = function parseCellWidthHeight() {
      var cHeight = _lodash2.default.find(this.cell.styles, function (s) {
        return s.name == 'height';
      });
      if (cHeight) {
        this.cellHeight = cHeight.value.replace('px', '');
      }
      var cWidth = _lodash2.default.find(this.cell.styles, function (s) {
        return s.name == 'width';
      });
      if (cWidth) {
        this.cellWidth = cWidth.value;
      } else {
        this.cellWidth = '100%';
      }
    };

    TableCellOptions.prototype.parseBorder = function parseBorder() {
      for (var i = 0; i < this.cell.styles.length; i++) {
        var style = this.cell.styles[i];
        if (style.name == 'border-top') {
          var pos = _lodash2.default.find(this.borderPositionsList, function (b) {
            return b.name == 'TOP';
          });
          pos.checked = true;
          this.borderSize = this.getBorderSizeFromStyle(style.value);
        } else if (style.name == 'border-right') {
          var pos = _lodash2.default.find(this.borderPositionsList, function (b) {
            return b.name == 'RIGHT';
          });
          pos.checked = true;
          this.borderSize = this.getBorderSizeFromStyle(style.value);
        } else if (style.name == 'border-bottom') {
          var pos = _lodash2.default.find(this.borderPositionsList, function (b) {
            return b.name == 'BOTTOM';
          });
          pos.checked = true;
          this.borderSize = this.getBorderSizeFromStyle(style.value);
        } else if (style.name == 'border-left') {
          var pos = _lodash2.default.find(this.borderPositionsList, function (b) {
            return b.name == 'LEFT';
          });
          pos.checked = true;
          this.borderSize = this.getBorderSizeFromStyle(style.value);
        }
      }
    };

    TableCellOptions.prototype.getBorderSizeFromStyle = function getBorderSizeFromStyle(borderStyle) {
      var splitStyle = borderStyle.split('px');
      if (splitStyle.length > 0) {
        return splitStyle[0];
      }
    };

    TableCellOptions.prototype.toggleTableHeaders = function toggleTableHeaders() {

      this.myTableObject.toggleTableHeaders();

      if (this.myTableObject.displayHeaders) {
        var row = this.myTableObject.getRow(0);

        var headerRow = row.cloneRow();
        this.myTableObject.insertRow(headerRow, 0);

        for (var c = 0; c < row.cells.length; c++) {
          var aCell = row.cells[c];

          var headerDescription = "Column " + c;
          if (aCell.item) {
            headerDescription = aCell.item.name;
          }

          var txtItm = this.formHelper.getNewItem(this.formHelper.generateItemIdWithForm(this.editor.form), null, 0, 0, 150, 50, this.formHelper.getTooltype("statictext"));
          txtItm.data = {};
          txtItm.html = headerDescription;

          headerRow.selectCell(c);

          this.editor.addItemToForm(txtItm);
        }
      } else {
        this.myTableObject.deleteRow(0);
      }
    };

    TableCellOptions.prototype.showColorPicker = function showColorPicker(setBorderColor) {
      this.updateBorderColor = setBorderColor;

      this.pickerLeft = document.documentElement.clientWidth / 2;
      this.pickerTop = document.documentElement.clientHeight / 2;

      if (this.updateBorderColor) {
        this.pickerColor = this.borderColor;
      } else {
        this.pickerColor = this.backgroundColor;
      }
      this.colorPickerVisible = true;
    };

    TableCellOptions.prototype.updateCellPadding = function updateCellPadding(padding) {

      if (this.cellMode) {
        var selectedCell = this.myTableObject.getSelectedCell();
        if (selectedCell) {
          var style = selectedCell.getStyle("padding");
          if (style) {
            style.value = padding + "px;";
            selectedCell.updateStyle(style);
          } else {
            selectedCell.addStyle('padding', padding + 'px');
          }
        }
      } else {
        for (var r = 0; r < this.myTableObject.rows.length; r++) {
          var aRow = this.myTableObject.rows[r];
          for (var c = 0; c < aRow.cells.length; c++) {
            var aCell = aRow.cells[c];
            var style = aCell.getStyle("padding");
            if (style) {
              style.value = padding + "px;";
              aCell.updateStyle(style);
            } else {
              aCell.addStyle('padding', padding + 'px');
            }
          }
        }
      }
    };

    TableCellOptions.prototype.updateCellHeight = function updateCellHeight(height) {
      var selectedCell = this.myTableObject.getSelectedCell();
      if (selectedCell) {
        var style = selectedCell.getStyle("height");
        if (style) {
          style.value = height + "px;";
          selectedCell.updateStyle(style);
        } else {
          selectedCell.addStyle('height', height + 'px');
        }
      }
    };

    TableCellOptions.prototype.updateCellWidth = function updateCellWidth(width) {

      var selectedCell = this.myTableObject.getSelectedCell();

      var column = this.myTableObject.columns[selectedCell.index];
      if (column) {
        column.width = width + "px";
      }
    };

    TableCellOptions.prototype.updateBorderSizeClicked = function updateBorderSizeClicked(size) {
      this.borderSize = size;
      var currentBorder = _lodash2.default.find(this.borderPositionsList, function (b) {
        return b.checked;
      });
      this.setCellBorder(currentBorder, this.borderColor, size);
    };

    TableCellOptions.prototype.borderPositionClick = function borderPositionClick(border) {

      for (var i = 0; i < this.borderPositionsList.length; i++) {
        if (this.borderPositionsList[i].name == border.name) {
          this.borderPositionsList[i].checked = border.checked ? false : true;
        }
      }

      if (border.name == 'ALL') {
        for (var i = 0; i < this.borderPositionsList.length; i++) {
          this.setCellBorder(this.borderPositionsList[i], this.borderColor, this.borderSize);
        }
      } else {
        this.setCellBorder(border, this.borderColor, this.borderSize);
      }
    };

    TableCellOptions.prototype.setBorderColor = function setBorderColor(color) {
      this.borderColor = color;

      var selectedCell = this.myTableObject.getSelectedCell();
      if (selectedCell) {
        var currentBorder = _lodash2.default.find(this.borderPositionsList, function (b) {
          return b.checked;
        });
        this.setCellBorder(currentBorder, color, this.borderSize);
      }
    };

    TableCellOptions.prototype.setCellBorder = function setCellBorder(border, color, size) {

      if (this.cellMode) {
        var selectedCell = this.myTableObject.getSelectedCell();
        if (selectedCell) {
          var style = selectedCell.getStyle(border.value);
          if (style) {
            if (!border.checked) {
              selectedCell.removeStyle(border.value);
            } else {
              style.value = size + "px solid " + color;
              selectedCell.updateStyle(style);
            }
          } else {
            selectedCell.addStyle(border.value, size + 'px solid ' + color);
          }
        }
      } else {
        for (var r = 0; r < this.myTableObject.rows.length; r++) {
          var aRow = this.myTableObject.rows[r];
          for (var c = 0; c < aRow.cells.length; c++) {
            var aCell = aRow.cells[c];
            var style = aCell.getStyle(border.value);
            if (style) {
              if (!border.checked) {
                aCell.removeStyle(border.value);
              } else {
                style.value = size + "px solid " + color;
                aCell.updateStyle(style);
              }
            } else {
              aCell.addStyle(border.value, size + 'px solid ' + color);
            }
          }
        }
      }
    };

    TableCellOptions.prototype.setBackgroundColor = function setBackgroundColor(color) {
      this.backgroundColor = color;

      if (this.cellMode) {
        var selectedCell = this.myTableObject.getSelectedCell();
        if (selectedCell) {
          var style = selectedCell.getStyle("background-color");
          if (style) {
            style.value = color;
            selectedCell.updateStyle(style);
          } else {
            selectedCell.addStyle('background-color', color);
          }
        }
      } else {
        for (var r = 0; r < this.myTableObject.rows.length; r++) {
          var aRow = this.myTableObject.rows[r];
          for (var c = 0; c < aRow.cells.length; c++) {
            var aCell = aRow.cells[c];
            var style = aCell.getStyle("background-color");
            if (style) {
              style.value = color;
              aCell.updateStyle(style);
            } else {
              aCell.addStyle('background-color', color);
            }
          }
        }
      }
    };

    TableCellOptions.prototype.getRowWithIndex = function getRowWithIndex(table, index) {
      var i = index == undefined ? table.rows.length - 1 : index;
      var row = table.rows.length > 0 ? table.rows[i] : null;
      return row;
    };

    TableCellOptions.prototype.deleteRow = function deleteRow() {
      var rowIndex = this.myTableObject.getSelectedRowIndex();
      this.myTableObject.deleteRow(rowIndex);
    };

    TableCellOptions.prototype.deleteColumn = function deleteColumn() {
      var selectedCell = this.myTableObject.getSelectedCell();
      this.myTableObject.deleteColumn(selectedCell.index);
    };

    TableCellOptions.prototype.addRow = function addRow() {

      var objTable = this.myTableObject;
      var rowIndex = objTable.getSelectedRowIndex();
      var rowToCopy = objTable.getRow(rowIndex);

      var newObjRow = this.formHelper.getNewTableRow();
      newObjRow.parent = objTable;

      for (var c = 0; c < rowToCopy.cells.length; c++) {
        var aCell = rowToCopy.cells[c];
        var cId = this.editor.form.getUniqueTableCellId();
        var newObjCell = this.formHelper.getNewTableCell(cId);
        newObjCell.styles = aCell.styles;
        newObjCell.colspan = aCell.colspan;
        newObjCell._updateStyleString();
        newObjRow.addCell(newObjCell);
      }

      objTable.insertRow(newObjRow, rowIndex + 1);
    };

    TableCellOptions.prototype.addColumn = function addColumn() {
      var objTable = this.myTableObject;
      for (var r = 0; r < objTable.rows.length; r++) {
        var aRow = objTable.rows[r];
        var cId = this.editor.form.getUniqueTableCellId();
        var newCell = this.formHelper.getNewTableCell(cId);

        newCell.styles = aRow.cells[aRow.cells.length - 1].styles;
        newCell._updateStyleString();
        aRow.addCell(newCell);
      }
    };

    return TableCellOptions;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'item', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'cell', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'editor', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, 'padding', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, 'cellWidth', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, 'cellHeight', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, 'colorPickerVisible', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return false;
    }
  })), _class2)) || _class);
});;
define('text!formbuilder/dialogs/tableCellOptions.html',[],function(){return "<template><require from=\"../tools/colorPicker\"></require><style>.color-circle{height:24px;width:24px;border-radius:50%;display:inline-block;border:1px solid}.input-value{display:inline-block;padding:0;height:24px;color:#495057;background-color:#fff;background-clip:padding-box;border:1px solid #ced4da;border-radius:.25rem}</style><div><div class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary dropdown-toggle\" style=\"border-radius:0;border-left:none\" data-toggle=\"dropdown\" aria-expanded=\"false\">Row Col</button><div class=\"dropdown-menu\"><a class=\"dropdown-item ${myTableObject.isRepeater ? 'disabled' : ''}\" click.delegate=\"addRow()\"><i class=\"fa fa-plus mr-1\" aria-hidden=\"true\"></i> Row </a><a class=\"dropdown-item\" click.delegate=\"addColumn()\"><i class=\"fa fa-plus mr-1\" aria-hidden=\"true\"></i> Column </a><a class=\"dropdown-item ${myTableObject.isRepeater ? 'disabled' : ''}\" click.delegate=\"deleteRow()\"><i class=\"fa fa-minus mr-1\" aria-hidden=\"true\"></i> Row </a><a class=\"dropdown-item\" click.delegate=\"deleteColumn()\"><i class=\"fa fa-minus mr-1\" aria-hidden=\"true\"></i> Column</a></div></div><div class=\"btn-group\" role=\"group\" if.bind=\"cell.hasLeftNeighbor()\"><button type=\"button\" class=\"btn btn-outline-primary\" style=\"border-radius:0;border-left:none\" click.delegate=\"cell.mergeCellLeft($event)\"><i class=\"fa fa-caret-square-o-left\" aria-hidden=\"true\"></i></button></div><div class=\"btn-group\" role=\"group\" if.bind=\"cell.hasRightNeighbor()\"><button type=\"button\" class=\"btn btn-outline-primary\" style=\"border-radius:0;border-left:none\" click.delegate=\"cell.mergeCellRight($event)\"><i class=\"fa fa-caret-square-o-right\" aria-hidden=\"true\"></i></button></div><div class=\"btn-group\" role=\"group\"><div class=\"btn btn-outline-primary\" style=\"border-radius:0;border-left:none\">Width <input type=\"text\" class=\"input-value ml-1\" style=\"width:40px\" value.bind=\"cellWidth\"></div></div><div class=\"btn-group\" role=\"group\"><div class=\"btn btn-outline-primary\" style=\"border-radius:0;border-left:none\">Height <input type=\"text\" class=\"input-value ml-1\" style=\"width:40px\" value.bind=\"cellHeight\"></div></div><div class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary dropdown-toggle\" style=\"border-radius:0;border-left:none\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-ellipsis-v\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" click.delegate=\"toggleTableHeaders()\">Display Table Headers</a></div></div></div><div><div class=\"btn-group\" role=\"group\"><div class=\"btn btn-outline-primary\" style=\"border-radius:0;border-left:none\" click.delegate=\"toggleCellOrTable()\"><span if.bind=\"cellMode\"><strong>Cell</strong></span> <span if.bind=\"!cellMode\"><strong>Table</strong></span></div></div><div class=\"btn-group\" role=\"group\"><div class=\"btn btn-outline-primary\" style=\"border-radius:0;border-left:none\">Padding <input type=\"text\" class=\"input-value ml-1\" style=\"width:40px\" value.bind=\"padding\"></div></div><div class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary dropdown-toggle\" style=\"border-radius:0;border-left:none\" data-toggle=\"dropdown\" aria-expanded=\"false\">Border</button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" repeat.for=\"b of borderPositionsList\" href=\"#\" click.delegate=\"borderPositionClick(b)\"><i class=\"fa ${b.checked ? 'fa-check-square-o' : 'fa-square-o'} mr-1\" aria-hidden=\"true\"></i> ${b.name} </a></div></div><div class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary dropdown-toggle\" style=\"border-radius:0;border-left:none\" data-toggle=\"dropdown\" aria-expanded=\"false\">Size ${borderSize} </button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" repeat.for=\"s of borderSizes\" href=\"#\" click.delegate=\"updateBorderSizeClicked(s)\"> ${s} </a></div></div><div class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary dropdown-toggle\" style=\"border-radius:0;border-left:none\" data-toggle=\"dropdown\" aria-expanded=\"false\">Color</button><div class=\"dropdown-menu\"><a class=\"dropdown-item d-flex align-items-center\" href=\"#\" click.delegate=\"showColorPicker(true)\">Border<div class=\"color-circle ml-1\" css=\"background-color: ${borderColor}\"></div></a><a class=\"dropdown-item d-flex align-items-center\" href=\"#\" click.delegate=\"showColorPicker(false)\">Background<div class=\"color-circle ml-1\" css=\"background-color: ${backgroundColor}\"></div></a></div><color-picker if.bind=\"colorPickerVisible\" visible.two-way=\"colorPickerVisible\" color.two-way=\"pickerColor\" top.bind=\"pickerTop\" left.bind=\"pickerLeft\"></color-picker></div></div></template>";});;
define('formbuilder/editor',['exports', '../helpers/helper', 'aurelia-framework', '../data/go/data', 'jquery', 'aurelia-event-aggregator', './formhelper', 'lodash', './dialogs/newFormDialog', 'aurelia-dialog', '../go/popupHelper', './dialogs/newCustomValueDialog', './dialogs/customSearchDialog'], function (exports, _helper, _aureliaFramework, _data, _jquery, _aureliaEventAggregator, _formhelper, _lodash, _newFormDialog, _aureliaDialog, _popupHelper, _newCustomValueDialog, _customSearchDialog) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Editor = undefined;

  var _jquery2 = _interopRequireDefault(_jquery);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var OGPref = function OGPref(name, data) {
    _classCallCheck(this, OGPref);

    this.data = data;
    this.name = name;
  };

  var Category = function Category(data, name, id) {
    _classCallCheck(this, Category);

    this.items = [];
    this.data = data;
    this.name = name;
    this.collapseId = 'collapse' + id;
    this.dataTarget = '#collapse' + id;
    this.expanded = false;
    this.isCustom = false;
  };

  var Editor = exports.Editor = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _data.Data, _aureliaEventAggregator.EventAggregator, _formhelper.formhelper, _aureliaDialog.DialogService, _popupHelper.PopupHelper), _dec(_class = (_class2 = function () {
    Editor.prototype.selectedItemChanged = function selectedItemChanged(newVal, oldVal) {
      if (oldVal && oldVal.toolType == 'MYTABLE') {
        oldVal.table.editMode = false;
      }
    };

    function Editor(helper, Data, EventAggregator, formhelper, DialogService, PopupHelper) {
      _classCallCheck(this, Editor);

      this.categories = [];
      this.categoriesReportingColumnInfo = [];
      this.categoriesCustomValues = [];
      this.selectedReportingColumnInfoData = null;
      this.selectedCategory = null;
      this.sidebarExpanded = false;

      _initDefineProp(this, 'form', _descriptor, this);

      this.forms = [];
      this.providers = [];

      _initDefineProp(this, 'selectedProvider', _descriptor2, this);

      this.barForms = true;
      this.barDatabase = false;
      this.barSelect = false;
      this.barFormsDisabled = false;
      this.barDatabaseDisabled = true;
      this.barSelectDisabled = true;
      this.marqueeSelected = false;
      this.isGoForm = false;
      this.showFormSettings = false;
      this.displayInNoteMenu = "Display in Note Menu";
      this.displayInDocumentDropdown = "Display in Document Tray";
      this.displayInPortalKiosk = "Use in Portal / Kiosk preferences";

      _initDefineProp(this, 'selectedItem', _descriptor3, this);

      _initDefineProp(this, 'pageTop', _descriptor4, this);

      this.bodyparts = [{ part: 'Ankle', table: 'OD_ANKLE_EXAM', prefTable: 'OD_ANKLE_PREF', idColumn: 'AnkleID' }, { part: 'Knee', table: 'OD_KNEE_EXAM', prefTable: 'OD_KNEE_PREF', idColumn: 'KneeID' }, { part: 'Hip', table: 'OD_HIP_EXAM', prefTable: 'OD_HIP_PREF', idColumn: 'HipID' }, { part: 'Wrist', table: 'OD_HAND_EXAM', prefTable: 'OD_HAND_PREF', idColumn: 'HandID' }, { part: 'Elbow', table: 'OD_ELBOW_EXAM', prefTable: 'OD_ELBOW_PREF', idColumn: 'ElbowID' }, { part: 'Shoulder', table: 'OD_SHOULDER_EXAM', prefTable: 'OD_SHOULDER_PREF', idColumn: 'ShoulderID' }, { part: 'Lumbar', table: 'OD_LUMBAR_EXAM', prefTable: 'OD_LUMBAR_PREF', idColumn: 'LumbarID' }];

      _initDefineProp(this, 'selectedBodypart', _descriptor5, this);

      this.selectedPrefSide = "Right";
      this.ogPrefs = [];
      this.selectedDataTypeBase = true;
      this.tableCellOptionsData = null;

      this.helper = helper;
      this.data = Data;
      this.ea = EventAggregator;
      this.formhelper = formhelper;
      this.dialogService = DialogService;
      this.popupHelper = PopupHelper;
    }

    Editor.prototype.activate = function activate(params) {
      var self = this;
      self.loadReportingColumnInfoCategories();
      self.formhelper.setupFonts();
    };

    Editor.prototype.toggleFormSettings = function toggleFormSettings() {
      this.showFormSettings = this.showFormSettings ? false : true;
    };

    Editor.prototype.displayInNoteMenuClicked = function displayInNoteMenuClicked() {
      var self = this;
      if (self.form) {
        self.form.displayInNoteMenu = self.form.displayInNoteMenu ? false : true;
      }
    };

    Editor.prototype.displayInExamDropdownClicked = function displayInExamDropdownClicked() {
      var self = this;
      if (self.form) {
        self.form.displayInExamDropdown = self.form.displayInExamDropdown ? false : true;
      }
    };

    Editor.prototype.displayInPortalKioskClicked = function displayInPortalKioskClicked() {
      var self = this;
      if (self.form) {
        self.form.displayInPortalKioskPreferences = self.form.displayInPortalKioskPreferences ? false : true;
      }
    };

    Editor.prototype.toggleSelectedDataType = function toggleSelectedDataType() {
      this.selectedDataTypeBase = this.selectedDataTypeBase ? false : true;
      if (!this.selectedDataTypeBase && this.categoriesCustomValues.length == 0) {
        this.loadCustomValuesCategories();
      } else {
        this.categories = this.selectedDataTypeBase ? this.categoriesReportingColumnInfo : this.categoriesCustomValues;
      }
      this.tabClicked("database");
    };

    Editor.prototype.pageTopChanged = function pageTopChanged(newVal, oldVal) {
      var pageHeight = 1056;

      var index = Math.floor(newVal / pageHeight);
      var currentPage = this.form.getCurrentPage();
      if (currentPage.index != index) {
        console.log("PAGE INDEX: " + index);
        this.form.selectPage(index);
      }
    };

    Editor.prototype.formChanged = function formChanged(newVal, oldVal) {
      if (newVal != null) {
        this.barFormsDisabled = false;
        this.barDatabaseDisabled = false;
        this.barSelectDisabled = false;
        this.isGoForm = newVal.type == "GO" ? true : false;
      }
    };

    Editor.prototype.prefSideClicked = function prefSideClicked(side) {
      this.selectedPrefSide = side;
      this.loadOGPreferences(this.selectedBodypart, side);
    };

    Editor.prototype.selectedBodypartChanged = function selectedBodypartChanged(newVal, oldVal) {
      this.loadOGPreferences(newVal, this.selectedPrefSide);
    };

    Editor.prototype.loadOGPreferences = function loadOGPreferences(bodypart, side) {
      var self = this;

      self.ogPrefs = [];

      var url = 'exam' + bodypart.part + '/preferences?providerId=' + self.selectedProvider.ProviderID + '&side=' + side;
      self.data.getWithUrl(url, function (res) {
        for (var i = 0; i < res.length; i++) {
          var nameColumn = bodypart.part + 'ExamType';
          var aPref = new OGPref(res[i][nameColumn], res[i]);
          self.ogPrefs.push(aPref);
        }
      });
    };

    Editor.prototype.selectedProviderChanged = function selectedProviderChanged(newVal, oldVal) {
      this.loadProviderForms(newVal.ProviderID);
    };

    Editor.prototype.blankForm = function blankForm(name, providerId, type) {
      var self = this;
      var aForm = self.formhelper.getNewForm();
      aForm.name = name;
      aForm.type = type;
      aForm.id = 0;
      aForm.providerId = providerId;
      var aPage = self.formhelper.getNewPage();
      aPage.selected = true;
      aForm.addPage(aPage);
      self.form = aForm;
      self.forms.push(aForm);
      return aForm;
    };

    Editor.prototype.newForm = function newForm() {
      var self = this;
      if (!self.selectedProvider) {
        return;
      }

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.dialogService.open({ viewModel: _newFormDialog.NewFormDialog, model: { popupWidth: windowWidth, popupHeight: windowHeight } }).then(function (openDialogResult) {
        return openDialogResult.closeResult;
      }).then(function (response) {
        var res = response.output;
        if (res != null) {
          var frm = self.blankForm(res.name, self.selectedProvider.ProviderID, res.type);
          self.selectForm(frm);
        }
      });
    };

    Editor.prototype.tryGetCustomValuesCategories = function tryGetCustomValuesCategories(callback) {
      var self = this;
      if (self.categoriesCustomValues.length == 0) {
        self.loadCustomValuesCategories(function (res) {
          callback(res);
        });
      } else {
        callback(self.categoriesCustomValues);
      }
    };

    Editor.prototype.openNewCustomValueDialog = function openNewCustomValueDialog(options, callback) {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var listId = null;
      if (options && options.isList) {
        listId = 0;
      }

      var dialogOptions = {};
      if (options) {
        if (options.isCheckbox) {
          dialogOptions.isCheckbox = options.isCheckbox;
        }
        if (options.isTextbox) {
          dialogOptions.isTextbox = options.isTextbox;
        }
      }

      self.tryGetCustomValuesCategories(function (customValueCategories) {
        var catNames = [];
        for (var i = 0; i < customValueCategories.length; i++) {
          catNames.push(customValueCategories[i].name);
        }

        var datasetName = self.selectedCategory ? self.selectedCategory.name : null;

        self.dialogService.open({ viewModel: _newCustomValueDialog.NewCustomValueDialog, model: { popupWidth: windowWidth, popupHeight: windowHeight, datasetList: catNames, "datasetName": datasetName, options: dialogOptions } }).then(function (openDialogResult) {
          return openDialogResult.closeResult;
        }).then(function (response) {

          var res = response.output;

          if (res != null) {
            var customValue = {
              Id: 0,
              Dataset: res.dataset,
              Name: res.name,
              ListId: listId,
              Bodypart: null,
              Datatype: res.datatype
            };

            self.data.postWithUrlAndData('customvalues', JSON.stringify(customValue), function (res) {

              var rc = self.formhelper.getNewDataColumn(res);
              rc.name = res.Name;
              rc.editable = true;
              rc.listId = res.ListId;
              rc.id = res.Id;
              rc.displayType = res.Datatype;
              rc.tableName = 'OD_GO_Forms_Custom_Values_Instance';
              rc.columnName = 'Value';

              var foundCat = _.find(self.categories, function (c) {
                return c.name == res.Dataset;
              });
              if (!foundCat) {
                foundCat = new Category(res, res.Dataset, res.Id);
                foundCat.isCustom = true;
                self.categoriesCustomValues.push(foundCat);
                self.categories = self.categoriesCustomValues;
              }

              foundCat.items.push(rc);

              callback(rc);
            });
          }
        });
      });
    };

    Editor.prototype.selectForm = function selectForm(form) {
      for (var i = 0; i < this.forms.length; i++) {
        if (this.forms[i].id === form.id) {
          this.forms[i].selected = true;
          this.form = this.forms[i];
        } else {
          this.forms[i].selected = false;
        }
      }

      this.maintoolbar.au.controller.viewModel.reset();
    };

    Editor.prototype.getItem = function getItem() {
      if (this.selectedItem) {
        if (this.selectedItem.toolType == 'MYTABLE') {
          var aCell = this.selectedItem.table.getSelectedCell();
          if (aCell == undefined || aCell.item == null) {
            return this.selectedItem;
          } else {
            return aCell.item;
          }
        } else {
          return this.selectedItem;
        }
      } else {
        return null;
      }
    };

    Editor.prototype.updateItem = function updateItem(item) {
      var self = this;

      var selectedItem = self.getItem();
      if (selectedItem.id == item.id) {
        selectedItem.style = item.style;
        selectedItem.html = item.html;
        selectedItem.data = item.data;
        selectedItem.data = item.dataColumn;
      }

      var page = self.form.getCurrentPage();
      for (var i = 0; i < page.items.length; i++) {
        var itm = page.items[i];
        if (itm.id == item.id) {
          itm.style = item.style;
          itm.html = item.html;
          itm.data = item.data;
          itm.data = item.dataColumn;
          break;
        }
      }
    };

    Editor.prototype.updateRange = function updateRange(e) {
      var self = this;

      if (!self.maintoolbar) return;

      var range = null;
      var selection = window.getSelection();

      if (selection.baseOffset == 0 && selection.rangeCount == 0 && selection.extentOffset == 0) {
        self.maintoolbar.au.controller.viewModel.setTextToolbarRange(range);
        return;
      };

      range = selection.getRangeAt(0);
      self.maintoolbar.au.controller.viewModel.setTextToolbarRange(range);
    };

    Editor.prototype.toggleGrid = function toggleGrid() {
      this.ea.publish('toggleGrid');
    };

    Editor.prototype.deleteForm = function deleteForm() {
      var self = this;
      if (self.form) {
        var url = 'goforms?id=' + self.form.id;
        self.data.deleteWithUrl(url, function (deleted) {
          if (deleted) {
            var index = _.findIndex(self.forms, function (f) {
              return f.id == self.form.id;
            });
            if (index > -1) {
              self.forms.splice(index, 1);
            }
          }
        });
      }
    };

    Editor.prototype.openCustomSearchDialog = function openCustomSearchDialog(mytable) {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.dialogService.open({ viewModel: _customSearchDialog.CustomSearchDialog, model: { popupWidth: windowWidth, popupHeight: windowHeight, myTable: mytable } }).then(function (openDialogResult) {
        return openDialogResult.closeResult;
      }).then(function (response) {
        var res = response.output;
        if (res != null) {}
      });
    };

    Editor.prototype.attached = function attached() {
      var self = this;

      self.loadProviders();

      self.ea.subscribe("showTableCellOptions", function (cellOptions) {
        self.tableCellOptionsData = cellOptions;
      });

      self.ea.subscribe('selectionFinished', function (items) {
        self.marqueeSelected = false;
      });

      self.ea.subscribe('deselectAll', function () {
        self.deselectAll();

        if (self.tableCellOptionsData) {
          self.tableCellOptionsData.show = false;
        }
      });

      self.ea.subscribe("itemClicked", function (item) {

        if (item.selected) return;

        var isSelectedItemTable = false;
        if (self.selectedItem && self.selectedItem.table) {
          isSelectedItemTable = true;
        }

        if (item.table == null && !isSelectedItemTable) {
          if (self.tableCellOptionsData) {
            self.tableCellOptionsData.show = false;
          }
        } else if (item.table && self.tableCellOptionsData && self.tableCellOptionsData.table != item.table) {
          self.tableCellOptionsData.show = false;
        }

        self.ea.publish('clearSelections');

        self.selectItem(item);
      });

      var imgPicker = document.getElementById('image-filepicker');
      imgPicker.onchange = function () {
        var imgFile = imgPicker.files[0];

        if (FileReader && imgFile) {

          var saveDescription = 'Loading ' + imgFile.name + '...';
          var saveDialog = self.helper.createNoty(saveDescription, 3000);
          saveDialog.show();

          var fr = new FileReader();
          fr.onload = function () {
            self.addImage(function (img) {
              var timeout = setTimeout(function () {
                img.dataColumn.image = fr.result;

                var image = new Image();
                image.src = fr.result;
                image.onload = function () {

                  saveDialog.close();

                  img.width = this.width + 16;
                  img.height = this.height + 16;
                };
              }, 1000);
            });
          };
          fr.readAsDataURL(imgFile);
        } else {}
      };
    };

    Editor.prototype.addTag = function addTag() {
      var self = this;

      if (self.form.tag != null) return;

      self.popupHelper.openGenericInputPop("Add Tag", ['Description'], null, false, function (res) {

        var tagDesc = res.inputs[0].value;
        self.form.tag = tagDesc;
      });
    };

    Editor.prototype.deleteTag = function deleteTag() {
      var self = this;

      if (self.form) {
        self.form.tag = null;
      }
    };

    Editor.prototype.createPrefClick = function createPrefClick(pref) {
      var self = this;
      self.createFormFromOGPref(pref, function (newForm) {
        self.forms.push(newForm);
        self.selectForm(newForm);
      });
    };

    Editor.prototype.createFormFromOGPref = function createFormFromOGPref(pref, callback) {

      var self = this;

      if (!self.selectedBodypart) {
        return;
      }

      var arbitraryItemsPerPage = 10;
      var itemCount = 0;
      var itemWidth = 150;
      var itemHeight = 50;
      var positionIncrement = 10;
      var x = 10;
      var y = 0;
      var pageIndex = 0;

      var itemsToUse = [];
      var fullNames = [];
      var keys = Object.keys(pref.data);
      for (var i = 0; i < keys.length; i++) {
        var val = pref.data[keys[i]];
        if (val != null) {
          itemsToUse.push({ 'column': keys[i], 'value': val });
          fullNames.push(self.selectedBodypart.table + '.' + keys[i]);
        }
      }

      var reportingData = {
        'Fullnames': fullNames
      };

      var reportingurl = 'reportingcolumninfo/OD_ReportingColumnInfo/fullnames';
      self.data.postWithUrlAndData(reportingurl, JSON.stringify(reportingData), function (reportingColumnInfo) {
        var newForm = self.formhelper.getNewForm();
        newForm.id = 0;
        newForm.name = pref.name;
        newForm.providerId = self.selectedProvider.ProviderID;
        newForm.type = "GO";
        newForm.ogPreferenceId = pref.data[self.selectedBodypart.idColumn];
        newForm.ogPreferenceTable = self.selectedBodypart.prefTable;


        var currentPage = self.formhelper.getNewPage();
        currentPage.id = "p" + pageIndex + 1;
        currentPage.index = pageIndex;
        newForm.addPage(currentPage, pageIndex);
        pageIndex++;

        for (var i = 0; i < reportingColumnInfo.length; i++) {

          if (itemCount == arbitraryItemsPerPage) {
            currentPage = self.formhelper.getNewPage();
            currentPage.id = "p" + pageIndex + 1;
            currentPage.index = pageIndex;
            newForm.addPage(currentPage, pageIndex);
            pageIndex++;
            itemCount = 0;
            x = positionIncrement;
            y = positionIncrement;
          } else {}

          var col = reportingColumnInfo[i];
          var tooltype = col.DisplayType == 'bit' ? self.formhelper.getTooltype('checkbox') : self.formhelper.getTooltype('textbox');
          var newItem = self.formhelper.getNewItem(i + 1, col.ColumnFriendlyName, x, y, itemWidth, itemHeight, tooltype);
          newItem.data = col;


          currentPage.addItem(newItem);
          itemCount++;

          y += itemHeight + positionIncrement;
        }

        newForm.selectPage(0);

        callback(newForm);
      });
    };

    Editor.prototype.createFormFromData = function createFormFromData(data) {
      var json = JSON.parse(data.Json);

      var pages = json.constructor === Array ? json : json.pages;

      var newForm = this.formhelper.getNewForm();
      newForm.id = data.Id;
      newForm.name = data.Description;
      newForm.providerId = data.ProviderId;
      newForm.type = data.Type;
      newForm.maturityDays = data.MaturityDays;
      newForm.ogPreferenceId = json.ogPreferenceId;
      newForm.ogPreferenceTable = json.ogPreferenceTable;
      newForm.tag = data.Tag;
      newForm.displayInNoteMenu = data.DisplayInNoteMenu ? data.DisplayInNoteMenu : false;
      newForm.displayInExamDropdown = data.DisplayInExamDropdown ? data.DisplayInExamDropdown : false;
      newForm.displayInPortalKioskPreferences = data.DisplayInPortalKioskPreferences ? data.DisplayInPortalKioskPreferences : false;
      newForm.primaryExam = data.PrimaryExam ? data.PrimaryExam : null;

      newForm.fullWidth = json.hasOwnProperty("fullWidth") ? json.fullWidth : false;

      var totalTableCellCountForForm = 0;

      for (var p = 0; p < pages.length; p++) {
        var aPage = pages[p];
        var newPage = this.formhelper.getNewPage();
        newPage.id = aPage.id;
        newPage.index = p;

        for (var i = 0; i < aPage.items.length; i++) {
          var aItm = aPage.items[i];

          newForm.tryAddDataIdToFormWithItem(aItm);

          var newItem = this.formhelper.getNewItem(aItm.id, aItm.name, aItm.x, aItm.y, aItm.width, aItm.height, aItm.toolType);
          if (aItm.toolType == 'MYTABLE') {
            this.formhelper.buildMyTableObjectDataWithItem(newForm, aItm, totalTableCellCountForForm, function (res) {
              newItem.table = res.table;
              totalTableCellCountForForm = res.totalCellCount;
            });
          } else {
            newItem.dataColumn = aItm.dataColumn;
          }
          newItem.html = aItm.html;
          newItem.style = aItm.style ? aItm.style : null;
          newItem.required = aItm.required;
          newItem.inputType = aItm.inputType;
          newItem.anchorLeft = aItm.anchorLeft;
          newItem.anchorRight = aItm.anchorRight;
          newItem.right = aItm.right;
          newItem.textRows = aItm.textRows;
          newPage.addItem(newItem);

          newForm.ids.push(aItm.id);
        }
        newForm.addPage(newPage, p);
      }

      newForm.selectPage(0);

      return newForm;
    };

    Editor.prototype.tabClicked = function tabClicked(tab) {
      switch (tab) {
        case 'forms':
          this.barForms = true;
          this.barDatabase = false;
          this.barSelect = false;
          break;
        case 'database':
          this.barForms = false;
          this.barDatabase = true;
          this.barSelect = false;
          break;
        case 'select':
          this.barForms = false;
          this.barDatabase = false;
          this.barSelect = true;
          break;
      }
    };

    Editor.prototype.providerSelected = function providerSelected(provider) {
      this.selectedProvider = provider;
    };

    Editor.prototype.loadProviders = function loadProviders() {
      var self = this;
      self.data.getProviders(false, function (pros) {
        self.providers = pros;

        var all = { ProviderID: 0, ProviderEntity: 'All' };
        self.providers.splice(0, 0, all);
      });
    };

    Editor.prototype.loadProviderForms = function loadProviderForms(providerId) {
      var self = this;

      self.form = null;
      self.forms = [];
      self.selectedItem = null;

      var url = 'goforms/provider?providerId=' + providerId;
      self.data.getWithUrl(url, function (res) {

        for (var f = 0; f < res.length; f++) {
          var aForm = res[f];
          var newForm = self.createFormFromData(aForm);
          self.forms.push(newForm);
        }

        if (self.forms.length > 0) {
          self.selectForm(self.forms[0]);
        }
      });
    };

    Editor.prototype._cleanFormItemForSave = function _cleanFormItemForSave(item) {
      if (item.hasOwnProperty('selected')) {
        delete item.selected;
      }

      if (item.hasOwnProperty('disabled')) {
        delete item.disabled;
      }

      if (item.hasOwnProperty('value')) {
        delete item.value;
      }
      if (item.hasOwnProperty('showToolbar')) {
        delete item.showToolbar;
      }
      if (item.hasOwnProperty('addBoxClass')) {
        delete item.addBoxClass;
      }

      if (item.hasOwnProperty('dataColumn') && item.dataColumn != null && item.hasOwnProperty('data')) {
        delete item.data;
      }
    };

    Editor.prototype.getJsonSaveObject = function getJsonSaveObject() {
      var self = this;

      if (self.form) {

        var cForm = _.cloneDeep(self.form);

        if (cForm.hasOwnProperty('id')) {
          delete cForm.id;
        }
        if (cForm.hasOwnProperty('dataIds')) {
          delete cForm.dataIds;
        }
        if (cForm.hasOwnProperty('name')) {
          delete cForm.name;
        }
        if (cForm.hasOwnProperty('providerId')) {
          delete cForm.providerId;
        }

        if (cForm.hasOwnProperty('ids')) {
          delete cForm.ids;
        }

        if (cForm.hasOwnProperty('selected')) {
          delete cForm.selected;
        }

        for (var p = 0; p < cForm.pages.length; p++) {
          var aPage = cForm.pages[p];
          if (aPage.hasOwnProperty('selected')) {
            delete aPage.selected;
          }
          if (aPage.hasOwnProperty('index')) {
            delete aPage.index;
          }

          for (var i = 0; i < aPage.items.length; i++) {
            var aItm = aPage.items[i];

            self._cleanFormItemForSave(aItm);

            if (aItm.toolType == 'MYTABLE') {
              var myTblObjClone = aItm.table.cloneForSave();

              if (myTblObjClone.hasOwnProperty('selected')) {
                delete myTblObjClone.selected;
              }

              for (var r = 0; r < myTblObjClone.rows.length; r++) {
                var aRow = myTblObjClone.rows[r];

                if (aRow.hasOwnProperty('selected')) {
                  delete aRow.selected;
                }

                for (var c = 0; c < aRow.cells.length; c++) {
                  var aCell = aRow.cells[c];

                  if (aCell.hasOwnProperty('selected')) {
                    delete aCell.selected;
                  }

                  aCell.styles = null;
                  if (aCell.item) {
                    self._cleanFormItemForSave(aCell.item);

                    aCell.item.table = null;
                  }
                }
              }
              aItm.table = myTblObjClone;
              aItm.html = null;
            }
          }
        }
        return JSON.stringify(cForm);
      }
      return null;
    };

    Editor.prototype.saveAs = function saveAs() {
      var self = this;
      if (self.form) {

        self.popupHelper.openGenericInputPop("Save Form As...", ['Description'], null, false, function (res) {

          var saveDescription = 'Saving As ' + self.form.name + '...';
          var saveDialog = self.helper.createNoty(saveDescription, 3000);
          saveDialog.show();

          var saveAsName = res.inputs[0].value;
          var json = self.getJsonSaveObject();
          var url = 'goforms';
          self.data.getWithUrl(url, function (newForm) {
            newForm.ProviderId = self.form.providerId;
            newForm.Description = saveAsName;
            newForm.Type = self.form.type;
            newForm.Json = json;
            newForm.MaturityDays = self.form.maturityDays;
            newForm.DisplayInNoteMenu = self.form.displayInNoteMenu;
            newForm.DisplayInExamDropdown = self.form.displayInExamDropdown;
            newForm.DisplayInPortalKioskPreferences = self.form.displayInPortalKioskPreferences;
            newForm.PrimaryExam = self.form.primaryExam;

            self.data.postWithUrlAndData(url, JSON.stringify(newForm), function (save) {

              var final = self.createFormFromData(save);
              self.forms.push(final);
              self.form = final;
              self.selectForm(final);

              self.helper.notySuccess(saveDialog, saveAsName + ' saved!');
            });
          });
        });
      }
    };

    Editor.prototype.save = function save() {
      var self = this;
      if (self.form) {

        var saveDescription = 'Saving ' + self.form.name + '...';
        var saveDialog = self.helper.createNoty(saveDescription, 3000);
        saveDialog.show();

        var json = self.getJsonSaveObject();

        var url = 'goforms';
        if (self.form.id === 0) {
          self.data.getWithUrl(url, function (newForm) {
            newForm.ProviderId = self.form.providerId;
            newForm.Description = self.form.name;
            newForm.Type = self.form.type;
            newForm.Json = json;
            newForm.MaturityDays = self.form.maturityDays;
            newForm.Tag = self.form.tag;
            newForm.DisplayInNoteMenu = self.form.displayInNoteMenu;
            newForm.DisplayInExamDropdown = self.form.displayInExamDropdown;
            newForm.DisplayInPortalKioskPreferences = self.form.displayInPortalKioskPreferences;
            newForm.PrimaryExam = self.form.primaryExam;

            self.data.postWithUrlAndData(url, JSON.stringify(newForm), function (s) {
              self.form.id = s.Id;
              self.helper.notySuccess(saveDialog, self.form.name + ' saved!');
            });
          });
        } else {
          var toUpdate = {
            'Id': self.form.id,
            'Description': self.form.name,
            'ProviderId': self.form.providerId,
            'Json': json,
            'Type': self.form.type,
            'MaturityDays': self.form.maturityDays,
            'Tag': self.form.tag,
            'DisplayInNoteMenu': self.form.displayInNoteMenu,
            'DisplayInExamDropdown': self.form.displayInExamDropdown,
            'DisplayInPortalKioskPreferences': self.form.displayInPortalKioskPreferences,
            'PrimaryExam': self.form.primaryExam
          };

          self.data.putWithUrlAndData(url, toUpdate, function (s) {
            self.helper.notySuccess(saveDialog, self.form.name + ' saved!');
          });
        }
      }
    };

    Editor.prototype.toggleSidebar = function toggleSidebar() {
      this.sidebarExpanded = this.sidebarExpanded ? false : true;
    };

    Editor.prototype.getHash = function getHash(columnId) {
      return '#' + columnId;
    };

    Editor.prototype.loadReportingColumnInfoCategories = function loadReportingColumnInfoCategories() {
      var self = this;
      self.categories = [];
      self.categoriesReportingColumnInfo = [];
      self.data.getWithUrl('reportingcolumninfo/categories', function (res) {
        for (var c = 0; c < res.length; c++) {
          var cat = new Category(res[c], res[c].TableFriendlyName, res[c].ColumnID);
          self.categoriesReportingColumnInfo.push(cat);
        }
        self.categories = self.categoriesReportingColumnInfo;
      });
    };

    Editor.prototype.loadCustomValuesCategories = function loadCustomValuesCategories(callback) {
      var self = this;
      self.categories = [];
      self.categoriesCustomValues = [];
      self.data.getWithUrl('customvalues/datasets', function (res) {
        for (var c = 0; c < res.length; c++) {
          var cat = new Category(res[c], res[c].Dataset, res[c].Id);
          cat.isCustom = true;
          self.categoriesCustomValues.push(cat);
        }
        self.categories = self.categoriesCustomValues;
        if (callback) {
          callback(self.categoriesCustomValues);
        }
      });
    };

    Editor.prototype.getReportingColumnsWithCategory = function getReportingColumnsWithCategory(category, callback) {
      var self = this;
      var url = 'reportingcolumninfo/elements/lists?category=' + category.data.TableFriendlyName;
      self.data.getWithUrl(url, function (res) {
        for (var c = 0; c < res.length; c++) {
          var rc = self.formhelper.getNewDataColumn(res[c]);
          rc.name = res[c].ColumnFriendlyName;
          rc.editable = res[c].Editable;
          rc.listId = res[c].ListId;
          rc.id = res[c].ColumnID;
          rc.displayType = res[c].DisplayType;
          rc.tableName = res[c].TableName;
          rc.columnName = res[c].ColumnName;
          rc.columnAlias = res[c].ColumnAlias;
          category.items.push(rc);
        }
        if (callback) {
          callback();
        }
      });
    };

    Editor.prototype.getCustomValuesWithCategory = function getCustomValuesWithCategory(category, callback) {
      var self = this;
      var url = 'customvalues?dataset=' + category.name;
      self.data.getWithUrl(url, function (res) {
        for (var c = 0; c < res.length; c++) {
          var rc = self.formhelper.getNewDataColumn(res[c]);
          rc.name = res[c].Name;
          rc.editable = true;
          rc.listId = res[c].ListId;
          rc.id = res[c].Id;
          rc.displayType = res[c].Datatype;
          rc.tableName = 'OD_GO_Forms_Custom_Values_Instance';
          rc.columnName = 'Value';
          category.items.push(rc);
        }
        if (callback) {
          callback();
        }
      });
    };

    Editor.prototype.categoryClicked = function categoryClicked(category) {
      var self = this;
      if (category.items.length > 0) {
        self.selectCategory(category);
      } else {
        if (category.isCustom) {
          self.getCustomValuesWithCategory(category, function (res) {
            self.selectCategory(category);
          });
        } else {
          self.getReportingColumnsWithCategory(category, function (res) {
            self.selectCategory(category);
          });
        }
      }
    };

    Editor.prototype.selectCategory = function selectCategory(category) {
      var self = this;
      for (var g = 0; g < self.categories.length; g++) {
        if (self.categories[g].name == category.name) {
          self.selectedCategory = self.categories[g];
          self.categories[g].expanded = true;
        } else {
          self.categories[g].expanded = false;
        }
      }
    };

    Editor.prototype.deselectAll = function deselectAll() {
      var self = this;
      var container = self.form.getCurrentPage();
      self.selectedItem = null;
      for (var i = 0; i < container.items.length; i++) {
        var aItm = container.items[i];
        aItm.selected = false;
        aItm.showToolbar = false;
        if (aItm.toolType == 'MYTABLE' && aItm.table) {
          aItm.table.deselectAll();
        }
      }
      if (self.maintoolbar) {
        self.maintoolbar.au.controller.viewModel.reset();
      }
    };

    Editor.prototype.selectItem = function selectItem(item, callback) {
      var self = this;
      var container = self.form.getCurrentPage();
      for (var i = 0; i < container.items.length; i++) {
        var aItm = container.items[i];

        if (aItm.toolType == 'MYTABLE') {
          aItm.selected = item.id == aItm.id ? true : false;
          if (aItm.selected) {
            self.selectedItem = aItm;
            continue;
          }

          var foundCell = self.searchTableForItemCellWithId(aItm.table, item.id);
          if (foundCell) {
            if (aItm.table.editMode) {
              aItm.selected = true;

              foundCell.parent.selectCell(foundCell.index);
              return;
            }

            aItm.table.deselectAll();

            foundCell.selected = true;
            foundCell.item.selected = true;
            foundCell.item.showToolbar = true;
            self.selectedItem = foundCell.item;
            self.selectedItem.table = aItm.table;
          }
        } else {
          if (item && item.id == aItm.id) {
            aItm.selected = true;
            aItm.showToolbar = true;

            self.selectedItem = aItm;
          } else {
            aItm.selected = false;
            aItm.showToolbar = false;
          }
        }
      }

      if (callback) {
        callback();
      }
    };

    Editor.prototype.dataColumnClicked = function dataColumnClicked(dataColumn) {
      var self = this;

      var dataIdType = null;
      if (dataColumn.data.hasOwnProperty('ColumnID')) {
        dataIdType = self.formhelper.FORMDATATYPES.REPORTINGCOLUMNINFO;
      } else {
        dataIdType = self.formhelper.FORMDATATYPES.GOFORMCUSTOMVALUE;
      }

      var foundId = self.form.findDataId(dataColumn.id, dataIdType);
      if (foundId) {

        var txt = dataColumn.name + ' already exists on the form.';
        self.popupHelper.openGenericMessagePop(txt, "Item Exists", [], false, function (res) {});

        return;
      } else {
        self.form.addDataId(dataColumn.id, dataIdType);
      }

      self.selectedReportingColumnInfoData = dataColumn;
      var disabled = dataColumn.editable ? false : true;

      if (dataColumn.displayType === 'bit') {
        self.addCheckbox(dataColumn);
      } else if (dataColumn.listId != null) {
        self.addListbox(dataColumn);
      } else {
        self.addTextbox(disabled, dataColumn);
      }
    };

    Editor.prototype.addTable = function addTable() {
      var self = this;
      var container = self.form.getCurrentPage();

      var name = "table";
      var xy = self.getNewElementXY();

      xy.X = xy.X / 2;
      var dataItm = new self.formhelper.getNewItem(self.formhelper.generateItemIdWithForm(self.form), name, xy.X, xy.Y, 500, 150, self.formhelper.getTooltype("mytable"));

      var newTable = this.formhelper.getNewTable();
      newTable.editMode = true;
      newTable.style = 'border: 1px solid grey; border-collapse: collapse; width: 100%';

      for (var i = 0; i < 3; i++) {
        var aRow = this.formhelper.getNewTableRow();
        aRow.parent = newTable;

        for (var c = 0; c < 3; c++) {
          var cId = self.form.getUniqueTableCellId();
          var aCell = this.formhelper.getNewTableCell(cId);
          aCell.addStyle('border-top', '1px solid grey');
          aCell.addStyle('border-right', '1px solid grey');
          aCell.addStyle('border-bottom', '1px solid grey');
          aCell.addStyle('border-left', '1px solid grey');
          aCell.addStyle('border-collapse', 'collapse');
          aCell.addStyle('height', '20px');

          aRow.addCell(aCell);
        }
        newTable.addRow(aRow);
      }

      dataItm.table = newTable;
      dataItm.dataColumn = {};

      container.items.push(dataItm);
    };

    Editor.prototype.addListboxClicked = function addListboxClicked() {
      var self = this;
      if (self.isGoForm) {
        self.openNewCustomValueDialog({ isList: true }, function (dataColumn) {
          self.dataColumnClicked(dataColumn);
        });
      } else {
        this.addListbox();
      }
    };

    Editor.prototype.addListbox = function addListbox(data) {
      var self = this;

      var tName = data ? data.name : "Listbox";
      var xy = self.getNewElementXY();
      var dataItm = new self.formhelper.getNewItem(self.formhelper.generateItemIdWithForm(self.form), tName, xy.X, xy.Y, 150, 50, self.formhelper.getTooltype("listbox"));
      dataItm.data = { listOptions: [], other: data };
      dataItm.dataColumn = data ? data : self.formhelper.getNewDataColumn();

      self.addItemToForm(dataItm);
    };

    Editor.prototype.addTextboxClicked = function addTextboxClicked() {
      var self = this;
      if (self.isGoForm) {
        self.openNewCustomValueDialog({ isTextbox: true }, function (dataColumn) {
          self.dataColumnClicked(dataColumn);
        });
      } else {
        this.addTextbox(false);
      }
    };

    Editor.prototype.addTextbox = function addTextbox(disabled, data) {
      var self = this;

      var xy = self.getNewElementXY();
      var name = data == undefined ? 'New Textbox' : data.name;

      var dataItm = new self.formhelper.getNewItem(self.formhelper.generateItemIdWithForm(self.form), name, xy.X, xy.Y, 150, 50, self.formhelper.getTooltype("textbox"));
      dataItm.disabled = disabled;
      dataItm.data = data == undefined ? {} : data;
      dataItm.dataColumn = data == undefined ? {} : data;

      if (self.isGoForm && data == undefined) {
        dataItm.incomplete = true;
      }

      self.addItemToForm(dataItm);
    };

    Editor.prototype.addItemToForm = function addItemToForm(item) {
      var self = this;

      if (self.selectedItem && self.selectedItem.toolType == 'MYTABLE') {
        var selectedCell = self.selectedItem.table.getSelectedCell();

        item.addBoxClass = false;

        item.x = 0;
        item.y = 0;
        item.width = '100%';
        item.height = '100%';
        selectedCell.item = item;

        var col = self.selectedItem.table.getColumn(selectedCell.index);
        col.description = item.name;
      } else {
        var container = self.form.getCurrentPage();
        container.items.push(item);
      }
      self.selectItem(item);
    };

    Editor.prototype.addCheckboxClicked = function addCheckboxClicked() {
      var self = this;
      if (self.isGoForm) {
        self.openNewCustomValueDialog({ isCheckbox: true }, function (dataColumn) {
          self.dataColumnClicked(dataColumn);
        });
      } else {
        self.addCheckbox();
      }
    };

    Editor.prototype.linkDataColumnToItem = function linkDataColumnToItem(dataColumn, item) {
      item.name = dataColumn.name;

      if (item.toolType == 'LISTBOX') {
        item.data.other = dataColumn;
      } else {
        item.data = dataColumn;
      }

      item.dataColumn = dataColumn;
      item.incomplete = false;
    };

    Editor.prototype.addCheckbox = function addCheckbox(data) {
      var self = this;
      var xy = self.getNewElementXY();
      var name = data == undefined ? 'New Checkbox' : data.name;
      var chkItm = new self.formhelper.getNewItem(self.formhelper.generateItemIdWithForm(self.form), name, xy.X, xy.Y, 150, 50, self.formhelper.getTooltype("checkbox"));
      chkItm.data = data == undefined ? {} : data;
      chkItm.dataColumn = data == undefined ? {} : data;
      chkItm.disabled = true;
      chkItm.value = false;
      chkItm.html = data == undefined ? "Label" : data.name;

      self.addItemToForm(chkItm);
    };

    Editor.prototype.getNewElementXY = function getNewElementXY() {
      var containerEl = document.getElementById("mainContainer");
      var distanceToTop = containerEl.getBoundingClientRect().top;
      var diff = distanceToTop < 0 ? 0 : distanceToTop;
      var windowHeight = document.documentElement.clientHeight;
      var x = containerEl.clientWidth / 2;

      var y = windowHeight / 2 - diff;
      return { X: x, Y: y };
    };

    Editor.prototype.addTextElement = function addTextElement(tooltype, callback) {
      var self = this;
      var xy = self.getNewElementXY();
      var txtItm = new self.formhelper.getNewItem(self.formhelper.generateItemIdWithForm(self.form), null, xy.X, xy.Y, 150, 50, self.formhelper.getTooltype(tooltype));
      txtItm.data = {};
      txtItm.html = tooltype == 'hr' ? "" : "Text";

      self.addItemToForm(txtItm);

      if (callback) {
        self.selectItem(txtItm, function () {
          setTimeout(function () {
            callback(txtItm);
          }, 250);
        });
      } else {}
    };

    Editor.prototype.fullWidthClicked = function fullWidthClicked() {
      this.form.fullWidth = this.form.fullWidth ? false : true;
    };

    Editor.prototype.horizontalLineClicked = function horizontalLineClicked() {
      var self = this;

      var mainToolbar = self.maintoolbar.au.controller.viewModel;

      var lineColor = "#000000";

      if (mainToolbar.showTextToolbar) {
        var ttb = mainToolbar.texttoolbar;
        var ttbModel = ttb.au.controller.viewModel;
        if (ttbModel) {
          ttbModel.disableTextSpecificTools = true;
          lineColor = ttbModel.textColor;
        }
      }

      self.addTextElement('hr', function (newTextItem) {
        var el = document.getElementById(newTextItem.elementId);
        el.innerHTML = "";
        var newHr = document.createElement("hr");
        newHr.style.setProperty('border', '1px solid ' + lineColor);

        newTextItem.html = "";
        el.appendChild(newHr);
        newTextItem.html = el.innerHTML;

        self.updateItem(newTextItem);
      });
    };

    Editor.prototype.addImage = function addImage(callback) {
      var self = this;

      var xy = self.getNewElementXY();
      var sigItm = new self.formhelper.getNewItem(self.formhelper.generateItemIdWithForm(self.form), null, xy.X, xy.Y, 150, 50, self.formhelper.getTooltype("imagebox"));

      sigItm.dataColumn = { text: "Text" };

      self.addItemToForm(sigItm);

      if (callback) {
        callback(sigItm);
      }
    };

    Editor.prototype.addSignature = function addSignature() {
      var self = this;

      var xy = self.getNewElementXY();
      var sigItm = new self.formhelper.getNewItem(self.formhelper.generateItemIdWithForm(self.form), null, xy.X, xy.Y, 150, 50, self.formhelper.getTooltype("signature"));
      sigItm.data = { text: "Text" };
      sigItm.disabled = true;

      self.addItemToForm(sigItm);
    };

    Editor.prototype.prependPage = function prependPage(index) {
      var aPage = this.formhelper.getNewPage();
      this.form.addPage(aPage, index);
      this.form.selectPage(index);
    };

    Editor.prototype.appendPage = function appendPage(index) {
      var i = index + 1;
      var aPage = this.formhelper.getNewPage();
      this.form.addPage(aPage, i);
      this.form.selectPage(i);
    };

    Editor.prototype.deletePage = function deletePage(index) {
      this.form.deletePage(index);
    };

    Editor.prototype.clonePage = function clonePage(index) {
      var self = this;
      var page = self.form.pages[index];

      var clonedPage = _.cloneDeep(page);


      for (var i = 0; i < clonedPage.items.length; i++) {
        var itm = clonedPage.items[i];


        var itemId = this.formhelper.generateItemIdWithForm(self.form);
        self.updateItemId(itm, itemId);

        if (itm.toolType == 'MYTABLE') {
          for (var r = 0; r < itm.table.rows.length; r++) {
            var aRow = itm.table.rows[r];
            for (var c = 0; c < aRow.cells.length; c++) {
              var aCell = aRow.cells[c];

              var newCellId = this.formhelper.generateItemIdWithForm(self.form);
              aCell.cId = "c" + newCellId;
              if (aCell.item) {
                var newId = this.formhelper.generateItemIdWithForm(self.form);
                self.updateItemId(aCell.item, newId);
              }
            }
          }
        }
      }

      self.form.pages.push(clonedPage);
    };

    Editor.prototype.getContainerViewModel = function getContainerViewModel() {
      var conatinerEl = document.getElementById('mainContainer');
      return conatinerEl.au.container.viewModel;
    };

    Editor.prototype.marqee = function marqee() {
      var self = this;
      var containerVm = self.getContainerViewModel();

      self.ea.publish('clearSelections');
      containerVm.drawMarquee = true;

      self.marqueeSelected = true;
    };

    Editor.prototype.undo = function undo() {
      var self = this;
      if (self.previousSelection) {
        var rng = self.previousSelection.getRangeAt(0);
      }
    };

    Editor.prototype.itemRequired = function itemRequired(id) {
      var self = this;
      var itm = self.findItem(id);
      if (itm) {
        itm.required = itm.required ? false : true;
      }
    };

    Editor.prototype.findItem = function findItem(id) {
      var self = this;
      var page = self.form.getCurrentPage();
      for (var i = 0; i < page.items.length; i++) {
        var itm = page.items[i];
        if (itm.toolType == 'MYTABLE') {
          if (itm.id == id) {
            return itm;
          }

          var aCell = self.searchTableForItemCellWithId(itm.table, id);
          if (aCell && aCell.item && aCell.item.id == id) {
            return aCell.item;
          }
        } else {
          if (itm.id == id) {
            return itm;
          }
        }
      }
    };

    Editor.prototype.isItemParentTable = function isItemParentTable(id) {
      var self = this;
      var page = self.form.getCurrentPage();
      for (var i = 0; i < page.items.length; i++) {
        var itm = page.items[i];
        if (itm.toolType == 'MYTABLE') {
          var aCell = self.searchTableForItemCellWithId(itm.table, id);
          if (aCell && aCell.item && aCell.item.id == id) {
            return true;
          }
        }
      }
      return false;
    };

    Editor.prototype.deleteItem = function deleteItem(itemToDelete) {
      var self = this;
      var id = itemToDelete.id;
      var page = self.form.getCurrentPage();
      for (var i = 0; i < page.items.length; i++) {
        var itm = page.items[i];
        if (itm.toolType == 'MYTABLE') {
          if (itm.id == id) {
            page.items.splice(i, 1);
            self.form.deleteId(id);
            break;
          }

          var aCell = self.searchTableForItemCellWithId(itm.table, id);
          if (aCell && aCell.item && aCell.item.id == id) {

            self.deleteDataIdWithItem(aCell.item);

            aCell.item = null;
            self.form.deleteId(id);
            break;
          }
        } else {
          if (itm.id == id) {
            page.items.splice(i, 1);

            self.form.deleteId(id);
            self.deleteDataIdWithItem(itm);
            break;
          }
        }
      }
    };

    Editor.prototype.deleteDataIdWithItem = function deleteDataIdWithItem(item) {
      if (this.form) {
        var dataIdType = this.formhelper.getDataTypeForDataColumn(item.dataColumn);

        if (dataIdType != null) {
          var foundId = this.form.findDataId(item.dataColumn.id, dataIdType);
          if (foundId) {
            this.form.deleteDataId(foundId, dataIdType);
          }
        }
      }
    };

    Editor.prototype.deleteItemFromTable = function deleteItemFromTable(id, table) {
      for (var r = 0; r < table.rows.length; r++) {
        var aRow = table.rows[r];
        for (var c = 0; c < aRow.cells.length; c++) {
          var aCell = aRow.cells[c];
          if (aCell.item && aCell.item.id == id) {
            aCell.item = null;
          }
        }
      }
    };

    Editor.prototype.searchTableForItemCellWithId = function searchTableForItemCellWithId(table, id) {
      for (var r = 0; r < table.rows.length; r++) {
        var aRow = table.rows[r];
        for (var c = 0; c < aRow.cells.length; c++) {
          var aCell = aRow.cells[c];
          if (aCell.item && aCell.item.id == id) {
            return aCell;
          }
        }
      }
      return null;
    };

    Editor.prototype.cloneItem = function cloneItem(id) {
      var self = this;
      var page = self.form.getCurrentPage();
      for (var i = 0; i < page.items.length; i++) {
        var itm = page.items[i];
        if (itm.id == id) {
          var clonedItm = _.cloneDeep(itm);

          clonedItm.x += 50;
          clonedItm.y += 50;

          var itemId = this.formhelper.generateItemIdWithForm(self.form);
          self.updateItemId(clonedItm, itemId);

          if (clonedItm.toolType == 'MYTABLE') {
            for (var r = 0; r < clonedItm.table.rows.length; r++) {
              var aRow = clonedItm.table.rows[r];
              for (var c = 0; c < aRow.cells.length; c++) {
                var aCell = aRow.cells[c];
                if (aCell.item) {
                  var newId = this.formhelper.generateItemIdWithForm(self.form);
                  self.updateItemId(aCell.item, newId);
                }
              }
            }
          }

          page.items.push(clonedItm);
          self.selectItem(clonedItm);
          break;
        }
      }
    };

    Editor.prototype.align = function align(id, mode) {
      var self = this;
      var containerVm = self.getContainerViewModel();

      var target = _.find(containerVm.selections, function (i) {
        return i.id === id;
      });

      switch (mode) {
        case 'left':
          for (var i = 0; i < containerVm.selections.length; i++) {
            var updated = containerVm.selections[i];
            updated.x = target.x;
          }
          break;
        case 'top':
          for (var i = 0; i < containerVm.selections.length; i++) {
            var _updated = containerVm.selections[i];
            _updated.y = target.y;
          }
          break;
      }
    };

    Editor.prototype.updateItemId = function updateItemId(item, id) {
      item.id = id;
      item.elementId = 'e' + id;
    };

    Editor.prototype.buildFormObject = function buildFormObject() {
      var self = this;

      if (!this.form) {
        return;
      }
    };

    Editor.prototype.maturityDaysClicked = function maturityDaysClicked() {
      var self = this;

      var options = [{
        name: "Maturity Days",
        placeholder: "Days to maturity...",
        inputType: 'number',
        value: self.form.maturityDays
      }];

      self.popupHelper.openGenericInputPop('Add Document Maturity Days', options, "ADD", false, function (res) {
        var days = res.inputs[0].value;
        self.form.maturityDays = days;
      });
    };

    Editor.prototype.openCustomValues = function openCustomValues() {
      var self = this;
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var popupWidth = windowWidth;
      var popupHeight = windowHeight;
      var popupTop = 0;
      var popupLeft = 0;

      var options = {
        closeActiveDialog: false
      };

      self.popupHelper.openViewModelPop('../formbuilder/listbuilder', self, 'Custom Values', popupWidth, popupHeight, popupTop, popupLeft, options, function (res) {});
    };

    Editor.prototype.openPreferenceEditor = function openPreferenceEditor() {
      var self = this;

      if (self.form == null) return;

      var path = '../formbuilder/viewer';

      var windowHeight = '100%';
      var windowWidth = '100%';

      var options = {
        bodyPadding: 0,
        icon: 'fa-user'
      };

      var description = 'Go Form Preference Editor';

      self.popupHelper.openViewModelPop(path, {
        formId: self.form.id,

        providerId: self.selectedProvider.ProviderID,

        showPreferenceToolbar: true,
        showPreferenceToolbarSave: true,
        prefId: 0
      }, description, windowWidth, windowHeight, 0, 0, options, function (res) {});
    };

    Editor.prototype.addChart = function addChart(chartType) {
      var self = this;
      var xy = self.getNewElementXY();
      var barItm = new self.formhelper.getNewItem(self.formhelper.generateItemIdWithForm(self.form), null, xy.X, xy.Y, 400, 400, self.formhelper.getTooltype(chartType));
      barItm.data = {};


      self.addItemToForm(barItm);
    };

    return Editor;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'form', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'selectedProvider', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'selectedItem', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, 'pageTop', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, 'selectedBodypart', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  })), _class2)) || _class);
});;
define('text!formbuilder/editor.html',[],function(){return "<template><require from=\"./container\"></require><require from=\"./tools/text-toolbar\"></require><require from=\"./tools/maintoolbar\"></require><require from=\"./dialogs/tableCellOptions\"></require><require from=\"../go/customElements/myCheckbox\"></require><style>.page-selected{border:1px dashed #007bff}.point-three-border{border:1px solid rgba(0,0,0,.3)}.btn-outline-primary:active,.btn-outline-primary:focus{box-shadow:none!important;outline:0!important}.btn-outline-primary:hover{color:#fff;background-color:#007bff!important;border-color:#007bff}.marquee-selected{color:#fff;background-color:#007bff!important}.data-button{border-top-right-radius:0!important;border-bottom-right-radius:0!important;padding-right:.3rem}.data-button-dropdown{padding-left:0;border-top-left-radius:0!important;border-bottom-left-radius:0!important}.flex-fill{flex:1 1 auto}.form-type{color:grey}.table-cell-options{position:absolute;border-radius:4px;border:1px solid #007bff;background-color:#fff;box-shadow:#007bff 3px 3px 10px 0;z-index:2000}.container-class{height:1056px;width:816px;display:block}textarea{min-height:unset!important}</style><div class=\"row\"><div id=\"formList\" show.bind=\"sidebarExpanded\" class=\"col-md-3 pr-0\" style=\"overflow-y:auto;height:90vh;position:fixed\"><div class=\"d-flex align-items-center mb-1\"><button type=\"button\" class=\"btn ${barForms ? 'btn-primary' : 'btn-outline-secondary'} mr-1\" disabled.bind=\"barFormsDisabled\" click.delegate=\"tabClicked('forms')\"><i class=\"fa fa-files-o\" aria-hidden=\"true\"></i> Forms</button><div class=\"dropdown\"><button type=\"button\" class=\"btn dropdown-toggle ${barDatabase ? 'btn-primary' : 'btn-outline-secondary'}\" disabled.bind=\"barDatabaseDisabled\" click.delegate=\"tabClicked('database')\" data-toggle=\"dropdown\"><i class=\"fa fa-database\" aria-hidden=\"true\"></i> ${selectedDataTypeBase ? 'Data' : 'Custom'} </button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"toggleSelectedDataType()\"><i class=\"fa fa-database text-muted\" aria-hidden=\"true\"></i> Data</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"toggleSelectedDataType()\"><i class=\"fa fa-database text-muted\" aria-hidden=\"true\"></i> Custom</a></div></div></div><div show.bind=\"barForms\"><div class=\"d-flex align-items-center mb-1\"><select value.bind=\"selectedProvider\" class=\"form-control mr-1 flex-fill\"><option model.bind=\"null\">Provider...</option><option repeat.for=\"p of providers\" model.bind=\"p\">${p.ProviderEntity}</option></select><div class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\"></button><div class=\"dropdown-menu\"><a class=\"dropdown-item ${!selectedProvider ? 'disabled' : ''}\" href=\"#\" click.delegate=\"newForm()\"><i class=\"fa fa-plus mr-1\" aria-hidden=\"true\"></i> New </a><a class=\"dropdown-item ${!form ? 'disabled' : ''}\" href=\"#\" click.delegate=\"deleteForm()\"><i class=\"fa fa-trash-o mr-1\" aria-hidden=\"true\"></i>Delete</a></div></div></div><ul class=\"list-group\"><li repeat.for=\"f of forms\" class=\"list-group-item point-three-border ${f.selected ? 'active' : ''}\" click.delegate=\"selectForm(f)\"><div class=\"d-flex align-items-center\"><i class=\"fa fa-file-o text-muted mr-2\" aria-hidden=\"true\"></i> <span class=\"d-inline-block text-truncate\">${f.name}</span><small class=\"ml-auto ${!f.selected ? 'form-type' : ''}\">${f.type} </small></div></li></ul></div><div show.bind=\"barDatabase\" class=\"accordion\" id=\"accordionExample\"><div class=\"d-flex align-items-center mb-1\" if.bind=\"!selectedDataTypeBase\"><button type=\"button\" class=\"btn btn-outline-primary ml-auto\" click.delegate=\"openCustomValues()\"><i class=\"fa fa-cog\" aria-hidden=\"true\"></i></button></div><div repeat.for=\"c of categories\" class=\"card point-three-border\"><div class=\"card-header\"><h2 class=\"mb-0\"><button class=\"btn btn-link btn-block text-left\" type=\"button\" style=\"font-size:1.2rem;font-weight:500;line-height:1.2\" data-toggle=\"collapse\" data-target.bind=\"c.dataTarget\" aria-expanded=\"true\" click.delegate=\"categoryClicked(c)\"><i class=\"fa fa-database mr-1\" aria-hidden=\"true\"></i>${c.name} <i class=\"fa ${c.expanded ? 'fa-angle-down' : 'fa-angle-up'} float-right\" aria-hidden=\"true\"></i></button></h2></div><div id.bind=\"c.collapseId\" class=\"collapse\" data-parent=\"#accordionExample\"><ul class=\"list-group list-group-flush\"><li repeat.for=\"rc of c.items\" class=\"list-group-item ${rc.selected ? 'active' : ''} d-flex align-items-center\" click.delegate=\"dataColumnClicked(rc)\"><span class=\"fa-stack text-muted mr-1\"><i class=\"fa fa-database fa-stack-1x\" aria-hidden=\"true\"></i> <i if.bind=\"!rc.editable\" class=\"fa fa-ban fa-stack-2x\" aria-hidden=\"true\"></i> </span><span class=\"mr-1\">${rc.name}</span><span class=\"text-muted\"><small>${rc.readableType}</small></span><i if.bind=\"rc.listId\" class=\"fa fa-list-ul text-muted ml-auto\" aria-hidden=\"true\"></i></li></ul></div></div></div></div><div id=\"formWindow\" class=\"col-md-${sidebarExpanded ? '9' : '12'} ml-auto\" style=\"overflow-y:auto;height:90vh\" scrolltop.bind=\"pageTop\"><div style=\"position:sticky;top:0;z-index:2000\"><div class=\"d-flex align-items-center\"><div class=\"btn-group\" style=\"background-color:#fff\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary\" click.delegate=\"toggleSidebar()\"><i class=\"fa ${sidebarExpanded ? 'fa-angle-left': 'fa-angle-right'}\" aria-hidden=\"true\"></i></button></div><div class=\"btn-group ml-auto\" style=\"background-color:#fff\" role=\"group\" aria-label=\"Toolbar\"><button type=\"button\" class=\"btn btn-outline-primary\" disabled.bind=\"!form\" click.delegate=\"addTextElement('statictext')\"><i class=\"fa fa-font\" aria-hidden=\"true\"></i>Text</button><div class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary dropdown-toggle\" disabled.bind=\"!form\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-list-alt\" aria-hidden=\"true\"></i> Input</button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"addTextboxClicked()\"><i class=\"fa fa-font\" aria-hidden=\"true\"></i> Textbox</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"addCheckboxClicked()\"><i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i> Checkbox</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"addListboxClicked()\"><i class=\"fa fa-list\" aria-hidden=\"true\"></i> Listbox</a></div></div><div class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary dropdown-toggle\" disabled.bind=\"!form\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-picture-o\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><div class=\"dropdown-item\" for=\"image-filepicker\"><input accept=\".jpg,.jpeg,.gif,.tiff,.tif,.bmp,.png,.webp\" style=\"opacity:0;position:absolute\" title=\"Upload an image\" name=\"file\" type=\"file\" class=\"dropdown-item\" id=\"image-filepicker\"> <i class=\"fa fa-plus\" aria-hidden=\"true\"></i> Add Image</div></div></div><div class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary\" disabled.bind=\"!form\" click.delegate=\"addTable()\"><i class=\"fa fa-table\" aria-hidden=\"true\"></i></button></div><button type=\"button\" class=\"btn btn-outline-primary\" disabled.bind=\"!form\" click.delegate=\"addSignature()\"><i class=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i> Signature</button><div class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary dropdown-toggle\" disabled.bind=\"!form\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-bar-chart\" aria-hidden=\"true\"></i> Chart</button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"addChart('chartbar')\"><i class=\"fa fa-bar-chart\" aria-hidden=\"true\"></i> Bar</a></div></div><div class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary\" style=\"border-top-right-radius:.25rem;border-bottom-right-radius:.25rem\" disabled.bind=\"!form\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-ellipsis-h\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"horizontalLineClicked()\"><svg width=\"19px\" height=\"19px\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M4 12L20 12\" stroke=\"#000000\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg> Horizontal Line </a><a class=\"dropdown-item ${form.fullWidth ? 'active' : ''}\" href=\"#\" click.delegate=\"fullWidthClicked()\"><i class=\"fa fa-arrows-h\" aria-hidden=\"true\"></i> Full Width</a><a class=\"dropdown-item\" href=\"#\" click.delegate=\"toggleGrid()\"><i class=\"fa fa-th\" aria-hidden=\"true\"></i> Toggle Grid</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"openPreferenceEditor()\"><i class=\"fa fa-user\" aria-hidden=\"true\"></i> Go Form Preference Editor</a></div></div></div><div class=\"btn-group ml-2 mr-auto\" style=\"background-color:#fff\" role=\"group\"><button type=\"button\" disabled.bind=\"!form\" class=\"btn btn-outline-primary ${marqueeSelected ? 'marquee-selected' : ''}\" click.delegate=\"marqee()\"><i class=\"fa fa-object-group\" aria-hidden=\"true\"></i></button></div><div class=\"btn-group\" style=\"background-color:#fff\" role=\"group\"><button type=\"button\" disabled.bind=\"!form\" class=\"btn btn-primary\" click.delegate=\"save()\"><i class=\"fa fa-floppy-o\" aria-hidden=\"true\"></i></button> <button type=\"button\" disabled.bind=\"!form\" class=\"btn btn-primary dropdown-toggle dropdown-toggle-split pl-0\" data-toggle=\"dropdown\" aria-expanded=\"false\"><span class=\"sr-only\">Toggle Dropdown</span></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"saveAs()\"><i class=\"fa fa-floppy-o\" aria-hidden=\"true\"></i> Save As...</a></div></div></div><div class=\"d-flex justify-content-center mt-2\"><maintoolbar ref=\"maintoolbar\" item.bind=\"selectedItem\"></maintoolbar></div></div><div class=\"d-flex pt-2 px-4 align-items-center\"><span class=\"h4 mb-0 mr-2\" style=\"color:#007bff\" contenteditable=\"true\" innerhtml.bind=\"form.name\"></span> <i if.bind=\"form\" class=\"fa fa-tag mr-1\" style=\"color:#007bff\" aria-hidden=\"true\" click.delegate=\"addTag()\"></i> <span class=\"font-weight-light\" style=\"font-size:small;color:#007bff\"> ${form.tag} <i if.bind=\"form.tag\" class=\"fa fa-times\" style=\"color:#007bff;font-size:small\" aria-hidden=\"true\" click.delegate=\"deleteTag()\"></i> </span><i class=\"fa fa-cog ml-auto\" style=\"color:#007bff\" aria-hidden=\"true\" click.delegate=\"toggleFormSettings()\"></i></div><template if.bind=\"showFormSettings\"><div class=\"row align-items-start px-4\"><div class=\"col\"><my-checkbox selected.bind=\"form.displayInNoteMenu\" value.bind=\"displayInNoteMenu\" editing.bind=\"true\" click.delegate=\"displayInNoteMenuClicked()\"></my-checkbox><small class=\"form-text text-muted ml-2\">Display in <i class=\"fa fa-sticky-note-o mx-1\" aria-hidden=\"true\"></i>note menu in main toolbar</small></div><div class=\"col\"><my-checkbox selected.bind=\"form.displayInExamDropdown\" value.bind=\"displayInDocumentDropdown\" editing.bind=\"true\" click.delegate=\"displayInExamDropdownClicked()\"></my-checkbox><small class=\"form-text text-muted ml-2\">Display in <i class=\"fa fa-list-alt mx-1\" aria-hidden=\"true\"></i>document tray dropdown on home screen</small></div></div><div class=\"row align-items-start px-4\"><div class=\"col\"><my-checkbox selected.bind=\"form.displayInPortalKioskPreferences\" value.bind=\"displayInPortalKiosk\" editing.bind=\"true\" click.delegate=\"displayInPortalKioskClicked()\"></my-checkbox><small class=\"form-text text-muted ml-2\">Make form available to use in kiosk / portal</small></div><div class=\"col\"><div class=\"input-group m-2\"><div class=\"input-group-prepend\"><span class=\"input-group-text\" id=\"basic-addon1\">Maturity Days</span></div><input type=\"text\" class=\"form-control\" value.bind=\"form.maturityDays\" placeholder=\"Maturity days...\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"></div><small class=\"form-text text-muted ml-2\">Days before form must be refilled</small></div></div><div class=\"row align-items-start px-4\"><div class=\"col\"><div class=\"input-group m-2\"><div class=\"input-group-prepend\"><span class=\"input-group-text\" id=\"basic-addon1\">Primary Exam</span></div><select value.bind=\"form.primaryExam\" class=\"form-control\"><option model.bind=\"null\">None...</option><option repeat.for=\"b of bodyparts\" model.bind=\"b.part\">${b.part}</option></select></div><small class=\"form-text text-muted ml-2\">This form will be used to display selected exam data</small></div></div></template><div class=\"d-flex pt-2 px-4 pb-4\"><hr style=\"border-top:1px dashed\" class=\"text-primary w-100 mr-2\"><button type=\"button\" disabled.bind=\"!form\" class=\"btn btn-outline-primary ml-auto mr-auto\" style=\"width:20%;min-width:135px;font-size:.75rem\" click.delegate=\"prependPage(0)\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i> Insert Page Here</button><hr style=\"border-top:1px dashed\" class=\"text-primary w-100 ml-2\"></div><template repeat.for=\"p of form.pages\"><div class=\"w-100 d-flex\" id.bind=\"p.id\"><div class=\"h2 ml-auto text-right text-muted pr-2\"><div class=\"d-flex flex-column\"> ${$index + 1} <button type=\"button\" class=\"btn btn-outline-primary bg-white mb-1\" click.delegate=\"deletePage($index)\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\"></i></button> <button type=\"button\" class=\"btn btn-outline-primary bg-white\" click.delegate=\"clonePage($index)\"><i class=\"fa fa-clone\" aria-hidden=\"true\"></i></button></div></div><container id=\"mainContainer\" ref=\"mycontainer\" pointerup.trigger=\"updateRange($event)\" items.bind=\"p.items\" edit.bind=\"true\" class=\"mr-auto ${p.selected ? 'page-selected' : ''} container-class\"></container></div><div class=\"d-flex p-4\"><hr style=\"border-top:1px dashed\" class=\"text-primary w-100 mr-2\"><button type=\"button\" disabled.bind=\"!form\" class=\"btn btn-outline-primary ml-auto mr-auto\" style=\"width:20%;min-width:135px;font-size:.75rem\" click.delegate=\"appendPage($index)\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i> Insert Page Here</button><hr style=\"border-top:1px dashed\" class=\"text-primary w-100 ml-2\"></div></template><table-cell-options if.bind=\"tableCellOptionsData.show\" cell.bind=\"tableCellOptionsData.cell\" item.bind=\"selectedItem\" editor.bind=\"$this\" css=\"left: ${tableCellOptionsData.rect.x}px; top: ${tableCellOptionsData.rect.y}px;\" class=\"table-cell-options\"></table-cell-options></div></div></template>";});;
define('formbuilder/formhelper',['exports', 'aurelia-framework', 'lodash', 'chart.js'], function (exports, _aureliaFramework, _lodash, _chart) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.formhelper = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  var _dec, _desc, _value, _class, _desc2, _value2, _class2, _descriptor;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var TOOLTYPE = {
    CHECKBOX: 'CHECKBOX',
    TEXTBOX: 'TEXTBOX',
    STATICTEXT: 'STATICTEXT',
    LISTBOX: 'LISTBOX',
    SIGNATURE: 'SIGNATURE',
    IMAGEBOX: 'IMAGEBOX',
    MARQUEE: 'MARQUEE',
    HR: 'HR',
    MYTABLE: 'MYTABLE',
    CHARTBAR: 'CHARTBAR',
    CHARTLINE: 'CHARTLINE'
  };

  var FORMDATATYPE = Object.freeze({
    REPORTINGCOLUMNINFO: 'REPORTINGCOLUMNINFO',
    GOFORMCUSTOMVALUE: 'GOFORMCUSTOMVALUE'
  });

  var ListItem = function ListItem(text, normal) {
    _classCallCheck(this, ListItem);

    this.text = text;
    this.normal = normal;
    this.sql = null;
  };

  var DataColumn = (_dec = (0, _aureliaFramework.computedFrom)('displayType'), (_class = function () {
    function DataColumn(data) {
      _classCallCheck(this, DataColumn);

      this.data = data;
      this.name = null;
      this.editable = false;
      this.displayType = null;
      this.listId = 0;
      this.listOptions = [];
      this.selected = false;
      this.id = null;
      this.tableName = null;
      this.columnName = null;
      this.columnAlias = null;
      this.dataIdColumn = null;
      this.dataId = null;
      this.value = null;
      this.isSystemDate = false;
    }

    _createClass(DataColumn, [{
      key: 'readableType',
      get: function get() {

        switch (this.displayType) {
          case "int":
            return "number";
          case "datetime":
            return "date";
          case "bit":
            return "boolean";
          default:
            return "text";
        }
      }
    }]);

    return DataColumn;
  }(), (_applyDecoratedDescriptor(_class.prototype, 'readableType', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'readableType'), _class.prototype)), _class));

  var ChartData = function ChartData(type, data, options) {
    _classCallCheck(this, ChartData);

    this.data = data;
    this.options = options;
    this.type = type;
  };

  var Item = function Item(id, name, x, y, width, height, toolType) {
    _classCallCheck(this, Item);

    this.id = id;
    this.name = name;
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.selected = false;
    this.data;
    this.disabled = false;
    this.toolType = toolType;
    this.elementId = 'e' + this.id;
    this.editMode = true;
    this.value = null;
    this.html = null;
    this.style = null;
    this.required = false;
    this.inputType = 'text';
    this.showToolbar = false;
    this.dataColumn = null;
    this.addBoxClass = true;
    this.table = null;
    this.textRows = 1;
  };

  var Form = function () {
    function Form(id, name) {
      _classCallCheck(this, Form);

      this.id = id;
      this.name = name;
      this.providerId = 0;
      this.type;
      this.pages = [];
      this.selected = false;
      this.ogPreferenceId = null;
      this.ogPreferenceTable = null;
      this.maturityDays = null;
      this.ids = [];
      this.dataIds = [];
      this.tag = null;
      this.fullWidth = false;
      this.displayInNoteMenu = false;
      this.displayInExamDropdown = false;
      this.displayInPortalKioskPreferences = false;
      this.primaryExam = null;
    }

    Form.prototype.tryAddDataIdToFormWithItem = function tryAddDataIdToFormWithItem(item) {
      if (item.dataColumn && item.dataColumn.data) {
        if (item.dataColumn.data.hasOwnProperty('ColumnID')) {
          this.addDataId(item.dataColumn.id, "REPORTINGCOLUMNINFO");
        } else {
          this.addDataId(item.dataColumn.id, "GOFORMCUSTOMVALUE");
        }
      }
    };

    Form.prototype.addDataId = function addDataId(id, type) {
      this.dataIds.push({ 'id': id, 'type': type });
    };

    Form.prototype.findDataId = function findDataId(id, type) {
      return _.find(this.dataIds, function (i) {
        return i.id == id && i.type == type;
      });
    };

    Form.prototype.deleteDataId = function deleteDataId(id, type) {
      var index = _.findIndex(this.dataIds, function (i) {
        return i.id == id && i.type == type;
      });
      this.dataIds.splice(index, 1);
    };

    Form.prototype.deleteId = function deleteId(id) {
      var idIndex = _.findIndex(this.ids, function (x) {
        return x == id;
      });
      this.ids.splice(idIndex, 1);
    };

    Form.prototype.addPage = function addPage(page, index) {
      var id = this.pages.length + 1;
      page.id = 'p' + id;
      this.pages.splice(index, 0, page);
    };

    Form.prototype.deletePage = function deletePage(index) {
      this.pages.splice(index, 1);
    };

    Form.prototype.selectPage = function selectPage(index) {
      for (var i = 0; i < this.pages.length; i++) {
        this.pages[i].selected = i === index ? true : false;
      }
    };

    Form.prototype.getCurrentPage = function getCurrentPage() {
      for (var i = 0; i < this.pages.length; i++) {
        if (this.pages[i].selected) {
          return this.pages[i];
        }
      }
      return null;
    };

    Form.prototype.getItemWithId = function getItemWithId(id) {
      for (var p = 0; p < this.pages.length; p++) {
        var aPage = this.pages[p];
        for (var i = 0; i < aPage.items.length; i++) {
          var aItm = aPage.items[i];
          if (aItm.id == id) {
            return aItm;
          }
        }
      }
      return null;
    };

    Form.prototype.getUniqueTableCellId = function getUniqueTableCellId() {
      var finalId = 0;
      for (var p = 0; p < this.pages.length; p++) {
        var aPage = this.pages[p];
        for (var i = 0; i < aPage.items.length; i++) {
          var aItm = aPage.items[i];
          if (aItm.table) {
            for (var r = 0; r < aItm.table.rows.length; r++) {
              var aRow = aItm.table.rows[r];
              for (var c = 0; c < aRow.cells.length; c++) {
                finalId++;
              }
            }
          } else {
            finalId++;
          }
        }
      }
      return '' + ('c' + finalId);
    };

    return Form;
  }();

  var Page = (_class2 = function () {
    function Page(id) {
      _classCallCheck(this, Page);

      _initDefineProp(this, 'top', _descriptor, this);

      this.id = id;
      this.selected = false;
      this.items = [];
      this.index = 0;
    }

    Page.prototype.addItem = function addItem(item) {
      this.items.push(item);
    };

    Page.prototype.topChanged = function topChanged(newVal, oldVal) {
      var tNew = newVal;
    };

    return Page;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'top', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  })), _class2);

  var MyTableObject = function () {
    function MyTableObject(data) {
      _classCallCheck(this, MyTableObject);

      this.data = data;
      this.style = null;
      this.rows = [];
      this.editMode = false;
      this.columns = [];
      this.isRepeater = false;
      this.displayHeaders = false;
    }

    MyTableObject.prototype.cloneForSave = function cloneForSave() {
      var tableClone = _.cloneDeep(this);
      for (var i = 0; i < tableClone.rows.length; i++) {
        var aRow = tableClone.rows[i];
        delete aRow.parent;
        for (var c = 0; c < aRow.cells.length; c++) {
          var aCell = aRow.cells[c];
          delete aCell.parent;
        }
      }
      return tableClone;
    };

    MyTableObject.prototype.toggleTableHeaders = function toggleTableHeaders() {
      this.displayHeaders = this.displayHeaders ? false : true;
    };

    MyTableObject.prototype.getSelectedCell = function getSelectedCell() {
      var row = _.find(this.rows, function (r) {
        return r.selected;
      });
      if (!row) return null;
      return _.find(row.cells, function (c) {
        return c.selected;
      });
    };

    MyTableObject.prototype.getSelectedRowIndex = function getSelectedRowIndex() {
      return _.findIndex(this.rows, function (r) {
        return r.selected;
      });
    };

    MyTableObject.prototype.setEditMode = function setEditMode(editing) {
      this.editMode = editing;

      if (!this.editMode) {
        this.deselectAll();
      }
    };

    MyTableObject.prototype.setRepeater = function setRepeater(repeat) {
      this.isRepeater = repeat;

      if (this.isRepeater && this.rows.length > 1) {
        for (var i = 0; i < this.rows.length; i++) {
          var deleteIndex = this.displayHeaders ? 2 : 1;
          this.deleteRow(deleteIndex);
        }
      }
    };

    MyTableObject.prototype.deselectAll = function deselectAll() {
      for (var i = 0; i < this.rows.length; i++) {
        this.rows[i].selected = false;
        for (var c = 0; c < this.rows[i].cells.length; c++) {
          this.rows[i].cells[c].selected = false;
          if (this.rows[i].cells[c].item) {
            this.rows[i].cells[c].item.selected = false;
            this.rows[i].cells[c].item.showToolbar = false;
          }
        }
      }
    };

    MyTableObject.prototype.deleteRow = function deleteRow(index) {
      this.rows.splice(index, 1);
    };

    MyTableObject.prototype.deleteColumn = function deleteColumn(index) {
      for (var i = 0; i < this.rows.length; i++) {
        this.rows[i].removeCell(index);
      }

      this.columns.splice(index, 1);
    };

    MyTableObject.prototype.addColumn = function addColumn(col) {
      this.columns.push(col);
    };

    MyTableObject.prototype.getColumn = function getColumn(index) {
      return this.columns[index];
    };

    MyTableObject.prototype.addRow = function addRow(row) {
      row.parent = this;
      this.rows.push(row);
    };

    MyTableObject.prototype.insertRow = function insertRow(row, index) {
      row.parent = this;
      if (this.rows.length > index) {
        this.rows.splice(index, 0, row);
      } else {
        this.rows.push(row);
      }
    };

    MyTableObject.prototype.getRow = function getRow(index) {
      if (index == undefined) {
        return this.rows[this.rows.length - 1];
      } else {
        return this.rows[index];
      }
    };

    MyTableObject.prototype.getHeaderRow = function getHeaderRow() {
      if (this.rows.length > 0) {
        var row = this.rows[0];
        for (var c = 0; c < row.cells.length; c++) {
          if (row.cells[c].isHeader) {
            return row;
          }
        }
        return null;
      }
      return null;
    };

    return MyTableObject;
  }();

  var MyTableColumn = function MyTableColumn(width) {
    _classCallCheck(this, MyTableColumn);

    this.width = width;
  };

  var MyTableRow = function () {
    function MyTableRow(data) {
      _classCallCheck(this, MyTableRow);

      this.data = data;
      this.cells = [];
      this.selected = false;
      this.parent = null;

      this.display = true;
    }

    MyTableRow.prototype.cloneRow = function cloneRow() {
      return _.cloneDeep(this);
    };

    MyTableRow.prototype.cloneRow_NoDeep = function cloneRow_NoDeep() {
      return _.clone(this);
    };

    MyTableRow.prototype.addCell = function addCell(cell) {
      cell.parent = this;
      cell.index = this.cells.length;
      this.cells.push(cell);

      var aColumn = this.parent.columns[cell.index];
      if (!aColumn) {
        var newCol = new MyTableColumn();
        this.parent.addColumn(newCol);
      }
    };

    MyTableRow.prototype.removeCell = function removeCell(index) {
      this.cells.splice(index, 1);

      for (var i = 0; i < this.cells.length; i++) {
        this.cells[i].index = i;
      }
    };

    MyTableRow.prototype.selectCell = function selectCell(index, callback) {
      this.parent.deselectAll();
      this.selected = true;
      this.cells[index].selected = true;
      if (callback) {
        callback(this.cells[index]);
      }
    };

    return MyTableRow;
  }();

  var MyTableCell = function () {
    function MyTableCell(data) {
      _classCallCheck(this, MyTableCell);

      this.data = data;
      this.styles = [];
      this.isHeader = false;
      this.html = null;
      this.selected = false;
      this.parent = null;
      this.index = 0;
      this.colspan = 1;
      this.styleAsString = "";
      this.item = null;
      this.cId = null;
    }

    MyTableCell.prototype._updateStyleString = function _updateStyleString() {
      var style = "";
      for (var i = 0; i < this.styles.length; i++) {
        style = style + this.styles[i].name + ":" + this.styles[i].value + ";";
      }
      this.styleAsString = style;
    };

    MyTableCell.prototype.getStyle = function getStyle(name) {
      return _.find(this.styles, function (s) {
        return s.name == name;
      });
    };

    MyTableCell.prototype.getBorderStyles = function getBorderStyles() {
      return _.filter(this.styles, function (s) {
        return s.name.includes('border');
      });
    };

    MyTableCell.prototype.updateStyle = function updateStyle(style) {
      var index = _.findIndex(this.styles, function (s) {
        return s.name == style.name;
      });
      this.styles.splice(index, 1, style);
      this._updateStyleString();
    };

    MyTableCell.prototype.addStyle = function addStyle(name, value) {
      this.styles.push({ 'name': name, 'value': value });
      this._updateStyleString();
    };

    MyTableCell.prototype.removeStyle = function removeStyle(name) {
      var index = _.findIndex(this.styles, function (s) {
        return s.name == name;
      });
      this.styles.splice(index, 1);
      this._updateStyleString();
    };

    MyTableCell.prototype.mergeCellLeft = function mergeCellLeft(event) {
      this.parent.cells.splice(this.index - 1, 1);

      for (var i = this.parent.cells.length - 1; i > -1; i--) {
        var aCell = this.parent.cells[i];
        if (aCell.index == this.index) {
          aCell.colspan = aCell.colspan + 1;
          aCell.index = aCell.index - 1;
        } else {
          aCell.colspan = Math.max(1, aCell.colspan - 1);
          aCell.index = Math.max(0, aCell.index - 1);
        }
      }

      event.stopPropagation();
    };

    MyTableCell.prototype.mergeCellRight = function mergeCellRight(event) {
      this.parent.cells.splice(this.index + 1, 1);

      for (var i = 0; i < this.parent.cells.length; i++) {
        var aCell = this.parent.cells[i];

        if (aCell.index == this.index) {
          aCell.colspan = aCell.colspan + 1;
        } else if (i > this.index) {
          aCell.colspan = Math.max(1, aCell.colspan - 1);
          aCell.index = Math.max(0, aCell.index - 1);
        }
      }
      event.stopPropagation();
    };

    MyTableCell.prototype.hasLeftNeighbor = function hasLeftNeighbor() {
      return this.index > 0 ? true : false;
    };

    MyTableCell.prototype.hasRightNeighbor = function hasRightNeighbor() {
      return this.index < this.parent.cells.length - 1 ? true : false;
    };

    return MyTableCell;
  }();

  var formhelper = exports.formhelper = function () {
    function formhelper() {
      _classCallCheck(this, formhelper);

      this.FORMDATATYPES = FORMDATATYPE;
      this.fontSizes = [8, 9, 10, 11, 12, 14, 16, 18, 20];
      this.fonts = [];
      this.swatches = [];

      console.log("FORM BUILDER HELPER");
    }

    formhelper.prototype.getFormCenterX = function getFormCenterX() {
      var containerEl = document.getElementById("mainContainer");

      return containerEl.clientWidth / 2;
    };

    formhelper.prototype.generateItemIdWithForm = function generateItemIdWithForm(form) {
      var sorted = _.orderBy(form.ids, function (i) {
        return i;
      }, "desc");
      var id = sorted.length == 0 ? 1 : sorted[0] + 1;
      form.ids.push(id);
      return id;
    };

    formhelper.prototype.buildMyTableObjectDataWithItem = function buildMyTableObjectDataWithItem(form, item, formCellCount, callback) {

      var cellCount = formCellCount;

      var data = item.table ? item.table : item.data;
      var newTable = this.getNewTable();
      newTable.editMode = false;
      newTable.style = data.style;
      newTable.displayHeaders = data.displayHeaders;
      if (data.hasOwnProperty("isRepeater")) {
        newTable.isRepeater = data.isRepeater;
      }

      if (data.columns) {
        for (var col = 0; col < data.columns.length; col++) {
          var aCol = this.getNewTableColumn();
          if (data.columns[col].width) {
            aCol.width = data.columns[col].width;
          }
          if (data.columns[col].description) {
            aCol.description = data.columns[col].description;
          }
          newTable.columns.push(aCol);
        }
      }

      for (var i = 0; i < data.rows.length; i++) {
        var dataRow = data.rows[i];
        var aRow = this.getNewTableRow();
        aRow.parent = newTable;

        for (var c = 0; c < dataRow.cells.length; c++) {
          var dataCell = dataRow.cells[c];

          cellCount += 1;
          var cId = '' + ('c' + cellCount);
          var aCell = this.getNewTableCell(cId);
          aCell.html = dataCell.html;
          aCell.colspan = dataCell.colspan;
          aCell.styleAsString = dataCell.styleAsString;
          aCell.item = dataCell.item;
          if (dataCell.item) {
            if (aCell.item.elementId == undefined) {
              aCell.item.elementId = "e" + dataCell.item.id;
            }

            form.ids.push(dataCell.item.id);

            form.tryAddDataIdToFormWithItem(dataCell.item);
          }

          if (dataCell.styleAsString != null) {
            var splitStyles = dataCell.styleAsString.split(";");
            for (var x = 0; x < splitStyles.length; x++) {
              var colonSplit = splitStyles[x].split(":");
              if (colonSplit[0].length > 0) {
                aCell.addStyle(colonSplit[0], colonSplit[1] + ";");
              }
            }
          } else {
            for (var s = 0; s < dataCell.styles.length; s++) {
              aCell.addStyle(dataCell.styles[s].name, dataCell.styles[s].value);
            }
          }

          aRow.addCell(aCell);
        }
        newTable.addRow(aRow);
      }

      callback({ table: newTable, totalCellCount: cellCount });
    };

    formhelper.prototype.getNewListItem = function getNewListItem(text, isNormal) {
      return new ListItem(text, isNormal);
    };

    formhelper.prototype.getItemRightWithElementId = function getItemRightWithElementId(elementId) {
      var el = document.getElementById(elementId);
      var els = document.querySelectorAll("#" + elementId);
      if (el) {
        var rect = el.getBoundingClientRect();
        var cont = document.getElementById('mainContainer');
        var contRect = cont.getBoundingClientRect();
        return contRect.x + contRect.width - (rect.x + rect.width);
      } else {
        return null;
      }
    };

    formhelper.prototype.getDataTypeForDataColumn = function getDataTypeForDataColumn(dataColumn) {
      if (dataColumn && dataColumn.data) {
        if (dataColumn.data.hasOwnProperty('ColumnID')) {
          return this.FORMDATATYPES.REPORTINGCOLUMNINFO;
        } else if (dataColumn.data.hasOwnProperty('Dataset')) {
          return this.FORMDATATYPES.GOFORMCUSTOMVALUE;
        } else {
          return null;
        }
      }
      return null;
    };

    formhelper.prototype.setupFonts = function setupFonts() {
      var self = this;
      var fontCheck = new Set(['Arial', 'Arial Black', 'Bahnschrift', 'Calibri', 'Cambria', 'Cambria Math', 'Candara', 'Comic Sans MS', 'Consolas', 'Constantia', 'Corbel', 'Courier New', 'Ebrima', 'Franklin Gothic Medium', 'Gabriola', 'Gadugi', 'Georgia', 'HoloLens MDL2 Assets', 'Impact', 'Ink Free', 'Javanese Text', 'Leelawadee UI', 'Lucida Console', 'Lucida Sans Unicode', 'Malgun Gothic', 'Marlett', 'Microsoft Himalaya', 'Microsoft JhengHei', 'Microsoft New Tai Lue', 'Microsoft PhagsPa', 'Microsoft Sans Serif', 'Microsoft Tai Le', 'Microsoft YaHei', 'Microsoft Yi Baiti', 'MingLiU-ExtB', 'Mongolian Baiti', 'MS Gothic', 'MV Boli', 'Myanmar Text', 'Nirmala UI', 'Palatino Linotype', 'Segoe MDL2 Assets', 'Segoe Print', 'Segoe Script', 'Segoe UI', 'Segoe UI Historic', 'Segoe UI Emoji', 'Segoe UI Symbol', 'SimSun', 'Sitka', 'Sylfaen', 'Symbol', 'Tahoma', 'Times New Roman', 'Trebuchet MS', 'Verdana', 'Webdings', 'Wingdings', 'Yu Gothic', 'American Typewriter', 'Andale Mono', 'Arial', 'Arial Black', 'Arial Narrow', 'Arial Rounded MT Bold', 'Arial Unicode MS', 'Avenir', 'Avenir Next', 'Avenir Next Condensed', 'Baskerville', 'Big Caslon', 'Bodoni 72', 'Bodoni 72 Oldstyle', 'Bodoni 72 Smallcaps', 'Bradley Hand', 'Brush Script MT', 'Chalkboard', 'Chalkboard SE', 'Chalkduster', 'Charter', 'Cochin', 'Comic Sans MS', 'Copperplate', 'Courier', 'Courier New', 'Didot', 'DIN Alternate', 'DIN Condensed', 'Futura', 'Geneva', 'Georgia', 'Gill Sans', 'Helvetica', 'Helvetica Neue', 'Herculanum', 'Hoefler Text', 'Impact', 'Lucida Grande', 'Luminari', 'Marker Felt', 'Menlo', 'Microsoft Sans Serif', 'Monaco', 'Noteworthy', 'Optima', 'Palatino', 'Papyrus', 'Phosphate', 'Rockwell', 'Savoye LET', 'SignPainter', 'Skia', 'Snell Roundhand', 'Tahoma', 'Times', 'Times New Roman', 'Trattatello', 'Trebuchet MS', 'Verdana', 'Zapfino'].sort());

      document.fonts.ready.then(function (fontFaceSet) {

        var fontAvailable = new Set();

        for (var _iterator = fontCheck.values(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var font = _ref;

          if (document.fonts.check('12px "' + font + '"')) {
            fontAvailable.add(font);
          }
        }
        self.fonts = Array.from(fontAvailable);
      });
    };

    formhelper.prototype.getFontSizePickerArray = function getFontSizePickerArray() {
      var fontSizes = [];
      for (var i = 0; i < this.fontSizes.length; i++) {
        var px = this.pointToPixels(this.fontSizes[i]);
        var fs = { "points": this.fontSizes[i], "pixels": px + 'px' };
        fontSizes.push(fs);
      }
      return fontSizes;
    };

    formhelper.prototype.pointToPixels = function pointToPixels(point) {
      return point / 72 * 96;
    };

    formhelper.prototype.getRandomRGBColor = function getRandomRGBColor() {
      return {
        r: Math.floor(Math.random() * 256),
        g: Math.floor(Math.random() * 256),
        b: Math.floor(Math.random() * 256)
      };
    };

    formhelper.prototype.getRandomHSLColor = function getRandomHSLColor() {
      return {
        h: Math.floor(Math.random() * 361),
        s: 100,
        l: 50
      };
    };

    formhelper.prototype.getNewChartData = function getNewChartData(type, data, options) {
      return new ChartData(type, data, options);
    };

    formhelper.prototype.getNewItem = function getNewItem(id, name, x, y, width, height, toolType) {
      return new Item(id, name, x, y, width, height, toolType);
    };

    formhelper.prototype.getNewForm = function getNewForm() {
      return new Form(0, 'Test Form');
    };

    formhelper.prototype.getNewPage = function getNewPage() {
      return new Page(0);
    };

    formhelper.prototype.getTooltype = function getTooltype(name) {
      return TOOLTYPE[name.toUpperCase()];
    };

    formhelper.prototype.getNewTable = function getNewTable() {
      return new MyTableObject();
    };

    formhelper.prototype.getNewTableColumn = function getNewTableColumn() {
      return new MyTableColumn();
    };

    formhelper.prototype.getNewTableRow = function getNewTableRow() {
      return new MyTableRow();
    };

    formhelper.prototype.getNewTableCell = function getNewTableCell(uniqueCellId) {
      var cell = new MyTableCell();
      cell.cId = uniqueCellId;
      return cell;
    };

    formhelper.prototype.getNewDataColumn = function getNewDataColumn(data) {
      return new DataColumn(data);
    };

    formhelper.prototype.convertDatatypeToReadable = function convertDatatypeToReadable(datatype) {
      switch (datatype) {
        case "int":
          return "number";
        case "datetime":
          return "date";
        case "bit":
          return "boolean";
        default:
          return "text";
      }
    };

    formhelper.prototype.defaultChartOptions = function defaultChartOptions(chartJsType) {
      if (chartJsType == 'bar') {
        return _chart.Chart.defaults.bar;
      } else if (chartJsType == 'line') {
        return _chart.Chart.defaults.line;
      }
    };

    formhelper.prototype.defaultChartData = function defaultChartData(chartJsType) {
      var bgs = [];
      var borders = [];

      var isBar = chartJsType == 'bar' ? true : false;
      var isLine = chartJsType == 'line' ? true : false;

      if (isBar) {
        for (var i = 0; i < 5; i++) {
          var c = this.getRandomHSLColor();
          bgs.push('hsl(' + c.h + ', ' + c.s + '%, ' + c.l + '%)');
          borders.push('hsl(' + c.h + ', ' + c.s + '%, 30%)');
        }
      }

      var dataObj = {
        labels: ['One', 'Two', 'Three', 'Four', 'Five'],

        datasets: [{
          label: 'Colors',
          data: [3, 2, 7, 4, 5],
          backgroundColor: bgs,
          borderColor: borders,
          borderWidth: 1
        }]
      };

      if (isLine) {
        dataObj.datasets[0].pointBackgroundColor = 'rgb(255, 0, 0)';
        dataObj.datasets[0].borderColor.push('rgb(255, 0, 0)');
        dataObj.datasets[0].backgroundColor.push('rgba(0, 0, 0, 0.02)');
      }

      return dataObj;
    };

    formhelper.prototype.getNewOD_ReportObject = function getNewOD_ReportObject() {
      return {
        ReportID: 0,
        ReportName: null,
        ReportTitle: null,
        IsReportTitleImage: false,
        ReportTitleAlignment: null,
        ReportSubTitle: null,
        ReportSubTitleAlignment: null,
        ColumnSpacing: 0,
        GroupIndentation: 0,
        PaperOrientation: null,
        OutcomeVariableWeeks: null,
        Json: null
      };
    };

    formhelper.prototype.getTableCellOptionsForElement = function getTableCellOptionsForElement(el, cell, showTableCellOptions, table) {
      var rect = el.getBoundingClientRect();
      var fWin = document.getElementById('formWindow');
      var fList = document.getElementById('formList');

      rect.y += fWin.scrollTop;
      rect.x -= fList.width;
      return { 'show': showTableCellOptions, 'cell': cell, 'rect': rect, 'table': table };
    };

    return formhelper;
  }();
});;
define('formbuilder/index',['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Index = exports.Index = function () {
    function Index() {
      _classCallCheck(this, Index);

      console.log('Form Builder!');
    }

    Index.prototype.configureRouter = function configureRouter(config, router) {
      config.title = 'Form Builder';
      config.map([{ route: 'editor', name: 'editor', moduleId: 'formbuilder/editor', nav: true, title: 'Editor' }, { route: 'viewer', name: 'viewer', moduleId: 'formbuilder/viewer', nav: true, title: 'Viewer' }]);
      this.router = router;
    };

    return Index;
  }();
});;
define('text!formbuilder/index.html',[],function(){return "<template><router-view></router-view></template>";});;
define('formbuilder/listbuilder',['exports', '../helpers/helper', 'aurelia-framework', '../data/go/data', 'aurelia-event-aggregator', './formhelper', 'lodash', 'aurelia-dialog', '../go/popupHelper', './dialogs/newCustomValueDialog'], function (exports, _helper, _aureliaFramework, _data, _aureliaEventAggregator, _formhelper, _lodash, _aureliaDialog, _popupHelper, _newCustomValueDialog) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Listbuilder = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  var _dec, _desc, _value, _class, _dec2, _dec3, _class3, _desc2, _value2, _class4, _descriptor, _descriptor2;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var List = function List(name, id) {
    _classCallCheck(this, List);

    this.name = name;
    this.id = id;
    this.options = [];
    this.showSaveButton = false;
    this.showNormal = true;
    this.showName = true;
    this.canAdd = true;
  };

  var DataObject = (_dec = (0, _aureliaFramework.computedFrom)('dataType'), (_class = function () {
    function DataObject(data, parent, name, listName, listId, datatype) {
      _classCallCheck(this, DataObject);

      this.data = data;
      this.checked = false;
      this.parent = parent;
      this.name = name;
      this.listName = listName;
      this.listId = listId;
      this.dataType = datatype;
    }

    DataObject.prototype.checkItem = function checkItem() {
      this.checked = this.checked ? false : true;
      this.parent.itemCheckedChanged = this.checked;
    };

    DataObject.prototype.convertDatatypeToReadable = function convertDatatypeToReadable(datatype) {
      switch (datatype) {
        case "int":
          return "number";
        case "datetime":
          return "date";
        case "bit":
          return "boolean";
        default:
          return "text";
      }
    };

    _createClass(DataObject, [{
      key: 'readableType',
      get: function get() {
        return this.convertDatatypeToReadable(this.dataType);
      }
    }]);

    return DataObject;
  }(), (_applyDecoratedDescriptor(_class.prototype, 'readableType', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'readableType'), _class.prototype)), _class));

  var Category = function Category(name) {
    _classCallCheck(this, Category);

    this.itemCheckedChanged = false;

    this.items = [];
    this.name = name;
    this.isCustom = false;
  };

  var Listbuilder = exports.Listbuilder = (_dec2 = (0, _aureliaFramework.inject)(_helper.helper, _data.Data, _aureliaEventAggregator.EventAggregator, _formhelper.formhelper, _aureliaDialog.DialogService, _popupHelper.PopupHelper, _aureliaFramework.BindingEngine), _dec3 = (0, _aureliaFramework.computedFrom)('selectedCategory', 'selectedCategory.itemCheckedChanged', 'selectedList'), _dec2(_class3 = (_class4 = function () {
    Listbuilder.prototype.selectedListChanged = function selectedListChanged(newVal, oldVal) {
      if (newVal != null) {
        newVal.listHeight = this.listOptionsDialogListHeight;
      }
    };

    Listbuilder.prototype.selectedCategoryNameChanged = function selectedCategoryNameChanged(newval, oldVal) {
      if (newval.items.length == 0) {
        if (!newval.isCustom) {
          this.addDataElementDisabled = true;
          this.loadCategory(newval);
        } else {
          this.addDataElementDisabled = false;
          this.loadDataset(newval);
        }
      }
      this.selectedCategory = newval;
    };

    _createClass(Listbuilder, [{
      key: 'canUpdate',
      get: function get() {
        if (this.selectedCategory == null || this.selectedList == null || this.selectedList.id == undefined || this.selectedList.id == 0) {
          return false;
        }
        var checked = _.filter(this.selectedCategory.items, function (c) {
          return c.checked;
        });
        return checked.length > 0 ? true : false;
      }
    }]);

    function Listbuilder(helper, Data, EventAggregator, formhelper, DialogService, PopupHelper, BindingEngine) {
      _classCallCheck(this, Listbuilder);

      _initDefineProp(this, 'selectedList', _descriptor, this);

      this.listOptionsDialogListHeight = 200;
      this.lists = [];
      this.reportingColumnInfos = [];
      this.categoryNames = ['Ankle Exam', 'Knee Exam', 'Hip Exam', 'Hand Exam', 'Elbow Exam', 'Shoulder Exam', 'Cervical Exam', 'Lumbo Thoracic', 'Pre Op Exam', 'Lab Order', 'Range of Motion', 'Neurologic', 'Vascular', 'Procedure', 'Diagnosis', 'Surg Schedule'];
      this.categories = [];

      _initDefineProp(this, 'selectedCategoryName', _descriptor2, this);

      this.addDataElementDisabled = false;
      this.selectedCategory = null;
      this.optionDataset = null;
      this.optionListId = null;
      this.optionCustomValueId = null;
      this.optionReportingColumnId = null;

      this.helper = helper;
      this.data = Data;
      this.ea = EventAggregator;
      this.formhelper = formhelper;
      this.dialogService = DialogService;
      this.popupHelper = PopupHelper;
      this.bindingEngine = BindingEngine;
    }

    Listbuilder.prototype.activate = function activate(params) {
      var self = this;

      self.selectedList = { showSaveButton: false, showNormal: true, showName: true, canAdd: false };

      if (params.hasOwnProperty("Dataset")) {
        self.optionDataset = params.Dataset;
      }

      if (params.hasOwnProperty("ListId")) {
        self.optionListId = params.ListId;
      }

      if (params.hasOwnProperty("CustomValueId")) {
        self.optionCustomValueId = params.CustomValueId;
      }

      if (params.hasOwnProperty("ReportingColumnId")) {
        self.optionReportingColumnId = params.ReportingColumnId;
      }

      self.loadLists();

      for (var i = 0; i < self.categoryNames.length; i++) {
        var aCategory = new Category(self.categoryNames[i]);
        self.categories.push(aCategory);

        if (self.optionDataset == aCategory.name) {
          self.selectedCategoryName = aCategory;
          self.optionDataset = null;
        }
      }

      self.loadCustomValueCategories();

      this.ea.subscribe("listboxOptionChanged", function (options) {
        self.selectedList.options = options;
      });
    };

    Listbuilder.prototype.attached = function attached() {

      var self = this;

      var listboxOptionsHeaderHeight = 86 + 20 + 20;
      self.listOptionsDialogListHeight = self.listoptionsdiv.clientHeight - listboxOptionsHeaderHeight;
      self.selectedList = { showSaveButton: false, showNormal: true, showName: true, canAdd: false, listHeight: self.listOptionsDialogListHeight };
    };

    Listbuilder.prototype.listSelected = function listSelected(l) {
      this.selectedList = l;
    };

    Listbuilder.prototype.loadCustomValueCategories = function loadCustomValueCategories() {
      var self = this;

      var url = 'customvalues/datasets';
      self.data.getWithUrl(url, function (res) {

        for (var i = 0; i < res.length; i++) {
          var aCat = new Category(res[i].Dataset);
          aCat.isCustom = true;
          self.categories.push(aCat);

          if (self.optionDataset == aCat.name) {
            self.selectedCategoryName = aCat;
            self.optionDataset = null;
          }
        }
      });
    };

    Listbuilder.prototype.loadDataset = function loadDataset(category) {
      var self = this;

      var url = 'customvalues?dataset=' + category.name;
      self.data.getWithUrl(url, function (res) {
        var items = [];
        for (var i = 0; i < res.length; i++) {
          var list = res[i].OD_GO_Form_List;

          var dObj = new DataObject(res[i], category, res[i].Name, list ? list.Name : null, list ? list.Id : null, res[i].Datatype);

          if (self.optionCustomValueId == dObj.data.Id) {
            dObj.checkItem();
            self.optionCustomValueId = null;
          }

          items.push(dObj);
        }

        category.items = items;
      });
    };

    Listbuilder.prototype.loadCategory = function loadCategory(category) {
      var self = this;
      self.selectedCategory = null;;
      var url = 'reportingcolumninfo/elements/lists?category=' + category.name;
      self.data.getWithUrl(url, function (res) {
        var items = [];
        for (var i = 0; i < res.length; i++) {

          var dObj = new DataObject(res[i], category, res[i].ColumnFriendlyName, res[i].ListName, res[i].ListId, res[i].Datatype);

          if (self.optionReportingColumnId == dObj.data.ColumnID) {
            dObj.checkItem();
            self.optionReportingColumnId = null;
          }

          items.push(dObj);
        }

        category.items = items;
      });
    };

    Listbuilder.prototype.loadLists = function loadLists() {
      var self = this;
      self.lists = [];
      self.data.getWithUrl('goformslist/all', function (res) {
        for (var i = 0; i < res.length; i++) {
          if (res[i].Id == 0) {
            continue;
          }

          var aList = new List(res[i].Name, res[i].Id);
          var json = res[i].Json ? JSON.parse(res[i].Json) : null;
          if (json != null) {
            for (var x = 0; x < json.length; x++) {
              var itm = json[x];
              var aItm = self.formhelper.getNewListItem(itm.text, itm.normal);
              aItm.sql = itm.sql;
              aList.options.push(aItm);
            }
          }
          self.lists.push(aList);

          if (self.optionListId == aList.id) {
            self.selectedList = aList;
            self.optionListId = null;
          }
        }
      });
    };

    Listbuilder.prototype.newList = function newList() {
      var self = this;
      self.popupHelper.openGenericInputPop("Create New List", ['Name'], null, false, function (res) {
        var imageName = res.inputs[0].value;
        var newList = new List(imageName, 0);
        self.lists.push(newList);
        self.selectedList = newList;
      });
    };

    Listbuilder.prototype.deleteList = function deleteList() {
      var self = this;

      if (self.selectedList == null) return;

      var msg = 'This will delete all associations to ' + self.selectedList.name + ' and database elements! Are you sure?';
      self.popupHelper.openGenericMessagePop(msg, 'Delete Picklist', ['YES', 'NO'], false, function (res) {
        var r = res.result;
        if (r == 'YES') {

          var saveDescription = 'Deleting ' + self.selectedList.name + '...';
          var saveDialog = self.helper.createNoty(saveDescription, 3000);
          saveDialog.show();

          if (self.selectedList && self.selectedList.id > 0) {
            var url = 'goformslist?id=' + self.selectedList.id;
            self.data.deleteWithUrl(url, function (res) {
              var getUrl = 'reportingcolumninfo/list/xref?listId=' + self.selectedList.id;
              self.data.getWithUrl(getUrl, function (getRes) {

                var reportingData = {
                  ReportingColumnInfos: []
                };
                for (var x = 0; x < getRes.length; x++) {
                  var d = getRes[x];
                  d.ListId = null;
                  reportingData.ReportingColumnInfos.push(d);
                }

                var putUrl = 'reportingcolumninfo/list/xref';
                self.data.putWithUrlAndData(putUrl, reportingData, function (res) {

                  var checked = _.filter(self.selectedCategory.items, function (c) {
                    return c.checked;
                  });

                  for (var i = 0; i < checked.length; i++) {
                    checked[i].data.ListId = null;
                    checked[i].data.ListName = null;
                  }
                });
              });

              var index = _.findIndex(self.lists, function (l) {
                return l.id == self.selectedList.id;
              });
              self.lists.splice(index, 1);
              self.selectedList = null;
              self.helper.updateNoty(saveDialog, "Deleted list!", "success", 1000);
            });
          } else {
            var index = _.findIndex(self.lists, function (l) {
              return l.id == self.selectedList.id;
            });
            self.lists.splice(index, 1);
            self.selectedList = null;
            self.helper.updateNoty(saveDialog, "Deleted list!", "success", 1000);
          }
        }
      });
    };

    Listbuilder.prototype.saveList = function saveList() {
      var self = this;

      var saveDescription = 'Saving ' + self.selectedList.name + '...';
      var saveDialog = self.helper.createNoty(saveDescription, 3000);
      saveDialog.show();

      if (self.selectedList && self.selectedList.id > 0) {
        var list = {
          Id: self.selectedList.id,
          Name: self.selectedList.name,
          Json: JSON.stringify(self.selectedList.options)
        };
        self.data.putWithUrlAndData('goformslist', list, function (res) {
          self.helper.updateNoty(saveDialog, "Saved list!", "success", 1000);
        });
      } else {
        var list = {
          Id: 0,
          Name: self.selectedList.name,
          Json: JSON.stringify(self.selectedList.options)
        };
        self.data.postWithUrlAndData('goformslist', JSON.stringify(list), function (res) {
          self.helper.updateNoty(saveDialog, "Saved list!", "success", 1000);
          self.selectedList.id = res.Id;
        });
      }
    };

    Listbuilder.prototype.removeListFromItem = function removeListFromItem(item) {
      var self = this;

      var saveDescription = 'Disassociating list from ' + item.name + '...';
      var saveDialog = self.helper.createNoty(saveDescription, 3000);
      saveDialog.show();

      if (!item.parent.isCustom) {
        var data = {
          ReportingColumnInfos: []
        };
        var itm = {
          ReportingColumnInfoId: item.data.ColumnID,
          ListId: null
        };
        data.ReportingColumnInfos.push(itm);

        var url = 'reportingcolumninfo/list/xref';
        self.data.putWithUrlAndData(url, data, function (res) {
          item.listId = null;
          item.listName = null;
          self.helper.updateNoty(saveDialog, "Disassociated list!", "success", 1000);
        });
      } else {
        var url = 'customvalues';

        var clonedData = _.cloneDeep(item.data);
        clonedData.ListId = null;

        self.data.putWithUrlAndData(url, clonedData, function (res) {
          item.listId = null;
          item.listName = null;
          self.helper.updateNoty(saveDialog, "Disassociated list!", "success", 1000);
        });
      }
    };

    Listbuilder.prototype.uncheckSelectedCategoryItems = function uncheckSelectedCategoryItems() {
      if (this.selectedCategory) {
        for (var i = 0; i < this.selectedCategory.items.length; i++) {
          this.selectedCategory.items[i].checked = false;
        }
      }
    };

    Listbuilder.prototype.applyListToSelected = function applyListToSelected() {
      var self = this;

      if (self.selectedList == null) return;

      var saveDescription = 'Applying list to selected items...';
      var saveDialog = self.helper.createNoty(saveDescription, 3000);
      saveDialog.show();

      var checked = _.filter(self.selectedCategory.items, function (c) {
        return c.checked;
      });

      if (!self.selectedCategory.isCustom) {
        var data = {
          ReportingColumnInfos: []
        };
        for (var i = 0; i < checked.length; i++) {
          var itm = {
            ReportingColumnInfoId: checked[i].data.ColumnID,
            ListId: self.selectedList.id
          };
          data.ReportingColumnInfos.push(itm);
        }

        var url = 'reportingcolumninfo/list/xref';
        self.data.putWithUrlAndData(url, data, function (res) {
          for (var _i = 0; _i < checked.length; _i++) {
            checked[_i].data.ListId = self.selectedList.id;
            checked[_i].data.ListName = self.selectedList.name;
            checked[_i].listId = self.selectedList.id;
            checked[_i].listName = self.selectedList.name;
          }
          self.helper.updateNoty(saveDialog, "Applied list successfully!", "success", 1000);

          self.uncheckSelectedCategoryItems();
        });
      } else {

        var obj = {
          CustomValues: []
        };
        for (var _i2 = 0; _i2 < checked.length; _i2++) {
          checked[_i2].data.ListId = self.selectedList.id;
          obj.CustomValues.push(checked[_i2].data);
        }

        var url = 'customvalues/multiple';
        self.data.putWithUrlAndData(url, obj, function (res) {
          for (var _i3 = 0; _i3 < checked.length; _i3++) {
            checked[_i3].data.ListId = self.selectedList.id;
            checked[_i3].listId = self.selectedList.id;
            checked[_i3].listName = self.selectedList.name;
          }
          self.helper.updateNoty(saveDialog, "Applied list successfully!", "success", 1000);

          self.uncheckSelectedCategoryItems();
        });
      }
    };

    Listbuilder.prototype.addNewDataset = function addNewDataset() {
      var self = this;
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var cats = _.filter(self.categories, function (r) {
        return r.isCustom;
      });
      var catNames = [];
      for (var i = 0; i < cats.length; i++) {
        catNames.push(cats[i].name);
      }

      var datasetName = self.selectedCategory ? self.selectedCategory.name : null;

      self.dialogService.open({ viewModel: _newCustomValueDialog.NewCustomValueDialog, model: { popupWidth: windowWidth, popupHeight: windowHeight, datasetList: catNames, "datasetName": datasetName } }).then(function (openDialogResult) {
        return openDialogResult.closeResult;
      }).then(function (response) {
        var res = response.output;
        if (res != null) {
          var customValue = {
            Id: 0,
            Dataset: res.dataset,
            Name: res.name,
            ListId: null,
            Bodypart: null,
            Datatype: res.datatype
          };

          var saveDescription = 'Saving new custom value...';
          var saveDialog = self.helper.createNoty(saveDescription, 3000);
          saveDialog.show();

          var url = 'customvalues';
          self.data.postWithUrlAndData(url, JSON.stringify(customValue), function (customValueRes) {
            self.helper.updateNoty(saveDialog, "Custom value " + customValueRes.Name + " saved!", "success", 1000);

            var foundCategory = _.find(self.categories, function (c) {
              return c.isCustom && c.name == customValueRes.Dataset;
            });
            if (!foundCategory) {
              foundCategory = new Category(customValueRes.Dataset);
              foundCategory.items.push(new DataObject(customValueRes, foundCategory, customValueRes.Name, null, null, customValueRes.Datatype));
              self.categories.push(foundCategory);
            } else {
              foundCategory.items.push(new DataObject(customValueRes, foundCategory, customValueRes.Name, null, null, customValueRes.Datatype));
            }
          });
        }
      });
    };

    return Listbuilder;
  }(), (_descriptor = _applyDecoratedDescriptor(_class4.prototype, 'selectedList', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class4.prototype, 'selectedCategoryName', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class4.prototype, 'canUpdate', [_dec3], Object.getOwnPropertyDescriptor(_class4.prototype, 'canUpdate'), _class4.prototype)), _class4)) || _class3);
});;
define('text!formbuilder/listbuilder.html',[],function(){return "<template><style>.dropdown-toggle::after{float:right;margin-top:10px}.list-button{background-color:#fff;color:#000;border-color:#d8d8d8}.list-button:hover{background-color:#fff!important}</style><div class=\"row\"><div class=\"col-md-12\"><p class=\"lead\">Create and associate list (on left) with data elements (on right).</p></div></div><div class=\"row\"><div class=\"col-md-5 pr-0\" style=\"overflow-y:auto;height:80vh\"><div class=\"card\" style=\"height:80vh\"><h5 class=\"card-header d-flex align-items-center\"><i class=\"fa fa-list-ul\" aria-hidden=\"true\"></i><div class=\"btn-group mx-2\" style=\"width:100%\" role=\"group\"><div class=\"btn-group\" style=\"width:inherit\" role=\"group\"><button type=\"button\" class=\"btn dropdown-toggle list-button\" style=\"text-align:left\" data-toggle=\"dropdown\" aria-expanded=\"false\"><span if.bind=\"!selectedList.options\">List...</span> <span if.bind=\"selectedList.options\">${selectedList.name}</span></button><div class=\"dropdown-menu\" style=\"overflow:scroll;max-height:700px;box-shadow:rgba(7,7,7,.1) 0 10px 15px 2px\"><a repeat.for=\"l of lists\" class=\"dropdown-item\" href=\"#\" click.delegate=\"listSelected(l)\">${l.name}</a></div></div><button type=\"button\" class=\"btn btn-outline-primary\" click.delegate=\"newList()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button></div><div class=\"btn-group ml-auto\"><button type=\"button\" class=\"btn btn-primary\" disabled.bind=\"!selectedList\" click.delegate=\"saveList()\"><i class=\"fa fa-floppy-o\" aria-hidden=\"true\"></i></button> <button type=\"button\" class=\"btn btn-primary dropdown-toggle dropdown-toggle-split\" disabled.bind=\"!selectedList\" data-toggle=\"dropdown\" aria-expanded=\"false\"><span class=\"sr-only\">Toggle Dropdown</span></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"deleteList()\"><i class=\"fa fa-trash-o mr-2\" aria-hidden=\"true\"></i>Delete</a></div></div></h5><div ref=\"listoptionsdiv\" class=\"card-body\"><compose view-model=\"./dialogs/listboxOptionsDialog\" model.bind=\"selectedList\" containerless></compose></div></div></div><div class=\"col-md-7\" style=\"height:80vh\"><div class=\"card\" style=\"height:80vh\"><h5 class=\"card-header d-flex align-items-center\"><i class=\"fa fa-database\" aria-hidden=\"true\"></i> <select class=\"form-control ml-2 mr-2\" style=\"width:150px\" aria-label=\"Picklist\" value.bind=\"selectedCategoryName\"><option model.bind=\"null\">Data...</option><option repeat.for=\"l of categories\" model.bind=\"l\">${l.name}</option></select> <button type=\"button\" class=\"btn btn-primary\" disabled.bind=\"addDataElementDisabled\" click.delegate=\"addNewDataset()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i> Add</button> <button type=\"button\" class=\"btn btn-primary ml-auto\" disabled.bind=\"!canUpdate\" click.delegate=\"applyListToSelected()\"><i class=\"fa fa-check-square-o\" aria-hidden=\"true\"></i> Update</button></h5><ul class=\"list-group list-group-flush\" style=\"overflow-y:auto\"><li repeat.for=\"c of selectedCategory.items\" class=\"list-group-item d-flex align-items-center\"><i class=\"fa ${c.checked ? 'fa-check-square-o' : 'fa-square-o'} text-muted fa-2x mr-2\" aria-hidden=\"true\" click.delegate=\"c.checkItem()\"></i> <span class=\"font-weight-bold mr-1\">${c.name}</span><span class=\"text-muted\">${c.dataType}</span><span if.bind=\"c.listId\" class=\"ml-auto\"><span class=\"text-muted\"><i class=\"fa fa-list-ul mr-1\" aria-hidden=\"true\"></i>${c.listName}</span><button type=\"button\" class=\"btn btn-danger ml-2\" click.delegate=\"removeListFromItem(c)\"><i class=\"fa fa-trash-o\" aria-hidden=\"true\"></i></button></span></li></ul></div></div></div></template>";});;
define('formbuilder/printHelper',["exports"], function (exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var printHelper = exports.printHelper = function () {
        function printHelper() {
            _classCallCheck(this, printHelper);

            this.hideFromPrintClass = "pe-no-print";
            this.preservePrintClass = "pe-preserve-print";
            this.preserveAncestorClass = "pe-preserve-ancestor";
            this.bodyElementName = "BODY";

            console.log("PRINT HELPER");
        }

        printHelper.prototype._hide = function _hide(element) {
            if (!element.classList.contains(this.preservePrintClass)) {
                element.classList.add(this.hideFromPrintClass);
            }
        };

        printHelper.prototype._preserve = function _preserve(element, isStartingElement) {
            element.classList.remove(this.hideFromPrintClass);
            element.classList.add(this.preservePrintClass);
            if (!isStartingElement) {
                element.classList.add(this.preserveAncestorClass);
            }
        };

        printHelper.prototype._clean = function _clean(element) {
            element.classList.remove(this.hideFromPrintClass);
            element.classList.remove(this.preservePrintClass);
            element.classList.remove(this.preserveAncestorClass);
        };

        printHelper.prototype._walkSiblings = function _walkSiblings(element, callback) {
            var sibling = element.previousElementSibling;
            while (sibling) {
                callback(sibling);
                sibling = sibling.previousElementSibling;
            }
            sibling = element.nextElementSibling;
            while (sibling) {
                callback(sibling);
                sibling = sibling.nextElementSibling;
            }
        };

        printHelper.prototype._attachPrintClasses = function _attachPrintClasses(element, isStartingElement) {
            var self = this;
            self._preserve(element, isStartingElement);
            self._walkSiblings(element, self._hide.bind(self));
        };

        printHelper.prototype._cleanup = function _cleanup(element, isStartingElement) {
            var self = this;
            self._clean(element);
            self._walkSiblings(element, self._clean.bind(self));
        };

        printHelper.prototype._walkTree = function _walkTree(element, callback) {
            var currentElement = element;
            callback(currentElement, true);
            currentElement = currentElement.parentElement;
            while (currentElement && currentElement.nodeName !== this.bodyElementName) {
                callback(currentElement, false);
                currentElement = currentElement.parentElement;
            }
        };

        printHelper.prototype._print = function _print(elements) {
            var self = this;
            for (var i = 0; i < elements.length; i++) {
                self._walkTree(elements[i], self._attachPrintClasses.bind(self));
            }
            window.print();
            for (i = 0; i < elements.length; i++) {
                self._walkTree(elements[i], self._cleanup.bind(self));
            }
        };

        return printHelper;
    }();
});;
define('formbuilder/resize-corner',['exports', 'aurelia-framework', 'bcx-aurelia-dnd'], function (exports, _aureliaFramework, _bcxAureliaDnd) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ResizeCorner = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3;

  var ResizeCorner = exports.ResizeCorner = (_dec = (0, _aureliaFramework.inject)(_bcxAureliaDnd.DndService), _dec(_class = (_class2 = function () {
    _createClass(ResizeCorner, [{
      key: 'resizeClass',
      get: function get() {
        return 'item-resize item-resize-' + this.mode;
      }
    }]);

    function ResizeCorner(dndService) {
      _classCallCheck(this, ResizeCorner);

      _initDefineProp(this, 'mode', _descriptor, this);

      _initDefineProp(this, 'itemId', _descriptor2, this);

      _initDefineProp(this, 'editing', _descriptor3, this);

      this.dndService = dndService;
    }

    ResizeCorner.prototype.attached = function attached() {
      this.dndService.addSource(this, { noPreview: true });
    };

    ResizeCorner.prototype.detached = function detached() {
      this.dndService.removeSource(this);
    };

    ResizeCorner.prototype.dndModel = function dndModel() {
      return { type: 'resizeItem', id: this.itemId, resize: this.mode };
    };

    return ResizeCorner;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'mode', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: function initializer() {
      return 'n';
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'itemId', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: function initializer() {
      return '';
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'editing', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: function initializer() {
      return true;
    }
  })), _class2)) || _class);
});;
define('text!formbuilder/resize-corner.html',[],function(){return "<template class=\"${editing ? resizeClass : ''}\" ref=\"dndElement\"></template>";});;
define('formbuilder/snap-to-edge',['exports', 'lodash'], function (exports, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.snapToEdge = snapToEdge;

  var _lodash2 = _interopRequireDefault(_lodash);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _isOverlapping(n1, size1, n2, size2) {
    return n1 <= n2 + size2 && n2 <= n1 + size1;
  }

  function isOverlappingOnX(position1, position2) {
    return _isOverlapping(position1.x, position1.width, position2.x, position2.width);
  }

  function isOverlappingOnY(position1, position2) {
    return _isOverlapping(position1.y, position1.height, position2.y, position2.height);
  }

  function snapToEdge(position, _ref) {
    var resize = _ref.resize,
        container = _ref.container,
        neighbourPositions = _ref.neighbourPositions,
        _ref$margin = _ref.margin,
        margin = _ref$margin === undefined ? 10 : _ref$margin;
    var x = position.x,
        y = position.y,
        width = position.width,
        height = position.height;


    function near(n1, n2) {
      return Math.abs(n1 - n2) <= margin;
    }

    if (resize) {
      _lodash2.default.each(resize, function (char) {
        var snapped = false;

        switch (char) {
          case 'n':
            if (near(y, container.y)) {
              snapped = true;
              height += y - container.y;
              y = container.y;
            }

            if (!snapped) {
              _lodash2.default.each(neighbourPositions, function (neighbour) {
                if (isOverlappingOnX(position, neighbour)) {
                  if (near(y, neighbour.y + neighbour.height)) {
                    snapped = true;
                    height += y - neighbour.y - neighbour.height;
                    y = neighbour.y + neighbour.height;
                  }
                }

                if (snapped) return false;
              });
            }
            break;
          case 's':
            if (near(y + height, container.y + container.height)) {
              snapped = true;
              height = container.y + container.height - y;
            }

            if (!snapped) {
              _lodash2.default.each(neighbourPositions, function (neighbour) {
                if (isOverlappingOnX(position, neighbour)) {
                  if (near(y + height, neighbour.y)) {
                    height = neighbour.y - y;
                  }
                }

                if (snapped) return false;
              });
            }
            break;
          case 'w':
            if (near(x, container.x)) {
              snapped = true;
              width += x - container.x;
              x = container.x;
            }

            if (!snapped) {
              _lodash2.default.each(neighbourPositions, function (neighbour) {
                if (isOverlappingOnY(position, neighbour)) {
                  if (near(x, neighbour.x + neighbour.width)) {
                    snapped = true;
                    width += x - neighbour.x - neighbour.width;
                    x = neighbour.x + neighbour.width;
                  }
                }

                if (snapped) return false;
              });
            }
            break;
          case 'e':
            if (near(x + width, container.x + container.width)) {
              snapped = true;
              width = container.x + container.width - x;
            }

            if (!snapped) {
              _lodash2.default.each(neighbourPositions, function (neighbour) {
                if (isOverlappingOnY(position, neighbour)) {
                  if (near(x + width, neighbour.x)) {
                    width = neighbour.x - x;
                  }
                }

                if (snapped) return false;
              });
            }
            break;
          default:
        }
      });
    } else {
      var xSnapped = false;
      var ySnapped = false;

      if (near(x, container.x)) {
        xSnapped = true;
        x = container.x;
      } else if (near(x + width, container.x + container.width)) {
        xSnapped = true;
        x = container.x + container.width - width;
      }

      if (near(y, container.y)) {
        ySnapped = true;
        y = container.y;
      } else if (near(y + height, container.y + container.height)) {
        ySnapped = true;
        y = container.y + container.height - height;
      }

      _lodash2.default.each(neighbourPositions, function (neighbour) {
        if (!xSnapped && isOverlappingOnY(position, neighbour)) {
          if (near(x, neighbour.x + neighbour.width)) {
            xSnapped = true;
            x = neighbour.x + neighbour.width;
          } else if (near(x + width, neighbour.x)) {
            xSnapped = true;
            x = neighbour.x - width;
          }
        }

        if (!ySnapped && isOverlappingOnX(position, neighbour)) {
          if (near(y, neighbour.y + neighbour.height)) {
            ySnapped = true;
            y = neighbour.y + neighbour.height;
          } else if (near(y + height, neighbour.y)) {
            ySnapped = true;
            y = neighbour.y - height;
          }
        }
      });
    }

    return { x: x, y: y, width: width, height: height };
  }
});;
define('formbuilder/snap-to-grid',['exports', 'lodash'], function (exports, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.snapToGrid = snapToGrid;

  var _lodash2 = _interopRequireDefault(_lodash);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function toGrid(number, gridSize) {
    return Math.round(number / gridSize) * gridSize;
  }

  function snapToGrid(position) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        resize = _ref.resize,
        _ref$gridSize = _ref.gridSize,
        gridSize = _ref$gridSize === undefined ? 10 : _ref$gridSize;

    var x = position.x,
        y = position.y,
        width = position.width,
        height = position.height;


    if (resize) {
      var oldX = x;
      var oldY = y;

      _lodash2.default.each(resize, function (char) {
        switch (char) {
          case 'n':
            y = toGrid(y, gridSize);
            height += oldY - y;
            break;
          case 's':
            height = toGrid(height + y, gridSize) - y;
            break;
          case 'w':
            x = toGrid(x, gridSize);
            width += oldX - x;
            break;
          case 'e':
            width = toGrid(width + x, gridSize) - x;
            break;
          default:
        }
      });
    } else {
      x = toGrid(x, gridSize);
      y = toGrid(y, gridSize);
    }

    return { x: x, y: y, width: width, height: height };
  }
});;
define('text!formbuilder/styles/box.css',[],function(){return ".box {\n  position: absolute;\n  cursor: pointer;\n  box-sizing: border-box;\n  /* border: 1px dashed #007bff; */\n  /* background: white; */\n  background: transparent;\n  line-height: 1;\n}\n\n\n.box .item-resize {\n  position: absolute;\n  display: block;\n  border: 1px solid #007bff;\n  background-color: white;\n}\n\n/* just for demo */\n.show-resize-area .item-resize {\n  background-color: rgba(255, 255, 255, 0.5);\n  box-sizing: border-box;\n  outline: 1px solid gray;\n}\n\n\n.box .item-resize.item-resize-n {\n  top: -4px;\n  height: 14px;\n  left: 10px;\n  right: 10px;\n  cursor: ns-resize;\n}\n\n.box .item-resize.item-resize-e {\n  right: -4px;\n  width: 14px;\n  top: 10px;\n  bottom: 10px;\n  cursor: ew-resize;\n}\n\n.box .item-resize.item-resize-s {\n  bottom: -4px;\n  height: 14px;\n  left: 10px;\n  right: 10px;\n  cursor: ns-resize;\n}\n\n.box .item-resize.item-resize-w {\n  left: -4px;\n  width: 14px;\n  top: 10px;\n  bottom: 10px;\n  cursor: ew-resize;\n}\n\n.box .item-resize.item-resize-ne {\n  top: -4px;\n  right: -4px;\n  width: 14px;\n  height: 14px;\n  cursor: nesw-resize;\n}\n\n.box .item-resize.item-resize-sw {\n  bottom: -4px;\n  left: -4px;\n  width: 14px;\n  height: 14px;\n  cursor: nesw-resize;\n}\n\n.box .item-resize.item-resize-nw {\n  top: -4px;\n  left: -4px;\n  width: 14px;\n  height: 14px;\n  cursor: nwse-resize;\n}\n\n.box .item-resize.item-resize-se {\n  bottom: -4px;\n  right: -4px;\n  width: 14px;\n  height: 14px;\n  cursor: nwse-resize;\n}\n";});;
define('text!formbuilder/styles/container.css',[],function(){return ".container {\n  position: relative;\n  box-sizing: border-box;\n  /* width: 300px;\n  height: 300px; */\n  /* outline: 1px solid #555; */\n  background-color: white;\n  overflow: hidden;\n  /* margin: 10px; */\n}\n";});;
define('formbuilder/tools/checkbox',['exports', 'aurelia-framework', 'bcx-aurelia-dnd', 'aurelia-event-aggregator', '../editor'], function (exports, _aureliaFramework, _bcxAureliaDnd, _aureliaEventAggregator, _editor) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Checkbox = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _dec2, _dec3, _dec4, _class, _desc, _value, _class2, _descriptor;

  var Checkbox = exports.Checkbox = (_dec = (0, _aureliaFramework.inject)(_bcxAureliaDnd.DndService, _aureliaEventAggregator.EventAggregator, _aureliaFramework.BindingEngine, _editor.Editor), _dec2 = (0, _aureliaFramework.computedFrom)('item', 'item.editMode', 'item.required', 'item.value'), _dec3 = (0, _aureliaFramework.computedFrom)('item', 'item.dataColumn', 'item.dataColumn.tableName', 'item.editMode'), _dec4 = (0, _aureliaFramework.computedFrom)('item', 'item.x', 'item.y', 'item.width', 'item.height', 'item.selected'), _dec(_class = (_class2 = function () {
    function Checkbox(dndService, EventAggregator, BindingEngine, Editor) {
      _classCallCheck(this, Checkbox);

      _initDefineProp(this, 'item', _descriptor, this);

      this.dndService = dndService;
      this.ea = EventAggregator;
      this.bindingEngine = BindingEngine;
      this.editor = Editor;
    }

    Checkbox.prototype.activate = function activate(model) {
      this.item = model;
    };

    Checkbox.prototype.attached = function attached() {
      var self = this;
      var elem = document.getElementById(self.item.id);
      self.dndService.addSource(self, { noPreview: true, element: elem });

      self.bindingEngine.propertyObserver(self.item, 'style').subscribe(function (newVal, oldVal) {
        self.editor.updateItem(self.item);
      });

      self.bindingEngine.propertyObserver(self.item, 'html').subscribe(function (newVal, oldVal) {
        self.editor.updateItem(self.item);
      });
    };

    Checkbox.prototype.detached = function detached() {
      this.dndService.removeSource(this);
    };

    Checkbox.prototype.itemClicked = function itemClicked(e) {

      if (this.item.showToolbar) {
        e.stopPropagation();
        return;
      }

      this.ea.publish("itemClicked", this.item);
    };

    Checkbox.prototype.checkboxChecked = function checkboxChecked(e) {
      var self = this;

      if (self.item.editMode) {
        return;
      }

      e.stopPropagation();
      return true;
    };

    Checkbox.prototype.dndModel = function dndModel() {
      return {
        type: 'moveItem',
        id: this.item.id
      };
    };

    _createClass(Checkbox, [{
      key: 'isRequired',
      get: function get() {
        var tRequired = !this.item.editMode && this.item.required ? true : false;
        if (!tRequired) {
          this.ea.publish('checkComplete', this.item);
          return false;
        }
        if (tRequired && this.item.value) {
          this.ea.publish('checkComplete', this.item);
          return false;
        }
        return true;
      }
    }, {
      key: 'showDbElementIcon',
      get: function get() {
        if (this.item.dataColumn && this.item.dataColumn.tableName) {
          return this.item.editMode;
        } else {
          return false;
        }
      }
    }, {
      key: 'positionCss',
      get: function get() {
        var x = this.item && this.item.x || 0;
        var y = this.item && this.item.y || 0;
        var width = this.item && this.item.width || 0;
        width = width == '100%' || width == 'auto' ? width : width + 'px';
        var height = this.item && this.item.height || 0;
        var boxCursor = this.item && this.item.selected ? "pointer" : "default";
        var border = this.item && this.item.selected ? "1px dashed #007bff" : "none";

        return {
          left: x + 'px',
          top: y + 'px',
          width: width,
          height: height + 'px',
          cursor: boxCursor,
          border: border
        };
      }
    }]);

    return Checkbox;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'item', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, 'isRequired', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'isRequired'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'showDbElementIcon', [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, 'showDbElementIcon'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'positionCss', [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, 'positionCss'), _class2.prototype)), _class2)) || _class);
});;
define('text!formbuilder/tools/checkbox.html',[],function(){return "<template><require from=\"../styles/box.css\"></require><require from=\"../resize-corner\"></require><require from=\"./listbox-toolbar\"></require><style>.table-style{display:inline-block;width:auto}</style><div ref=\"dndElement\" class=\"${item.addBoxClass ? 'box' : 'table-style'}\" style.bind=\"positionCss\" id.bind=\"item.id\" pointerup.delegate=\"itemClicked($event)\"><div class=\"card w-100 h-100 mb-1 bg-transparent ${isRequired ? 'border-danger border-1': 'border-0'}\"><div ref=\"cardbody\" class=\"card-body p-1 d-flex align-items-center\"><i if.bind=\"showDbElementIcon\" class=\"fa fa-database mr-1 text-muted\" aria-hidden=\"true\"></i><input id.bind=\"item.elementId\" type=\"checkbox\" css=\"${item.editMode ? 'pointer-events: none;' : ''}\" required.bind=\"isRequired\" aria-hidden=\"true\" checked.bind=\"item.value\" click.delegate=\"checkboxChecked($event)\"><div contenteditable.bind=\"item.editMode\" class=\"ml-1\" innerhtml.two-way=\"item.html\" style.bind=\"item.style\"></div></div></div><resize-corner if.bind=\"item.addBoxClass\" repeat.for=\"mode of ['se','sw','nw','ne']\" mode.bind=\"mode\" item-id.bind=\"item.id\" editing.bind=\"item.selected\"></resize-corner></div></template>";});;
define('formbuilder/tools/colorPicker',['exports', 'aurelia-framework', '../formhelper'], function (exports, _aureliaFramework, _formhelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ColorPicker = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

  var ColorPicker = exports.ColorPicker = (_dec = (0, _aureliaFramework.inject)(_formhelper.formhelper), _dec(_class = (_class2 = function () {
    function ColorPicker(formhelper) {
      _classCallCheck(this, ColorPicker);

      _initDefineProp(this, 'color', _descriptor, this);

      _initDefineProp(this, 'left', _descriptor2, this);

      _initDefineProp(this, 'top', _descriptor3, this);

      _initDefineProp(this, 'visible', _descriptor4, this);

      this.hueValue = 50;
      this.saturationValue = 100;
      this.lightnessValue = 50;
      this.alphaValue = 1;

      this.formHelper = formhelper;
    }

    ColorPicker.prototype.hidePopup = function hidePopup() {
      this.visible = false;
    };

    ColorPicker.prototype.addFav = function addFav() {
      this.addSwatch(this.color);
    };

    ColorPicker.prototype.activate = function activate(model) {
      this.item = model;
    };

    ColorPicker.prototype.attached = function attached() {
      this.setDefaultState();
      this.updateColorPicker();
    };

    ColorPicker.prototype.swatchClicked = function swatchClicked(s) {
      this.color = s;
      this.updateColorPicker();
    };

    ColorPicker.prototype.addSwatch = function addSwatch(color) {
      this.formHelper.swatches.push(color);
    };

    ColorPicker.prototype.setHue = function setHue() {
      this.hueValue = this.hueInput.value;
      this.color = this.HSLToHex(this.hueValue, this.saturationValue, this.lightnessValue, this.alphaValue);
      this.updateColorPicker();
    };

    ColorPicker.prototype.setDefaultState = function setDefaultState() {
      this.hueInput.focus();
      this.setHue();
    };

    ColorPicker.prototype.colorPickerClick = function colorPickerClick(e) {
      var canvas = this.colorCanvas;
      var ctx = this.colorCanvas.getContext('2d');
      var imgData = ctx.getImageData(e.offsetX / canvas.clientWidth * canvas.width, e.offsetY / canvas.clientHeight * canvas.height, 1, 1);
      var rgba = imgData.data;
      this.color = this.RGBToHex(rgba[0], rgba[1], rgba[2]);
    };

    ColorPicker.prototype.addFavorite = function addFavorite() {};

    ColorPicker.prototype.updateColorPicker = function updateColorPicker() {
      var canvas = this.colorCanvas;
      var canvasContext = canvas.getContext('2d');

      var gradient = canvasContext.createLinearGradient(canvas.width, 0, 0, 0);
      gradient.addColorStop(0, this.color);
      gradient.addColorStop(1, 'rgb(255, 255, 255)');
      canvasContext.fillStyle = gradient;
      canvasContext.fillRect(0, 0, canvas.width, canvas.height);

      gradient = canvasContext.createLinearGradient(0, 0, 0, canvas.height);
      gradient.addColorStop(0, 'rgba(0, 0, 0, 0)');
      gradient.addColorStop(1, 'rgba(0, 0, 0, 1)');
      canvasContext.fillStyle = gradient;
      canvasContext.fillRect(0, 0, canvas.width, canvas.height);
    };

    ColorPicker.prototype.RGBToHex = function RGBToHex(r, g, b) {
      r = r.toString(16);
      g = g.toString(16);
      b = b.toString(16);

      if (r.length == 1) r = "0" + r;
      if (g.length == 1) g = "0" + g;
      if (b.length == 1) b = "0" + b;

      return "#" + r + g + b;
    };

    ColorPicker.prototype.HSLToHex = function HSLToHex(h, s, l, a) {
      s /= 100;
      l /= 100;

      var c = (1 - Math.abs(2 * l - 1)) * s,
          x = c * (1 - Math.abs(h / 60 % 2 - 1)),
          m = l - c / 2,
          r = 0,
          g = 0,
          b = 0;

      if (0 <= h && h < 60) {
        r = c;g = x;b = 0;
      } else if (60 <= h && h < 120) {
        r = x;g = c;b = 0;
      } else if (120 <= h && h < 180) {
        r = 0;g = c;b = x;
      } else if (180 <= h && h < 240) {
        r = 0;g = x;b = c;
      } else if (240 <= h && h < 300) {
        r = x;g = 0;b = c;
      } else if (300 <= h && h < 360) {
        r = c;g = 0;b = x;
      }

      r = Math.round((r + m) * 255).toString(16);
      g = Math.round((g + m) * 255).toString(16);
      b = Math.round((b + m) * 255).toString(16);

      a = Math.round(a * 255).toString(16);

      if (r.length == 1) r = "0" + r;
      if (g.length == 1) g = "0" + g;
      if (b.length == 1) b = "0" + b;
      if (a.length == 1) a = "0" + a;

      return "#" + r + g + b + a;
    };

    return ColorPicker;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'color', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'left', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'top', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, 'visible', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!formbuilder/tools/colorPicker.html',[],function(){return "<template><style>.track{border:none;width:100%;height:6px;border-radius:2px;-webkit-appearance:none;background:linear-gradient(to right,red 0,#ff0 17%,#0f0 33%,#0ff 50%,#00f 67%,#f0f 83%,red 100%)}.blocker{position:fixed;top:0;left:0;bottom:0;right:0;content:' ';background:rgba(0,0,0,.5);z-index:2000}.tool{width:233px;height:243px;border-radius:6px;background-color:#383838;font-family:arial;position:fixed;z-index:2001}.color-box{width:100%;height:50%;border-top-left-radius:6px;border-top-right-radius:6px}.circle{background-color:#6e28d9;width:30px;height:30px;border-radius:50%;display:inline-block;margin-right:10px}.slider{width:135px;display:inline-block;margin:auto}.tool-area{padding-left:20px;padding-right:20px;padding-top:10px;padding-bottom:10px}.flex-align-items-center{display:flex;align-items:center}.hex-label{font-size:10pt;color:grey;margin-right:10px;margin-left:0;width:30px}.color-value{background-color:transparent;border:1px solid grey;width:135px;display:block;color:#fff;padding:4px;font-size:10pt;text-align:center;border-radius:2px;width:135px;display:inline-block;margin:auto}.swatch{width:15px;height:15px;border:1px solid grey;display:inline-block;margin-right:7px;margin-top:7px}.add{width:15px;height:15px;display:inline-block;margin-right:7px;margin-top:7px;color:grey}.wrap{flex-wrap:wrap}</style><div class=\"tool\" css=\"left: ${left}px; top: ${top}px;\"><canvas ref=\"colorCanvas\" style=\"cursor:crosshair\" class=\"color-box\" pointerup.delegate=\"colorPickerClick($event)\"></canvas><div class=\"tool-area\"><div class=\"flex-align-items-center\"><div class=\"circle\" css=\"background-color: ${color};\"></div><input ref=\"hueInput\" class=\"track slider\" id=\"hue\" type=\"range\" max=\"360\" value.bind=\"hueValue\" input.delegate=\"setHue()\"></div><div class=\"flex-align-items-center\"><span class=\"hex-label\">HEX</span> <input type=\"text\" class=\"color-value\" value.bind=\"color\"></div><div class=\"flex-align-items-center wrap\"><i class=\"fa fa-plus add\" aria-hidden=\"true\" pointerup.delegate=\"addFav()\"></i><div class=\"swatch\" repeat.for=\"s of formHelper.swatches\" css=\"background-color: ${s};\" pointerup.delegate=\"swatchClicked(s)\"></div></div></div></div><div class=\"blocker\" pointerup.delegate=\"hidePopup()\"></div></template>";});;
define('formbuilder/tools/imagebox',['exports', 'aurelia-framework', 'bcx-aurelia-dnd', 'aurelia-event-aggregator'], function (exports, _aureliaFramework, _bcxAureliaDnd, _aureliaEventAggregator) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Imagebox = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _dec2, _class, _desc, _value, _class2, _descriptor;

  var Imagebox = exports.Imagebox = (_dec = (0, _aureliaFramework.inject)(_bcxAureliaDnd.DndService, _aureliaEventAggregator.EventAggregator), _dec2 = (0, _aureliaFramework.computedFrom)('item', 'item.x', 'item.y', 'item.width', 'item.height', 'item.selected'), _dec(_class = (_class2 = function () {
    function Imagebox(dndService, EventAggregator) {
      _classCallCheck(this, Imagebox);

      _initDefineProp(this, 'item', _descriptor, this);

      this.editMode = true;
      this.selected = false;

      this.dndService = dndService;
      this.ea = EventAggregator;
    }

    Imagebox.prototype.activate = function activate(model) {
      this.item = model;
    };

    Imagebox.prototype.attached = function attached() {
      var elem = document.getElementById(this.item.id);
      this.dndService.addSource(this, { noPreview: true, element: elem });

      this.ea.publish('checkComplete', this.item);
    };

    Imagebox.prototype.detached = function detached() {
      this.dndService.removeSource(this);
    };

    Imagebox.prototype.itemClicked = function itemClicked(e) {

      if (this.item.showToolbar) {
        e.stopPropagation();
        return;
      }

      this.ea.publish("itemClicked", this.item);
      e.stopPropagation();
    };

    Imagebox.prototype.dndModel = function dndModel() {
      return {
        type: 'moveItem',
        id: this.item.id
      };
    };

    _createClass(Imagebox, [{
      key: 'positionCss',
      get: function get() {
        var x = this.item && this.item.x || 0;
        var y = this.item && this.item.y || 0;
        var width = this.item && this.item.width || 0;
        var height = this.item && this.item.height || 0;
        var boxCursor = this.item && this.item.selected ? "pointer" : "default";
        var border = this.item && this.item.selected ? "1px dashed #007bff" : "none";

        return {
          left: x + 'px',
          top: y + 'px',
          width: width + 16 + 'px',
          height: 'auto',

          cursor: boxCursor,
          border: border
        };
      }
    }]);

    return Imagebox;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'item', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, 'positionCss', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'positionCss'), _class2.prototype)), _class2)) || _class);
});;
define('text!formbuilder/tools/imagebox.html',[],function(){return "<template><require from=\"../styles/box.css\"></require><require from=\"../resize-corner\"></require><require from=\"./listbox-toolbar\"></require><style>.table-style{display:inline-block;width:auto}</style><div ref=\"dndElement\" class=\"${item.addBoxClass ? 'box' : 'table-style'}\" style.bind=\"positionCss\" id.bind=\"item.id\" pointerup.delegate=\"itemClicked($event)\"><div class=\"card w-100 h-100 border-0 bg-transparent mb-1\"><div ref=\"cardbody\" class=\"card-body p-2\"><img ref=\"myimage\" id.bind=\"item.elementId\" width.bind=\"item.width\" style=\"height:auto\" src.bind=\"item.dataColumn.image\"></div></div><resize-corner if.bind=\"item.addBoxClass\" repeat.for=\"mode of ['se','sw','nw','ne']\" mode.bind=\"mode\" item-id.bind=\"item.id\" editing.bind=\"item.selected\"></resize-corner></div></template>";});;
define('formbuilder/tools/listbox',['exports', 'aurelia-framework', 'bcx-aurelia-dnd', 'aurelia-event-aggregator'], function (exports, _aureliaFramework, _bcxAureliaDnd, _aureliaEventAggregator) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Listbox = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _dec2, _dec3, _class, _desc, _value, _class2, _descriptor;

  var Listbox = exports.Listbox = (_dec = (0, _aureliaFramework.inject)(_bcxAureliaDnd.DndService, _aureliaEventAggregator.EventAggregator, _aureliaFramework.BindingEngine), _dec2 = (0, _aureliaFramework.computedFrom)('item', 'item.editMode', 'item.required', 'selectedItem'), _dec3 = (0, _aureliaFramework.computedFrom)('item', 'item.x', 'item.y', 'item.width', 'item.height', 'item.selected'), _dec(_class = (_class2 = function () {
    function Listbox(dndService, EventAggregator, BindingEngine) {
      _classCallCheck(this, Listbox);

      _initDefineProp(this, 'item', _descriptor, this);

      this.editMode = true;
      this.selected = false;
      this.backgroundColor = null;
      this.placeholder = null;
      this.selectedItem = null;
      this.listOptions = [];
      this.showSelect = true;
      this.showDbElementIcon = false;
      this.valueChangedSubscription = null;

      this.dndService = dndService;
      this.ea = EventAggregator;
      this.bindingEngine = BindingEngine;
    }

    Listbox.prototype.activate = function activate(model) {
      this.item = model;
    };

    Listbox.prototype.attached = function attached() {
      this.item.disabled = this.item.editMode;
      var elem = document.getElementById(this.item.id);
      this.dndService.addSource(this, { noPreview: true, element: elem });

      this.selectedItem = this.item.value;

      if (this.item.dataColumn && this.item.dataColumn.tableName) {
        this.showDbElementIcon = this.item.editMode;
        this.showSelect = this.item.editMode ? false : true;
        this.placeholder = this.item.dataColumn.name;
      } else {
        this.placeholder = this.item.editMode ? this.item.name : null;
      }

      var self = this;
      self.valueChangedSubscription = self.bindingEngine.propertyObserver(self.item, 'value').subscribe(function (newValue, oldValue) {
        self.tryNormalColorWithValue(newValue);
      });

      if (self.item.value) {
        self.tryNormalColorWithValue(self.item.value);
      }
    };

    Listbox.prototype.tryNormalColorWithValue = function tryNormalColorWithValue(newValue) {
      var self = this;
      var normalFound = _.find(self.item.dataColumn.listOptions, function (o) {
        return o.normal;
      });
      var emptyValue = newValue == "" || newValue == null ? true : false;
      if (normalFound && normalFound.text != newValue && !emptyValue) {
        self.backgroundColor = '#ffc107';
      } else {
        self.backgroundColor = null;
      }
    };

    Listbox.prototype.detached = function detached() {
      this.dndService.removeSource(this);
      this.valueChangedSubscription.dispose();
    };

    Listbox.prototype.itemClicked = function itemClicked(e) {

      if (this.item.showToolbar) {
        e.stopPropagation();
        return;
      }

      this.ea.publish("itemClicked", this.item);
      e.stopPropagation();
    };

    Listbox.prototype.listSelected = function listSelected(i) {
      this.item.value = i.text;
    };

    Listbox.prototype.dndModel = function dndModel() {
      return {
        type: 'moveItem',
        id: this.item.id
      };
    };

    _createClass(Listbox, [{
      key: 'isRequired',
      get: function get() {
        var tRequired = !this.item.editMode && this.item.required ? true : false;
        if (!tRequired) {
          this.ea.publish('checkComplete', this.item);
          return false;
        }
        if (tRequired && this.selectedItem) {
          this.ea.publish('checkComplete', this.item);
          return false;
        }
        return true;
      }
    }, {
      key: 'positionCss',
      get: function get() {
        var x = this.item && this.item.x || 0;
        var y = this.item && this.item.y || 0;
        var width = this.item && this.item.width || 0;
        width = width == '100%' || width == 'auto' ? width : width + 'px';
        var height = this.item && this.item.height || 0;
        var boxCursor = this.item && this.item.selected ? "pointer" : "default";
        var border = this.item && this.item.selected ? "1px dashed #007bff" : "none";

        return {
          left: x + 'px',
          top: y + 'px',
          width: width,
          height: height + 'px',
          cursor: boxCursor,
          border: border
        };
      }
    }]);

    return Listbox;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'item', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, 'isRequired', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'isRequired'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'positionCss', [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, 'positionCss'), _class2.prototype)), _class2)) || _class);
});;
define('formbuilder/tools/listbox-toolbar',['exports', 'aurelia-framework', '../editor', 'aurelia-dialog', '../../go/popupHelper'], function (exports, _aureliaFramework, _editor, _aureliaDialog, _popupHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ListboxToolbar = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

  var ListboxToolbar = exports.ListboxToolbar = (_dec = (0, _aureliaFramework.inject)(_editor.Editor, _aureliaDialog.DialogService, _popupHelper.PopupHelper), _dec(_class = (_class2 = function () {
    function ListboxToolbar(Editor, DialogService, PopupHelper) {
      _classCallCheck(this, ListboxToolbar);

      _initDefineProp(this, 'targetElementId', _descriptor, this);

      _initDefineProp(this, 'dndId', _descriptor2, this);

      _initDefineProp(this, 'options', _descriptor3, this);

      _initDefineProp(this, 'hideOptions', _descriptor4, this);

      _initDefineProp(this, 'item', _descriptor5, this);

      this.textRowHeights = [1, 2, 3, 4, 5, 6, 7, 8];
      this.currentTextRows = null;

      this.editor = Editor;
      this.dialogService = DialogService;
      this.popupHelper = PopupHelper;
    }

    ListboxToolbar.prototype.attached = function attached() {
      this.reset();
    };

    ListboxToolbar.prototype.textRowHeightClicked = function textRowHeightClicked(rows) {
      var itm = this.editor.getItem();
      itm.textRows = rows;
      this.currentTextRows = rows;
    };

    ListboxToolbar.prototype.reset = function reset() {
      this.hideOptions = false;
      this.options = [];
      if (this.item && this.item.dataColumn && this.item.dataColumn.tableName) {
        this.hideOptions = true;
      } else if (this.item && this.item.dataColumn) {
        this.options = this.item.dataColumn.listOptions;
      }
    };

    ListboxToolbar.prototype.openListBuilder = function openListBuilder() {
      var self = this;
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var popupWidth = windowWidth;
      var popupHeight = windowHeight;
      var popupTop = 0;
      var popupLeft = 0;

      var dataset = null;
      var customValueId = null;
      var reportingColumnId = null;
      var listId = null;

      if (self.item && self.item.dataColumn && self.item.dataColumn.data) {
        if (self.item.dataColumn.data.hasOwnProperty("TableFriendlyName")) {
          dataset = self.item.dataColumn.data.TableFriendlyName;
          reportingColumnId = self.item.dataColumn.data.ColumnID;
        } else {
          dataset = self.item.dataColumn.data.Dataset;
          customValueId = self.item.dataColumn.data.Id;
        }

        listId = self.item.dataColumn.data.ListId;
      }

      var options = {
        closeActiveDialog: false
      };

      var listBuilderOptions = {
        Dataset: dataset,
        ListId: listId,
        CustomValueId: customValueId,
        ReportingColumnId: reportingColumnId
      };

      self.popupHelper.openViewModelPop('../formbuilder/listbuilder', listBuilderOptions, 'List Builder', popupWidth, popupHeight, popupTop, popupLeft, options, function (res) {
        if (res.cancelled && res.cancelled) {
          return;
        }
        self.options = res.options;
      });
    };

    ListboxToolbar.prototype.showOptionsDialog = function showOptionsDialog() {
      var self = this;
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var popupWidth = windowWidth / 4;
      var popupHeight = windowHeight / 4;
      var popupTop = (windowHeight - popupHeight) / 2;
      var popupLeft = (windowWidth - popupWidth) / 2;

      var options = {
        closeActiveDialog: false
      };

      self.popupHelper.openViewModelPop('../formbuilder/dialogs/listboxOptionsDialog', self, 'Listbox Options', popupWidth, popupHeight, popupTop, popupLeft, options, function (res) {
        if (res.cancelled && res.cancelled) {
          return;
        }

        self.item.dataColumn.listOptions = res.options;
      });
    };

    ListboxToolbar.prototype.align = function align(id, mode) {
      this.editor.align(id, mode);
    };

    return ListboxToolbar;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'targetElementId', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'dndId', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'options', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, 'hideOptions', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, 'item', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!formbuilder/tools/listbox-toolbar.html',[],function(){return "<template><require from=\"./toolbar-extra-element\"></require><div class=\"btn-group\" role=\"group\" aria-label=\"Listbox Toolbar\" style=\"background-color:#fff;z-index:200\"><button if.bind=\"!hideOptions\" type=\"button\" class=\"btn btn-outline-primary\" click.delegate=\"showOptionsDialog()\"><i class=\"fa fa-list\" aria-hidden=\"true\"></i></button><div class=\"btn-group\" role=\"group\"><button type=\"button\" style=\"border-top-right-radius:0;border-bottom-right-radius:0\" class=\"btn btn-outline-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-align-left\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"align(dndId, 'left')\"><svg width=\"19px\" height=\"19px\" viewBox=\"0 0 48 48\" xmlns=\"http://www.w3.org/2000/svg\"><g id=\"Layer_2\" data-name=\"Layer 2\"><g id=\"invisible_box\" data-name=\"invisible box\"><rect width=\"48\" height=\"48\" fill=\"none\"/></g><g id=\"Layer_7\" data-name=\"Layer 7\"><g><path d=\"M8,2A2,2,0,0,0,6,4V44a2,2,0,0,0,4,0V4A2,2,0,0,0,8,2Z\"/><path d=\"M16,22H32a2,2,0,0,0,2-2V8a2,2,0,0,0-2-2H16a2,2,0,0,0-2,2V20A2,2,0,0,0,16,22Zm2-12H30v8H18Z\"/><path d=\"M40,26H16a2,2,0,0,0-2,2V40a2,2,0,0,0,2,2H40a2,2,0,0,0,2-2V28A2,2,0,0,0,40,26ZM38,38H18V30H38Z\"/></g></g></g></svg> </a><a class=\"dropdown-item\" href=\"#\" click.delegate=\"align(dndId, 'top')\"><svg version=\"1.1\" id=\"Icons\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 32 32\" xml:space=\"preserve\" width=\"20px\" height=\"20px\" fill=\"#000000\"><g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g><g id=\"SVGRepo_tracerCarrier\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke=\"#CCCCCC\" stroke-width=\"0.064\"></g><g id=\"SVGRepo_iconCarrier\"><style type=\"text/css\">.st0{fill:none;stroke:#000;stroke-width:2.7;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style><line class=\"st0\" x1=\"29\" y1=\"3\" x2=\"3\" y2=\"3\"></line><rect x=\"15.5\" y=\"10.5\" transform=\"matrix(-1.836970e-16 1 -1 -1.836970e-16 35.5 -7.5)\" class=\"st0\" width=\"12\" height=\"7\"></rect><rect x=\"0.5\" y=\"14.5\" transform=\"matrix(-1.836970e-16 1 -1 -1.836970e-16 28.5 7.5)\" class=\"st0\" width=\"20\" height=\"7\"></rect></g></svg></a></div><div class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">Rows</button><div class=\"dropdown-menu\"><a repeat.for=\"i of textRowHeights\" class=\"dropdown-item\" href=\"#\" click.delegate=\"textRowHeightClicked(i)\"> ${i} </a></div></div><button type=\"button\" class=\"btn btn-outline-primary\" style=\"border-top-right-radius:0;border-bottom-right-radius:0\" click.delegate=\"openListBuilder()\"><i class=\"fa fa-cog\" aria-hidden=\"true\"></i></button></div></div></template>";});;
define('text!formbuilder/tools/listbox.html',[],function(){return "<template><require from=\"../styles/box.css\"></require><require from=\"../resize-corner\"></require><require from=\"./listbox-toolbar\"></require><style>.is-required{border-color:#dc3545}.table-style{display:inline-block;width:auto}.is-invalid{border-color:#dc3545;padding-right:calc(.75em + 2.3125rem);display:block}.is-invalid-color{border-color:#dc3545!important}.btn-dropdown{color:#fff;background-color:unset;border-color:#357ebd;color:#212529;box-shadow:none!important;border:1!important}.btn-dropdown:hover,.btn-primary.active,.btn-primary:active,.btn-primary:focus,.open>.dropdown-toggle.btn-primary{color:#212529;background-color:unset;border-color:#285e8e}.no-resize{resize:none}textarea{overflow:auto!important}</style><div ref=\"dndElement\" class=\"${item.addBoxClass ? 'box' : 'table-style'}\" style.bind=\"positionCss\" id.bind=\"item.id\" pointerup.delegate=\"itemClicked($event)\"><div class=\"card w-100 h-100 mb-1 border-0\" css=\"${item.disabled ? 'pointer-events: none;' : ''}\"><div ref=\"cardbody\" class=\"card-body p-1 d-flex align-items-center\"><i if.bind=\"showDbElementIcon\" class=\"fa fa-list-ul mr-1 text-muted\" aria-hidden=\"true\"></i><textarea if.bind=\"!showSelect\" id.bind=\"item.elementId\" class=\"flex-grow-1 form-control no-resize ${isRequired ? 'is-invalid' : ''}\" css=\"min-width: ${minWidth}px;\" placeholder.bind=\"placeholder\" rows.bind=\"item.textRows\"></textarea><div ref=\"viewerDropdown\" if.bind=\"showSelect\" class=\"input-group\"><textarea id.bind=\"item.elementId\" class=\"flex-grow-1 form-control no-resize ${isRequired ? 'is-invalid' : ''}\" style=\"border-right:none;border:1!important;box-shadow:none!important\" css=\"min-width: ${minWidth}px; background-color: ${backgroundColor}\" value.bind=\"item.value\" rows.bind=\"item.textRows\"></textarea><div class=\"input-group-append\"><button class=\"btn btn-dropdown ${isRequired ? 'is-invalid-color': ''}\" style=\"border-top-right-radius:.25rem;border-bottom-right-radius:.25rem;border-left:none;border-color:#ced4da\" css=\"background-color: ${backgroundColor}\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\" data-display=\"static\"><i class=\"fa fa-caret-down\"></i></button><div class=\"dropdown-menu dropdown-menu-sm-left\" style=\"width:-webkit-fill-available\"><a class=\"dropdown-item text-truncate\" repeat.for=\"i of item.dataColumn.listOptions\" href=\"#\" click.delegate=\"listSelected(i)\">${i.text}</a></div></div></div></div></div><resize-corner if.bind=\"item.addBoxClass\" repeat.for=\"mode of ['se','sw','nw','ne']\" mode.bind=\"mode\" item-id.bind=\"item.id\" editing.bind=\"item.selected\"></resize-corner></div></template>";});;
define('formbuilder/tools/maintoolbar',['exports', 'aurelia-framework'], function (exports, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Maintoolbar = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _desc, _value, _class, _descriptor;

  var Maintoolbar = exports.Maintoolbar = (_class = function () {
    function Maintoolbar() {
      _classCallCheck(this, Maintoolbar);

      _initDefineProp(this, 'item', _descriptor, this);

      this.showTextToolbar = false;
      this.showListToolbar = false;
      this.showExtra = false;
    }

    Maintoolbar.prototype.reset = function reset() {
      this.showTextToolbar = false;
      this.showListToolbar = false;

      this.showExtra = false;
    };

    Maintoolbar.prototype.setTextToolbarRange = function setTextToolbarRange(range) {
      if (!this.texttoolbar) return;
      this.texttoolbar.au.controller.viewModel.currentRange = range;
    };

    Maintoolbar.prototype.itemChanged = function itemChanged(newVal, oldVal) {
      this.reset();

      this.displayProperToolbar();
    };

    Maintoolbar.prototype.displayProperToolbar = function displayProperToolbar() {

      if (this.item == null) {
        return;
      }

      this.showExtra = true;

      if (this.item.toolType === 'SIGNATURE' || this.item.toolType === 'IMAGEBOX') {
        this.showTextToolbar = false;
        this.showListToolbar = false;

        this.extratoolbar.au.controller.viewModel.item = this.item;
        this.extratoolbar.au.controller.viewModel.update();
      } else if (this.item.toolType === 'STATICTEXT' || this.item.toolType === 'TEXTBOX' || this.item.toolType === 'HR' || this.item.toolType === 'CHECKBOX' || this.item.toolType === 'MYTABLE') {
        this.showTextToolbar = true;
        this.showListToolbar = false;
        this.extratoolbar.au.controller.viewModel.item = this.item;
        this.extratoolbar.au.controller.viewModel.update();

        this.texttoolbar.au.controller.viewModel.item = this.item;
        this.texttoolbar.au.controller.viewModel.targetElementId = this.item.elementId;
        this.texttoolbar.au.controller.viewModel.dndId = this.item.id;
        this.texttoolbar.au.controller.viewModel.attached();
      } else {
        this.showTextToolbar = false;
        this.showListToolbar = true;

        this.extratoolbar.au.controller.viewModel.item = this.item;
        this.extratoolbar.au.controller.viewModel.update();
        this.listboxtoolbar.au.controller.viewModel.item = this.item;
        this.listboxtoolbar.au.controller.viewModel.targetElementId = this.item.elementId;
        this.listboxtoolbar.au.controller.viewModel.dndId = this.item.id;
        this.listboxtoolbar.au.controller.viewModel.attached();
      }
    };

    Maintoolbar.prototype.activate = function activate(model) {
      this.item = model;
    };

    return Maintoolbar;
  }(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'item', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  })), _class);
});;
define('text!formbuilder/tools/maintoolbar.html',[],function(){return "<template><require from=\"./text-toolbar\"></require><require from=\"./listbox-toolbar\"></require><require from=\"./toolbar-extra-element\"></require><div><div if.bind=\"!showTextToolbar && !showListToolbar && !showExtra\" class=\"card\" style=\"border:1px dashed rgba(0,123,255,.65)\"><div class=\"card-body text-muted py-2 px-3\" style=\"color:rgba(0,123,255,.65)!important\">Select a tool for options...</div></div><text-toolbar ref=\"texttoolbar\" item.bind=\"item\" target-element-id.bind=\"item.elementId\" dnd-id.bind=\"item.id\" show.bind=\"showTextToolbar\"></text-toolbar><listbox-toolbar ref=\"listboxtoolbar\" item.bind=\"item\" target-element-id.bind=\"item.elementId\" dnd-id.bind=\"item.id\" options.bind=\"item.dataColumn.listOptions\" show.bind=\"showListToolbar\"></listbox-toolbar><toolbar-extra-element ref=\"extratoolbar\" item.bind=\"item\" show.bind=\"showExtra\"></toolbar-extra-element></div></template>";});;
define('formbuilder/tools/mytable',['exports', 'aurelia-framework', 'bcx-aurelia-dnd', '../editor', 'aurelia-event-aggregator', '../formhelper'], function (exports, _aureliaFramework, _bcxAureliaDnd, _editor, _aureliaEventAggregator, _formhelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Mytable = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _dec2, _class, _desc, _value, _class2, _descriptor, _descriptor2;

  var Mytable = exports.Mytable = (_dec = (0, _aureliaFramework.inject)(_bcxAureliaDnd.DndService, _editor.Editor, _aureliaEventAggregator.EventAggregator, _formhelper.formhelper), _dec2 = (0, _aureliaFramework.computedFrom)('item', 'item.x', 'item.y', 'item.width', 'item.height', 'item.selected'), _dec(_class = (_class2 = function () {
    function Mytable(dndService, Editor, EventAggregator, formhelper) {
      _classCallCheck(this, Mytable);

      _initDefineProp(this, 'item', _descriptor, this);

      _initDefineProp(this, 'fullwidth', _descriptor2, this);

      this.repeaterTemplate = null;

      this.dndService = dndService;
      this.editor = Editor;
      this.ea = EventAggregator;
      this.formhelper = formhelper;
    }

    Mytable.prototype.activate = function activate(model) {
      this.item = model;
    };

    Mytable.prototype.attached = function attached() {
      var self = this;
      var elem = document.getElementById(self.item.id);
      this.dndService.addSource(self, { noPreview: true, element: elem });

      this.ea.publish('checkComplete', self.item);

      if (self.item.table.isRepeater) {
        var rowCount = self.item.table.rows.length;

        var aRow = self.item.table.getRow(rowCount - 1);

        self.repeaterTemplate = aRow.cloneRow();
      }
    };

    Mytable.prototype.detached = function detached() {
      this.dndService.removeSource(this);
    };

    Mytable.prototype.cellClick = function cellClick(row, cellIndex, e) {
      var self = this;
      row.selectCell(cellIndex, function (cell) {

        var ops = self.formhelper.getTableCellOptionsForElement(e.srcElement, cell, self.item.table.editMode, self.item.table);
        self.ea.publish('showTableCellOptions', ops);
      });
    };

    Mytable.prototype.itemClicked = function itemClicked(e) {
      if (this.item.showToolbar) {
        e.stopPropagation();
        return;
      }

      this.ea.publish("itemClicked", this.item);
      e.stopPropagation();
    };

    Mytable.prototype.addRow = function addRow() {
      var self = this;

      var rClone = self.repeaterTemplate.cloneRow();

      for (var c = 0; c < rClone.cells.length; c++) {
        var aCell = rClone.cells[c];
        aCell.item.value = null;
      }
      self.item.table.addRow(rClone);
    };

    Mytable.prototype.deleteRow = function deleteRow(index) {
      this.item.table.deleteRow(index);
    };

    Mytable.prototype.dndModel = function dndModel() {
      return {
        type: 'moveItem',
        id: this.item.id
      };
    };

    _createClass(Mytable, [{
      key: 'positionCss',
      get: function get() {
        var x = this.item && this.item.x || 0;
        var y = this.item && this.item.y || 0;
        var width = this.item && this.item.width || 0;
        var height = this.item && this.item.height || 0;
        var boxCursor = this.item && this.item.selected ? "pointer" : "default";
        var border = this.item && this.item.selected ? "1px dashed #007bff" : "none";

        var finalWidth = null;
        if (this.fullwidth) {
          finalWidth = 'inherit';
        } else {
          finalWidth = width + 'px';
        }

        return {
          left: x + 'px',
          top: y + 'px',
          width: finalWidth,
          height: height + 'px',
          cursor: boxCursor,
          border: border
        };
      }
    }]);

    return Mytable;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'item', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'fullwidth', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: function initializer() {
      return false;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, 'positionCss', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'positionCss'), _class2.prototype)), _class2)) || _class);
});;
define('text!formbuilder/tools/mytable.html',[],function(){return "<template><require from=\"../styles/box.css\"></require><require from=\"../resize-corner\"></require><require from=\"./toolbar-table\"></require><require from=\"../dialogs/tableCellOptions\"></require><require from=\"./static-text\"></require><require from=\"./checkbox\"></require><require from=\"./textbox\"></require><require from=\"./listbox\"></require><require from=\"./signature\"></require><require from=\"./imagebox\"></require><style>[contenteditable]{outline:0 solid transparent}.edit-mode table{border:2px solid #007bff!important}.cell-selected{box-shadow:#007bff 0 0 10px 1px}table{table-layout:fixed}.repeater{position:absolute;top:6px;z-index:1;color:#007bff;font-size:small;right:8px}.viewer-edit-column{text-align:center!important}.viewer-colgroup{width:35px}</style><div ref=\"dndElement\" class=\"box\" style.bind=\"positionCss\" id.bind=\"item.id\" pointerup.delegate=\"itemClicked($event)\"><div class=\"card w-100 h-100 mb-1 bg-transparent border-0\"><div ref=\"cardbody\" class=\"card-body p-1 ${item.table.editMode ? 'edit-mode': ''}\"><i if.bind=\"item.table.isRepeater && item.editMode\" class=\"fa fa-repeat repeater\" aria-hidden=\"true\"></i><table id.bind=\"item.elementId\" style.bind=\"item.table.style\"><colgroup><template repeat.for=\"c of item.table.columns\"><col css=\"width: ${c.width}\"><col if.bind=\"$last && item.table.isRepeater && !item.editMode\" class=\"viewer-colgroup\"></template></colgroup><template repeat.for=\"r of item.table.rows\"><tr if.bind=\"r.display\" class=\"${r.selected ? 'row-selected': ''}\"><template repeat.for=\"c of r.cells\"><td style.bind=\"c.styleAsString\" id.bind=\"c.cId\" class=\"${c.selected ? 'cell-selected' : ''}\" pointerup.delegate=\"cellClick(r, $index, $event)\" colspan.bind=\"c.colspan\"><template if.bind=\"c.item.toolType==='STATICTEXT'\"><static-text item.bind=\"c.item\"></static-text></template><template if.bind=\"c.item.toolType=='CHECKBOX'\"><checkbox item.bind=\"c.item\"></checkbox></template><template if.bind=\"c.item.toolType=='TEXTBOX'\"><textbox item.bind=\"c.item\"></textbox></template><template if.bind=\"c.item.toolType=='LISTBOX'\"><listbox item.bind=\"c.item\"></listbox></template><template if.bind=\"c.item.toolType=='SIGNATURE'\"><signature item.bind=\"c.item\"></signature></template><template if.bind=\"c.item.toolType=='IMAGEBOX'\"><imagebox item.bind=\"c.item\"></imagebox></template></td><template if.bind=\"$last && item.table.isRepeater && !item.editMode\"><td if.bind=\"$parent.$index == 0\" style.bind=\"c.styleAsString\" class=\"${c.selected ? 'cell-selected' : ''} viewer-edit-column\"><i class=\"fa fa-plus text-muted\" aria-hidden=\"true\" click.delegate=\"addRow()\"></i></td><td if.bind=\"$parent.$index > 0\" style.bind=\"c.styleAsString\" class=\"${c.selected ? 'cell-selected' : ''} viewer-edit-column\"><i class=\"fa fa-trash-o text-danger\" aria-hidden=\"true\" click.delegate=\"deleteRow($parent.$index)\"></i></td></template></template></tr></template></table></div></div><resize-corner repeat.for=\"mode of ['se','sw','nw','ne']\" mode.bind=\"mode\" item-id.bind=\"item.id\" editing.bind=\"item.selected\"></resize-corner></div></template>";});;
define('formbuilder/tools/signature',['exports', 'aurelia-framework', 'bcx-aurelia-dnd', 'aurelia-event-aggregator', '../../go/popupHelper'], function (exports, _aureliaFramework, _bcxAureliaDnd, _aureliaEventAggregator, _popupHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Signature = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _dec2, _dec3, _class, _desc, _value, _class2, _descriptor;

  var Signature = exports.Signature = (_dec = (0, _aureliaFramework.inject)(_bcxAureliaDnd.DndService, _aureliaEventAggregator.EventAggregator, _popupHelper.PopupHelper), _dec2 = (0, _aureliaFramework.computedFrom)('item', 'item.editMode', 'item.required', 'isSigned'), _dec3 = (0, _aureliaFramework.computedFrom)('item', 'item.x', 'item.y', 'item.width', 'item.height', 'item.selected'), _dec(_class = (_class2 = function () {
    function Signature(dndService, EventAggregator, PopupHelper) {
      _classCallCheck(this, Signature);

      _initDefineProp(this, 'item', _descriptor, this);

      this.selected = false;
      this.isSigned = false;

      this.dndService = dndService;
      this.ea = EventAggregator;
      this.popupHelper = PopupHelper;
    }

    Signature.prototype.activate = function activate(model) {
      this.item = model;
    };

    Signature.prototype.attached = function attached() {
      var elem = document.getElementById(this.item.id);
      this.dndService.addSource(this, { noPreview: true, element: elem });
    };

    Signature.prototype.detached = function detached() {
      this.dndService.removeSource(this);
    };

    Signature.prototype.itemClicked = function itemClicked(e) {

      if (this.item.showToolbar) {
        e.stopPropagation();
        return;
      }

      this.ea.publish("itemClicked", this.item);
      e.stopPropagation();
    };

    Signature.prototype.sign = function sign() {
      if (this.item.editMode) {
        return;
      }
      this.openSignature();
    };

    Signature.prototype.openSignature = function openSignature() {
      var self = this;
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var quarter = windowWidth / 4;
      var third = windowWidth / 3;

      var topThird = windowHeight / 3;

      var width = windowWidth / 2;
      var left = third / 2;
      var height = 'auto';
      var top = topThird / 2;

      var options = {
        displayHeader: false,

        scrollHeight: 228
      };
      self.popupHelper.openViewModelPop('./signature', { options: { dontSave: true, elId: "sigpop" } }, '', width, height, top, quarter, options, function (res) {
        self.loadSignature(res);
        self.isSigned = true;

        $('body').css('overflow', 'unset');
      });

      setTimeout(function () {
        var sigpop = document.getElementById("sigpop");
        var sigPopRect = sigpop.getBoundingClientRect();
        var sigEl = document.getElementById(self.item.id);
        var sigElRect = sigEl.getBoundingClientRect();
        sigpop.style.top = sigElRect.top - sigPopRect.height / 2 + "px";
      }, 500);
    };

    Signature.prototype.loadSignature = function loadSignature(data) {
      var self = this;
      var ctx = self.sigcanvas.getContext("2d");
      ctx.clearRect(0, 0, self.sigcanvas.width, self.sigcanvas.height);
      var image = new Image();
      image.src = data;
      image.onload = function () {
        ctx.drawImage(this, 0, 0, self.sigcanvas.width, self.sigcanvas.height);
      };
    };

    Signature.prototype.dndModel = function dndModel() {
      return {
        type: 'moveItem',
        id: this.item.id
      };
    };

    _createClass(Signature, [{
      key: 'isRequired',
      get: function get() {
        var tRequired = !this.item.editMode && this.item.required ? true : false;
        if (!tRequired) {
          this.ea.publish('checkComplete', this.item);
          return false;
        }
        if (tRequired && this.isSigned) {
          this.ea.publish('checkComplete', this.item);
          return false;
        }
        return true;
      }
    }, {
      key: 'positionCss',
      get: function get() {
        var x = this.item && this.item.x || 0;
        var y = this.item && this.item.y || 0;
        var width = this.item && this.item.width || 0;
        var height = this.item && this.item.height || 0;
        var boxCursor = this.item && this.item.selected ? "pointer" : "default";
        var border = this.item && this.item.selected ? "1px dashed #007bff" : "none";

        return {
          left: x + 'px',
          top: y + 'px',
          width: width + 'px',
          height: height + 'px',
          cursor: boxCursor,
          border: border
        };
      }
    }]);

    return Signature;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'item', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, 'isRequired', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'isRequired'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'positionCss', [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, 'positionCss'), _class2.prototype)), _class2)) || _class);
});;
define('text!formbuilder/tools/signature.html',[],function(){return "<template><require from=\"../styles/box.css\"></require><require from=\"../resize-corner\"></require><require from=\"./listbox-toolbar\"></require><style>.sig-canvas{width:100%!important}.table-style{display:inline-block;width:auto}</style><div ref=\"dndElement\" class=\"${item.addBoxClass ? 'box' : 'table-style'}\" style.bind=\"positionCss\" id.bind=\"item.id\" pointerup.delegate=\"itemClicked($event)\"><div class=\"card w-100 h-100 bg-transparent mb-1 ${isRequired ? 'border-danger border-1': 'border-0'}\"><div ref=\"cardbody\" class=\"card-body p-2\" pointerup.delegate=\"sign()\"><div class=\"border-bottom border-dark\" style=\"height:100%;background-color:#dbe4ff\"><span style=\"position:absolute;bottom:15px\">X</span><canvas ref=\"sigcanvas\" class=\"sig-canvas\" style=\"width:100%!important;height:100%!important\">Get a better browser, bro.</canvas></div></div></div><resize-corner if.bind=\"item.addBoxClass\" repeat.for=\"mode of ['se','sw','nw','ne']\" mode.bind=\"mode\" item-id.bind=\"item.id\" editing.bind=\"item.selected\"></resize-corner></div></template>";});;
define('formbuilder/tools/static-text',['exports', 'aurelia-framework', 'bcx-aurelia-dnd', 'aurelia-event-aggregator', '../editor'], function (exports, _aureliaFramework, _bcxAureliaDnd, _aureliaEventAggregator, _editor) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.StaticText = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _dec2, _class, _desc, _value, _class2, _descriptor;

  var StaticText = exports.StaticText = (_dec = (0, _aureliaFramework.inject)(_bcxAureliaDnd.DndService, _aureliaEventAggregator.EventAggregator, _aureliaFramework.BindingEngine, _editor.Editor), _dec2 = (0, _aureliaFramework.computedFrom)('item', 'item.x', 'item.y', 'item.width', 'item.height', 'item.selected'), _dec(_class = (_class2 = function () {
    function StaticText(dndService, EventAggregator, BindingEngine, Editor) {
      _classCallCheck(this, StaticText);

      _initDefineProp(this, 'item', _descriptor, this);

      this.selected = false;

      this.dndService = dndService;
      this.ea = EventAggregator;
      this.bindingEngine = BindingEngine;
      this.editor = Editor;
    }

    StaticText.prototype.activate = function activate(model) {
      this.item = model;
    };

    StaticText.prototype.attached = function attached() {
      var self = this;

      var elem = document.getElementById(self.item.id);
      this.dndService.addSource(self, { noPreview: true, element: elem });

      this.ea.publish('checkComplete', self.item);

      self.bindingEngine.propertyObserver(self.item, 'style').subscribe(function (newVal, oldVal) {
        self.editor.updateItem(self.item);
      });

      self.bindingEngine.propertyObserver(self.item, 'html').subscribe(function (newVal, oldVal) {
        self.editor.updateItem(self.item);
      });
    };

    StaticText.prototype.detached = function detached() {
      this.dndService.removeSource(this);
    };

    StaticText.prototype.itemClicked = function itemClicked(e) {
      if (this.item.showToolbar) {
        e.stopPropagation();
        return;
      }

      this.ea.publish("itemClicked", this.item);
      e.stopPropagation();
    };

    StaticText.prototype.dndModel = function dndModel() {
      return {
        type: 'moveItem',
        id: this.item.id
      };
    };

    _createClass(StaticText, [{
      key: 'positionCss',
      get: function get() {
        var x = this.item && this.item.x || 0;
        var y = this.item && this.item.y || 0;
        var width = this.item && this.item.width || 0;
        width = width == '100%' || width == 'auto' ? width : width + 'px';
        var height = this.item && this.item.height || 0;
        height = height == '100%' || height == 'auto' ? height : height + 'px';
        var boxCursor = this.item && this.item.selected ? "pointer" : "default";
        var border = this.item && this.item.selected ? "1px dashed #007bff" : "none";

        return {
          left: x + 'px',
          top: y + 'px',
          width: width,
          height: height,
          cursor: boxCursor,
          border: border
        };
      }
    }]);

    return StaticText;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'item', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, 'positionCss', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'positionCss'), _class2.prototype)), _class2)) || _class);
});;
define('text!formbuilder/tools/static-text.html',[],function(){return "<template><require from=\"../styles/box.css\"></require><require from=\"../resize-corner\"></require><require from=\"./text-toolbar\"></require><style>[contenteditable]{outline:0 solid transparent}.pin{position:absolute;cursor:pointer;top:50%;left:10px;margin-top:-5px;width:10px;height:10px;border:1px solid gray;cursor:pointer}.table-style{display:inline-block;width:auto}</style><div ref=\"dndElement\" class=\"${item.addBoxClass ? 'box' : 'table-style'}\" style.bind=\"positionCss\" id.bind=\"item.id\" pointerup.delegate=\"itemClicked($event)\"><div class=\"card w-100 h-100 mb-1 bg-transparent border-0\"><div ref=\"cardbody\" class=\"card-body p-1\"><div id.bind=\"item.elementId\" contenteditable.bind=\"item.editMode\" innerhtml.two-way=\"item.html\" style.bind=\"item.style\"></div></div></div><resize-corner if.bind=\"item.addBoxClass\" repeat.for=\"mode of ['se','sw','nw','ne']\" mode.bind=\"mode\" item-id.bind=\"item.id\" editing.bind=\"item.selected\"></resize-corner></div></template>";});;
define('formbuilder/tools/text-toolbar',['exports', 'aurelia-framework', '../formhelper', '../editor'], function (exports, _aureliaFramework, _formhelper, _editor) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TextToolbar = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Element = function Element(tag, style) {
    _classCallCheck(this, Element);

    this.tag = tag;
    this.style = style;
    this.innerHtml;
  };

  var TextToolbar = exports.TextToolbar = (_dec = (0, _aureliaFramework.inject)(_formhelper.formhelper, _editor.Editor), _dec(_class = (_class2 = function () {
    TextToolbar.prototype.fontsizeChanged = function fontsizeChanged(newVal, oldVal) {
      if (this.setup || newVal == oldVal) return;
      this.setTagWithStyle("span", "font-size", newVal + "pt");
    };

    TextToolbar.prototype.currentInputTypeChanged = function currentInputTypeChanged(newVal, oldVal) {
      this.showDateOption = newVal === 'date' ? true : false;
    };

    function TextToolbar(formhelper, Editor) {
      _classCallCheck(this, TextToolbar);

      _initDefineProp(this, 'targetElementId', _descriptor, this);

      _initDefineProp(this, 'dndId', _descriptor2, this);

      _initDefineProp(this, 'item', _descriptor3, this);

      this.setup = true;
      this.isInput = false;
      this.fontsizes = [];
      this.isBold = false;
      this.isItalic = false;

      _initDefineProp(this, 'fontsize', _descriptor4, this);

      this.hrLineSize = 1;
      this.hrLineStyle = 'solid';
      this.inputTypes = ['text', 'number', 'date'];

      _initDefineProp(this, 'currentInputType', _descriptor5, this);

      this.textColor = '#000000';
      this.backgroundColor = '#000000';
      this.showDateOption = false;
      this.isSystemDate = false;
      this.displayFontfaces = false;
      this.tagLookupList = [];
      this.lineHeights = [1, 1.5, 2, 2.5, 3];
      this.currentRange = null;
      this.textRowHeights = [1, 2, 3, 4, 5, 6, 7, 8];
      this.enableTextRows = false;
      this.currentTextRows = null;
      this.enableInputType = true;
      this.enableFonts = true;
      this.enableBold = true;
      this.enableItalic = true;
      this.enableColor = true;
      this.enableBackgroundColor = true;
      this.enableListItems = true;
      this.enableIndent = true;
      this.enableAlignment = true;
      this.enableLineHeight = true;
      this.enableStyleErase = true;
      this.enableHr = false;
      this.enableTable = false;

      this.formhelper = formhelper;
      this.editor = Editor;
    }

    TextToolbar.prototype.createTagLookupList = function createTagLookupList() {
      var self = this;
      var boldEl = new Element("b");
      var italicEl = new Element("i");
      var ulEl = new Element("ul");
      ulEl.innerHtml = "<li></li>";
      var olEl = new Element("ol");
      olEl.innerHtml = "<li></li>";

      self.tagLookupList.push(boldEl);
      self.tagLookupList.push(italicEl);
      self.tagLookupList.push(ulEl);
      self.tagLookupList.push(olEl);
      self.tagLookupList.push(new Element("span"));
    };

    TextToolbar.prototype.reset = function reset() {

      this.enableFonts = true;
      this.enableBold = true;
      this.enableItalic = true;
      this.enableColor = true;
      this.enableBackgroundColor = true;
      this.enableListItems = true;
      this.enableIndent = true;
      this.enableAlignment = true;
      this.enableLineHeight = true;
      this.enableStyleErase = true;
      this.enableHr = false;
      this.enableTable = false;

      this.isInput = false;

      this.isBold = false;
      this.isItalic = false;

      this.inputTypes = ['text', 'date'];
      this.currentInputType = 'text';

      this.enableInputType = true;
      this.enableTextRows = false;
      this.showDateOption = false;
      this.isSystemDate = false;

      this.displayFontfaces = false;
      this.setup = true;
    };

    TextToolbar.prototype.attached = function attached() {
      this.reset();

      this.createTagLookupList();

      this.fontFamily = this.formhelper.fonts[0];

      this.fontsizes = this.formhelper.getFontSizePickerArray();
      this.fontsize = this.fontsizes[0].points;

      if (this.item && this.item.toolType == 'CHECKBOX') {}

      if (this.item && this.item.toolType == 'TEXTBOX') {
        this.isInput = true;
        this.enableFonts = false;
        this.enableBold = false;
        this.enableItalic = false;
        this.enableColor = false;
        this.enableBackgroundColor = false;
        this.enableListItems = false;
        this.enableIndent = false;

        this.enableLineHeight = false;
        this.enableStyleErase = false;

        this.enableTextRows = true;
      }

      if (this.item && this.item.toolType == 'HR') {
        this.enableFonts = false;
        this.enableBold = false;
        this.enableItalic = false;
        this.enableColor = false;
        this.enableBackgroundColor = false;
        this.enableListItems = false;
        this.enableIndent = false;
        this.enableAlignment = false;
        this.enableLineHeight = false;
        this.enableStyleErase = false;
        this.enableHr = true;
        this.enableInputType = false;
      }

      if (this.item) {
        this.currentInputType = this.item.inputType;
      }

      if (this.item && this.item.dataColumn && this.item.dataColumn.columnName || this.item && this.item.toolType == 'STATICTEXT') {
        this.enableInputType = false;
      }

      if (this.item && this.item.dataColumn && this.item.dataColumn.isSystemDate) {
        this.isSystemDate = this.item.dataColumn.isSystemDate;
      }

      if (this.item && this.item.toolType == 'CHECKBOX') {
        this.enableFonts = true;
        this.enableBold = true;
        this.enableItalic = true;
        this.enableColor = true;
        this.enableBackgroundColor = false;
        this.enableListItems = false;
        this.enableIndent = false;
        this.enableAlignment = true;
        this.enableLineHeight = false;
        this.enableStyleErase = true;
        this.enableHr = false;
        this.enableInputType = false;
      }

      if (this.item && this.item.toolType == 'MYTABLE') {
        this.enableInputType = false;
        this.enableFonts = false;
        this.enableBold = false;
        this.enableItalic = false;
        this.enableColor = false;
        this.enableBackgroundColor = false;
        this.enableListItems = false;
        this.enableIndent = false;
        this.enableAlignment = false;
        this.enableLineHeight = false;
        this.enableStyleErase = false;
        this.enableHr = false;
        this.enableTable = true;
      }

      if (this.item) {
        this.toggleButtons(this.item);
      }

      this.setup = false;
    };

    TextToolbar.prototype.toggleSystemDate = function toggleSystemDate() {
      this.isSystemDate = this.isSystemDate ? false : true;

      var itm = this.editor.getItem();
      if (itm.dataColumn) {
        itm.dataColumn.isSystemDate = this.isSystemDate;
      } else {
        this.addPropertyToItemData(itm, 'isSystemDate', this.isSystemDate);
      }
      this.editor.updateItem(itm);
    };

    TextToolbar.prototype.addPropertyToItemData = function addPropertyToItemData(item, name, value) {
      item.data[name] = value;
    };

    TextToolbar.prototype.toggleSubmenu = function toggleSubmenu(menu, e) {
      switch (menu) {
        case 'input':
          break;
        case 'font':
          this.displayFontfaces = true;
          break;
        case 'size':
          break;
      }
      e.stopPropagation();
    };

    TextToolbar.prototype.toggleButtons = function toggleButtons(item) {
      if (item.html) {
        this.isItalic = item.html.indexOf('<i>') > -1 ? true : false;
        this.isBold = item.html.indexOf('<b>') > -1 ? true : false;
        if (!this.isBold) {
          this.isBold = item.html.indexOf('font-weight: bold') > -1 ? true : false;
        }
      }
      if (item.style) {
        this.isItalic = item.style.indexOf('italic') > -1 ? true : false;
        this.isBold = item.style.indexOf('bold') > -1 ? true : false;
      }
    };

    TextToolbar.prototype.tagExists = function tagExists(tag) {
      var itm = this.editor.getItem();
      var el = document.getElementById(itm.elementId);
      return el.getElementsByTagName(tag);
    };

    TextToolbar.prototype.findIndentTargetWithRange = function findIndentTargetWithRange(range) {
      var self = this;

      var targetElement = null;
      if (range && range.commonAncestorContainer) {
        if (range.commonAncestorContainer.firstChild && range.commonAncestorContainer.firstChild.nodeName == 'SPAN') {
          targetElement = range.commonAncestorContainer.firstChild;
        } else if (range.commonAncestorContainer.firstChild && range.commonAncestorContainer.firstChild.nodeName == 'LI') {
          targetElement = range.commonAncestorContainer.firstChild;
        } else {
          targetElement = range.commonAncestorContainer.parentNode;
        }
      }

      return targetElement;
    };

    TextToolbar.prototype.wrapNewElementWithParentTagHtmlAndProperty = function wrapNewElementWithParentTagHtmlAndProperty(parent, tag, innerHtml, property, propertyValue) {
      var tagEl = document.createElement(tag);
      if (property && propertyValue) {
        tagEl.style.setProperty(property, propertyValue);
      }
      tagEl.innerHTML = innerHtml;
      parent.innerHTML = "";
      parent.append(tagEl);
    };

    TextToolbar.prototype.calculateIndentWithElement = function calculateIndentWithElement(e, indentOrDedent) {
      var indent = 15;
      var currentIndent = 0;
      if (e.style) {
        var marginLeft = e.style.getPropertyValue('margin-left');
        if (marginLeft.length > 0) {
          marginLeft = marginLeft.replace('px', '');
          currentIndent = parseInt(marginLeft);
        }
      }
      if (indentOrDedent == 'indent') {
        currentIndent += indent;
      } else {
        currentIndent -= indent;
      }
      return currentIndent;
    };

    TextToolbar.prototype.tagExistsInRange = function tagExistsInRange(tag, range) {

      var found = null;

      if (range.commonAncestorContainer && range.commonAncestorContainer.children && range.commonAncestorContainer.children.length > 0) {
        found = _.find(range.commonAncestorContainer.children, function (c) {
          return c.nodeName == tag.toUpperCase();
        });
        if (found) {
          return found;
        }
      }

      if (!found) {
        if (range.commonAncestorContainer && range.commonAncestorContainer.parentNode && range.commonAncestorContainer.parentNode.nodeName == tag.toUpperCase()) {
          return range.commonAncestorContainer.parentNode;
        }
      }

      if (!found) {
        if (range && range.startContainer && range.startContainer.parentElement && range.startContainer.parentElement.nodeName == tag.toUpperCase()) {
          return range.startContainer.parentElement;
        } else {
          return null;
        }
      }
    };

    TextToolbar.prototype.myGetElementById = function myGetElementById(id) {
      var el = document.getElementById(id);
      if (el) {
        if (el.nextSibling && el.nextSibling.contentEditable) {
          return el.nextSibling;
        } else {
          return el;
        }
      }
      return null;
    };

    TextToolbar.prototype.addTag = function addTag(tag, styleAttribute, styleValue) {
      var range = this.currentRange;
      if (!range) return;

      var itm = this.editor.getItem();
      var el = this.myGetElementById(itm.elementId);

      var tagToAdd = _.find(this.tagLookupList, function (t) {
        return t.tag == tag;
      });
      if (tagToAdd) {
        if (tagToAdd.innerHtml) {
          var tagEl = document.createElement(tagToAdd.tag);
          tagEl.innerHTML = tagToAdd.innerHtml;
          tagEl.firstElementChild.innerHTML = el.innerHTML;
          el.innerHTML = "";
          el.append(tagEl);
        } else {
          var tagEl = document.createElement(tagToAdd.tag);
          var content = range.extractContents();
          if (styleAttribute && styleValue) {
            tagEl.style.setProperty(styleAttribute, styleValue);
          }

          tagEl.appendChild(content);
          range.insertNode(tagEl);
        }
      }
      itm.html = el.innerHTML;
    };

    TextToolbar.prototype.toggleProperty = function toggleProperty(tag) {
      var itm = this.editor.getItem();
      var el = document.getElementById(itm.elementId);
      switch (tag) {
        case 'b':
          if (el.style.fontWeight) {
            el.style.removeProperty('font-weight');
            this.isBold = false;
          } else {
            el.style.setProperty('font-weight', 'bold');
            this.isBold = true;
          }
          this.applyStyle(el.style.cssText);
          break;
        case 'i':
          if (el.style.fontStyle) {
            el.style.removeProperty('font-style');
            this.isItalic = false;
          } else {
            el.style.setProperty('font-style', 'italic');
            this.isItalic = true;
          }
          this.applyStyle(el.style.cssText);
          break;
      }
    };

    TextToolbar.prototype.toggleTag = function toggleTag(tag) {
      var self = this;

      var rng = this.currentRange;
      if (!rng) return;

      if (self.isInput) {
        self.toggleProperty(tag);
      } else {
        var exists = self.tagExistsInRange(tag, rng);
        if (exists) {
          exists.replaceWith(exists.childNodes[0]);
          var itm = this.editor.getItem();
          var el = document.getElementById(itm.elementId);
          itm.html = el.innerHTML;
        } else {
          self.addTag(tag);
        }
      }
    };

    TextToolbar.prototype.indentDedent = function indentDedent(style) {
      var self = this;

      var rng = self.currentRange;
      if (!rng) return;

      var target = self.findIndentTargetWithRange(rng);

      if (target.nodeName == 'LI') {
        if (style == 'indent') {
          var listParent = target.parentNode;
          var newParentEl = document.createElement(listParent.nodeName);
          newParentEl.appendChild(target);
          rng.insertNode(newParentEl);
        } else {
          var parentList = target.parentNode;
          var grandparentlist = null;

          if (parentList.parentNode && parentList.parentNode.nodeName == parentList.nodeName) {
            grandparentlist = parentList.parentNode;
          } else {
            return;
          }

          var elementToReplace = self.findListItemInGrandparent(target, grandparentlist);

          if (elementToReplace) {
            grandparentlist.insertBefore(target, elementToReplace);
          } else {
            grandparentlist.appendChild(target);
          }

          if (parentList.children.length == 0) {
            parentList.remove();
          }
        }
      } else if (target.nodeName == 'SPAN') {
        var margin = self.calculateIndentWithElement(target, style);
        target.style.setProperty('margin-left', margin + "px");
      } else {
        var margin = self.calculateIndentWithElement(target, style);
        self.wrapNewElementWithParentTagHtmlAndProperty(target, "span", target.innerHTML, 'margin-left', margin + "px");
      }
    };

    TextToolbar.prototype.findListItemInGrandparent = function findListItemInGrandparent(li, grandparent) {
      for (var i = 0; i < grandparent.childNodes.length; i++) {
        var child = grandparent.childNodes[i];
        if (child.innerText == li.innerText) {
          return child;
        }
      }
      return null;
    };

    TextToolbar.prototype.setTagWithStyle = function setTagWithStyle(tag, attribute, value) {
      var self = this;

      var rng = this.currentRange;
      if (!rng) return;

      var exists = self.tagExistsInRange(tag, rng);
      if (exists) {
        exists.style.setProperty(attribute, value);
        var itm = self.editor.getItem();
        var el = self.myGetElementById(itm.elementId);
        itm.html = el.innerHTML;
      } else {
        self.addTag(tag, attribute, value);
      }
    };

    TextToolbar.prototype.fontSizeClicked = function fontSizeClicked(fontsize) {
      this.fontsize = fontsize.points;
      this.setTagWithStyle("span", "font-size", this.fontsize + "pt");
    };

    TextToolbar.prototype.fontfamilyClicked = function fontfamilyClicked(fontfamily) {
      this.setTagWithStyle("span", "font-family", fontfamily);
      this.fontFamily = fontfamily;
    };

    TextToolbar.prototype.applyStyle = function applyStyle(cssText) {
      var itm = this.editor.getItem();
      if (!itm.style) {
        itm.style = "";
      }
      itm.style = cssText;
    };

    TextToolbar.prototype.align = function align(id, mode) {
      this.editor.align(id, mode);
    };

    TextToolbar.prototype.textAlign = function textAlign(alignment) {
      var itm = this.editor.getItem();
      if (itm.toolType == 'MYTABLE') {
        this.textAlignTable(alignment);
      } else {
        var el = document.getElementById(itm.elementId);
        el.style.setProperty('text-align', alignment);
        this.applyStyle(el.style.cssText);
      }
    };

    TextToolbar.prototype.textAlignTable = function textAlignTable(alignment) {
      this.updateTableSelectedCellStyle('text-align', alignment);
    };

    TextToolbar.prototype.updateTableSelectedCellStyle = function updateTableSelectedCellStyle(name, value) {
      var itm = this.editor.getItem();
      var tableObj = itm.data;
      var selectedCell = tableObj.getSelectedCell();
      var aStyle = selectedCell.getStyle(name);
      if (aStyle) {
        aStyle.value = value;
        selectedCell.updateStyle(aStyle);
      } else {
        selectedCell.addStyle(name, value);
      }
    };

    TextToolbar.prototype.inputTypeClicked = function inputTypeClicked(type) {
      var itm = this.editor.getItem();
      itm.inputType = type;

      this.currentInputType = type;
    };

    TextToolbar.prototype.textRowHeightClicked = function textRowHeightClicked(rows) {
      var itm = this.editor.getItem();
      itm.textRows = rows;

      this.currentTextRows = rows;
    };

    TextToolbar.prototype.getTargetElementCursorSelection = function getTargetElementCursorSelection() {
      var selection = window.getSelection();

      if (selection.baseOffset == 0 && selection.rangeCount == 0 && selection.extentOffset == 0) return null;

      var range = selection.getRangeAt(0);

      return range;
    };

    TextToolbar.prototype.updateTextColor = function updateTextColor(e) {
      var self = this;
      self.textColor = e.target.value;

      var itm = this.editor.getItem();
      if (itm.toolType == 'HR') {
        self.updateHrLineStyle();
      } else {
        self.setTagWithStyle("span", "color", e.target.value);
      }

      e.target.blur();
    };

    TextToolbar.prototype.updateBackgroundColor = function updateBackgroundColor(e) {
      var self = this;
      self.backgroundColor = e.target.value;
      self.setTagWithStyle("span", "background-color", e.target.value);
    };

    TextToolbar.prototype.lineHeightClicked = function lineHeightClicked(height) {
      var self = this;
      self.setTagWithStyle("span", "line-height", height);
    };

    TextToolbar.prototype.boldClicked = function boldClicked() {
      this.isBold = this.isBold ? false : true;
      var style = this.isBold ? "bold" : "unset";
      this.setTagWithStyle("span", "font-weight", style);
    };

    TextToolbar.prototype.italicClicked = function italicClicked() {
      this.isItalic = this.isItalic ? false : true;
      var style = this.isItalic ? "italic" : "normal";
      this.setTagWithStyle("span", "font-style", style);
    };

    TextToolbar.prototype.horizontalRuleClicked = function horizontalRuleClicked() {
      var self = this;


      this.editor.addTextElement(function (newTextItem) {
        var el = document.getElementById(newTextItem.elementId);
        el.innerHTML = "";
        var newHr = document.createElement("hr");
        newHr.style.setProperty('border', '1px solid ' + self.textColor);

        newTextItem.html = "";
        el.appendChild(newHr);
        newTextItem.html = el.innerHTML;

        self.editor.updateItem(newTextItem);
      });
    };

    TextToolbar.prototype.updateHrLineStyle = function updateHrLineStyle() {
      var itm = this.editor.getItem();
      var el = document.getElementById(itm.elementId);
      var hrEl = el.firstChild;

      if (this.hrLineStyle == 'dotted') {
        hrEl.style.border = "";
        hrEl.style.borderTop = this.hrLineSize + 'px ' + this.hrLineStyle + ' ' + this.textColor;
      } else {
        hrEl.style.borderTop = "";
        hrEl.style.setProperty('border', this.hrLineSize + 'px ' + this.hrLineStyle + ' ' + this.textColor);
      }

      itm.html = el.innerHTML;
      this.editor.updateItem(itm);
    };

    TextToolbar.prototype.removeStyle = function removeStyle() {
      var itm = this.editor.getItem();
      var el = document.getElementById(itm.elementId);
      el.removeAttribute('style');

      var childEls = el.getElementsByTagName("*");
      while (childEls.length) {
        var parent = childEls[0].parentNode;
        while (childEls[0].firstChild) {
          parent.insertBefore(childEls[0].firstChild, childEls[0]);
        }
        parent.removeChild(childEls[0]);
      }

      itm.style = null;
    };

    return TextToolbar;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'targetElementId', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'dndId', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'item', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, 'fontsize', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, 'currentInputType', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return 'text';
    }
  })), _class2)) || _class);
});;
define('text!formbuilder/tools/text-toolbar.html',[],function(){return "<template><require from=\"./toolbar-extra-element\"></require><require from=\"./toolbar-hr\"></require><require from=\"./toolbar-table\"></require><style>.hide-color-picker{display:none}.line-height-button:hover .line-height-svg{stroke:#fff!important}.line-height-svg{stroke:#007bff}.btn-group .show .line-height-svg{stroke:#fff}.input-button{width:24px;display:inline-block;text-align:center;border:none;padding-left:2px;padding-right:2px;color:#047bff;left:8px;position:relative;height:36px}.text-select-group{border:1px solid #047bff;border-radius:4px}.text-select-left-button{border-right:1px solid;border-top:none;border-bottom:none;border-left:none}</style><div if.bind=\"enableFonts\" class=\"btn-group mr-2 text-select-group\" role=\"group\" style=\"background-color:#fff;z-index:200;height:38px\"><div class=\"btn-group\" role=\"group\"><button type=\"button\" css=\"font-family:${fontFamily};\" style=\"width:150px\" class=\"btn btn-outline-primary dropdown-toggle text-truncate text-select-left-button\" data-toggle=\"dropdown\" aria-expanded=\"false\"> ${fontFamily} </button><div class=\"dropdown-menu\" style=\"height:500px;overflow-y:scroll\"><a repeat.for=\"ff of formhelper.fonts\" css=\"font-family: ${ff}\" class=\"dropdown-item\" href=\"#\" click.delegate=\"fontfamilyClicked(ff)\">${ff}</a></div></div><div class=\"btn-group\" role=\"group\"><input type=\"text\" class=\"form-control input-button\" value.bind=\"fontsize\"> <button type=\"button\" class=\"btn btn-outline-primary dropdown-toggle\" data-toggle=\"dropdown\" style=\"border:none\" aria-expanded=\"false\"></button><div class=\"dropdown-menu\"><a repeat.for=\"f of fontsizes\" style=\"font-family:arial\" class=\"dropdown-item\" href=\"#\" click.delegate=\"fontSizeClicked(f)\">${f.points}</a></div></div></div><div class=\"btn-group formatDropdown\" role=\"group\" style=\"background-color:#fff;z-index:200\"><button if.bind=\"enableBold\" type=\"button\" class=\"btn btn-outline-primary ${isBold ? 'active' : ''}\" click.delegate=\"boldClicked()\"><i class=\"fa fa-bold\" aria-hidden=\"true\"></i></button> <button if.bind=\"enableItalic\" type=\"button\" class=\"btn btn-outline-primary ${isItalic ? 'active' : ''}\" click.delegate=\"italicClicked()\"><i class=\"fa fa-italic\" aria-hidden=\"true\"></i></button><div if.bind=\"enableColor\" class=\"d-inline-block btn btn-outline-primary\" style=\"border-radius:0;padding-bottom:1px;padding-left:6px;padding-right:6px\"><label style=\"margin:0\"><i class=\"fa fa-font\" aria-hidden=\"true\"></i> <input type=\"color\" change.delegate=\"updateTextColor($event)\" input.delegate=\"updateTextColor($event)\" style=\"display:none\"></label><div style=\"position:relative;width:25px;height:5px;background-color:#000;bottom:3px\" css=\"background-color: ${textColor}\"></div></div><div if.bind=\"enableBackgroundColor\" class=\"d-inline-block btn btn-outline-primary\" style=\"border-radius:0;padding-bottom:1px;padding-left:6px;padding-right:6px\"><label style=\"margin:0\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:serif=\"http://www.serif.com/\" fill=\"#000000\" width=\"20px\" height=\"20px\" viewBox=\"0 0 64 64\" version=\"1.1\" xml:space=\"preserve\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;bottom:2px;position:relative\"><rect id=\"Icons\" x=\"-128\" y=\"-320\" width=\"1280\" height=\"800\" style=\"fill:none\"/><g id=\"Icons1\" serif:id=\"Icons\"><g id=\"Strike\"></g><g id=\"H1\"></g><g id=\"H2\"></g><g id=\"H3\"></g><g id=\"list-ul\"></g><g id=\"hamburger-1\"></g><g id=\"hamburger-2\"></g><g id=\"list-ol\"></g><g id=\"list-task\"></g><g id=\"trash\"></g><g id=\"vertical-menu\"></g><g id=\"horizontal-menu\"></g><g id=\"sidebar-2\"></g><g id=\"Pen\"></g><g id=\"Pen1\" serif:id=\"Pen\"></g><g id=\"clock\"></g><g id=\"external-link\"></g><g id=\"hr\"></g><g id=\"info\"></g><g id=\"warning\"></g><g id=\"plus-circle\"></g><g id=\"minus-circle\"></g><g id=\"vue\"></g><g id=\"cog\"></g><path d=\"M10.158,56.151c-0.219,0.016 -0.437,-0.004 -0.645,-0.057c-1.24,-0.223 -1.363,-0.999 -1.458,-1.659c-0.011,-0.076 -0.016,-0.153 -0.017,-0.229c-0.001,-0.014 -0.002,-0.028 -0.003,-0.042l-0.035,-5.492c0.017,-0.521 0.064,-0.862 0.586,-1.427l16.089,-15.434l0.007,-3.346c0.099,-0.75 0.155,-0.778 0.578,-1.24l19.299,-19.225l5.659,0l-21.543,21.467l0,3.346l10.461,10.432l2.621,0l14.243,-12.323l-0.021,5.3l-11.979,10.438c-0.595,0.545 -0.644,0.552 -1.414,0.585l-3.45,0l-8.261,8.37c-0.603,0.47 -0.662,0.451 -1.299,0.479l-19.418,0.057Zm16.747,-21.568l-14.9,14.9l0.013,2.668l16.717,-0.057l7.787,-7.887l-9.617,-9.624Z\" style=\"fill-rule:nonzero\"/><g id=\"logo\"></g><g id=\"radio-check\"></g><g id=\"eye-slash\"></g><g id=\"eye\"></g><g id=\"toggle-off\"></g><g id=\"shredder\"></g><g id=\"spinner--loading--dots-\" serif:id=\"spinner [loading, dots]\"></g><g id=\"react\"></g><g id=\"check-selected\"></g><g id=\"turn-off\"></g><g id=\"code-block\"></g><g id=\"user\"></g><g id=\"coffee-bean\"></g><g id=\"coffee-beans\"><g id=\"coffee-bean1\" serif:id=\"coffee-bean\"></g></g><g id=\"coffee-bean-filled\"></g><g id=\"coffee-beans-filled\"><g id=\"coffee-bean2\" serif:id=\"coffee-bean\"></g></g><g id=\"clipboard\"></g><g id=\"clipboard-paste\"></g><g id=\"clipboard-copy\"></g><g id=\"Layer1\"></g></g></svg> <input type=\"color\" input.delegate=\"updateBackgroundColor($event)\" style=\"display:none\"></label><div style=\"position:relative;width:25px;height:5px;background-color:#000;bottom:3px\" css=\"background-color: ${backgroundColor}\"></div></div><div if.bind=\"enableListItems\" class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-list-ul\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"toggleTag('ul')\"><i class=\"fa fa-list-ul\" aria-hidden=\"true\"></i> </a><a class=\"dropdown-item\" href=\"#\" click.delegate=\"toggleTag('ol')\"><i class=\"fa fa-list-ol\" aria-hidden=\"true\"></i></a></div></div><div if.bind=\"enableIndent\" class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-indent\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"indentDedent('indent')\"><i class=\"fa fa-indent\" aria-hidden=\"true\"></i> </a><a class=\"dropdown-item\" href=\"#\" click.delegate=\"indentDedent('dedent')\"><i class=\"fa fa-outdent\" aria-hidden=\"true\"></i></a></div></div><div if.bind=\"enableInputType\" class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">Input Type</button><div class=\"dropdown-menu\"><a repeat.for=\"i of inputTypes\" class=\"dropdown-item\" href=\"#\" click.delegate=\"inputTypeClicked(i)\"> ${i} </a></div><button if.bind=\"showDateOption\" type=\"button\" class=\"btn btn-outline-primary ${item.dataColumn.isSystemDate ? 'active' : ''}\" click.delegate=\"toggleSystemDate()\"><i class=\"fa fa-calendar-check-o\" aria-hidden=\"true\"></i></button></div><div if.bind=\"enableTextRows\" class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">Rows</button><div class=\"dropdown-menu\"><a repeat.for=\"i of textRowHeights\" class=\"dropdown-item\" href=\"#\" click.delegate=\"textRowHeightClicked(i)\"> ${i} </a></div></div><div if.bind=\"enableAlignment\" class=\"btn-group\" role=\"group\"><button type=\"button\" style=\"border-top-right-radius:0;border-bottom-right-radius:0\" class=\"btn btn-outline-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-align-left\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a if.bind=\"item.toolType=='STATICTEXT' || item.toolType=='MYTABLE'\" class=\"dropdown-item\" href=\"#\" click.delegate=\"textAlign('left')\"><i class=\"fa fa-align-left mr-2\" aria-hidden=\"true\"></i>Align Left </a><a if.bind=\"item.toolType=='STATICTEXT' || item.toolType=='MYTABLE'\" class=\"dropdown-item\" href=\"#\" click.delegate=\"textAlign('center')\"><i class=\"fa fa-align-center mr-2\" aria-hidden=\"true\"></i>Align Center </a><a if.bind=\"item.toolType=='STATICTEXT' || item.toolType=='MYTABLE'\" class=\"dropdown-item\" href=\"#\" click.delegate=\"textAlign('right')\"><i class=\"fa fa-align-right mr-2\" aria-hidden=\"true\"></i>Align Right </a><a class=\"dropdown-item\" href=\"#\" click.delegate=\"align(dndId, 'left')\"><svg width=\"19px\" height=\"19px\" viewBox=\"0 0 48 48\" xmlns=\"http://www.w3.org/2000/svg\"><g id=\"Layer_2\" data-name=\"Layer 2\"><g id=\"invisible_box\" data-name=\"invisible box\"><rect width=\"48\" height=\"48\" fill=\"none\"/></g><g id=\"Layer_7\" data-name=\"Layer 7\"><g><path d=\"M8,2A2,2,0,0,0,6,4V44a2,2,0,0,0,4,0V4A2,2,0,0,0,8,2Z\"/><path d=\"M16,22H32a2,2,0,0,0,2-2V8a2,2,0,0,0-2-2H16a2,2,0,0,0-2,2V20A2,2,0,0,0,16,22Zm2-12H30v8H18Z\"/><path d=\"M40,26H16a2,2,0,0,0-2,2V40a2,2,0,0,0,2,2H40a2,2,0,0,0,2-2V28A2,2,0,0,0,40,26ZM38,38H18V30H38Z\"/></g></g></g></svg> <span class=\"ml-2\">Object Left</span> </a><a class=\"dropdown-item\" href=\"#\" click.delegate=\"align(dndId, 'top')\"><svg version=\"1.1\" id=\"Icons\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 32 32\" xml:space=\"preserve\" width=\"20px\" height=\"20px\" fill=\"#000000\"><g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g><g id=\"SVGRepo_tracerCarrier\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke=\"#CCCCCC\" stroke-width=\"0.064\"></g><g id=\"SVGRepo_iconCarrier\"><style type=\"text/css\">.st0{fill:none;stroke:#000;stroke-width:2.7;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style><line class=\"st0\" x1=\"29\" y1=\"3\" x2=\"3\" y2=\"3\"></line><rect x=\"15.5\" y=\"10.5\" transform=\"matrix(-1.836970e-16 1 -1 -1.836970e-16 35.5 -7.5)\" class=\"st0\" width=\"12\" height=\"7\"></rect><rect x=\"0.5\" y=\"14.5\" transform=\"matrix(-1.836970e-16 1 -1 -1.836970e-16 28.5 7.5)\" class=\"st0\" width=\"20\" height=\"7\"></rect></g></svg> <span class=\"ml-2\">Object Top</span></a></div></div><div if.bind=\"enableLineHeight\" class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary dropdown-toggle line-height-button\" style=\"padding-top:4px;padding-left:8px;color:#007bff\" data-toggle=\"dropdown\" aria-expanded=\"false\"><svg class=\"line-height-svg\" width=\"22px\" height=\"22px\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g><g id=\"SVGRepo_tracerCarrier\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></g><g id=\"SVGRepo_iconCarrier\"><path stroke-linecap=\"square\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 10V5m0 0L4 7m2-2 2 2m-2 7v5m0 0 2-2m-2 2-2-2m8-10h8m0 5h-8m0 5h8\"></path></g></svg></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" repeat.for=\"l of lineHeights\" href=\"#\" click.delegate=\"lineHeightClicked(l)\"> ${l} </a></div></div><button if.bind=\"enableStyleErase\" style=\"border-top-right-radius:0;border-bottom-right-radius:0\" type=\"button\" class=\"btn btn-outline-primary\" click.delegate=\"removeStyle()\"><i class=\"fa fa-eraser\" aria-hidden=\"true\"></i></button><toolbar-hr if.bind=\"enableHr\" parent-toolbar.bind=\"$this\" item.bind=\"item\"></toolbar-hr><toolbar-table if.bind=\"enableTable\" parent-toolbar.bind=\"$this\" item.bind=\"item\"></toolbar-table></div></template><svg version=\"1.1\" id=\"Icons\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 32 32\" xml:space=\"preserve\" width=\"223px\" height=\"223px\" fill=\"#000000\"><g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g><g id=\"SVGRepo_tracerCarrier\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke=\"#CCCCCC\" stroke-width=\"0.064\"></g><g id=\"SVGRepo_iconCarrier\"><style type=\"text/css\">.st0{fill:none;stroke:#000;stroke-width:2.112;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10}</style><line class=\"st0\" x1=\"29\" y1=\"4\" x2=\"3\" y2=\"4\"></line><rect x=\"15.5\" y=\"10.5\" transform=\"matrix(-1.836970e-16 1 -1 -1.836970e-16 35.5 -7.5)\" class=\"st0\" width=\"12\" height=\"7\"></rect><rect x=\"0.5\" y=\"14.5\" transform=\"matrix(-1.836970e-16 1 -1 -1.836970e-16 28.5 7.5)\" class=\"st0\" width=\"20\" height=\"7\"></rect></g></svg>";});;
define('formbuilder/tools/textbox',['exports', 'aurelia-framework', 'aurelia-templating-resources', 'bcx-aurelia-dnd', 'aurelia-event-aggregator', '../formhelper'], function (exports, _aureliaFramework, _aureliaTemplatingResources, _bcxAureliaDnd, _aureliaEventAggregator, _formhelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Textbox = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _desc, _value, _class2, _descriptor;

  var Textbox = exports.Textbox = (_dec = (0, _aureliaFramework.inject)(_bcxAureliaDnd.DndService, _aureliaEventAggregator.EventAggregator, _formhelper.formhelper, _aureliaFramework.BindingEngine, _aureliaTemplatingResources.BindingSignaler), _dec2 = (0, _aureliaFramework.computedFrom)('item', 'item.inputType'), _dec3 = (0, _aureliaFramework.computedFrom)('item', 'item.editMode', 'item.required', 'item.value'), _dec4 = (0, _aureliaFramework.computedFrom)('item', 'item.dataColumn', 'item.dataColumn.tableName', 'item.editMode'), _dec5 = (0, _aureliaFramework.computedFrom)('item', 'item.editMode', 'item.name'), _dec6 = (0, _aureliaFramework.computedFrom)('item', 'item.x', 'item.y', 'item.width', 'item.height', 'item.selected'), _dec(_class = (_class2 = function () {
    function Textbox(dndService, EventAggregator, formhelper, BindingEngine, BindingSignaler) {
      _classCallCheck(this, Textbox);

      _initDefineProp(this, 'item', _descriptor, this);

      this.inputId = null;
      this.inputType = 'text';
      this.selected = false;
      this.minWidth = 40;
      this._placeholder = "";
      this.valueChangedSubscription = null;

      this.dndService = dndService;
      this.ea = EventAggregator;
      this.formhelper = formhelper;
      this.bindingEngine = BindingEngine;
      this.signaler = BindingSignaler;
    }

    Textbox.prototype.activate = function activate(model) {
      this.item = model;
    };

    Textbox.prototype.attached = function attached() {
      var self = this;
      var elem = document.getElementById(self.item.id);
      this.dndService.addSource(self, { noPreview: true, element: elem });

      if (self.item.dataColumn && self.item.dataColumn.tableName) {}
      self.item.disabled = this.item.editMode;

      self.valueChangedSubscription = self.bindingEngine.propertyObserver(self.item, 'inputType').subscribe(function (newValue, oldValue) {});
    };

    Textbox.prototype.detached = function detached() {
      this.dndService.removeSource(this);
    };

    Textbox.prototype.itemClicked = function itemClicked(e) {
      if (this.item.showToolbar) {
        e.stopPropagation();
        return;
      }

      this.ea.publish("itemClicked", this.item);
      e.stopPropagation();
    };

    Textbox.prototype.dndModel = function dndModel() {
      return {
        type: 'moveItem',
        id: this.item.id
      };
    };

    _createClass(Textbox, [{
      key: 'isDate',
      get: function get() {
        return this.item.inputType == 'date' ? true : false;
      }
    }, {
      key: 'isRequired',
      get: function get() {
        var tRequired = !this.item.editMode && this.item.required ? true : false;
        if (!tRequired) {
          this.ea.publish('checkComplete', this.item);
          return false;
        }
        if (tRequired && this.item.value) {
          this.ea.publish('checkComplete', this.item);
          return false;
        }
        return true;
      }
    }, {
      key: 'showDbElementIcon',
      get: function get() {
        if (this.item.dataColumn && this.item.dataColumn.tableName) {
          return this.item.editMode;
        } else {
          return false;
        }
      }
    }, {
      key: 'placeholder',
      get: function get() {
        return this.item.editMode ? this.item.name : this._placeholder;
      }
    }, {
      key: 'positionCss',
      get: function get() {
        var x = this.item && this.item.x || 0;
        var y = this.item && this.item.y || 0;
        var width = this.item && this.item.width || 0;
        width = width == '100%' || width == 'auto' ? width : width + 'px';
        var height = this.item && this.item.height || 0;
        var boxCursor = this.item && this.item.selected ? "pointer" : "default";
        var border = this.item && this.item.selected ? "1px dashed #007bff" : "none";

        var posObj = {
          left: x + 'px',
          top: y + 'px',
          width: width,
          height: height + 'px',
          cursor: boxCursor,
          border: border
        };

        return posObj;
      }
    }]);

    return Textbox;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'item', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, 'isDate', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'isDate'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'isRequired', [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, 'isRequired'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'showDbElementIcon', [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, 'showDbElementIcon'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'placeholder', [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, 'placeholder'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'positionCss', [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, 'positionCss'), _class2.prototype)), _class2)) || _class);
});;
define('text!formbuilder/tools/textbox.html',[],function(){return "<template><require from=\"../styles/box.css\"></require><require from=\"../resize-corner\"></require><require from=\"./text-toolbar\"></require><style>input:hover{cursor:pointer}.table-style{display:inline-block;width:auto}.no-resize{resize:none}.incomplete{border:1px solid red!important}</style><div ref=\"dndElement\" class=\"${item.addBoxClass ? 'box' : 'table-style'}\" style.bind=\"positionCss\" id.bind=\"item.id\" pointerup.delegate=\"itemClicked($event)\"><div class=\"card w-100 h-100 mb-1 border-0\" css=\"${item.disabled ? 'pointer-events: none;' : ''}\"><div ref=\"cardbody\" class=\"card-body p-1 d-flex align-items-center\"><i if.bind=\"showDbElementIcon\" class=\"fa fa-database mr-1 text-muted\" aria-hidden=\"true\"></i> <textarea if.bind=\"item.inputType != 'date'\" id.bind=\"item.elementId\" class=\"flex-grow-1 form-control no-resize ${isRequired ? 'is-invalid' : ''}\" css=\"min-width: ${minWidth}px;\" style.bind=\"item.style\" rows.bind=\"item.textRows\" placeholder.bind=\"placeholder\" readonly.bind=\"item.disabled\" value.bind=\"item.value\"></textarea> <input if.bind=\"item.inputType == 'date'\" type.bind=\"item.inputType\" id.bind=\"item.elementId\" class=\"flex-grow-1 form-control no-resize ${isRequired ? 'is-invalid' : ''}\" css=\"min-width: ${minWidth}px;\" style.bind=\"item.style\" placeholder.bind=\"placeholder\" readonly.bind=\"item.disabled\" value.bind=\"item.value\"></div></div><resize-corner if.bind=\"item.addBoxClass\" repeat.for=\"mode of ['se','sw','nw','ne']\" mode.bind=\"mode\" item-id.bind=\"item.id\" editing.bind=\"item.selected\"></resize-corner></div></template>";});;
define('formbuilder/tools/toolbar-extra-element',['exports', 'aurelia-framework', '../editor'], function (exports, _aureliaFramework, _editor) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ToolbarExtraElement = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor;

  var ToolbarExtraElement = exports.ToolbarExtraElement = (_dec = (0, _aureliaFramework.inject)(_editor.Editor), _dec(_class = (_class2 = function () {
    function ToolbarExtraElement(Editor) {
      _classCallCheck(this, ToolbarExtraElement);

      _initDefineProp(this, 'item', _descriptor, this);

      this.cloneDisabled = false;
      this.requiredDisabled = false;
      this.anchorLeftDisabled = false;
      this.anchorRightDisabled = false;

      this.editor = Editor;
    }

    ToolbarExtraElement.prototype.update = function update() {

      this.cloneDisabled = false;
      this.requiredDisabled = false;
      this.anchorLeftDisabled = false;
      this.anchorRightDisabled = false;

      if (this.item && this.item.table && this.item.toolType != 'MYTABLE') {
        this.cloneDisabled = true;
        this.anchorLeftDisabled = true;
        this.anchorRightDisabled = true;
      }
    };

    ToolbarExtraElement.prototype.required = function required() {
      var itm = this.editor.getItem();
      this.editor.itemRequired(itm.id);
    };

    ToolbarExtraElement.prototype.clone = function clone(e) {
      if (this.editor.selectedItem.toolType == 'MYTABLE') {
        this.editor.cloneItem(this.editor.selectedItem.id);
      } else {
        var contVm = this.editor.getContainerViewModel();
        var selections = contVm.selections;
        if (selections.length > 0) {
          for (var i = 0; i < selections.length; i++) {
            this.editor.cloneItem(selections[i].id);
          }
        } else {
          var itm = this.editor.getItem();
          this.editor.cloneItem(itm.id);
        }
      }

      e.stopPropagation();
    };

    ToolbarExtraElement.prototype.delete = function _delete() {
      var contVm = this.editor.getContainerViewModel();
      var selections = contVm.selections;
      if (selections.length > 0) {
        for (var i = 0; i < selections.length; i++) {
          this.editor.deleteItem(selections[i]);
        }
      } else {
        var itm = this.editor.getItem();
        this.editor.deleteItem(itm);
      }
    };

    return ToolbarExtraElement;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'item', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!formbuilder/tools/toolbar-extra-element.html',[],function(){return "<template><div class=\"dropdown d-inline-block\" role=\"group\" style=\"background-color:#ffff\"><button type=\"button\" class=\"btn btn-outline-primary border-left-0\" style=\"border-top-left-radius:0;border-bottom-left-radius:0\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-ellipsis-h\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\" style=\"max-height:500px;overflow-y:scroll\"><a class=\"dropdown-item ${item.required ? 'active' : ''} ${requiredDisabled ? 'disabled': ''}\" href=\"#\" click.delegate=\"required()\"><i class=\"fa fa-exclamation-triangle mr-2\" aria-hidden=\"true\"></i> Required </a><a class=\"dropdown-item ${cloneDisabled ? 'disabled': ''}\" href=\"#\" click.delegate=\"clone($event)\"><i class=\"fa fa-clone mr-2\" aria-hidden=\"true\"></i> Clone </a><a class=\"dropdown-item\" href=\"#\" click.delegate=\"delete()\"><i class=\"fa fa-trash-o mr-2\" aria-hidden=\"true\"></i> Delete</a></div></div></template>";});;
define('formbuilder/tools/toolbar-hr',['exports', 'aurelia-framework', '../editor'], function (exports, _aureliaFramework, _editor) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ToolbarHr = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2;

  var ToolbarHr = exports.ToolbarHr = (_dec = (0, _aureliaFramework.inject)(_editor.Editor), _dec(_class = (_class2 = function () {
    function ToolbarHr(Editor) {
      _classCallCheck(this, ToolbarHr);

      _initDefineProp(this, 'item', _descriptor, this);

      _initDefineProp(this, 'parentToolbar', _descriptor2, this);

      this.lineSizes = [1, 2, 3, 4, 5];

      this.editor = Editor;
    }

    ToolbarHr.prototype.lineSizeClicked = function lineSizeClicked(l) {
      this.parentToolbar.hrLineSize = l;
      this.parentToolbar.updateHrLineStyle();
    };

    ToolbarHr.prototype.lineStyleClicked = function lineStyleClicked(style) {
      this.parentToolbar.hrLineStyle = style;
      this.parentToolbar.updateHrLineStyle();
    };

    return ToolbarHr;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'item', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'parentToolbar', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!formbuilder/tools/toolbar-hr.html',[],function(){return "<template><style>.line-style-button:hover .line-style-svg{fill:#fff!important}.line-style-svg{fill:#007bff}.btn-group .show .line-style-svg{fill:#fff}</style><div class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary dropdown-toggle line-style-button\" style=\"padding-top:5px;padding-left:8px;color:#007bff;border-radius:0;border-left:none\" data-toggle=\"dropdown\" aria-expanded=\"false\"><svg class=\"line-style-svg\" width=\"22px\" height=\"22px\" viewBox=\"0 0 48 48\" xmlns=\"http://www.w3.org/2000/svg\"><title>line-style</title><g id=\"Layer_2\" data-name=\"Layer 2\"><g id=\"invisible_box\" data-name=\"invisible box\"><rect width=\"48\" height=\"48\" fill=\"none\"/></g><g id=\"icons_Q2\" data-name=\"icons Q2\"><rect x=\"4\" y=\"7\" width=\"40\" height=\"4\" rx=\"2\" ry=\"2\"/><rect x=\"4\" y=\"27\" width=\"10\" height=\"4\" rx=\"2\" ry=\"2\"/><rect x=\"19\" y=\"27\" width=\"10\" height=\"4\" rx=\"2\" ry=\"2\"/><rect x=\"34\" y=\"27\" width=\"10\" height=\"4\" rx=\"2\" ry=\"2\"/><rect x=\"26\" y=\"17\" width=\"18\" height=\"4\" rx=\"2\" ry=\"2\"/><rect x=\"4\" y=\"17\" width=\"18\" height=\"4\" rx=\"2\" ry=\"2\"/><rect x=\"40\" y=\"37\" width=\"4\" height=\"4\" rx=\"2\" ry=\"2\"/><rect x=\"31\" y=\"37\" width=\"4\" height=\"4\" rx=\"2\" ry=\"2\"/><rect x=\"22\" y=\"37\" width=\"4\" height=\"4\" rx=\"2\" ry=\"2\"/><rect x=\"13\" y=\"37\" width=\"4\" height=\"4\" rx=\"2\" ry=\"2\"/><rect x=\"4\" y=\"37\" width=\"4\" height=\"4\" rx=\"2\" ry=\"2\"/></g></g></svg></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"lineStyleClicked('solid')\">Solid </a><a class=\"dropdown-item\" href=\"#\" click.delegate=\"lineStyleClicked('dotted')\">Dotted </a><a class=\"dropdown-item\" href=\"#\" click.delegate=\"lineStyleClicked('dashed')\">Dashed</a></div></div><div class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary dropdown-toggle\" style=\"border-radius:0;border-left:none\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-arrows-v\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" repeat.for=\"l of lineSizes\" href=\"#\" click.delegate=\"lineSizeClicked(l)\"> ${l} </a></div></div></template>";});;
define('formbuilder/tools/toolbar-table',['exports', 'aurelia-framework', '../editor', '../formhelper'], function (exports, _aureliaFramework, _editor, _formhelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ToolbarTable = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2;

  var ToolbarTable = exports.ToolbarTable = (_dec = (0, _aureliaFramework.inject)(_editor.Editor, _formhelper.formhelper), _dec(_class = (_class2 = function () {
    function ToolbarTable(Editor, formhelper) {
      _classCallCheck(this, ToolbarTable);

      _initDefineProp(this, 'item', _descriptor, this);

      _initDefineProp(this, 'parentToolbar', _descriptor2, this);

      this.borderSize = 1;
      this.borderPositionsList = ['ALL', 'TOP', 'RIGHT', 'BOTTOM', 'LEFT'];
      this.selectedBorderPosition = null;
      this.cellBorderPositions = [];

      this.editor = Editor;
      this.formhelper = formhelper;
    }

    ToolbarTable.prototype.textAlignTable = function textAlignTable(alignment) {
      this.updateTableSelectedCellStyle('text-align', alignment);
    };

    ToolbarTable.prototype.updateTableSelectedCellStyle = function updateTableSelectedCellStyle(name, value) {
      var tableObj = this.item.table;
      var selectedCell = tableObj.getSelectedCell();
      var aStyle = selectedCell.getStyle(name);
      if (aStyle) {
        aStyle.value = value;
        selectedCell.updateStyle(aStyle);
      } else {
        selectedCell.addStyle(name, value);
      }
    };

    ToolbarTable.prototype.toggleFill = function toggleFill() {
      var tableObj = this.item.table;
      var selectedCell = tableObj.getSelectedCell();
      if (selectedCell && selectedCell.item) {
        selectedCell.item.width = selectedCell.item.width == 'auto' ? '100%' : 'auto';
      }
    };

    ToolbarTable.prototype.toggleRepeat = function toggleRepeat() {
      this.item.table.setRepeater(this.item.table.isRepeater ? false : true);
    };

    ToolbarTable.prototype.openCustomSearchDialogClick = function openCustomSearchDialogClick() {
      this.editor.openCustomSearchDialog(this.item.table);
    };

    ToolbarTable.prototype.toggleEditMode = function toggleEditMode() {
      var self = this;
      self.item.table.setEditMode(self.item.table.editMode ? false : true);

      var cellOps = null;

      if (!self.editor.tableCellOptionsData) {
        var aRow = self.item.table.getRow();
        aRow.selectCell(0, function (c) {
          var cEl = document.getElementById(c.cId);
          cellOps = self.formhelper.getTableCellOptionsForElement(cEl, c, self.item.table.editMode, self.item.table);
        });
      } else {
        var selected = self.item.table.getSelectedCell();
        var cEl = null;
        if (selected) {
          cEl = document.getElementById(selected.cId);
        } else {
          var aRow = self.item.table.getRow();
          aRow.selectCell(0, function (c) {
            selected = c;
            cEl = document.getElementById(c.cId);
          });
        }

        cellOps = self.formhelper.getTableCellOptionsForElement(cEl, selected, self.item.table.editMode, self.item.table);
      }

      self.editor.tableCellOptionsData = cellOps;
    };

    return ToolbarTable;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'item', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'parentToolbar', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!formbuilder/tools/toolbar-table.html',[],function(){return "<template><style>.table-edit{border-top-right-radius:0;border-bottom-right-radius:0;border-top-left-radius:.25rem;border-bottom-left-radius:.25rem;border-right:none}</style><div class=\"btn-group\" role=\"group\"><button type=\"button\" data-toggle=\"button\" aria-pressed=\"true\" class=\"btn btn-outline-primary table-edit ${item.table.editMode ? 'active' : ''}\" click.delegate=\"toggleEditMode()\"><i class=\"fa fa-table mr-1\" aria-hidden=\"true\"></i>Edit</button></div><div class=\"btn-group\" role=\"group\"><button type=\"button\" style=\"border-right:none\" class=\"btn btn-outline-primary dropdown-toggle rounded-0\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-align-left\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"textAlignTable('left')\"><i class=\"fa fa-align-left mr-2\" aria-hidden=\"true\"></i>Align Left </a><a class=\"dropdown-item\" href=\"#\" click.delegate=\"textAlignTable('center')\"><i class=\"fa fa-align-center mr-2\" aria-hidden=\"true\"></i>Align Center </a><a class=\"dropdown-item\" href=\"#\" click.delegate=\"textAlignTable('right')\"><i class=\"fa fa-align-right mr-2\" aria-hidden=\"true\"></i>Align Right</a></div></div><div class=\"btn-group\" role=\"group\"><button type=\"button\" style=\"border-right:none\" class=\"btn btn-outline-primary rounded-0\" click.delegate=\"toggleFill()\"><i class=\"fa fa-arrows-h mr-1\" aria-hidden=\"true\"></i>Fill</button></div><div class=\"btn-group\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary dropdown-toggle rounded-0\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-cog\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"toggleRepeat()\"><i class=\"fa fa-repeat mr-2\" aria-hidden=\"true\"></i>Repeater</a></div></div></template>";});;
define('formbuilder/viewer',['exports', '../helpers/helper', 'aurelia-framework', '../data/go/data', 'jquery', 'aurelia-event-aggregator', './formhelper', 'lodash', '../go/popupHelper', 'moment', 'html2canvas', 'aurelia-dialog', 'xlsx/xlsx.mjs'], function (exports, _helper, _aureliaFramework, _data, _jquery, _aureliaEventAggregator, _formhelper, _lodash, _popupHelper, _moment, _html2canvas, _aureliaDialog, _xlsx) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Viewer = undefined;

  var _jquery2 = _interopRequireDefault(_jquery);

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  var _html2canvas2 = _interopRequireDefault(_html2canvas);

  var XLSX = _interopRequireWildcard(_xlsx);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2;

  var Viewer = exports.Viewer = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _data.Data, _aureliaEventAggregator.EventAggregator, _formhelper.formhelper, _popupHelper.PopupHelper, _aureliaDialog.DialogService), _dec(_class = (_class2 = function () {
    Viewer.prototype.formIdChanged = function formIdChanged(newVal, oldVal) {
      var t = newVal;
    };

    Viewer.prototype.selectedPreferenceChanged = function selectedPreferenceChanged(newVal, oldVal) {
      this.getGoPrefData(newVal);
    };

    function Viewer(helper, Data, EventAggregator, formhelper, PopupHelper, DialogService) {
      _classCallCheck(this, Viewer);

      this.form = null;
      this.providerId = null;
      this.patientId = null;
      this.date = null;

      _initDefineProp(this, 'formId', _descriptor, this);

      this.instanceId = null;
      this.itemsToPopulate = [];
      this.prefId = null;
      this.pageWidth = 816;
      this.pageHeight = 1056;
      this.isComplete = false;
      this.completionList = [];
      this.showSubmitAsToolbar = false;
      this.showSubmit = true;
      this.showPreferenceToolbar = false;
      this.showPreferenceToolbarSave = false;
      this.showReportToolbar = false;
      this.reportData = null;
      this.reportSettings = null;
      this.mappedDataRows = null;
      this.reportColumnFriendlyNames = [];
      this.preferences = [];

      _initDefineProp(this, 'selectedPreference', _descriptor2, this);

      this.fullWidth = false;
      this.scrollHeight = 0;
      this.fromPrevious = false;

      this.helper = helper;
      this.data = Data;
      this.ea = EventAggregator;
      this.formhelper = formhelper;
      this.popupHelper = PopupHelper;
      this.dialogService = DialogService;
    }

    Viewer.prototype.silentSave = function silentSave(params, callback) {
      var self = this;

      var incomingDate = void 0;
      if (params.hasOwnProperty('date')) {
        incomingDate = params.date;
      }

      self.initProperties(params);
      self.loadViewer(self.formId, self.instanceId, self.reportData, function (res) {
        if (self.fromPrevious && incomingDate) {
          self.date = incomingDate;
        }
        self.saveAsGoForm(function (res) {
          callback(res);
        });
      });
    };

    Viewer.prototype.initProperties = function initProperties(params) {
      var self = this;
      if (params.hasOwnProperty('blockInstanceId') && !self.blockInstanceId) {
        self.blockInstanceId = params.blockInstanceId;
      }

      if (params.hasOwnProperty('formId')) {
        self.formId = params.formId;
      }
      if (params.hasOwnProperty('reportData')) {
        self.reportData = params.reportData;
      }
      if (params.hasOwnProperty('reportSettings')) {

        self.reportSettings = params.reportSettings;

        if (self.reportSettings.PaperOrientation == 'Landscape') {
          var tWidth = self.pageHeight;
          var tHeight = self.pageWidth;
          self.pageHeight = tHeight;
          self.pageWidth = tWidth;
        }
      }
      if (params.hasOwnProperty('instanceId')) {
        self.instanceId = params.instanceId;
      }
      if (params.hasOwnProperty('patientId')) {
        self.patientId = params.patientId;
      }
      if (params.hasOwnProperty('providerId')) {
        self.providerId = params.providerId;
      }
      if (params.hasOwnProperty('date')) {
        self.date = params.date;
      }

      if (params.hasOwnProperty('showSubmitAsToolbar')) {
        self.showSubmitAsToolbar = params.showSubmitAsToolbar;
      }
      if (params.hasOwnProperty('showReportToolbar')) {
        self.showReportToolbar = params.showReportToolbar;
      }
      if (params.hasOwnProperty('showSubmit')) {
        self.showSubmit = params.showSubmit;
      }
      if (params.hasOwnProperty('showPreferenceToolbar')) {
        self.showPreferenceToolbar = params.showPreferenceToolbar;
      }
      if (params.hasOwnProperty('showPreferenceToolbarSave')) {
        self.showPreferenceToolbarSave = params.showPreferenceToolbarSave;
      }
      if (params.hasOwnProperty('prefId')) {
        self.prefId = params.prefId;
        self.showPreferenceToolbar = true;
      }
      if (params.hasOwnProperty('fromPrevious')) {
        self.fromPrevious = true;
      }
      if (params.hasOwnProperty('fromPreviousNewProviderId')) {
        self.fromPreviousNewProviderId = params.fromPreviousNewProviderId;
      }
    };

    Viewer.prototype.activate = function activate(params) {
      var self = this;
      self.formhelper.setupFonts();

      self.ea.subscribe("refresh-goform-viewer", function (vm) {

        if (self.blockInstanceId && self.blockInstanceId != vm.blockInstanceId) {
          return;
        }

        self.formId = vm.formId;
        self.patientId = vm.patientId;
        self.providerId = vm.providerId;
        self.date = vm.date;
        self.instanceId = vm.instanceId;


        self.loadViewer(self.formId, self.instanceId, self.reportData);
      });

      self.initProperties(params);

      if (self.showPreferenceToolbar && self.providerId && self.formId) {
        self.loadProviderPreferences(self.providerId, self.formId);
      }

      if (self.helper.jwt() === 'undefined' || self.helper.jwt() == null) {
        if (params.hasOwnProperty("jwt")) {
          this.helper.processToken(params.jwt);
        }
      }

      self.ea.subscribe('checkComplete', function (item) {
        if (self.hasRequiredItems == false) {
          self.isComplete = true;
          return;
        }

        if (self.hasRequiredItems == undefined && self.form) {
          self.hasRequiredItems = self.checkForRequiredItems();
        }

        if (!self.hasRequiredItems) {
          self.isComplete = true;
          return;
        }

        self.addItemToCompletionList(item);

        var tComplete = false;
        var pages = self.form.pages;
        for (var p = 0; p < pages.length; p++) {
          var page = pages[p];
          for (var i = 0; i < page.items.length; i++) {
            var itm = page.items[i];
            if (itm.required) {
              var found = _.find(self.completionList, function (item) {
                return item.id === itm.id;
              });
              tComplete = found ? true : false;
              if (!tComplete) {
                break;
              }
            }
          }
        }

        self.isComplete = tComplete;
      });
    };

    Viewer.prototype.checkForRequiredItems = function checkForRequiredItems() {
      var self = this;
      var pages = self.form.pages;
      for (var p = 0; p < pages.length; p++) {
        var page = pages[p];
        for (var i = 0; i < page.items.length; i++) {
          var itm = page.items[i];
          if (itm.required) {
            return true;
          }
        }
      }
      return false;
    };

    Viewer.prototype.addItemToCompletionList = function addItemToCompletionList(item) {
      var itemExist = false;
      for (var i = 0; i < this.completionList.length; i++) {
        if (this.completionList[i].id === item.id) {
          itemExist = true;
          break;
        }
      }
      if (!itemExist) {
        this.completionList.push(item);
      }
    };

    Viewer.prototype.attached = function attached() {
      var self = this;
      self.loadViewer(self.formId, self.instanceId, self.reportData);

      self.scrollHeight = document.documentElement.clientHeight - 57;
    };

    Viewer.prototype.loadViewer = function loadViewer(formId, instanceId, reportData, callback) {
      var self = this;
      if (reportData) {
        self.createReportForm(reportData, self.reportSettings);
      } else if (instanceId) {
        self.loadWithInstanceId(instanceId, function (frm) {
          self.ea.publish('goform-viewer-loaded', { "form": frm, "blockInstanceId": self.blockInstanceId });
          if (callback) {
            callback(frm);
          }
        });
      } else if (formId) {
        self.loadWithFormId(formId, function (frm) {
          self.ea.publish('goform-viewer-loaded', { "form": frm, "blockInstanceId": self.blockInstanceId });
          if (callback) {
            callback(frm);
          }
        });
      }
    };

    Viewer.prototype.setPageSize = function setPageSize(viewerOrPdf) {
      if (viewerOrPdf === 'pdf') {
        this.pageWidth = '100%';
        this.pageHeight = '100%';
      } else {
        this.pageWidth = '816px';
        this.pageHeight = '1056px';
      }
    };

    Viewer.prototype.loadWithFormId = function loadWithFormId(formId, callback) {
      var formUrl = 'goforms?id=' + formId;
      this._load(formUrl, function (frm) {
        if (callback) {
          callback(frm);
        }
      });
    };

    Viewer.prototype.loadWithInstanceId = function loadWithInstanceId(instanceId, callback) {
      var self = this;
      var instUrl = 'goforms/instance?id=' + instanceId;
      self._load(instUrl, function (frm) {
        if (callback) {
          callback(frm);
        }
      });
    };

    Viewer.prototype._load = function _load(url, callback) {
      var self = this;
      self.data.getWithUrl(url, function (frm) {
        var json = null;
        if (frm.hasOwnProperty('Json')) {
          json = frm.Json;
        } else {
          json = frm.OD_GO_Forms.Json;
          self.patientId = frm.PatientID;
          self.providerId = frm.ProviderId;

          var timestamp = Date.parse(frm.Date);
          var aDate = new Date(timestamp);
          self.date = self.helper.getMMDDYYYYDateWithDate(aDate);
        }

        var obj = JSON.parse(json);

        var frmObj = self.formhelper.getNewForm();
        frmObj.id = self.formId;
        frmObj.name = frm.Description;
        frmObj.providerId = self.providerId;
        frmObj.type = frm.Type ? frm.Type : frm.OD_GO_Forms.Type;

        if (obj.hasOwnProperty("fullWidth")) {
          self.fullWidth = obj.fullWidth;
        }

        var prefTable = null;
        var ogPrefId = null;
        if (obj.hasOwnProperty('ogPreferenceId') && obj.ogPreferenceId != null) {
          ogPrefId = obj.ogPreferenceId;
          prefTable = obj.ogPreferenceTable;
        }

        var pages = obj.constructor === Array ? obj : obj.pages;

        var totalFormTableCellCount = 0;

        for (var p = 0; p < pages.length; p++) {
          var page = pages[p];
          for (var i = 0; i < page.items.length; i++) {
            var itm = page.items[i];

            if (self.fullWidth && self.viewerHeader && self.viewerHeader.parentElement) {
              self.pageWidth = self.viewerHeader.parentElement.clientWidth + "px";
            }

            itm.selected = false;
            itm.editMode = false;

            if (itm.toolType == 'MYTABLE') {
              if (itm.table.isRepeater) {

                self.formhelper.buildMyTableObjectDataWithItem(frmObj, itm, totalFormTableCellCount, function (res) {
                  itm.table = res.table;
                  totalFormTableCellCount = res.totalCellCount;
                });
              }

              for (var r = 0; r < itm.table.rows.length; r++) {
                var aRow = itm.table.rows[r];
                for (var c = 0; c < aRow.cells.length; c++) {
                  var aCell = aRow.cells[c];
                  aCell.selected = false;
                  if (aCell.item) {
                    aCell.item.selected = false;
                    aCell.item.editMode = false;
                    aCell.item.disabled = false;
                    self.checkForSystemDateItem(aCell.item);
                  }
                }
              }
            } else {
              itm.addBoxClass = true;
              if (itm.dataColumn) {
                itm.disabled = !itm.dataColumn.editable ? true : false;
              } else {
                itm.disabled = false;
              }
            }

            self.checkForSystemDateItem(itm);
          }
        }

        if (prefTable == null) {
          self.getDataForElements(pages, frmObj, function () {
            frmObj.pages = pages;
            self.form = frmObj;
            if (callback) {
              callback(frm);
            }
          });
        } else {
          self.getPrefDataForElements(pages, prefTable, ogPrefId);
          frmObj.pages = pages;
          self.form = frmObj;
          if (callback) {
            callback(frm);
          }
        }
      });
    };

    Viewer.prototype.reportStyleString = function reportStyleString() {
      return '<style>.table {\n         width: 100%;\n         max-width: 100%;\n         margin-bottom: 20px;\n     }\n     .table {\n         background-color: transparent;\n     }\n     .table {\n         border-collapse: collapse;\n         border-spacing: 0;\n     }\n     .table {\n         display: table;\n         border-collapse: separate;\n         box-sizing: border-box;\n         text-indent: initial;\n         border-spacing: 2px;\n         border-color: grey;\n     }</style>';
    };

    Viewer.prototype.printReport = function printReport() {
      var printwin = window.open("");
      var content = '<html><head>' + this.reportStyleString() + '</head><body>' + this.viewerHeader.innerHTML + '</body></html>';
      printwin.document.write(content);

      printwin.document.write('<script type="text/javascript">document.addEventListener("DOMContentLoaded", () => {window.print(); });</script>');
      printwin.document.close();
      printwin.focus();
    };

    Viewer.prototype.exportReportToExcel = function exportReportToExcel() {
      var self = this;
      var final = [];
      if (self.mappedDataRows) {
        for (var i = 0; i < self.mappedDataRows.length; i++) {
          var aRow = {};
          for (var t = 0; t < self.mappedDataRows[i].length; t++) {
            aRow[self.reportColumnFriendlyNames[t]] = self.mappedDataRows[i][t].value;
          }
          final.push(aRow);
        }

        var worksheet = XLSX.utils.json_to_sheet(final);
        var workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, "Form");

        var kys = Object.keys(final[0]);

        if (!worksheet["!cols"]) worksheet["!cols"] = [];

        for (var c = 0; c < kys.length; c++) {
          var max_width = final.reduce(function (w, r) {
            return Math.max(w, r[kys[c]].length);
          }, 10);

          worksheet["!cols"][c] = { wch: max_width };
        }

        XLSX.writeFile(workbook, "Form.xlsx", { compression: true });
      }
    };

    Viewer.prototype.buildChart = function buildChart(page, form, data, settings) {

      var title = this.formhelper.getNewItem(this.formhelper.generateItemIdWithForm(form), null, 0, 30, '100%', 50, 'STATICTEXT');
      title.html = '<div style="font-size:30pt; text-align: center;">' + settings.ReportTitle + '</div>';
      title.textRows = 1;
      title.inputType = 'text';
      title.editMode = false;
      page.items.push(title);

      var sub = this.formhelper.getNewItem(this.formhelper.generateItemIdWithForm(form), null, 0, 80, '100%', 40, 'STATICTEXT');
      sub.html = '<div style="font-size:16pt; text-align: center;">' + settings.ReportSubTitle + '</div>';
      sub.textRows = 1;
      sub.inputType = 'text';
      sub.editMode = false;
      page.items.push(sub);

      var chart = this.formhelper.getNewItem(this.formhelper.generateItemIdWithForm(form), null, 10, 130, 500, 500, settings.Json.toolType);

      chart.editMode = false;

      chart.data = this.formhelper.getNewChartData(settings.Json.chartJsConfig.type, settings.Json.chartJsConfig.data, settings.Json.chartJsConfig.options);
      page.items.push(chart);
    };

    Viewer.prototype.createReportForm = function createReportForm(data, settings) {

      var kys = data.length > 0 ? Object.keys(data[0]) : null;

      var newForm = this.formhelper.getNewForm();

      newForm.name = settings.ReportName;
      newForm.type = "REPORT";

      var newPage = this.formhelper.getNewPage();
      newPage.id = 0;
      newPage.index = 0;

      if (settings.Json) {
        this.buildChart(newPage, newForm, data, settings);

        newForm.addPage(newPage, 0);

        newForm.selectPage(0);
        this.form = newForm;
      } else {
        var title = this.formhelper.getNewItem(this.formhelper.generateItemIdWithForm(newForm), null, 0, 30, '100%', 50, 'STATICTEXT');
        title.html = '<div style="font-size:30pt; text-align: center;">' + settings.ReportTitle + '</div>';
        title.textRows = 1;
        title.inputType = 'text';
        title.editMode = false;

        newPage.items.push(title);

        var sub = this.formhelper.getNewItem(this.formhelper.generateItemIdWithForm(newForm), null, 0, 80, '100%', 40, 'STATICTEXT');
        sub.html = '<div style="font-size:16pt; text-align: center;">' + settings.ReportSubTitle + '</div>';
        sub.textRows = 1;
        sub.inputType = 'text';
        sub.editMode = false;
        newPage.items.push(sub);

        this.form = newForm;

        if (kys != null) {
          var tbl = this.createReportTable(newForm, kys);
          newPage.items.push(tbl);
        }

        newForm.addPage(newPage, 0);

        newForm.selectPage(0);
        this.form = newForm;

        if (kys != null) {
          this.populateElementsWithReportData(data, newPage, this.form.pages);
        }
      }
    };

    Viewer.prototype.createReportTable = function createReportTable(form, colHeaders) {
      var self = this;


      var name = "table";

      var headersObj = [];
      var startHeaderIndex = colHeaders.length / 2;
      for (var h = startHeaderIndex; h < colHeaders.length; h++) {
        headersObj.push({
          value: "<b>" + colHeaders[h] + "</b>"
        });
        self.reportColumnFriendlyNames.push(colHeaders[h]);
      }

      var dataItm = new self.formhelper.getNewItem(self.formhelper.generateItemIdWithForm(form), name, 10, 130, self.pageWidth - 20, 150, self.formhelper.getTooltype("mytable"));
      dataItm.editMode = false;

      var newTable = this.formhelper.getNewTable();
      newTable.isRepeater = true;
      newTable.editMode = false;
      newTable.style = 'border: 1px solid grey; border-collapse: collapse; width: 100%';

      for (var i = 0; i < 1; i++) {
        var aRow = this.formhelper.getNewTableRow();
        aRow.parent = newTable;

        for (var c = 0; c < headersObj.length; c++) {
          var cId = self.form.getUniqueTableCellId();
          var aCell = this.formhelper.getNewTableCell(cId);
          aCell.addStyle('border-top', '1px solid grey');
          aCell.addStyle('border-right', '1px solid grey');
          aCell.addStyle('border-bottom', '1px solid grey');
          aCell.addStyle('border-left', '1px solid grey');
          aCell.addStyle('border-collapse', 'collapse');
          aCell.addStyle('height', '20px');
          aCell.addStyle('overflow', 'hidden');

          aRow.addCell(aCell);
        }
        newTable.addRow(aRow);
      }

      self.addRepeatableRowWithTableAndReportDataRowNew(newTable, headersObj);

      newTable.deleteRow(0);

      dataItm.table = newTable;
      dataItm.dataColumn = {};

      return dataItm;
    };

    Viewer.prototype.checkForSystemDateItem = function checkForSystemDateItem(item) {
      if (item.dataColumn && item.dataColumn.isSystemDate) {
        item.value = (0, _moment2.default)().format('YYYY-MM-DD');
      }
    };

    Viewer.prototype.getPrefDataForElements = function getPrefDataForElements(pages, prefTable, prefId) {
      var self = this;
      var els = [];
      self.itemsToPopulate = [];

      for (var p = 0; p < pages.length; p++) {
        var aPage = pages[p];
        for (var i = 0; i < aPage.items.length; i++) {
          var aItm = aPage.items[i];
          if (aItm.dataColumn && aItm.dataColumn.columnName) {
            els.push(aItm.dataColumn);
            self.itemsToPopulate.push(aItm);
          }
        }
      }

      var url = 'reportingcolumninfo/ogpref/elements?tablename=' + prefTable + '&id=' + prefId;

      this.data.getWithUrl(url, function (res) {
        self.populateElementsWithPreferenceData(res);
      });
    };

    Viewer.prototype.loadProviderPreferences = function loadProviderPreferences(providerId, formId) {
      var self = this;
      self.data.getWithUrl('goforms/pref?providerId=' + providerId + '&formId=' + formId, function (res) {
        self.preferences = res;
      });
    };

    Viewer.prototype.savePreference = function savePreference() {
      var self = this;
      if (self.selectedPreference) {

        var saveObj = self.getGoPrefFormSaveObject();

        var saveDescription = 'Saving ' + self.selectedPreference.Description + '...';
        var saveDialog = self.helper.createNoty(saveDescription, 3000);
        saveDialog.show();

        self.data.putWithUrlAndData('goforms/pref', saveObj, function (res) {
          var prefIndex = _.findIndex(self.preferences, function (p) {
            return p.Id == res.Id;
          });

          self.preferences.splice(prefIndex, 1, res);

          saveDialog.close();
        });
      }
    };

    Viewer.prototype.saveAsPreference = function saveAsPreference() {
      var self = this;
      if (self.selectedPreference) {

        self.popupHelper.openGenericInputPop("Create New Preference", ['Description'], null, false, function (res) {

          var prefName = res.inputs[0].value;

          var saveObj = self.getGoPrefFormSaveObject();
          saveObj.Description = prefName;
          saveObj.Id = 0;

          var saveDescription = 'Saving ' + self.selectedPreference.Description + '...';
          var saveDialog = self.helper.createNoty(saveDescription, 3000);
          saveDialog.show();

          self.data.postWithUrlAndData('goforms/pref', JSON.stringify(saveObj), function (res) {

            saveDialog.close();
          });
        });
      }
    };

    Viewer.prototype.newPreference = function newPreference() {
      var self = this;
      self.popupHelper.openGenericInputPop("Create New Preference", ['Description'], null, false, function (res) {

        var prefName = res.inputs[0].value;

        var saveObj = self.getGoPrefFormSaveObject();
        saveObj.Description = prefName;

        var saveDescription = 'Saving ' + prefName + '...';
        var saveDialog = self.helper.createNoty(saveDescription, 3000);
        saveDialog.show();

        self.data.postWithUrlAndData('goforms/pref', JSON.stringify(saveObj), function (res) {
          self.selectedPreference = res;

          saveDialog.close();
        });
      });
    };

    Viewer.prototype.getGoPrefData = function getGoPrefData(pref) {
      var self = this;

      var itemsToPopulate = [];

      for (var p = 0; p < self.form.pages.length; p++) {
        var aPage = self.form.pages[p];
        for (var i = 0; i < aPage.items.length; i++) {
          var aItm = aPage.items[i];

          if (aItm.table) {
            for (var r = 0; r < aItm.table.rows.length; r++) {
              var aRow = aItm.table.rows[r];
              for (var c = 0; c < aRow.cells.length; c++) {
                var aCell = aRow.cells[c];
                if (aCell.item) {
                  itemsToPopulate.push(aCell.item);
                }
              }
            }
          } else {
            itemsToPopulate.push(aItm);
          }
        }
      }

      self.populateElementsWithGoFormPreference(itemsToPopulate, pref);
    };

    Viewer.prototype.getGoPrefFormSaveObject = function getGoPrefFormSaveObject() {
      var self = this;

      if (!self.form || !self.providerId) return;

      var obj = {
        "Id": self.selectedPreference ? self.selectedPreference.Id : 0,
        "Description": self.selectedPreference ? self.selectedPreference.Description : null,
        "ProviderId": self.providerId,
        "Json": null,
        "FormId": self.formId
      };

      var items = [];

      for (var p = 0; p < self.form.pages.length; p++) {
        var aPage = self.form.pages[p];
        for (var i = 0; i < aPage.items.length; i++) {
          var aItm = aPage.items[i];

          if (aItm.table) {
            for (var r = 0; r < aItm.table.rows.length; r++) {
              var aRow = aItm.table.rows[r];
              for (var c = 0; c < aRow.cells.length; c++) {
                var aCell = aRow.cells[c];
                if (aCell.item) {
                  items.push({ itemId: aCell.item.id, value: aCell.item.value });
                }
              }
            }
          } else {
            items.push({ itemId: aItm.id, value: aItm.value });
          }
        }
      }

      obj.Json = JSON.stringify(items);

      return obj;
    };

    Viewer.prototype.getDataForElements = function getDataForElements(pages, formObj, callback) {
      var self = this;
      var els = [];
      self.itemsToPopulate = [];

      for (var p = 0; p < pages.length; p++) {
        var aPage = pages[p];
        for (var i = 0; i < aPage.items.length; i++) {
          var aItm = aPage.items[i];

          if (aItm.table) {
            for (var r = 0; r < aItm.table.rows.length; r++) {
              var aRow = aItm.table.rows[r];
              for (var c = 0; c < aRow.cells.length; c++) {
                var aCell = aRow.cells[c];
                if (aCell.item && aCell.item.dataColumn && aCell.item.dataColumn.columnName) {

                  var rci = self.GoFormDataColumnToReportingColumnInfo(aCell.item.dataColumn);

                  if (aItm.table.isRepeater) {
                    aCell.item.parentTable = aItm.table;
                  }

                  self.itemsToPopulate.push(aCell.item);

                  els.push(rci);
                }
              }
            }
          } else {
            if (aItm.dataColumn && aItm.dataColumn.columnName) {
              els.push(self.GoFormDataColumnToReportingColumnInfo(aItm.dataColumn));
              self.itemsToPopulate.push(aItm);
            }
          }
        }
      }

      if (self.reportData) {
        self.populateElementsWithReportData(self.reportData, aPage, pages);
        if (callback) {
          callback();
        }
      } else {

        if (this.date == null) {
          callback();
        }

        var simpleDate = self.helper.parseSimpleDate(this.date, 'MM-DD-YYYY');
        var strDate = self.helper.getMMDDYYYYDateWithDate(simpleDate);

        var url = 'reportingcolumninfo/elements/patient/static/and/customvalues';
        var elObj = {
          'Elements': els,
          'Date': strDate,
          'TemplateType': '',
          'ProviderID': this.providerId,
          'PatientID': this.patientId,
          'FormInstanceId': this.instanceId
        };

        this.data.postWithUrlAndData(url, JSON.stringify(elObj), function (res) {
          self.populateElementsWithData(res);
          if (callback) {
            callback();
          }
        });
      }
    };

    Viewer.prototype.GoFormDataColumnToReportingColumnInfo = function GoFormDataColumnToReportingColumnInfo(dataColumn) {
      return {
        ColumnID: dataColumn.id,
        Editable: dataColumn.editable,
        TableName: dataColumn.tableName,
        TableAlias: dataColumn.tableName,
        ColumnName: dataColumn.columnName,
        ColumnAlias: dataColumn.columnAlias,
        ColumnFriendlyName: dataColumn.columnName,
        DisplayType: dataColumn.displayType
      };
    };

    Viewer.prototype.ReportingColumnInfoToGoFormDataColumn = function ReportingColumnInfoToGoFormDataColumn(rci) {
      return {
        id: rci.ColumnID,
        name: rci.ColumnName,
        editable: rci.Editable,
        displayType: rci.DisplayType,
        listId: null,
        tableName: rci.TableName,
        columnName: rci.ColumnName,
        dataIdColumn: null,
        dataId: null,
        value: null,
        repeaterIndex: null,
        listOptions: []
      };
    };

    Viewer.prototype.populateElementsWithGoFormPreference = function populateElementsWithGoFormPreference(itemsToPopulate, pref) {
      var self = this;

      var jsonItems = JSON.parse(pref.Json);

      for (var d = 0; d < jsonItems.length; d++) {
        var dObj = jsonItems[d];

        var itmToPopulate = _.find(itemsToPopulate, function (i) {
          return i.id == dObj.itemId;
        });
        if (itmToPopulate) {
          itmToPopulate.value = dObj.value;
        }
      }
    };

    Viewer.prototype.populateElementsWithPreferenceData = function populateElementsWithPreferenceData(pref) {
      var self = this;
      for (var d = 0; d < pref.length; d++) {
        var dObj = pref[d];

        var itmToPopulate = _.find(self.itemsToPopulate, function (i) {
          return i.id == dObj.itemId;
        });
        if (itmToPopulate) {
          itmToPopulate.value = dObj.value;
        }
      }
    };

    Viewer.prototype.populateElementsWithReportData = function populateElementsWithReportData(data, page, dataPages) {
      var self = this;

      var tMyTableObject = null;

      self.mappedDataRows = [];

      var totalRowHeight = 0;

      var currentTableY = _.find(page.items, function (t) {
        return t.name == 'table';
      });
      currentTableY = currentTableY.y;

      for (var d = 0; d < data.length; d++) {
        var dObj = data[d];

        var itmToPopulate;

        var rowArray = Object.entries(dObj).map(function (pair) {
          return Object.fromEntries([pair]);
        });

        var mapRows = _.map(rowArray, function rob(i) {
          return {
            tableName: Object.keys(i)[0].split('@')[0],
            columnName: Object.keys(i)[0].split('@')[1],
            value: Object.values(i)[0]
          };
        });

        mapRows = _.filter(mapRows, function (m) {
          return m.columnName != null;
        });
        self.mappedDataRows.push(mapRows);

        if (tMyTableObject == null) {
          var tableData = _.find(page.items, function (i) {
            return i.toolType == 'MYTABLE';
          });
          tMyTableObject = tableData.table;
        }

        if (totalRowHeight + currentTableY + 51 * 2 > self.pageHeight) {
          var newPage = self.clonePageData(page);

          dataPages.push(newPage);

          var tTableData = _.find(newPage.items, function (t) {
            return t.toolType == 'MYTABLE';
          });

          tMyTableObject = tTableData.table;

          totalRowHeight = 0;

          self.addRepeatableRowWithTableAndReportDataRowNew(tMyTableObject, mapRows);
          totalRowHeight += 51;
        } else {
          self.addRepeatableRowWithTableAndReportDataRowNew(tMyTableObject, mapRows);
          totalRowHeight += 51;
        }
      }
    };

    Viewer.prototype.clonePageData = function clonePageData(pageData) {
      var newPageId = pageData.id.replace("p", "");
      newPageId = parseInt(newPageId);
      newPageId += 1;

      var orderedItems = _.orderBy(pageData.items, "id", "desc");
      var newItmId = orderedItems[0].id;
      newItmId += 1;

      var newPage = {
        id: "p" + newPageId,
        items: []
      };

      for (var i = 0; i < pageData.items.length; i++) {
        var aItm = pageData.items[i];

        var newItm = this.formhelper.getNewItem(newItmId, aItm.name, aItm.x, aItm.y, aItm.width, aItm.height, aItm.toolType);
        newItm.disabled = aItm.disabled;
        newItm.editMode = aItm.editMode;
        newItm.selected = aItm.selected;
        newItm.showToolbar = aItm.showToolbar;
        newItm.addBoxClass = aItm.addBoxClass;
        newItm.html = aItm.html;

        if (aItm.toolType == 'MYTABLE') {

          var myTable = this.copyMyTableObject(aItm.table);
          newItm.table = myTable;
        }

        newPage.items.push(newItm);

        newItmId += 1;
      }

      return newPage;
    };

    Viewer.prototype.copyMyTableObjectFirstTwoRows = function copyMyTableObjectFirstTwoRows(table) {

      var newTable = this.formhelper.getNewTable();

      newTable.data = table.data;
      newTable.displayHeaders = table.displayHeaders;
      newTable.editMode = table.editMode;
      newTable.isRepeater = table.isRepeater;
      newTable.style = table.style;

      for (var r = 0; r < 2; r++) {
        var rCopy = this.copyTableRow(table.rows[r]);
        newTable.rows.push(rCopy);
      }
      return newTable;
    };

    Viewer.prototype.copyMyTableObject = function copyMyTableObject(table) {

      var newTable = this.formhelper.getNewTable();

      newTable.data = table.data;
      newTable.displayHeaders = table.displayHeaders;
      newTable.editMode = table.editMode;
      newTable.isRepeater = table.isRepeater;
      newTable.style = table.style;

      for (var r = 0; r < 1; r++) {
        var rCopy = this.copyTableRow(table.rows[r]);
        newTable.rows.push(rCopy);
      }
      return newTable;
    };

    Viewer.prototype.populateElementsWithData = function populateElementsWithData(data) {
      var self = this;
      for (var d = 0; d < data.length; d++) {
        var dObj = data[d];

        var itmToPopulate;

        if (!dObj.IsCustomValue) {
          itmToPopulate = _.filter(self.itemsToPopulate, function (i) {
            return i.dataColumn && i.dataColumn.id === dObj.ColumnID && i.dataColumn.tableName != "OD_GO_Forms_Custom_Values_Instance";
          });
        } else {
          itmToPopulate = _.filter(self.itemsToPopulate, function (i) {
            return i.dataColumn && i.dataColumn.id === dObj.ColumnID && i.dataColumn.tableName == "OD_GO_Forms_Custom_Values_Instance";
          });
        }

        for (var i = 0; i < itmToPopulate.length; i++) {
          var noData = dObj.Value.indexOf('NODATA');

          if (noData == -1) {
            if (itmToPopulate[i].parentTable && dObj.RepeaterIndex != null) {
              self.addRepeatableRowWithItemAndDataObject(itmToPopulate[i], dObj);
            } else {
              itmToPopulate[i].value = dObj.Value;
              itmToPopulate[i].dataColumn.value = dObj.Value;
              itmToPopulate[i].dataColumn.dataId = dObj.DataID;
              itmToPopulate[i].dataColumn.dataIdColumn = dObj.DataIdColumn;
            }
          }
        }
      }
    };

    Viewer.prototype.addRepeatableRowWithItemAndDataObject = function addRepeatableRowWithItemAndDataObject(item, dataObject) {
      var rowToUpdate = item.parentTable.getRow(dataObject.RepeaterIndex);
      if (rowToUpdate) {
        var existingItem = this.findCellItemWithRowAndDataId(rowToUpdate, dataObject.ColumnID);
        existingItem.value = dataObject.Value;
        existingItem.dataColumn.value = dataObject.Value;
        existingItem.dataColumn.dataId = dataObject.DataID;
        existingItem.dataColumn.dataIdColumn = dataObject.DataIdColumn;
      } else {
        var rClone = item.parentTable.getRow(dataObject.RepeaterIndex - 1);
        rClone = rClone.cloneRow();

        item.parentTable.addRow(rClone);

        var itemToUpdate = this.findCellItemWithRowAndDataId(rClone, dataObject.ColumnID);
        itemToUpdate.value = dataObject.Value;
        itemToUpdate.dataColumn.value = dataObject.Value;
        itemToUpdate.dataColumn.dataId = dataObject.DataID;
        itemToUpdate.dataColumn.dataIdColumn = dataObject.DataIdColumn;
      }
    };

    Viewer.prototype.addRepeatableRowWithTableAndReportDataRow = function addRepeatableRowWithTableAndReportDataRow(table, rowArray) {
      var rClone = table.getRow(1);

      rClone = this.copyTableRow(rClone);

      for (var i = 0; i < rowArray.length; i++) {
        var itemToUpdate = this.findCellItemWithRowTableNameAndColumnName(rClone, rowArray[i].tableName, rowArray[i].columnName);
        itemToUpdate.value = rowArray[i].value;
        itemToUpdate.dataColumn.value = rowArray[i].value;

        itemToUpdate.style = 'Border: none;';
      }

      table.addRow(rClone);
    };

    Viewer.prototype.addRepeatableRowWithTableAndReportDataRowNew = function addRepeatableRowWithTableAndReportDataRowNew(table, rowArray) {

      var rClone = table.getRow(0);

      rClone = this.copyTableRow(rClone);

      for (var i = 0; i < rowArray.length; i++) {
        var itemToUpdate = rClone.cells[i].item;

        itemToUpdate.html = rowArray[i].value;

        itemToUpdate.style = 'Border: none;';
      }

      table.addRow(rClone);
    };

    Viewer.prototype.copyTableRow = function copyTableRow(row) {
      var nRow = this.formhelper.getNewTableRow();
      nRow.display = true;
      nRow.selected = false;
      for (var c = 0; c < row.cells.length; c++) {
        var cId = self.form.getUniqueTableCellId();
        var aCell = this.formhelper.getNewTableCell(cId);
        aCell.colspan = row.cells[c].colspan;
        aCell.index = row.cells[c].index;
        aCell.isHeader = row.cells[c].isHeader;
        aCell.selected = false;
        aCell.styleAsString = row.cells[c].styleAsString;
        var aItem = this.formhelper.getNewItem(this.formhelper.generateItemIdWithForm(this.form), null, 0, 0, 'auto', 'auto', 'STATICTEXT');
        aItem.disabled = true;
        aItem.editMode = false;
        aItem.selected = false;
        aItem.showToolbar = false;
        aItem.addBoxClass = false;
        if (row.cells[c].item) {
          aItem.html = row.cells[c].item.html;
        }

        aCell.item = aItem;
        nRow.cells.push(aCell);
      }
      return nRow;
    };

    Viewer.prototype.findCellItemWithRowAndDataId = function findCellItemWithRowAndDataId(row, dataId) {
      for (var c = 0; c < row.cells.length; c++) {
        var aCell = row.cells[c];
        if (aCell.item && aCell.item.dataColumn && aCell.item.dataColumn.id == dataId) {
          return aCell.item;
        }
      }
      return null;
    };

    Viewer.prototype.findCellItemWithRowTableNameAndColumnName = function findCellItemWithRowTableNameAndColumnName(row, tableName, columnName) {
      for (var c = 0; c < row.cells.length; c++) {
        var aCell = row.cells[c];
        if (aCell.item && aCell.item.dataColumn && aCell.item.dataColumn.tableName == tableName && aCell.item.dataColumn.columnAlias == columnName) {
          return aCell.item;
        }
      }
      return null;
    };

    Viewer.prototype.doesPdfExist = function doesPdfExist(patientId, date, docType, filename, callback) {
      var self = this;
      var url = 'document?patientId=' + patientId + '&date=' + date + '&docType=' + docType + '&filename=' + filename;
      self.data.getWithUrl(url, function (res) {
        callback(res);
      });
    };

    Viewer.prototype.exportPdfToPatientHistory = function exportPdfToPatientHistory() {
      var self = this;

      var todaysDate = (0, _moment2.default)().format('MM-DD-YYYY');

      var saveDescription = 'Saving ' + self.form.name + '...';
      var saveDialog = self.helper.createNoty(saveDescription, 3000, 'topLeft');
      saveDialog.show();

      var imageBytes = [];
      var pages = document.getElementsByClassName("page-container");
      var pagesToConvert = pages.length;
      for (var p = 0; p < pages.length; p++) {
        var pageContent = pages[p].children[1];

        (0, _html2canvas2.default)(pageContent).then(function (canvas) {
          var base64image = canvas.toDataURL("image/png");
          var split = base64image.split(',');
          imageBytes.push(split[1]);
          if (imageBytes.length == pagesToConvert) {
            var imagesToPdf = {
              'PatientId': self.patientId,
              'ProviderId': self.providerId,
              'Date': todaysDate,
              'UserId': self.helper._user.UserID,
              'DocumentName': self.form.name,
              'ImageBytes': imageBytes,
              'GoFormId': self.form.id };
            var url = 'pdf/from/images';

            self.data.postWithUrlAndData(url, JSON.stringify(imagesToPdf), function (doc, err) {

              if (err) {
                self.helper.notyError(saveDialog, self.form.name + ' failed to save!');
              } else {
                self.helper.notySuccess(saveDialog, self.form.name + ' saved!');

                window.top.postMessage('goFormSubmitted', '*');

                self.ea.publish('goFormPdfSaved', doc);
              }
            });
          }
        });
      }
    };

    Viewer.prototype.saveAsGoForm = function saveAsGoForm(callback) {
      var self = this;

      var saveDescription = 'Saving ' + self.form.name + '...';
      var saveDialog = self.helper.createNoty(saveDescription, 3000);
      saveDialog.show();

      var itemsToSave = [];
      for (var p = 0; p < self.form.pages.length; p++) {
        var aPage = self.form.pages[p];
        for (var i = 0; i < aPage.items.length; i++) {
          var aItm = aPage.items[i];

          if (aItm.table) {
            for (var r = 0; r < aItm.table.rows.length; r++) {
              var aRow = aItm.table.rows[r];
              for (var c = 0; c < aRow.cells.length; c++) {
                var aCell = aRow.cells[c];
                if (aCell.item && aCell.item.dataColumn && aCell.item.dataColumn.columnName && aCell.item.dataColumn.editable) {
                  var cellItmToSave = aCell.item;
                  cellItmToSave.dataColumn.value = aCell.item.value;

                  if (aItm.table.isRepeater) {
                    if (aItm.table.displayHeaders) {
                      if (r != 0) {
                        cellItmToSave.dataColumn.repeaterIndex = r;
                      }
                    } else {
                      cellItmToSave.dataColumn.repeaterIndex = r;
                    }
                  }

                  cellItmToSave.dataColumn.listOptions = [];

                  if (self.fromPrevious) {
                    cellItmToSave.dataColumn.dataId = null;
                  }

                  itemsToSave.push(cellItmToSave.dataColumn);
                }
              }
            }
          } else if (aItm.dataColumn && aItm.dataColumn.columnName && aItm.dataColumn.editable) {

            var dataCol = null;

            if (aItm.dataColumn.data && aItm.dataColumn.data.hasOwnProperty("ColumnID")) {
              dataCol = self.ReportingColumnInfoToGoFormDataColumn(aItm.dataColumn.data);
            } else {
              dataCol = aItm.dataColumn;
            }

            dataCol.value = aItm.value;

            if (self.fromPrevious) {
              cellItmToSave.dataColumn.dataId = null;
            } else {
              dataCol.dataId = aItm.dataColumn.dataId;
            }

            dataCol.dataIdColumn = aItm.dataColumn.dataIdColumn;
            dataCol.listId = aItm.dataColumn.listId;

            itemsToSave.push(dataCol);
          }
        }
      }

      var save = {
        'PatientId': self.patientId,
        'ProviderId': self.fromPreviousNewProviderId ? self.fromPreviousNewProviderId : self.providerId,
        'Date': self.date,
        'Items': itemsToSave,
        'InstanceId': self.fromPrevious ? null : self.instanceId,
        'FormId': self.formId,
        'UserId': self.helper._user.UserID
      };
      var url = 'goforms/instance';

      self.data.putWithUrlAndData(url, save, function (res) {
        if (!res) {
          self.helper.notyError(saveDialog, self.form.name + ' failed to save!');
        } else {
          self.helper.notySuccess(saveDialog, self.form.name + ' saved!');
          self.instanceId = res.Id;

          self.ea.publish('goFormSaved', res);
        }
        if (callback) {
          callback(res);
        }
      });
    };

    Viewer.prototype.save = function save() {
      var self = this;
      if (self.form && self.form.type != 'GO') {
        self.exportPdfToPatientHistory();
      } else {
        self.saveAsGoForm();
      }
    };

    Viewer.prototype.showMigrateAssistant = function showMigrateAssistant() {
      var self = this;


      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.dialogService.open({ viewModel: PreferenceMigrationDialog,
        model: { popupWidth: windowWidth, popupHeight: windowHeight, providerId: self.providerId } }).then(function (openDialogResult) {
        return openDialogResult.closeResult;
      }).then(function (response) {
        var res = response.output;
        if (res != null) {}
      });
    };

    return Viewer;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'formId', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'selectedPreference', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  })), _class2)) || _class);
});;
define('text!formbuilder/viewer.html',[],function(){return "<template><require from=\"./container\"></require><require from=\"./tools/text-toolbar\"></require><style>.page-selected{border:1px dashed #007bff}.point-three-border{border:1px solid rgba(0,0,0,.3)}.btn-outline-primary:active,.btn-outline-primary:focus{box-shadow:none!important;outline:0!important}.btn-outline-primary:hover{color:#fff;background-color:#007bff!important;border-color:#007bff}.marquee-selected{color:#fff;background-color:#007bff!important}.submit-button{cursor:pointer;position:fixed;z-index:1000;top:16px;right:16px}.submit-button-parent-toolbar{float:right;margin-right:10px;right:10px;top:10px;position:sticky}.preference-toolbar{float:right;margin-right:10px;right:10px;top:10px;position:sticky}textarea{min-height:unset!important}.no-lr-margin{margin-left:0!important;margin-right:0!important}.no-lr-padding{padding-left:0!important;padding-right:0!important}</style><div ref=\"viewerHeader\" class=\"row ${fullWidth ? 'no-lr-margin': ''}\" style=\"background-color:#e8e8e8;overflow-y:auto\" css=\"height: ${scrollHeight}px;\"><div class=\"col-md-12 ml-auto ${fullWidth ? 'no-lr-padding' : ''}\" style=\"padding-top:1rem\"><div class=\"d-flex align-items-center preference-toolbar\"><div if.bind=\"showPreferenceToolbar\" class=\"input-group\"><select class=\"custom-select\" value.bind=\"selectedPreference\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"p of preferences\" model.bind=\"p\">${p.Description}</option></select><div if.bind=\"showPreferenceToolbarSave\" class=\"input-group-append\"><button type=\"button\" class=\"btn btn-primary\" disabled.bind=\"!selectedPreference\" click.delegate=\"savePreference()\"><i class=\"fa fa-floppy-o\" aria-hidden=\"true\"></i></button> <button type=\"button\" class=\"btn btn-primary dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-expanded=\"false\"><span class=\"sr-only\">Toggle Dropdown</span></button><div class=\"dropdown-menu\"><a class=\"dropdown-item ${!selectedPreference ? 'disabled' : ''}\" href=\"#\" click.delegate=\"saveAsPreference()\"><i class=\"fa fa-floppy-o mr-1\" aria-hidden=\"true\"></i> Save As</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"newPreference()\"><i class=\"fa fa-plus mr-1\" aria-hidden=\"true\"></i> New</a></div></div></div><button if.bind=\"showSubmit\" type=\"button\" class=\"btn btn-primary ml-2\" disabled.bind=\"!isComplete\" click.delegate=\"save()\">Submit</button><div if.bind=\"showReportToolbar\" class=\"input-group\"><button type=\"button\" class=\"btn btn-outline-primary mr-1\" click.delegate=\"exportReportToExcel()\"><i class=\"fa fa-file-excel-o\" aria-hidden=\"true\"></i></button> <button type=\"button\" class=\"btn btn-outline-primary mr-1\" click.delegate=\"printReport()\"><i class=\"fa fa-print\" aria-hidden=\"true\"></i></button></div></div><template repeat.for=\"p of form.pages\"><div class=\"w-100 d-flex page\" id.bind=\"p.id\"><container id=\"mainContainer\" ref=\"mycontainer\" items.bind=\"p.items\" edit.bind=\"false\" fullwidth.bind=\"fullWidth\" class=\"ml-auto mr-auto mb-3 page-container ${fullWidth ? 'no-lr-margin' : '' }\" css=\"height:${pageHeight}px; width:${pageWidth}px;\" style=\"display:block\"></container></div></template><div class=\"d-flex align-items-center\"><button if.bind=\"showSubmit\" type=\"button\" class=\"btn btn-primary ml-auto mr-2 mb-2\" disabled.bind=\"!isComplete\" click.delegate=\"save()\">Submit</button></div></div></div></template>";});;
define('fs',[],function(){});;
define('go/alertPopup',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AlertPopup = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var AlertPopup = exports.AlertPopup = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
    function AlertPopup(DialogController, http, helper) {
      _classCallCheck(this, AlertPopup);

      this.popupTop = 0;
      this.popupLeft = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.alerts = [];

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
    }

    AlertPopup.prototype.activate = function activate(obj) {
      var self = this;

      self.alerts = obj.alerts;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.popupWidth = windowWidth / 2;
      self.popupHeight = windowHeight / 2;
      self.popupTop = windowHeight / 4;
      self.popupLeft = windowWidth / 4;
    };

    AlertPopup.prototype.attached = function attached() {

      var res = $(this.alertpop).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");

      this.scrollHeight = this.popupHeight - this.alerthead.clientHeight;
    };

    AlertPopup.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    return AlertPopup;
  }()) || _class);
});;
define('text!go/alertPopup.html',[],function(){return "<template><style>.dialog-header-content{display:flex!important}</style><ux-dialog ref=\"alertpop\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header ref=\"alerthead\"><h4 style=\"display:inline-block;margin-bottom:0\"><i class=\"fa fa-bell mr-2\"></i>Alerts</h4><i class=\"fa fa-times fa-2x ml-auto mr-2\" style=\"cursor:pointer\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body css=\"height:${scrollHeight}px;\" style=\"overflow-y:scroll\"><div repeat.for=\"a of alerts\" class=\"row\"><div class=\"col-md-12\"><div class=\"card text-dark bg-warning mb-3\"><div class=\"card-body\"><h5 class=\"card-title\"><i class=\"fa fa-bell-o mr-2\"></i>${a.Alert.Description}</h5><p class=\"card-text\">${a.Alert.AlertText}</p></div></div></div></div></ux-dialog-body></ux-dialog></template>";});;
define('go/appendOverwritePopup',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AppendOverwritePopup = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var AppendOverwritePopup = exports.AppendOverwritePopup = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
    function AppendOverwritePopup(DialogController, http, helper) {
      _classCallCheck(this, AppendOverwritePopup);

      this.popupTop = 0;
      this.popupLeft = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
    }

    AppendOverwritePopup.prototype.activate = function activate(obj) {
      var self = this;
      self.headerText = obj.headerText;
      self.bodyText = obj.bodyText;
      self.popupWidth = obj.popupWidth / 3;
      self.popupHeight = obj.popupHeight / 4;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;
    };

    AppendOverwritePopup.prototype.append = function append() {
      var self = this;
      self.dialogController.close(true, { result: "append" });
    };

    AppendOverwritePopup.prototype.overwrite = function overwrite() {
      var self = this;
      self.dialogController.close(true, { result: "overwrite" });
    };

    AppendOverwritePopup.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    return AppendOverwritePopup;
  }()) || _class);
});;
define('text!go/appendOverwritePopup.html',[],function(){return "<template><ux-dialog css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\">${headerText}</h4><i class=\"fa fa-times fa-2x float-right\" style=\"cursor:pointer\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body><div class=\"row\"><div class=\"col-auto\"><h5>${bodyText}</h5></div></div><div class=\"row\"><div class=\"col-auto\"><button type=\"button\" class=\"btn btn-outline-primary\" click.delegate=\"append()\">Append</button> <button type=\"button\" class=\"btn btn-outline-primary\" click.delegate=\"overwrite()\">Overwrite</button></div></div></ux-dialog-body></ux-dialog></template>";});;
define('go/block',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'lodash', 'moment', 'aurelia-dialog', 'aurelia-router', './globals', './home', 'aurelia-event-aggregator'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _aureliaDialog, _aureliaRouter, _globals, _home, _aureliaEventAggregator) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Block = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var Block = exports.Block = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _aureliaDialog.DialogService, _aureliaRouter.Router, _globals.Globals, _home.Home, _aureliaEventAggregator.EventAggregator), _dec(_class = function () {
    function Block(helper, http, DialogService, Router, Globals, Home, EventAggregator) {
      _classCallCheck(this, Block);

      this.sizeList = ["1", "2", "3", "4"];
      this.heightList = ["2", "4", "6", "8"];
      this.data = null;
      this.showResizeButton = false;
      this.originalHeight = null;
      this.isResized = false;
      this.locked = false;

      this.helper = helper;
      this.http = http;
      this.dialogService = DialogService;
      this.router = Router;
      this.globals = Globals;
      this.home = Home;
      this.eventAggregator = EventAggregator;
    }

    Block.prototype.activate = function activate(params) {
      var self = this;
      self.data = params;
      self.showResizeButton = self.data.showResizeButton;
      self.originalHeightMult = self.data.heightMult;
      self.originalWidthMult = self.data.widthMult;

      if (self.home.currentBoard.visitInfo == null) {
        self.locked = false;
      } else if (self.home.currentBoard.visitInfo.locked == 0) {
        self.locked = false;
      } else {
        self.locked = true;
      }

      self.eventAggregator.subscribe('resetBlockSize', function () {
        self.isResized = false;
        self.eventAggregator.publish('blockresized');
      });
    };

    Block.prototype.toggleResize = function toggleResize() {
      this.isResized = this.isResized ? false : true;

      var tempWidth = this.isResized ? 4 : this.originalWidthMult;
      var tempHeight = this.isResized ? 2 : this.originalHeightMult;

      if (this.originalHeight == null) {
        this.originalHeight = this.data.element.style.height;
      }

      if (this.isResized) {
        this.data.element.style.height = '';
      } else {
        this.data.element.style.height = this.originalHeight;
      }

      if (this.isResized) {
        this.setWidthHeightWithLayout(tempWidth, tempHeight);
      } else {
        this.setWidth(tempWidth);
        this.home.currentBoard.displayBlockLayout();
      }

      this.eventAggregator.publish('blockresized');
    };

    Block.prototype.attached = function attached() {
      this.data.element = this.blockelement;
      this.setWidth(this.data.widthMult);
      this.setHeight(this.data.heightMult);
    };

    Block.prototype.setWidthHeightWithLayout = function setWidthHeightWithLayout(width, height) {

      this.setWidth(width);
      this.setHeight(height);
      this.globals.packery.fit(this.data.element);

      this.home.currentBoard.hasChanged = true;
    };

    Block.prototype.setWidthWithLayout = function setWidthWithLayout(mult) {
      this.setWidth(mult);
      this.globals.packery.layout();
      this.home.currentBoard.hasChanged = true;
    };

    Block.prototype.setHeightWithLayout = function setHeightWithLayout(mult) {
      this.setHeight(mult);
      this.globals.packery.layout();
      this.home.currentBoard.hasChanged = true;
    };

    Block.prototype.setWidth = function setWidth(mult) {
      this.data.widthMult = mult;

      this.selectedWidth = mult;

      var width = mult * 25;

      $(this.blockelement).removeClass([this.data.widthCls, 'pack-w25']);

      this.data.widthCls = 'pack-w' + width;

      $(this.blockelement).addClass(this.data.widthCls);
    };

    Block.prototype.setHeight = function setHeight(mult) {

      this.data.heightMult = mult;

      this.selectedHeight = mult;

      $(this.blockelement).removeClass(this.data.heightCls);

      var tHeightClass = this.getHeightClassWithPercentage(12.5, mult);
      this.data.heightCls = tHeightClass;

      $(this.blockelement).addClass(this.data.heightCls);
    };

    Block.prototype.getHeightClassWithPercentage = function getHeightClassWithPercentage(percent, multiplier) {
      var height = percent * multiplier;
      var isDecimal = height % 1;
      if (isDecimal == 0) {
        return 'pack-h' + height;
      } else {
        return 'pack-h' + Math.floor(height) + "-5";
      }
    };

    Block.prototype.getHeightPercentage = function getHeightPercentage() {
      var self = this;
      var twentyfive = _.find(self.home.currentBoard.blocks, function (b) {
        return b.heightMult > 4;
      });
      return twentyfive ? 12.5 : 25;
    };

    Block.prototype.deleteBlock = function deleteBlock() {
      this.home.currentBoard.deleteBlock(this.data.id);
      this.home.currentBoard.removeDraggable(this.data.id);
      this.home.currentBoard.removePosition(this.data.id);
      this.globals.packery.remove(this.blockelement);
      this.globals.packery.shiftLayout();

      this.home.currentBoard.hasChanged = true;
    };

    Block.prototype.editBoard = function editBoard() {
      this.home.currentBoard.toggleEditing();
    };

    return Block;
  }()) || _class);
});;
define('text!go/block.html',[],function(){return "<template><require from=\"./blockCustomAttribute\"></require><style>.btn:focus{box-shadow:none}</style><div block-custom ref=\"blockelement\" class=\"block pack-w25 pack-h25\" data-id=\"${data.id}\"><div class=\"card\" style=\"height:100%;box-shadow:5px 5px 4px rgba(0,0,0,.25)\"><div if.bind=\"!data.editing\" class=\"dropdown block-button mr-1 mt-0\"><button class=\"btn\" type=\"button\" id=\"dropdownTools\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-ellipsis-h fa-2x\" style=\"color:#d3d3d3\"></i></button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"toggleResize()\"><i class=\"fa fa-expand fa-2x\"></i> Expand </a><a class=\"dropdown-item\" href=\"#\" click.delegate=\"editBoard()\"><i class=\"fa fa-pencil-square-o fa-2x\"></i> Edit</a></div></div><div if.bind=\"data.editing\" class=\"position-absolute w-100 h-100\" style=\"background-color:rgba(255,255,255,.85);z-index:1!important\"><div class=\"row h-100 d-flex justify-content-center\"><div class=\"col-sm-6 my-auto\"><div class=\"btn-toolbar mb-3\" role=\"toolbar\"><div class=\"input-group mr-1\"><div class=\"input-group-prepend\"><span class=\"input-group-text\"><i class=\"fa fa-arrows-h\" aria-hidden=\"true\"></i></span></div><select class=\"custom-select\" value.bind=\"data.widthMult\" change.delegate=\"setWidthWithLayout(data.widthMult)\"><option repeat.for=\"w of sizeList\" model.bind=\"w\">${w}</option></select></div><div class=\"input-group mr-1\"><div class=\"input-group-prepend\"><span class=\"input-group-text\"><i class=\"fa fa-arrows-v\" aria-hidden=\"true\"></i></span></div><select class=\"custom-select\" value.bind=\"data.heightMult\" change.delegate=\"setHeightWithLayout(data.heightMult)\"><option repeat.for=\"h of heightList\" model.bind=\"h\">${h}</option></select></div><button type=\"button\" class=\"btn btn-danger btn-sm\" click.delegate=\"deleteBlock()\"><i class=\"fa fa-trash\" aria-hidden=\"true\"></i></button></div></div></div></div><compose view-model=\"./blocks/${data.blockType}\" model.bind=\"data\" containerless></compose></div></div></template>";});;
define('go/blockCustomAttribute',['exports', 'aurelia-framework', './home', 'draggabilly', './globals', 'aurelia-event-aggregator'], function (exports, _aureliaFramework, _home, _draggabilly, _globals, _aureliaEventAggregator) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BlockCustomAttribute = undefined;

  var _draggabilly2 = _interopRequireDefault(_draggabilly);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _dec2, _class;

  var BlockCustomAttribute = exports.BlockCustomAttribute = (_dec = (0, _aureliaFramework.customAttribute)('block-custom'), _dec2 = (0, _aureliaFramework.inject)(_home.Home, _globals.Globals, _aureliaEventAggregator.EventAggregator), _dec(_class = _dec2(_class = function () {
    function BlockCustomAttribute(Home, Globals, EventAggregator) {
      _classCallCheck(this, BlockCustomAttribute);

      this.editing = false;

      this.home = Home;
      this.globals = Globals;
      this.events = EventAggregator;
    }

    BlockCustomAttribute.prototype.bind = function bind(bindingContext, overridingContext) {

      var self = this;

      self.id = bindingContext.data.id;

      var blockEl = bindingContext.blockelement;

      var draggie = new _draggabilly2.default(blockEl);

      draggie.on('dragEnd', function (event, pointer) {
        self._stopScroll();
      });

      draggie.on('dragMove', function (event, pointer) {
        self.doScroll(event);
      });

      self.globals.packery.bindDraggabillyEvents(draggie);

      self.editing = bindingContext.data.editing;
      var drag = self.editing ? 'enable' : 'disable';
      draggie[drag]();

      self.home.currentBoard.addDraggable(draggie);
    };

    BlockCustomAttribute.prototype.attached = function attached() {
      var self = this;

      self.scrollContainer = document.getElementById("scrollcontainer");

      if (self.home.currentBoard.draggies.length == self.home.currentBoard.blocks.length) {

        var els = document.getElementsByClassName('block');
        if (els.length != self.home.currentBoard.draggies.length) return;

        var pos = self.home.currentBoard.getPositions();
        if (pos.length > 0) {
          self.globals.packery.addItems(els);
          self.globals.packery.initShiftLayout(pos, 'data-id');

          var pins = document.getElementsByClassName('pinned');
          self.globals.packery.stamp(pins);

          for (var e = 0; e < els.length; e++) {
            var eHeight = window.getComputedStyle(els[e]).height;
            els[e].style.height = !self.editing ? eHeight : "";
          }
        } else {
          self.globals.packery.appended(els);
          self.globals.packery.layout();
        }
      }
    };

    BlockCustomAttribute.prototype.findPackerItemWithId = function findPackerItemWithId(id) {
      var self = this;
      var items = self.globals.packery.items;
      for (var i = 0; i < items.length; i++) {
        var aItem = items[i];
        if (aItem.element.dataset.id == id) {
          return aItem;
        }
      }
      return null;
    };

    BlockCustomAttribute.prototype.doScroll = function doScroll(e) {
      var _this = this;

      console.log("PageY: " + e.pageY + ", WinInnerHeight: " + window.innerHeight + ", WinScrollY: " + window.scrollY);

      if (e) {
        this._pageYPosition = e.pageY;
      }

      if (this._pageYPosition > window.innerHeight + window.scrollY - 50) {
        if (!this._scrollTimer) {
          this._scrollTimer = setTimeout(function () {

            _this.scrollContainer.scrollTop += 5;

            _this._pageYPosition += 5;
            _this._scrollTimer = null;
            _this._startStopScroll();
          }, 25);
        }
      } else if (this._pageYPosition < window.scrollY + 50) {
        if (!this._scrollTimer) {
          this._scrollTimer = setTimeout(function () {

            _this.scrollContainer.scrollTop -= 5;

            _this._pageYPosition -= 5;
            _this._scrollTimer = null;
            _this._startStopScroll();
          }, 25);
        }
      } else {
        if (this._scrollTimer) {
          clearTimeout(this._scrollTimer);
          this._scrollTimer = null;
        }
      }
    };

    BlockCustomAttribute.prototype._startStopScroll = function _startStopScroll(e) {
      var _this2 = this;

      if (e) {
        this._pageYPosition = e.pageY;
      }

      if (this._pageYPosition > window.innerHeight + window.scrollY - 50) {
        if (!this._scrollTimer) {
          this._scrollTimer = setTimeout(function () {

            _this2.scrollContainer.scrollTop += 5;

            _this2._pageYPosition += 5;
            _this2._scrollTimer = null;
            _this2._startStopScroll();
          }, 25);
        }
      } else if (this._pageYPosition < window.scrollY + 50) {
        if (!this._scrollTimer) {
          this._scrollTimer = setTimeout(function () {

            _this2.scrollContainer.scrollTop -= 5;

            _this2._pageYPosition -= 5;
            _this2._scrollTimer = null;
            _this2._startStopScroll();
          }, 25);
        }
      } else {
        if (this._scrollTimer) {
          clearTimeout(this._scrollTimer);
          this._scrollTimer = null;
        }
      }
    };

    BlockCustomAttribute.prototype._stopScroll = function _stopScroll() {
      clearTimeout(this._scrollTimer);
      this._scrollTimer = null;
    };

    return BlockCustomAttribute;
  }()) || _class) || _class);
});;
define('go/blocks/caseManager',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', 'moment', '../home', '../popupHelper', '../../data/go/data', 'lodash'], function (exports, _helper, _http, _aureliaFramework, _moment, _home, _popupHelper, _data, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CaseManager = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var CaseRow = function CaseRow(data) {
    _classCallCheck(this, CaseRow);

    this.bodypart = "";
    this.data = data;
    this.caseDate = (0, _moment2.default)(data.CaseDate).format('MM/DD/YYYY');
    this.injuryDate = (0, _moment2.default)(data.DateInjury).format('MM/DD/YYYY');
    if (data.CaseBodySide) {
      this.bodypart = data.CaseBodySide;
    }
    if (data.CaseBodyPart) {
      this.bodypart += " " + data.CaseBodyPart;
    }
    this.providerName = "";
  };

  var CaseManager = exports.CaseManager = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _home.Home, _data.Data, _popupHelper.PopupHelper), _dec(_class = function () {
    function CaseManager(helper, http, Home, Data, PopupHelper) {
      _classCallCheck(this, CaseManager);

      this.rows = [];
      this.providers = [];
      this.board = null;
      this.locked = false;

      this.helper = helper;
      this.http = http;
      this.home = Home;
      this.goData = Data;
      this.popupHelper = PopupHelper;
    }

    CaseManager.prototype.activate = function activate() {
      var self = this;

      if (self.home.currentBoard != null && self.home.currentBoard.patientId != null) {
        self.patientId = self.home.currentBoard.patientId;
        self.bodypart = self.home.currentBoard.visitInfo.bodypart;
        self.bodyparts = self.home.currentBoard.visitInfo.bodyparts;
        self.providerId = self.home.currentBoard.visitInfo.providerId;
        self.locked = self.home.currentBoard.visitInfo.locked == 0 ? false : true;

        self.load();
      }
    };

    CaseManager.prototype.attached = function attached() {};

    CaseManager.prototype.openCasePop = function openCasePop(caseData) {

      var self = this;
      var path = './caseManagerPop';
      var windowHeight = window.innerHeight - 100;
      var windowWidth = window.innerWidth;

      var quarter = windowWidth / 4;
      var width = windowWidth / 2;
      var left = quarter;

      var height = windowHeight / 2;
      var qHeight = windowHeight / 4;
      var top = qHeight;

      var options = {
        displayHeader: false,
        bodyPadding: 0,
        scrollHeight: 522
      };

      var header = 'Case Info';

      var model = {
        data: caseData,
        providers: self.providers
      };

      self.popupHelper.openViewModelPop(path, model, header, width, height, top, left, options, function (authRes) {
        self.save(authRes);
      });
    };

    CaseManager.prototype.addAuth = function addAuth() {
      var self = this;
      self.goData.getWithUrl('caseinfo/new', function (res) {
        if (self.bodyparts.length > 0) {
          res.CaseBodyPart = self.bodyparts[0].part;
          res.CaseBodySide = self.bodyparts[0].side;
        }

        res.ProviderID = self.providerId;

        self.openCasePop(res);
      });
    };

    CaseManager.prototype.edit = function edit(row) {
      var self = this;
      self.openCasePop(row.data);
    };

    CaseManager.prototype.load = function load() {
      var self = this;
      self.rows = [];

      self.goData.getProviders(false, function (res) {
        self.providers = res;

        var url = 'caseinfo/patients/' + self.patientId;
        self.goData.getWithUrl(url, function (caseData) {
          var _loop = function _loop(i) {
            var aRow = new CaseRow(caseData[i]);

            var foundProvider = _.find(self.providers, function (p) {
              return p.ProviderID == aRow.data.ProviderID;
            });
            if (foundProvider) {
              aRow.providerName = foundProvider.ProviderEntity;
            }
            self.rows.push(aRow);
          };

          for (var i = 0; i < caseData.length; i++) {
            _loop(i);
          }
        });
      });
    };

    CaseManager.prototype.contactsClicked = function contactsClicked(row) {
      var self = this;
      self.goData.getWithUrl('CaseInfo/' + row.data.CaseID + '/contacts', function (res) {
        var columnHeaders = ['Contact', 'Type', 'Fax', 'Phone', 'Email'];
        var rowData = [];
        for (var i = 0; i < res.length; i++) {
          var ct = res[i];
          var name = ct.LastName + ' ' + ct.FirstName;
          var genTableRow = self.goData.getGenericTableRow([name, ct.Type, ct.PhoneFax, ct.Phone, ct.Email], ct);
          genTableRow.id = i;
          rowData.push(genTableRow);
        }

        self.popupHelper.openGenericTablePop('Contacts', columnHeaders, rowData, false, { zIndex: 5001 }, function (res) {
          callback(res);
        });
      });
    };

    CaseManager.prototype.save = function save(data) {
      var self = this;

      if (data.CaseID == 0) {
        data.PatientID = self.patientId;

        var saveDx = self.helper.createNoty('Saving Case...', 3000);
        saveDx.show();
        self.goData.postWithUrlAndData('caseinfo', JSON.stringify(data), function (res) {
          saveDx.close();

          var newRow = new CaseRow(res);
          self.rows.unshift(newRow);
        });
      } else {
        var updateDx = self.helper.createNoty('Updating Case...', 3000);
        updateDx.show();
        self.goData.putWithUrlAndData('caseinfo', data, function (res) {
          updateDx.close();
        });
      }
    };

    return CaseManager;
  }()) || _class);
});;
define('text!go/blocks/caseManager.html',[],function(){return "<template><div class=\"card-header pr-1\" style=\"height:44px\"><h6 class=\"float-left mb-0\"><i class=\"fa fa-list pr-2\" aria-hidden=\"true\"></i>Case Manager <small class=\"text-muted\">${rows.length}</small></h6><a class=\"btn btn-default float-right ${locked ? 'disabled' : ''}\" href=\"#\" style=\"padding:0 50px 0 0;margin-top:-7px\"><i class=\"fa fa-plus fa-2x text-primary\" click.delegate=\"addAuth()\"></i></a></div><div class=\"card-body p-0\" style=\"overflow-y:scroll\"><div repeat.for=\"s of rows\" class=\"card-body p-2 position-relative ${s.data.State == 'ACTIVE' ? 'alert-success' : 'alert-danger'}\" style=\"border-bottom:1px solid #cbcbcb\"><h5 class=\"d-flex\"><div class=\"font-weight-bold pr-2\"><i class=\"fa fa-calendar pr-1\" aria-hidden=\"true\"></i>${s.caseDate} <i class=\"fa fa-address-card-o ml-2\" aria-hidden=\"true\" click.delegate=\"contactsClicked(s)\"></i></div><i class=\"fa fa-angle-right fa-2x ml-auto alert-link pl-4 pr-2\" style=\"position:absolute;right:10px;font-weight:400\" click.delegate=\"edit(s)\"></i></h5><div class=\"mb-2 d-flex\"><div class=\"flex-fill pr-2\"><span class=\"pr-1 font-weight-bold\"><i class=\"fa fa-calendar-o pr-1\" aria-hidden=\"true\"></i>Injury Date:</span><span>${s.injuryDate}</span></div><div class=\"flex-fill pr-2\"><span class=\"pr-1 text-uppercase font-weight-bold\">${s.bodypart}</span></div></div><p class=\"card-text text-muted\">${s.data.CaseInjDetail}</p></div></div></template>";});;
define('go/blocks/diagnosis',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', 'moment', '../home', '../../data/go/data', 'aurelia-dialog', '../popupHelper', 'lodash', 'aurelia-event-aggregator', '../globals'], function (exports, _helper, _http, _aureliaFramework, _moment, _home, _data, _aureliaDialog, _popupHelper, _lodash, _aureliaEventAggregator, _globals) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Diagnosis = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var Diagnosis = exports.Diagnosis = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _home.Home, _data.Data, _aureliaDialog.DialogService, _popupHelper.PopupHelper, _aureliaEventAggregator.EventAggregator, _globals.Globals), _dec(_class = function () {
    function Diagnosis(helper, http, Home, Data, DialogService, PopupHelper, EventAggregator, Globals) {
      _classCallCheck(this, Diagnosis);

      this.data = null;
      this.locked = false;
      this.displayDeleteHeader = false;
      this.block = null;
      this.visitCreated = false;
      this.usePreviousDiagnosis = false;
      this.fromPrevious = false;
      this.fromPreviousDate = null;
      this.fromPreviousProviderId = null;
      this.fromPreviousBodyPart = null;

      this.helper = helper;
      this.http = http;
      this.home = Home;
      this.goData = Data;
      this.dialogService = DialogService;
      this.popupHelper = PopupHelper;
      this.eventAggregator = EventAggregator;
      this.globals = Globals;
    }

    Diagnosis.prototype.activate = function activate(model) {

      if (model.hasOwnProperty('fromPrevious')) {
        this.fromPrevious = true;
      }
      if (model.hasOwnProperty('fromPreviousProviderId')) {
        this.fromPreviousProviderId = model.fromPreviousProviderId;
      }
      if (model.hasOwnProperty('fromPreviousDate')) {

        var splitDate = model.fromPreviousDate.split('-');
        var year = parseInt(splitDate[2]);
        var day = parseInt(splitDate[1]);

        var month = parseInt(splitDate[0]);
        month = month - 1 < 0 ? 0 : month - 1;
        var prevDateMinusOne = new Date(year, month, day - 1);
        var frmPrevDate = this.helper.getMMDDYYDate(prevDateMinusOne.getFullYear(), prevDateMinusOne.getMonth(), prevDateMinusOne.getDate(), '/');

        this.fromPreviousDate = frmPrevDate;
      }
      if (model.hasOwnProperty('fromPreviousBodyPart')) {
        this.fromPreviousBodyPart = model.fromPreviousBodyPart;
      }

      this.block = model;
      this.block.childModel = this;
    };

    Diagnosis.prototype.addPreferenceWithId = function addPreferenceWithId(dxId) {
      var self = this;
      self.goData.getWithUrl('diagnosis/vw/' + dxId, function (res) {
        if (res) {
          var todayDate = (0, _moment2.default)(self.date).format('MM/DD/YY');


          self.popupHelper.openBodysidePickerPop(function (side) {

            res.side = side;

            var obj = self.createDxObjectWithVWDiagnosis(res);

            self.tryAddWithExistanceCheck(obj);
          });
        }
      });
    };

    Diagnosis.prototype.addPreferenceWithChildCode = function addPreferenceWithChildCode(code) {
      var self = this;
      self.goData.getWithUrl('icd10codes?code=' + code, function (res) {
        if (res) {

          var partSide = self.goData.lateralitySidePartFromIcd10Code(res);

          var side = partSide.side;

          if (side == 'UNSPECIFIED') {
            self.displayUnspecifiedDxAlert(res, function (alertRes) {
              if (alertRes.result == 'YES') {
                var indexOfDecimal = res.Code.indexOf('.');
                var finalCode = res.Code.substring(0, indexOfDecimal + 2);

                self.displayDxPop(finalCode, true);
              } else {
                if (partSide.part != null) {
                  res.part = partSide.part;
                } else {
                  var bps = self.getBodypartFromVisit();
                  res.part = bps.part;
                }

                var obj = self.createDxObjectWithIcd10Code(res);
                self.tryAddWithExistanceCheck(obj);
              }
            });
          } else {
            res.side = side;
            if (partSide.part != null) {
              res.part = partSide.part;
            } else {
              var bps = self.getBodypartFromVisit();
              res.part = bps.part;
            }
            var obj = self.createDxObjectWithIcd10Code(res);
            self.tryAddWithExistanceCheck(obj);
          }
        }
      });
    };

    Diagnosis.prototype.getBodypartFromVisit = function getBodypartFromVisit() {
      if (this.home.currentBoard.visitInfo.bodyparts.length > 1) {
        this.popupHelper.openBodypartPickerPop(self.currentBoard.visitInfo.bodyparts, function (pickerRes) {
          return pickerRes.bodyparts[0];
        });
      } else {
        return this.home.currentBoard.visitInfo.bodyparts[0];
      }
    };

    Diagnosis.prototype.tryAddWithExistanceCheck = function tryAddWithExistanceCheck(dxObj) {
      var self = this;
      var todayDate = (0, _moment2.default)(self.date).format('MM/DD/YY');
      if (!self.doesDiagnosisExist(dxObj.code, todayDate, self.providerId)) {
        if (self.data.length > 0) {
          self.data.splice(0, 0, dxObj);
        } else {
          self.data.push(dxObj);
        }
        self.saveDiagnoses(function (res) {
          if (res.length > 0) {
            self.updateRowIdWithCodeAndDescription(res[0].PatientDXID, res[0].PatientDxCode, res[0].PatientDxDescription);
          }
        });
      } else {
        self.displayExistingDxAlert(dxObj);
        return;
      }
    };

    Diagnosis.prototype.attached = function attached() {

      var self = this;

      self.displayDeleteHeader = !self.globals.isTouchDevice ? true : false;

      if (self.home.currentBoard != null && self.home.currentBoard.patientId != null) {

        self.patientId = self.home.currentBoard.patientId;
        self.date = self.home.currentBoard.visitInfo.date;
        self.providerId = self.home.currentBoard.visitInfo.providerId;
        self.userId = self.home.currentBoard.userId;
        self.bodypart = self.home.currentBoard.visitInfo.bodypart;
        self.bodyside = self.home.currentBoard.visitInfo.bodyside;
        if (self.home.currentBoard.visitInfo.locked != null) self.locked = self.home.currentBoard.visitInfo.locked == 0 ? false : true;

        var now = (0, _moment2.default)().format('MM/DD/YY');
        var visitDate = (0, _moment2.default)(self.home.currentBoard.visitInfo.date).format('MM/DD/YY');
        self.visitCreated = now == visitDate ? true : false;

        this.load();

        if (self.block.loadPreferenceCallback) {
          self.block.loadPreferenceCallback(self.block);
        }
      }
    };

    Diagnosis.prototype.displayDxPop = function displayDxPop(searchString, specifyCode) {
      var self = this;

      var options = undefined;
      if (searchString) {
        options = {
          'searchString': searchString,
          'specifyCode': specifyCode
        };
      }

      self.popupHelper.openDxPop(self.bodypart, self.bodyside, options, function (res) {
        for (var i = 0; i < res.length; i++) {
          var aDx = self.createDxObject(res[i]);
          self.tryAddWithExistanceCheck(aDx);
        }
      });
    };

    Diagnosis.prototype.sendDxToDrFirst = function sendDxToDrFirst(dxRows) {
      var self = this;
      if (self.home.erxEnabled) {

        var final = [];

        for (var i = 0; i < dxRows.length; i++) {
          delete dxRows[i].data.VisitDate;
          final.push(dxRows[i].data);
        }

        var dxData = JSON.stringify(final);
        self.goData.postWithUrlAndData('drfirst/patient/diagnosis', dxData, function (res) {});
      }
    };

    Diagnosis.prototype.load = function load() {
      var self = this;
      self.data = [];

      var url = 'patientdiagnosis?patientId=' + self.patientId + "&status=";
      self.http.get(self.helper.getApiUrl(url), function (res) {

        if (res == undefined || res == null) return;

        var todayDate = (0, _moment2.default)(self.date).format('MM/DD/YY');

        var todaysDxs = [];

        for (var i = 0; i < res.length; i++) {
          var m = res[i];

          var futureDx = (0, _moment2.default)(m.VisitDate).isAfter(self.date);
          if (futureDx) {
            continue;
          }

          var foundDx = _.find(self.data, function (d) {
            return d.code == m.PatientDxCode;
          });
          if (foundDx) {
            continue;
          }


          var dxDate = self.helper.getISODateToFormat(m.VisitDate, "MM/DD/YY");
          var isHistorical = todayDate != dxDate ? true : false;

          if (m.ProviderID != self.providerId) {
            isHistorical = true;
          }
          var newRow = self.addRow(m.PatientDXID, m.PatientDxCode, m.PatientDxDescription, dxDate, isHistorical, m);

          var isIcd9 = self.isIcd9Code(newRow.code);
          if (isIcd9 == null || isIcd9) {
            newRow.displayPlus = false;
          }

          if (!isHistorical) {
            todaysDxs.push(newRow);
          }
        }

        if (self.visitCreated && self.fromPrevious) {
          if (self.data.length > 0) {
            var previousDxs = _.filter(self.data, function (d) {
              return d.data != null && d.data.BodyPart && d.data.BodyPart.toUpperCase() == self.fromPreviousBodyPart.toUpperCase() && d.date == self.fromPreviousDate && d.data.ProviderID == self.fromPreviousProviderId;
            });

            for (var d = 0; d < previousDxs.length; d++) {
              todaysDxs.push(previousDxs[d]);
              self.dxChecked(previousDxs[d]);
            }
          }
        }

        for (var _i = 0; _i < todaysDxs.length; _i++) {
          self.hidePlusInGridForCode(todaysDxs[_i].code);
        }

        self.sendDxToDrFirst(todaysDxs);
      });
    };

    Diagnosis.prototype.isIcd9Code = function isIcd9Code(code) {
      if (code == null) return null;

      var firstCharacter = code.length > 0 ? code.substring(0, 1) : null;
      if (firstCharacter == null) return null;

      if (firstCharacter.length === 1 && firstCharacter.match(/[a-z]/i)) {
        return false;
      } else {
        return true;
      }
    };

    Diagnosis.prototype.hidePlusInGridForCode = function hidePlusInGridForCode(dxCode) {
      var self = this;
      for (var i = 0; i < self.data.length; i++) {
        if (self.data[i].code == dxCode) {
          self.data[i].displayPlus = false;
        }
      }
    };

    Diagnosis.prototype.addRow = function addRow(id, code, description, date, isHistorical, obj) {
      var self = this;
      var aRow = self.goData.getNewDxRow(id, code, description, date, obj);
      aRow.historical = isHistorical;
      aRow.displayPlus = isHistorical;
      self.data.push(aRow);
      return aRow;
    };

    Diagnosis.prototype.rowSwipe = function rowSwipe(event, row) {
      if (event.direction === 'left') {
        if (!row.displayDelete && this.isDxDeletable(row)) {
          row.displayDelete = true;
          this.displayDeleteHeader = true;
        } else {
          this.displayAlert("You cannot delete a historical diagnosis.", 'Deletion Not Allowed!', ['OK']);
        }
      } else if (event.direction === 'right') {
        if (row.displayDelete) {
          row.displayDelete = false;
          this.displayDeleteHeader = false;
        }
      }
    };

    Diagnosis.prototype.isDxDeletable = function isDxDeletable(row) {
      var today = (0, _moment2.default)().format('MM/DD/YYYY');
      var dxDate = (0, _moment2.default)(row.date).format('MM/DD/YYYY');
      return today == dxDate ? true : false;
    };

    Diagnosis.prototype.displayAlert = function displayAlert(text, header, buttonDescriptionArray, callback, template, alertType) {
      var self = this;
      self.popupHelper.openGenericMessagePop(text, header, buttonDescriptionArray, false, function (res) {
        if (callback) {
          callback(res);
        }
      }, { htmlTemplate: template, alertType: alertType });
    };

    Diagnosis.prototype.deleteDxClick = function deleteDxClick(index) {
      var self = this;
      self.displayAlert("Do you wish to delete the diagnosis?", 'Delete Diagnosis?', ['YES', 'NO'], function (res) {
        if (res.result == 'YES') {
          var id = self.data[index].id;
          if (id == 0) {
            self.data.splice(index, 1);
          } else {
            self.deleteDiagnosis(id, function (res) {
              if (res == true) {
                self.data.splice(index, 1);
              }
            });
          }
        } else {
          self.data[index].displayDelete = false;
        }
      });
    };

    Diagnosis.prototype.deleteDiagnosis = function deleteDiagnosis(id, callback) {
      var self = this;
      var url = 'patientdiagnosis/' + id;
      self.goData.deleteWithUrl(url, function (res) {
        callback(res);
      });
    };

    Diagnosis.prototype.doesDiagnosisExist = function doesDiagnosisExist(code, date, providerId) {
      return _.find(this.data, function (o) {
        return o.code == code && o.date == date && o.data.ProviderID == providerId;
      });
    };

    Diagnosis.prototype.displayExistingDxAlert = function displayExistingDxAlert(dx) {
      var self = this;
      var alertTemplate = '<span class="font-weight-bold pr-1">' + dx.code + '</span><span class="text-uppercase">' + dx.description + '</span><div class="text-muted">...already exists today!</div>';
      self.displayAlert(null, 'Diagnosis Exists', null, null, alertTemplate, 'warning');
    };

    Diagnosis.prototype.displayUnspecifiedDxAlert = function displayUnspecifiedDxAlert(dx, callback) {
      var self = this;
      var alertTemplate = '<span class="font-weight-bold pr-1">' + dx.Code + '</span><span class="text-uppercase">' + dx.Descriptor + '</span>\n    <div class="text-muted">Do you wish to specify code?</div>';
      self.displayAlert(null, 'Unspecified Diagnosis', ['YES', 'NO'], callback, alertTemplate, 'warning');
    };

    Diagnosis.prototype.dxChecked = function dxChecked(dx) {
      var self = this;
      var todayDate = (0, _moment2.default)(self.date).format('MM/DD/YY');
      if (self.doesDiagnosisExist(dx.code, todayDate, self.providerId)) {
        self.displayExistingDxAlert(dx);
        return;
      }

      var aDx = self.createDxObject(dx);
      aDx.selected = true;
      aDx.historical = false;
      aDx.displayPlus = false;
      self.data.splice(0, 0, aDx);

      self.hidePlusInGridForCode(aDx.code);

      self.saveDiagnoses(function (res) {

        if (res.length > 0) {
          self.updateRowIdWithCodeAndDescription(res[0].PatientDXID, res[0].PatientDxCode, res[0].PatientDxDescription);
        }
      });
    };

    Diagnosis.prototype.updateRowIdWithCodeAndDescription = function updateRowIdWithCodeAndDescription(id, code, description) {
      var self = this;
      for (var i = 0; i < self.data.length; i++) {
        var row = self.data[i];
        if (row.code == code && row.description == description) {
          row.id = id;
          break;
        }
      }
    };

    Diagnosis.prototype.createDxObject = function createDxObject(dx) {
      var self = this;
      var aDx = {
        "id": 0,
        "code": dx.code,
        "description": dx.description,
        "date": self.helper.getDateWithFormat(self.date, "MM/DD/YY"),
        "data": dx.data,
        "selected": true,
        "side": dx.side,
        "part": dx.part ? dx.part : dx.data.BodyPart
      };
      return aDx;
    };

    Diagnosis.prototype.createDxObjectWithVWDiagnosis = function createDxObjectWithVWDiagnosis(vwDx) {
      var self = this;
      var aDx = {
        "id": 0,
        "code": vwDx.DxKey,
        "description": vwDx.Description,
        "date": self.helper.getDateWithFormat(self.date, "MM/DD/YY"),
        "data": vwDx,
        "selected": true,
        "side": vwDx.side,
        "part": vwDx.Region
      };
      return aDx;
    };

    Diagnosis.prototype.createDxObjectWithIcd10Code = function createDxObjectWithIcd10Code(icd10Code) {
      var self = this;
      var aDx = {
        "id": 0,
        "code": icd10Code.Code,
        "description": icd10Code.Descriptor,
        "date": self.helper.getDateWithFormat(self.date, "MM/DD/YY"),
        "data": icd10Code,
        "selected": true,
        "side": icd10Code.side,
        "part": icd10Code.part
      };
      return aDx;
    };

    Diagnosis.prototype.saveDiagnoses = function saveDiagnoses(callback) {
      var self = this;

      if (self.block.dontSave) {
        return;
      }

      if (self.locked) return;

      var selectedDiagnoses = self.data.filter(function (item) {
        return item.selected === true;
      });

      var formattedDate = self.date;

      var addedDiagnoses = [];
      for (var i = 0; i < selectedDiagnoses.length; i++) {
        var current = selectedDiagnoses[i];

        current.selected = false;

        var patientDx = {
          PatientDxDescription: current.data.PatientDxDescription,
          PatientDxCode: current.data.PatientDxCode,
          ExamDateTime: formattedDate,
          PatientID: self.patientId,
          ProviderID: self.providerId,
          UserID: self.userId,
          BodyPart: current.part,
          BodySide: current.side,
          Status: 'A',
          FromIcd10First: 0
        };

        if (current.data.hasOwnProperty('PatientDxCode')) {
          patientDx.PatientDxDescription = current.data.PatientDxDescription;
          patientDx.PatientDxCode = current.data.PatientDxCode;
        } else if (current.data.hasOwnProperty('Description')) {
          patientDx.PatientDxDescription = current.data.Description;
          patientDx.PatientDxCode = current.data.DxKey;
        } else {
          patientDx.PatientDxDescription = current.data.Descriptor;
          patientDx.PatientDxCode = current.data.Code;
        }

        addedDiagnoses.push(patientDx);
      }

      self.saveAddedDiagnoses(addedDiagnoses, function (returnData) {
        self.needsSavingDx = false;
        self.helper.createNotySuccess('Added Diagnoses Saved Successfully!');
        if (callback) callback(returnData);
      });
    };

    Diagnosis.prototype.saveAddedDiagnoses = function saveAddedDiagnoses(diagnoses, callback) {

      var self = this;
      var url = 'patientdiagnosis/list';
      var stringifiedContent = JSON.stringify(diagnoses);
      self.http.post(self.helper.getApiUrl(url), stringifiedContent, function (returnData) {
        callback(returnData);
      }, { contentType: 'application/json' });
    };

    return Diagnosis;
  }()) || _class);
});;
define('text!go/blocks/diagnosis.html',[],function(){return "<template><div class=\"card-header pr-1\" style=\"height:44px\"><h6 class=\"float-left mb-0\">DIAGNOSIS <small class=\"text-muted\">${data.length}</small></h6><a class=\"btn btn-default float-right ${locked ? 'disabled':''}\" href=\"#\" style=\"padding:0 50px 0 0;margin-top:-7px\"><i class=\"fa fa-search fa-2x text-primary\" click.delegate=\"displayDxPop()\"></i></a></div><div class=\"card-body p-0 overflow-auto\"><div class=\"tableFixHeadLight\" style=\"height:auto\"><table class=\"table table-sm\"><thead><tr><th scope=\"col\"></th><th scope=\"col\" class=\"${home.currentBoard.editing ? 'tableFixHeadLightEditing' : ''}\">Date</th><th scope=\"col\" class=\"${home.currentBoard.editing ? 'tableFixHeadLightEditing' : ''}\">Code</th><th scope=\"col\" class=\"${home.currentBoard.editing ? 'tableFixHeadLightEditing' : ''}\">Desc</th><th scope=\"col\" if.bind=\"displayDeleteHeader\" class=\"au-animate animate-swipe-row-right\"></th></tr></thead><tbody><template repeat.for=\"s of data\"><tr if.bind=\"globals.isTouchDevice\" class=\"${!s.historical ? 'table-success' : 'table-secondary'}\" hammer-swipe.call=\"rowSwipe($event, s)\"><td><i if.bind=\"s.displayPlus\" class=\"fa fa-plus-square\" click.delegate=\"dxChecked(s)\"></i></td><td>${s.date}</td><td>${s.code}</td><td>${s.description}</td><td if.bind=\"displayDeleteHeader && !s.displayDelete\"></td><td if.bind=\"s.displayDelete\" style=\"background-color:#dd3444;vertical-align:middle\" class=\"au-animate animate-swipe-row-left animate-swipe-row-right\"><button type=\"button\" class=\"btn btn-danger\" style=\"display:block;margin:auto\" click.delegate=\"deleteDxClick($index)\"><i class=\"fa fa-trash\"></i></button></td></tr><tr if.bind=\"!globals.isTouchDevice\" class=\"${!s.historical ? 'table-success' : 'table-secondary'}\"><td><i if.bind=\"s.displayPlus\" class=\"fa fa-plus-square\" click.delegate=\"dxChecked(s)\"></i></td><td>${s.date}</td><td>${s.code}</td><td>${s.description}</td><td style=\"vertical-align:middle\"><button if.bind=\"!s.historical\" type=\"button\" class=\"btn\" style=\"display:block;margin:auto\" click.delegate=\"deleteDxClick($index)\"><i class=\"fa fa-trash\"></i></button></td></tr></template></tbody></table></div></div></template>";});;
define('go/blocks/document',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', '../documentPopup', 'aurelia-dialog'], function (exports, _helper, _http, _aureliaFramework, _documentPopup, _aureliaDialog) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Document = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var Document = exports.Document = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _aureliaDialog.DialogService), _dec(_class = function () {
    function Document(helper, http, DialogService) {
      _classCallCheck(this, Document);

      this.helper = helper;
      this.http = http;
      this.dialogService = DialogService;
    }

    Document.prototype.activate = function activate(model) {
      this.data = model;
    };

    Document.prototype.openDocument = function openDocument() {
      this.displayDocumentPopup(this.data.data.DocPath);
    };

    Document.prototype.displayDocumentPopup = function displayDocumentPopup(url) {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.dialogService.open({ viewModel: _documentPopup.DocumentPopup, model: { popupWidth: windowWidth, popupHeight: windowHeight, documentUrl: url } }).whenClosed(function (response) {});
    };

    return Document;
  }()) || _class);
});;
define('text!go/blocks/document.html',[],function(){return "<template><div class=\"card-body\" click.delegate=\"openDocument()\"><h2><i class=\"fa fa-file-text-o fa-3x\"></i></h2><h4>${data.description}</h4></div></template>";});;
define('go/blocks/exam',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', '../home', '../../data/go/data', 'aurelia-event-aggregator', '../globals', '../preferenceHelper'], function (exports, _helper, _http, _aureliaFramework, _home, _data, _aureliaEventAggregator, _globals, _preferenceHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Exam = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor;

  var Exam = exports.Exam = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _home.Home, _data.Data, _aureliaEventAggregator.EventAggregator, _globals.Globals, _preferenceHelper.PreferenceHelper), _dec(_class = (_class2 = function () {
    function Exam(helper, http, Home, Data, EventAggregator, Globals, PreferenceHelper) {
      _classCallCheck(this, Exam);

      this.data = null;
      this.bodypart = null;
      this.prefClicked = false;
      this.locked = false;
      this.speechId = 'exam-speech';

      _initDefineProp(this, 'examText', _descriptor, this);

      this.board = null;
      this.fromPrevious = false;
      this.fromPreviousDate = null;
      this.fromPreviousProviderId = null;
      this.fromPreviousBodyPart = null;
      this.title = "EXAM";
      this.loadData = true;
      this.block = null;
      this.element = null;
      this.textareaHeight = 0;

      this.helper = helper;
      this.http = http;
      this.home = Home;
      this.goData = Data;
      this.eventAggregator = EventAggregator;
      this.globals = Globals;
      this.prefHelper = PreferenceHelper;
    }

    Exam.prototype.activate = function activate(model) {
      this.block = model;
      this.block.childModel = this;

      if (model.hasOwnProperty('fromPrevious')) {
        this.fromPrevious = true;
      }
      if (model.hasOwnProperty('fromPreviousProviderId')) {
        this.fromPreviousProviderId = model.fromPreviousProviderId;
      }
      if (model.hasOwnProperty('fromPreviousDate')) {
        this.fromPreviousDate = model.fromPreviousDate;
      }
      if (model.hasOwnProperty('fromPreviousBodyPart')) {
        this.fromPreviousBodyPart = model.fromPreviousBodyPart;
      }

      this.loadData = model.loadData;
    };

    Exam.prototype.hasValue = function hasValue() {
      var self = this;
      if (self.examText != null && self.examText.length > 0) {
        return true;
      }
      return false;
    };

    Exam.prototype.examTextChanged = function examTextChanged(newValue, oldValue) {

      if (this.fromPrevious || this.prefClicked) {
        if (newValue !== oldValue) {
          this.trySave();
          this.fromPrevious = false;
          this.prefClicked = false;
        }
      }
    };

    Exam.prototype.auto_grow = function auto_grow(element) {};

    Exam.prototype.attached = function attached() {
      var self = this;

      self.textareaHeight = self.cardbody.clientHeight - 8;

      if (self.home.currentBoard != null && self.home.currentBoard.visitInfo != null) {

        self.board = self.home.currentBoard;
        self.patientId = self.home.currentBoard.visitInfo.patientId;
        self.date = self.home.currentBoard.visitInfo.date;
        self.providerId = self.home.currentBoard.visitInfo.providerId;
        self.userId = self.home.currentBoard.userId;

        self.boardType = self.home.currentBoard.visitInfo.typeForSave;
        if (self.home.currentBoard.visitInfo.locked != null) self.locked = self.home.currentBoard.visitInfo.locked == 0 ? false : true;

        self.eventAggregator.publish("examNewBlockAttached", self);

        if (self.loadData) {
          if (!self.fromPrevious) {
            self.load();
          } else {
            self.loadPrevious();
          }
        }

        self.eventAggregator.publish("modelAttached", self);

        self.eventAggregator.subscribe("updateExamData", function (examData) {
          var bp = examData.bodypart ? examData.bodypart : self.bodypart;
          var pref = examData.isPreference ? examData.isPreference : false;
          self.setExamData(examData.details, bp, examData.title, pref);
        });

        if (self.block.loadPreferenceCallback) {
          self.block.loadPreferenceCallback(self.block);
        }
      }
    };

    Exam.prototype.detached = function detached() {
      this.trySave();
    };

    Exam.prototype.trySave = function trySave() {
      var self = this;

      if (self.block.dontSave) {
        return;
      }

      if (self.board != null && !self.locked) {
        self.home.saveQueue.addItem(self);
      }
    };

    Exam.prototype.save = function save(callback) {
      var self = this;
      var url = 'examfollowup';

      if ((self.data == null || self.data.PostOpID == 0) && self.examText != null) {
        self.goData.getNewExam(function (newExam) {
          newExam.PatientID = self.patientId;
          newExam.ExamDateTime = self.date;
          newExam.ProviderID = self.providerId;
          newExam.UserID = self.userId;
          newExam.BodyPart = self.bodypart;
          newExam.IsOrigin = true;
          newExam.TYPE = self.boardType;
          newExam.ChartNoteExam = self.examText;

          self.http.post(self.helper.getApiUrl(url), newExam, function (res) {

            if (res == null) {
              callback(false);
              return;
            }

            self.data = res;

            self.block.objectId = res.PostOpID;
            self.goData.saveVisitBoard(self.board);

            if (callback) callback(true);
          }, null, function (error) {
            if (callback) callback(false);
          });
        });
      } else if (self.data != null) {

        self.data.ChartNoteExam = self.examText;

        if (self.block.objectId == 0) {
          self.block.objectId = self.data.PostOpID;
          self.goData.saveVisitBoard(self.board);
        }

        self.http.put(self.helper.getApiUrl(url), self.data, function (returnData) {
          if (callback) callback(true);
        }, function (error) {
          if (callback) callback(false);
        });
      } else {
        if (callback) callback(false);
      }
    };

    Exam.prototype.load = function load() {
      var self = this;
      var url = "";

      if (self.block.objectId != 0) {
        url = "examfollowup/" + self.block.objectId;
      } else {
        var formattedDate = self.helper.getDateWithFormat(self.date, "MM-DD-YYYY");
        url = 'examfollowups/patients/' + self.patientId + '/providers/' + self.providerId + '/date/' + formattedDate;
      }
      self.http.get(self.helper.getApiUrl(url), function (json) {

        if (json != null) {
          if (Array.isArray(json)) {
            if (json.length > 0) {
              for (var i = 0; i < json.length; i++) {
                self.populateData(json[i]);
              }
            } else {
              self.populateData(null);
            }
          } else {
            self.populateData(json);
          }
        }
      });
    };

    Exam.prototype.createNewBlockWithData = function createNewBlockWithData(exam, board) {
      var self = this;

      var existingExam = board.getBlockWithTypeAndObjectId('exam', exam.PostOpID);
      if (existingExam) {
        return;
      }

      var newBlock = board.addBlockCopyExistingSize('exam', { soapSort: true });
      newBlock.objectId = exam.PostOpID;

      self.eventAggregator.subscribeOnce("examNewBlockAttached", function (model) {
        model.loadData = false;
        model.data = exam;
        model.examText = exam.ChartNoteExam;
        model.block = newBlock;

        self.prefHelper.addPreferenceCallbackObject(model);

        board.providerId = board.visitInfo.providerId;

        if (exam.BodyPart != null && self.board.visitInfo.hasBodypartToLoad('exam', exam.BodyPart)) {
          self.board.visitInfo.removeBodypartToLoad('exam', exam.BodyPart);
          model.bodypart = exam.BodyPart;
        } else {
          model.bodypart = self.board.visitInfo.getFirstAvailBodypartForExam('exam').part;
        }

        var tTitle = exam.TYPE.toUpperCase() == 'FOLLOW' ? 'FOLLOW UP' : exam.TYPE.toUpperCase();
        model.title = tTitle + " EXAM: " + model.bodypart;

        self.goData.saveVisitBoard(board, function (res) {
          board.visitInfo.visitCode.VisitBoardId = res == true ? board.id : res.id;

          board.visitInfo.visitCode.VisitBodyParts = self.goData.bodypartsToString(board.visitInfo.bodyparts);
          self.goData.updateVisitCode(board.visitInfo.visitCode);
        });
      });
    };

    Exam.prototype.populateData = function populateData(exam) {
      var self = this;

      if (self.data != null && exam.PostOpID != self.data.PostOpID) {
        if (!self.loadData) {
          self.createNewBlockWithData(exam, self.home.currentBoard);
        }
        return;
      }

      if (!self.loadData) return;

      if (exam != null) {

        var tBodypart = null;

        if (exam.BodyPart != null && self.board.visitInfo.hasBodypartToLoad('exam', exam.BodyPart)) {
          self.board.visitInfo.removeBodypartToLoad('exam', exam.BodyPart);
          tBodypart = exam.BodyPart;
        } else {
          tBodypart = self.board.visitInfo.getFirstAvailBodypartForExam('exam').part;
        }
        self.loadData = false;
        self.data = exam;


        var tTitle = exam.TYPE.toUpperCase() == 'FOLLOW' ? 'FOLLOW UP' : exam.TYPE.toUpperCase();

        self.setExamData(exam.ChartNoteExam, tBodypart, tTitle + ' EXAM', false);
      } else {
        var _tBodypart = self.board.visitInfo.getFirstAvailBodypartForExam('exam').part;


        self.setExamData(null, _tBodypart, 'Exam', false);
      }
    };

    Exam.prototype.setExamData = function setExamData(text, bodypart, title, isPreference) {
      var self = this;
      self.prefClicked = isPreference;
      self.bodypart = bodypart;
      self.examText = text;
      self.title = title + ": " + bodypart;
    };

    Exam.prototype.populateWithPreference = function populateWithPreference(text, bodypart, title) {
      var self = this;

      self.setExamData(text, bodypart, title, true);
    };

    Exam.prototype.previousClick = function previousClick() {
      this.loadPrevious();
    };

    Exam.prototype.loadPrevious = function loadPrevious() {
      var self = this;
      var formattedDate = self.helper.getDateWithFormat(self.date, "MM-DD-YYYY");
      var formattedBp = self.board.visitInfo.getFirstAvailBodypartForExam('exam').part;
      var proId = self.providerId;

      if (self.fromPreviousDate) {
        formattedDate = self.fromPreviousDate;
        formattedBp = self.fromPreviousBodyPart;
        proId = self.fromPreviousProviderId;
      }

      var url = 'examfollowup/previous/patients/' + self.patientId + '/provider/' + proId + '/bodypart/' + formattedBp + '/date/' + formattedDate;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {

          self.bodypart = formattedBp;

          var exam = {
            PostOpID: self.data == null ? 0 : self.data.PostOpID,
            PatientID: self.patientId,
            UserID: self.userId,
            ProviderID: self.providerId,
            ExamDateTime: self.date,
            DateSurgery: json.DateSurgery,
            CaseID: json.CaseID,
            PostOpDays: json.PostOpDays,
            Surgeron: json.Surgeron,
            PreOpDiag: json.PreOpDiag,
            PostOpDiag: json.PostOpDiag,
            Procedure: json.Procedure,
            Timeframe: json.Timeframe,
            TYPE: json.TYPE,
            IsComplete: json.IsComplete,

            BodyPart: json.BodyPart,
            ChartNoteExam: json.ChartNoteExam
          };

          self.data = exam;
          self.examText = exam.ChartNoteExam;

          var tTitle = json.TYPE.toUpperCase() == 'FOLLOW' ? 'FOLLOW UP' : json.TYPE.toUpperCase();
          self.title = tTitle + " EXAM: " + self.bodypart;
        }
      });
    };

    return Exam;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'examText', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  })), _class2)) || _class);
});;
define('text!go/blocks/exam.html',[],function(){return "<template><require from=\"../examRowCustomAttribute\"></require><div class=\"card-header d-flex align-items-center\" style=\"height:44px\"><h6 class=\"mb-0 mr-2\">${title}</h6><div class=\"dropdown mr-2\" style=\"position:inherit\"><button class=\"btn btn-outline-primary dropdown-toggle\" style=\"padding:4px 12px 4px 12px\" disabled.bind=\"locked\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-plus mr-1\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a class=\"dropdown-item px-3\" href=\"#\" click.delegate=\"previousClick()\"><i class=\"fa fa-arrow-circle-left fa-fw pr-2\" aria-hidden=\"true\"></i>Previous Exam</a></div></div></div><div ref=\"cardbody\" class=\"card-body p-1 overflow-hidden\"><textarea examrow readonly.bind=\"locked\" rows=\"10\" style=\"width:100%;height:100%;overflow-y:scroll;border:none;resize:none\" value.bind=\"examText\" blur.trigger=\"trySave()\"></textarea></div></template>";});;
define('go/blocks/goForm',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', 'moment', '../home', '../../data/go/data', 'aurelia-dialog', 'lodash', '../popupHelper', 'aurelia-templating-resources', 'aurelia-event-aggregator'], function (exports, _helper, _http, _aureliaFramework, _moment, _home, _data, _aureliaDialog, _lodash, _popupHelper, _aureliaTemplatingResources, _aureliaEventAggregator) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.GoForm = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var GoForm = exports.GoForm = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _home.Home, _data.Data, _aureliaDialog.DialogService, _popupHelper.PopupHelper, _aureliaTemplatingResources.BindingSignaler, _aureliaEventAggregator.EventAggregator), _dec(_class = function () {
    function GoForm(helper, http, Home, Data, DialogService, PopupHelper, BindingSignaler, EventAggregator) {
      _classCallCheck(this, GoForm);

      this.data = [];
      this.board = null;
      this.block = null;
      this.viewPath = "../../formbuilder/viewer";
      this.viewModel = null;
      this.goForms = [];

      this.helper = helper;
      this.http = http;
      this.home = Home;
      this.goData = Data;
      this.dialogService = DialogService;
      this.popupHelper = PopupHelper;
      this.signaler = BindingSignaler;
      this.eventAggregator = EventAggregator;
    }

    GoForm.prototype.activate = function activate(model) {
      var self = this;
      self.block = model;
      self.block.childModel = this;

      self.viewModel = {
        jwt: self.helper._jwt,
        formId: null,
        patientId: null,
        providerId: null,
        date: null,
        instanceId: null,
        showSubmit: true,
        showSubmitAsToolbar: true,
        showPreferenceToolbar: true,
        blockInstanceId: self.block.id
      };
    };

    GoForm.prototype.openFormPicker = function openFormPicker() {
      var self = this;

      var genericPicklistItems = [];
      for (var i = 0; i < self.goForms.length; i++) {
        var pItm = self.goData.getGenericPicklistItem(self.goForms[i].Description, self.goForms[i]);
        genericPicklistItems.push(pItm);
      }
      self.popupHelper.openGenericPicklistPop("Select form to display...", 'Go Forms', genericPicklistItems, true, function (res) {
        self.loadGoForm(res.item.data.Id, null, self.patientId, self.providerId, self.date, res.item.data.Description);

        var blockToUpdate = _.find(self.board.blocks, function (b) {
          return b.blockType == 'goForm' && b.id == self.block.id;
        });
        blockToUpdate.goFormId = res.item.data.Id;

        self.goData.saveVisitBoard(self.board);
        self.board.hasChanged = false;
      });
    };

    GoForm.prototype.attached = function attached() {

      var self = this;
      if (self.home.currentBoard != null && self.home.currentBoard.patientId != null) {

        self.board = self.home.currentBoard;

        self.patientId = self.home.currentBoard.patientId;

        var aDate = self.helper.parseSimpleDate(self.home.currentBoard.visitInfo.date, "MM/DD/YYYY");
        self.date = self.helper.getMMDDYYYYDateWithDate(aDate);

        self.providerId = self.home.currentBoard.visitInfo.providerId;
        self.userId = self.home.currentBoard.userId;
        self.bodypart = self.home.currentBoard.visitInfo.bodypart;
        self.bodyside = self.home.currentBoard.visitInfo.bodyside;

        self.getGoForms(self.providerId);

        setTimeout(function () {
          self.load();
        }, 500);

        self.eventAggregator.subscribe('goform-viewer-loaded', function (frm) {

          if (self.block.id && self.block.id != frm.blockInstanceId) {
            return;
          }

          self.description = frm.form.Description;
        });
      }
    };

    GoForm.prototype.getGoForms = function getGoForms(providerId) {
      var self = this;
      self.goData.getWithUrl('goforms/provider?providerId=' + providerId, function (res) {
        self.goForms = res;
      });
    };

    GoForm.prototype.loadGoForm = function loadGoForm(formId, instanceId, patientId, providerId, date, formDescription) {
      var self = this;
      self.description = formDescription;

      self.viewModel = {
        jwt: self.helper._jwt,
        formId: formId,
        patientId: patientId,
        providerId: providerId,
        date: date,
        instanceId: instanceId,
        showSubmit: true,
        showSubmitAsToolbar: true,
        showPreferenceToolbar: true,
        blockInstanceId: self.block.id
      };

      self.eventAggregator.publish("refresh-goform-viewer", self.viewModel);
    };

    GoForm.prototype.detached = function detached() {
      this.trySave();
    };

    GoForm.prototype.trySave = function trySave() {
      var self = this;

      if (self.block.dontSave) {
        return;
      }

      if (self.board != null) {
        self.home.saveQueue.addItem(self);
      }
    };

    GoForm.prototype.load = function load() {
      var self = this;
      self.loadGoForm(self.block.goFormId, self.block.goFormInstanceId, self.patientId, self.providerId, self.date, "");
    };

    GoForm.prototype.save = function save(callback) {
      var self = this;
      callback(true);
    };

    return GoForm;
  }()) || _class);
});;
define('text!go/blocks/goForm.html',[],function(){return "<template><div class=\"card-header pr-1 d-flex align-items-center\" style=\"height:44px\"><h6 class=\"mb-0 d-inline-block\">${description}</h6><a class=\"btn btn-default ml-auto\" href=\"#\" style=\"margin-right:38px\"><i class=\"fa fa-cog fa-2x text-black-50\" click.delegate=\"openFormPicker()\"></i></a></div><div class=\"card-body p-0\" style=\"overflow-y:auto;overflow-x:hidden\"><compose view-model.bind=\"viewPath\" model.bind=\"viewModel\" containerless></compose></div></template>";});;
define('go/blocks/hpi',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', '../home', '../../data/go/data', 'aurelia-event-aggregator', '../globals', '../preferenceHelper', '../popupHelper'], function (exports, _helper, _http, _aureliaFramework, _home, _data, _aureliaEventAggregator, _globals, _preferenceHelper, _popupHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Hpi = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor;

  var Hpi = exports.Hpi = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _home.Home, _data.Data, _aureliaEventAggregator.EventAggregator, _globals.Globals, _preferenceHelper.PreferenceHelper, _popupHelper.PopupHelper), _dec(_class = (_class2 = function () {
    function Hpi(helper, http, Home, Data, EventAggregator, Globals, PreferenceHelper, PopupHelper) {
      _classCallCheck(this, Hpi);

      this.data = null;
      this.prefClicked = false;
      this.locked = false;
      this.title = "HPI";

      _initDefineProp(this, 'hpiText', _descriptor, this);

      this.speechId = 'hpi-speech';
      this.board = null;
      this.fromPrevious = false;
      this.fromPreviousDate = null;
      this.fromPreviousProviderId = null;
      this.fromPreviousBodyPart = null;
      this.loadData = true;
      this.block = null;
      this.dataLoadedEvent = null;
      this.element = null;
      this.textareaHeight = 0;
      this.backgroundColor = '#fff';

      this.helper = helper;
      this.http = http;
      this.home = Home;
      this.goData = Data;
      this.eventAggregator = EventAggregator;
      this.globals = Globals;
      this.prefHelper = PreferenceHelper;
      this.popupHelper = PopupHelper;
    }

    Hpi.prototype.toggleBackgroundColor = function toggleBackgroundColor() {
      this.backgroundColor = this.backgroundColor == "#fff" ? "#fff3cd" : "#fff";
    };

    Hpi.prototype.activate = function activate(model) {
      this.block = model;
      this.block.childModel = this;

      if (model.hasOwnProperty('fromPrevious')) {
        this.fromPrevious = true;
      }
      if (model.hasOwnProperty('fromPreviousProviderId')) {
        this.fromPreviousProviderId = model.fromPreviousProviderId;
      }
      if (model.hasOwnProperty('fromPreviousDate')) {
        this.fromPreviousDate = model.fromPreviousDate;
      }
      if (model.hasOwnProperty('fromPreviousBodyPart')) {
        this.fromPreviousBodyPart = model.fromPreviousBodyPart;
      }
      this.loadData = model.loadData;
    };

    Hpi.prototype.hasValue = function hasValue() {
      var self = this;
      if (self.hpiText != null && self.hpiText.length > 0) {
        return true;
      }
      return false;
    };

    Hpi.prototype.openHpiIntake = function openHpiIntake() {
      var self = this;
      var viewPath = './hpi/hpiIntake';

      var windowHeight = window.innerHeight - 100;
      var windowWidth = window.innerWidth;

      var width = windowWidth / 3 * 2;
      var left = windowWidth / 5;

      var options = {
        displayHeader: false
      };

      this.popupHelper.openViewModelPop(viewPath, self, 'Tell us about the history of your illness', width, windowHeight, 50, left, options, function (res) {

        if (!res.hasOwnProperty('cancelled')) {
          self.hpiText = res.text;
        }
      });
    };

    Hpi.prototype.hpiTextChanged = function hpiTextChanged(newValue, oldValue) {

      if (this.fromPrevious || this.prefClicked) {
        if (newValue !== oldValue) {
          this.trySave();
          this.fromPrevious = false;
          this.prefClicked = false;
        }
      }
    };

    Hpi.prototype.auto_grow = function auto_grow(element) {};

    Hpi.prototype.previousClick = function previousClick() {
      this.loadPrevious();
    };

    Hpi.prototype.attached = function attached() {
      var self = this;

      self.textareaHeight = self.cardbody.clientHeight - 8;

      if (self.home.currentBoard != null && self.home.currentBoard.visitInfo != null) {

        self.board = self.home.currentBoard;

        self.patientId = self.home.currentBoard.visitInfo.patientId;
        self.date = self.home.currentBoard.visitInfo.date;
        self.providerId = self.home.currentBoard.visitInfo.providerId;
        self.userId = self.home.currentBoard.userId;

        self.boardType = self.home.currentBoard.visitInfo.typeForSave;
        if (self.home.currentBoard.visitInfo.locked != null) self.locked = self.home.currentBoard.visitInfo.locked == 0 ? false : true;

        self.eventAggregator.publish("hpiNewBlockAttached", self);

        if (self.loadData) {
          if (!self.fromPrevious) {
            self.load();
          } else {
            self.loadPrevious();
          }
        }

        self.eventAggregator.publish("modelAttached", self);

        if (self.block.loadPreferenceCallback) {
          self.block.loadPreferenceCallback(self.block);
        }
      }

      self.signalRConnection = new signalR.HubConnectionBuilder().withUrl(self.helper._server + "/signalr/hpihub").build();

      self.signalRConnection.on("ReceiveUpdate", function (data) {
        self.hpiText = data.HpiText;
        self.toggleBackgroundColor();
      });

      self.signalRConnection.start().then(function (success) {
        self.signalRConnection.invoke("JoinGroup", self.helper._user.TenantId);
      }, function (failure) {});
    };

    Hpi.prototype.detached = function detached() {
      this.trySave();
    };

    Hpi.prototype.trySave = function trySave() {
      var self = this;

      if (self.block.dontSave) {
        return;
      }

      if (self.board != null && !self.locked) {
        self.home.saveQueue.addItem(self);
      }
    };

    Hpi.prototype.save = function save(callback) {
      var self = this;
      var url = 'hpis';

      if ((self.data == null || self.data.HPIID == 0) && self.hpiText && self.hpiText.length > 0) {
        self.goData.getNewHpi(function (newHpi) {

          newHpi.PatientID = self.patientId;
          newHpi.VisitDate = self.date;
          newHpi.ProviderID = self.providerId;
          newHpi.UserID = self.userId;
          newHpi.BodyPart = self.bodypart;
          newHpi.IsOrigin = true;
          newHpi.HpiType = self.boardType;
          newHpi.HpiText = self.hpiText;

          self.http.post(self.helper.getApiUrl(url), newHpi, function (returnData) {

            if (returnData == null) {
              if (callback) callback(false);
              return;
            }

            self.data = returnData;

            self.block.objectId = returnData.HPIID;
            self.goData.saveVisitBoard(self.board);

            if (callback) callback(true);
          }, null, function (error) {
            if (callback) callback(false);
          });
        });
      } else if (self.data != null) {

        self.data.HpiText = self.hpiText;

        if (self.block.objectId == 0) {
          self.block.objectId = self.data.HPIID;
          self.goData.saveVisitBoard(self.board);
        }

        self.http.put(self.helper.getApiUrl(url), self.data, function (returnData) {
          if (callback) callback(true);
        }, function (error) {
          if (callback) callback(false);
        });
      } else {
        if (callback) callback(false);
      }
    };

    Hpi.prototype.populateWithPreference = function populateWithPreference(text, bodypart, title) {
      var self = this;
      self.prefClicked = true;
      self.bodypart = bodypart;
      self.hpiText = text;
      self.title = title + ": " + bodypart;
    };

    Hpi.prototype.loadPrevious = function loadPrevious() {
      var self = this;

      var formattedDate = self.helper.getDateWithFormat(self.date, "MM-DD-YYYY");
      var formattedBp = self.board.visitInfo.getFirstAvailBodypartForExam('hpi').part;
      var proId = self.providerId;

      if (self.fromPreviousDate) {
        formattedDate = self.fromPreviousDate;
        formattedBp = self.fromPreviousBodyPart;
        proId = self.fromPreviousProviderId;
      }

      var url = 'hpi/previous?patientId=' + self.patientId + '&bodypart=' + formattedBp + '&priorToDate=' + formattedDate + '&providerId=' + proId;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {

          self.bodypart = formattedBp;

          json.UserID = self.userId;
          json.ProviderID = self.providerId;
          json.VisitDate = self.date;
          json.DateCreated = null;
          json.DateModified = null;
          json.HPIID = self.data == null ? 0 : self.data.HPIID;

          self.data = json;
          self.hpiText = json.HpiText;

          var tTitle = json.HpiType.toUpperCase() == 'FOLLOW' ? 'FOLLOW UP' : json.HpiType.toUpperCase();

          self.title = tTitle + " HPI: " + self.bodypart;
        }
      });
    };

    Hpi.prototype.load = function load() {
      var self = this;
      var url = "";
      if (self.block.objectId != 0) {
        url = "hpis/" + self.block.objectId;
      } else {
        var formattedDate = self.helper.getDateWithFormat(self.date, "MM-DD-YYYY");
        url = "hpis/patients/" + self.patientId + "/providers/" + self.providerId + "/date/" + formattedDate;
      }

      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {
          if (Array.isArray(json)) {
            if (json.length > 0) {
              for (var i = 0; i < json.length; i++) {
                self.populateData(json[i]);
              }
            } else {
              self.populateData(null);
            }
          } else {
            self.populateData(json);
          }
        }
      });
    };

    Hpi.prototype.createNewBlockWithData = function createNewBlockWithData(hpi, board) {
      var self = this;

      var existingPlan = board.getBlockWithTypeAndObjectId('hpi', hpi.HPIID);
      if (existingPlan) {
        return;
      }

      var newBlock = board.addBlockCopyExistingSize('hpi', { soapSort: true });
      newBlock.objectId = hpi.HPIID;

      self.eventAggregator.subscribeOnce("hpiNewBlockAttached", function (model) {
        model.loadData = false;
        model.data = hpi;
        model.hpiText = hpi.HpiText;
        model.block = newBlock;

        self.prefHelper.addPreferenceCallbackObject(model);

        board.providerId = board.visitInfo.providerId;

        if (hpi.BodyPart != null && self.board.visitInfo.hasBodypartToLoad('hpi', hpi.BodyPart)) {
          self.board.visitInfo.removeBodypartToLoad('hpi', hpi.BodyPart);
          model.bodypart = hpi.BodyPart;
        } else {
          model.bodypart = self.board.visitInfo.getFirstAvailBodypartForExam('hpi').part;
        }

        var tTitle = hpi.HpiType.toUpperCase() == 'FOLLOW' ? 'FOLLOW UP' : hpi.HpiType.toUpperCase();
        model.title = tTitle + " HPI: " + model.bodypart;

        self.goData.saveVisitBoard(board, function (res) {
          board.visitInfo.visitCode.VisitBoardId = res == true ? board.id : res.id;

          board.visitInfo.visitCode.VisitBodyParts = self.goData.bodypartsToString(board.visitInfo.bodyparts);
          self.goData.updateVisitCode(board.visitInfo.visitCode);
        });
      });
    };

    Hpi.prototype.populateData = function populateData(hpi) {
      var self = this;

      if (self.data != null && hpi.HPIID != self.data.HPIID) {
        if (!self.loadData) {
          self.createNewBlockWithData(hpi, self.home.currentBoard);
        }
        return;
      }

      if (!self.loadData) return;

      if (hpi != null) {
        if (hpi.BodyPart != null && self.board.visitInfo.hasBodypartToLoad('hpi', hpi.BodyPart)) {
          self.board.visitInfo.removeBodypartToLoad('hpi', hpi.BodyPart);
          self.bodypart = hpi.BodyPart;
        } else {
          self.bodypart = self.board.visitInfo.getFirstAvailBodypartForExam('hpi').part;
        }
        self.loadData = false;
        self.data = hpi;
        self.hpiText = hpi.HpiText;

        var tTitle = "FOLLOW UP";
        if (hpi.HpiType) {
          tTitle = hpi.HpiType.toUpperCase() == 'FOLLOW' ? 'FOLLOW UP' : hpi.HpiType.toUpperCase();
        }
        self.title = tTitle + " HPI: " + self.bodypart;
      } else {
        self.bodypart = self.board.visitInfo.getFirstAvailBodypartForExam('hpi').part;
        self.title = "HPI: " + self.bodypart;
      }
    };

    return Hpi;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'hpiText', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return "";
    }
  })), _class2)) || _class);
});;
define('text!go/blocks/hpi.html',[],function(){return "<template><require from=\"../hpiRowCustomAttribute\"></require><div class=\"card-header d-flex align-items-center\" style=\"height:44px\"><h6 class=\"mb-0 mr-2\">${title}</h6><div class=\"dropdown\" style=\"position:inherit\"><button class=\"btn btn-outline-primary dropdown-toggle\" style=\"padding:4px 12px 4px 12px\" disabled.bind=\"locked\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-plus mr-1\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a class=\"dropdown-item px-3\" href=\"#\" click.delegate=\"openHpiIntake()\"><i class=\"fa fa-pencil-square-o fa-fw pr-2\" aria-hidden=\"true\"></i>Intake</a> <a class=\"dropdown-item px-3\" href=\"#\" click.delegate=\"previousClick()\"><i class=\"fa fa-arrow-circle-left fa-fw pr-2\" aria-hidden=\"true\"></i>Previous HPI</a></div></div></div><div ref=\"cardbody\" class=\"card-body p-1 overflow-hidden\"><textarea hpirow readonly.bind=\"locked\" rows=\"10\" style=\"width:100%;height:100%;border:none;resize:none;overflow-y:scroll\" value.bind=\"hpiText\" blur.trigger=\"trySave()\" css=\"background-color:${backgroundColor}\"></textarea></div></template>";});;
define('go/blocks/jointInjection',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', 'moment', '../home', '../../data/go/data', '../pxSearch', 'aurelia-dialog', 'lodash', '../popupHelper', 'aurelia-event-aggregator', '../globals'], function (exports, _helper, _http, _aureliaFramework, _moment, _home, _data, _pxSearch, _aureliaDialog, _lodash, _popupHelper, _aureliaEventAggregator, _globals) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JointInjection = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var JointInjection = exports.JointInjection = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _home.Home, _data.Data, _aureliaDialog.DialogService, _popupHelper.PopupHelper, _aureliaEventAggregator.EventAggregator, _globals.Globals), _dec(_class = function () {
    function JointInjection(helper, http, Home, Data, DialogService, PopupHelper, EventAggregator, Globals) {
      _classCallCheck(this, JointInjection);

      this.orders = [];
      this.board = null;
      this.block = null;
      this.openPopup = false;
      this.preferences = [];
      this.displayDeleteHeader = false;
      this.locked = false;
      this.block = null;

      this.helper = helper;
      this.http = http;
      this.home = Home;
      this.goData = Data;
      this.dialogService = DialogService;
      this.popupHelper = PopupHelper;
      this.eventAggregator = EventAggregator;
      this.globals = Globals;
    }

    JointInjection.prototype.activate = function activate(model) {
      this.block = model;
      this.block.childModel = this;
      if (model.hasOwnProperty('openPopup')) {
        this.openPopup = model.openPopup;
      }
    };

    JointInjection.prototype.addPreferenceWithId = function addPreferenceWithId(injId) {
      var self = this;
      self.goData.getWithUrl('injection/preference?id=' + injId, function (res) {
        if (res) {
          var prefObj = self.goData.getPreferenceObj(res.Description, res, res.Part);
          self.newJointInjectionFromPref(prefObj);
        }
      });
    };

    JointInjection.prototype.attached = function attached() {

      var self = this;

      self.displayDeleteHeader = !self.globals.isTouchDevice ? true : false;

      if (self.home.currentBoard != null && self.home.currentBoard.patientId != null) {

        self.board = self.home.currentBoard;

        self.patientId = self.home.currentBoard.patientId;
        self.date = self.home.currentBoard.visitInfo.date;
        self.providerId = self.home.currentBoard.visitInfo.providerId;
        self.userId = self.home.currentBoard.userId;
        self.bodypart = self.home.currentBoard.visitInfo.bodypart;
        self.bodyside = self.home.currentBoard.visitInfo.bodyside;
        self.locked = self.home.currentBoard.visitInfo.locked == 0 ? false : true;

        this.load();

        if (self.block.loadPreferenceCallback) {
          self.block.loadPreferenceCallback(self.block);
        }

        if (self.openPopup == true) {
          self.openInjection();
        }

        self.loadPreferences(function (res) {});
      }
    };

    JointInjection.prototype.preferenceSelected = function preferenceSelected(p) {
      this.newJointInjectionFromPref(p);
    };

    JointInjection.prototype.loadPreferences = function loadPreferences(callback) {
      var self = this;
      self.preferences = [];
      self.goData.getJointInjectionPreferencesWithProviderId(self.providerId, function (res) {
        if (res != null) {
          for (var i = 0; i < res.length; i++) {
            var aPref = res[i];
            var prefObj = self.goData.getPreferenceObj(aPref.Description, aPref, aPref.Part);
            self.preferences.push(prefObj);
          }
          callback();
        }
      });
    };

    JointInjection.prototype.openPrefPicker = function openPrefPicker() {
      var self = this;
      var viewPath = './preferencePicker';

      var windowHeight = window.innerHeight - 100;
      var windowWidth = window.innerWidth;

      var quarter = windowWidth / 4;
      var width = windowWidth / 2;
      var left = quarter;

      var height = windowHeight / 2;
      var qHeight = windowHeight / 4;
      var top = qHeight;

      this.popupHelper.openViewModelPop(viewPath, self, 'Joint Injection Pref', width, height, top, left, null, function (res) {
        self.newJointInjectionFromPref(res);
      });
    };

    JointInjection.prototype.openInjection = function openInjection() {
      var self = this;
      var viewPath = './injectionBuilder';

      var windowHeight = window.innerHeight - 100;
      var windowWidth = window.innerWidth;

      var quarter = windowWidth / 4;
      var width = quarter * 3;
      var left = quarter / 2;

      this.popupHelper.openViewModelPop(viewPath, self, 'Joint Injection', width, windowHeight, 50, left, null, function (res) {

        if (res.cancelled) {
          return;
        }

        self.addJointInjectionCard(res);
      });
    };

    JointInjection.prototype.addJointInjectionCard = function addJointInjectionCard(data) {
      var self = this;

      this.popupHelper.openBodysidePickerPop(function (side) {
        var px = null;
        if (data.cptObject != null) {
          px = {
            code: data.cptObject.code,
            description: data.cptObject.description,

            modifier: null,
            id: 0,
            note: data.text,
            injectSite: data.injectionSite.name,
            bodypart: data.bodypart,
            bodyside: side,
            data: {
              Type: 'injection',
              Body_Part: data.bodypart,
              BodySide: side,
              ProcedureID: data.cptObject.id
            }
          };
        }

        var jcode = null;
        if (data.jcode != null) {
          jcode = {
            code: data.jcode.CptKey,
            description: data.jcode.Description,

            bodypart: data.bodypart,
            bodyside: side,
            modifier: null,
            id: 0,
            note: 'blank',
            data: {
              Type: 'injection',
              Body_Part: data.bodypart,
              BodySide: side,
              ProcedureID: data.jcode.ProcedureID
            }
          };
        }

        var p = new Promise(function (resolve, reject) {
          if (px != null) {
            self.goData.saveProcedure(px, self.patientId, self.providerId, self.date, function (pxRes) {
              var aPx = self.goData.getNewPx(pxRes.PatientCPTID, pxRes.CptCode, pxRes.NotePx, self.helper.getDateWithFormat(pxRes.ExamDateTime, "MM/DD/YYYY"), pxRes);
              aPx.index = self.orders.length;
              aPx.canDelete = true;
              self.orders.push(aPx);

              resolve(true);
            });
          } else {
            resolve(false);
          }
        }).then(function (res) {
          if (jcode != null) {
            self.goData.saveProcedure(jcode, self.patientId, self.providerId, self.date, function (jRes) {
              var jCode = self.goData.getNewPx(jRes.PatientCPTID, jRes.CptCode, jRes.CodeDescr, self.helper.getDateWithFormat(jRes.ExamDateTime, "MM/DD/YYYY"), jRes);
              jCode.index = self.orders.length;
              jCode.canDelete = true;
              self.orders.push(jCode);
              return res;
            });
          } else {
            return res;
          }
        }).finally(function () {
          self.eventAggregator.publish("refreshProcedures");
        });
      });
    };

    JointInjection.prototype.detached = function detached() {
      this.trySave();
    };

    JointInjection.prototype.trySave = function trySave() {
      var self = this;

      if (self.block.dontSave) {
        return;
      }

      if (self.board != null) {
        self.home.saveQueue.addItem(self);
      }
    };

    JointInjection.prototype.newJointInjectionFromPref = function newJointInjectionFromPref(pref) {
      var self = this;

      var cptCodeProcedureId = 0;
      var jcodeProcedureId = 0;
      var bPart = pref.bodypart;

      var p = new Promise(function (resolve, reject) {
        if (pref.data && pref.data.CPTCode != null && pref.data.CPTCode.length > 0 && pref.data.CPTDesc != null && pref.data.CPTDesc.length > 0) {
          var url = 'procedure?code=' + pref.data.CPTCode + '&description=' + pref.data.CPTDesc;
          self.goData.getWithUrl(url, function (res) {

            if (res == null) {
              var search = 'procedures/search?searchTerm=' + pref.data.CPTCode;
              self.goData.getWithUrl(search, function (searchRes) {

                var searchResultItems = [];
                for (var i = 0; i < searchRes.length; i++) {
                  var pItm = self.goData.getGenericPicklistItem(searchRes[i].Description, searchRes[i]);
                  searchResultItems.push(pItm);
                }
                self.popupHelper.openGenericPicklistPop("CPT Code", 'Please Select CPT Code', searchResultItems, true, function (res) {
                  cptCodeProcedureId = res.item.data.ProcedureID;
                  resolve(true);
                });
              });
            } else {
              cptCodeProcedureId = res.ProcedureID;
              resolve(true);
            }
          });
        } else {
          resolve(false);
        }
      }).then(function (res) {

        if (pref.data && pref.data.JCode != null && pref.data.JCode.length > 0 && pref.data.Description != null && pref.data.Description.length > 0) {

          return new Promise(function (reslove, reject) {
            var jurl = 'procedures/search?searchTerm=' + pref.data.JCode;
            self.goData.getWithUrl(jurl, function (jcodeRes) {
              if (jcodeRes.length > 0) {
                jcodeProcedureId = jcodeRes[0].ProcedureID;
              }
              reslove(true);
            });
          });
        } else {
          return res;
        }
      }).then(function (res) {

        pref = pref.data;

        var inject = {
          cptObject: {
            code: pref.CPTCode,
            description: pref.CPTDesc,
            id: cptCodeProcedureId
          },
          jcode: {
            CptKey: pref.JCode,
            Description: pref.InjectionDesc,
            ProcedureID: jcodeProcedureId
          },
          injectionDesc: pref.InjectionDesc,
          text: pref.Instruction,
          injectionSite: pref.InjectSite,
          bodypart: bPart
        };
        self.addJointInjectionCard(inject);
      });
    };

    JointInjection.prototype.load = function load() {
      var self = this;
      var url = "patientprocedure/Query";

      var obj = {
        PatientId: self.patientId,
        ProcedureTypes: ['injection'],
        Date: self.date
      };

      self.http.post(self.helper.getApiUrl(url), obj, function (res) {
        if (res != null) {
          var list = [];
          for (var i = 0; i < res.length; i++) {
            var m = res[i];

            var description = void 0;
            if (m.CptCode.substring(0, 1) == 'J') {
              description = m.CodeDescr;
            } else {
              description = m.NotePx;
            }


            var oDate = self.helper.getISODateToFormat(m.DateCreated, "MM/DD/YYYY");

            var aOrder = self.goData.getNewPx(m.PatientCPTID, m.CptCode, description, oDate, m);
            aOrder.index = i;

            aOrder.canDelete = oDate == self.date && !self.locked ? true : false;

            list.push(aOrder);
          }
          self.orders = list;
        }
      }, null, function (err) {
        var e = 'oops';
      });
    };

    JointInjection.prototype.save = function save(callback) {
      var self = this;
      var updateOrders = [];
      var saveOrders = [];

      if (saveOrders.length > 0) {
        self.goData.saveLabOrders(saveOrders, function (res) {
          if (callback) {
            callback(true);
          }
        });
      } else {
        if (callback) {
          callback(true);
        }
      }
    };

    JointInjection.prototype.rowSwipe = function rowSwipe(event, row) {

      if (!row.canDelete) {
        return;
      }

      if (event.direction === 'left') {
        if (!row.displayDelete) {
          row.displayDelete = true;
          this.displayDeleteHeader = true;
        }
      } else if (event.direction === 'right') {
        if (row.displayDelete) {
          row.displayDelete = false;
          this.displayDeleteHeader = false;
        }
      }
    };

    JointInjection.prototype.displayDeleteAlert = function displayDeleteAlert(callback) {
      var self = this;
      self.popupHelper.openGenericMessagePop("Do you wish to delete this injection?", 'Delete Injection?', ['YES', 'NO'], false, function (res) {
        callback(res);
      });
    };

    JointInjection.prototype.deleteInjClick = function deleteInjClick(index) {
      var self = this;
      self.displayDeleteAlert(function (res) {
        if (res.result == 'YES') {

          var id = self.orders[index].id;
          if (id == 0) {
            self.orders.splice(index, 1);
          } else {
            self.deleteInjection(id, function (res) {
              if (res == true) {
                self.orders.splice(index, 1);
              }
            });
          }
        } else {
          self.orders[index].displayDelete = false;
        }
      });
    };

    JointInjection.prototype.deleteInjection = function deleteInjection(id, callback) {
      var self = this;
      var url = 'patientprocedures/' + id;
      self.goData.deleteWithUrl(url, function (res) {
        callback(res);
      });
    };

    return JointInjection;
  }()) || _class);
});;
define('text!go/blocks/jointInjection.html',[],function(){return "<template><require from=\"../customElements/blockPreferencePicker\"></require><div class=\"card-header pr-1\" style=\"height:44px\"><h6 class=\"float-left mb-0\">JOINT INJECTION <small class=\"text-muted\">${orders.length}</small></h6><button type=\"button\" class=\"btn btn-primary\" style=\"position:absolute;top:4px;padding:4px 12px 4px 12px;margin-left:10px\" click.delegate=\"openPrefPicker()\">Pref</button> <a class=\"btn btn-default float-right\" href=\"#\" style=\"padding:0 50px 0 0;margin-top:-7px\"><i class=\"fa fa-plus fa-2x text-primary\" click.delegate=\"openInjection()\"></i></a></div><div class=\"card-body p-0 overflow-auto\"><div class=\"tableFixHeadLight\"><table class=\"table table-striped table-sm\"><thead><tr style=\"background-color:#f7f7f7\"><th scope=\"col\">Code</th><th scope=\"col\">Desc</th><th scope=\"col\" if.bind=\"displayDeleteHeader\" class=\"au-animate animate-swipe-row-right\"></th></tr></thead><tbody><template repeat.for=\"s of orders\"><tr if.bind=\"globals.isTouchDevice\" hammer-swipe.call=\"rowSwipe($event, s)\"><td>${s.code}</td><td>${s.description}</td><td if.bind=\"displayDeleteHeader && !s.displayDelete\"></td><td if.bind=\"s.displayDelete\" style=\"background-color:#dd3444;vertical-align:middle\" class=\"au-animate animate-swipe-row-left animate-swipe-row-right\"><button type=\"button\" class=\"btn btn-danger\" style=\"display:block;margin:auto\" click.delegate=\"deleteInjClick($index)\"><i class=\"fa fa-trash\"></i></button></td></tr><tr if.bind=\"!globals.isTouchDevice\"><td>${s.code}</td><td>${s.description}</td><td style=\"vertical-align:middle\"><button if.bind=\"s.canDelete\" type=\"button\" class=\"btn\" style=\"display:block;margin:auto\" click.delegate=\"deleteInjClick($index)\"><i class=\"fa fa-trash\"></i></button></td></tr></template></tbody></table></div></div></template>";});;
define('go/blocks/medAllergy',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', '../../data/go/data', '../home', '../popupHelper', 'aurelia-templating-resources', '../globals'], function (exports, _helper, _http, _aureliaFramework, _data, _home, _popupHelper, _aureliaTemplatingResources, _globals) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MedAllergy = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var MedAllergy = exports.MedAllergy = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home, _popupHelper.PopupHelper, _aureliaTemplatingResources.BindingSignaler, _globals.Globals), _dec(_class = function () {
    function MedAllergy(helper, http, Data, Home, PopupHelper, BindingSignaler, Globals) {
      _classCallCheck(this, MedAllergy);

      this.meds = [];
      this.allergies = [];
      this.displayMeds = true;

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
      this.popupHelper = PopupHelper;
      this.signaler = BindingSignaler;
      this.globals = Globals;
    }

    MedAllergy.prototype.activate = function activate(model) {
      this.block = model;
    };

    MedAllergy.prototype.attached = function attached() {
      if (this.home.currentBoard.patientId != null) {
        this.load();
      }
    };

    MedAllergy.prototype.load = function load() {
      var self = this;
      self.getPatientAllergies(self.home.currentBoard.patientId, function (res) {
        self.allergies = res;
      });

      self.getPatientMeds(self.home.currentBoard.patientId, function (res) {
        self.meds = res;
      });
    };

    MedAllergy.prototype.medsTabClicked = function medsTabClicked(medsClicked) {
      this.displayMeds = medsClicked;
    };

    MedAllergy.prototype.getPatientMeds = function getPatientMeds(patientId, callback) {
      var self = this;
      var url = "rxs?patientId=" + patientId;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        var list = [];
        for (var i = 0; i < json.length; i++) {
          var m = json[i];
          var aMed = self.data.getNewMedRow(m.RXPatientID, m.RX_Sig, self.helper.getISODateToFormat(m.LastRefill, "MM/DD/YY"), m.RX_Status);
          aMed.index = i;
          list.push(aMed);
        }
        callback(list);
      });
    };

    MedAllergy.prototype.getPatientAllergies = function getPatientAllergies(patientId, callback) {
      var self = this;
      var url = "patientallergies/query";
      var data = { 'PatientId': patientId,
        'Status': ["Active", "A"] };

      self.http.post(self.helper.getApiUrl(url), JSON.stringify(data), function (res) {

        console.log('GOT ALLERGIES', res);

        if (res == undefined || res == null) return;

        var list = [];
        for (var i = 0; i < res.length; i++) {
          var m = res[i];
          var alg = self.data.getNewAllergyRow(m.AllergyID, m.Substance, "", m.Reaction);
          alg.index = i;
          list.push(alg);
        }
        callback(list);
      }, { contentType: "application/json" }, function (err) {
        var e = 'oops';
      });
    };

    MedAllergy.prototype.rowSwipe = function rowSwipe(event, row) {
      if (event.direction === 'left') {
        this.displayNoDeletionAlert();
      }
    };

    MedAllergy.prototype.displayNoDeletionAlert = function displayNoDeletionAlert() {
      var self = this;
      self.popupHelper.openGenericMessagePop('Please manage patient allergies / meds from demographics.', 'Deletion Not Allowed', ['OK'], false, function (res) {});
    };

    return MedAllergy;
  }()) || _class);
});;
define('text!go/blocks/medAllergy.html',[],function(){return "<template><div class=\"card-header py-0\"><span class=\"d-inline float-left py-2 h6\">MED ALLERGY <small class=\"text-muted\">${meds.length}</small></span><ul class=\"nav nav-tabs card-header-tabs justify-content-end pr-4\"><li class=\"nav-item\"><a class=\"nav-link active\" class.bind=\"displayMeds ? 'active' : ''\" href=\"#\" click.delegate=\"medsTabClicked(true)\">Meds</a></li><li class=\"nav-item\"><a class=\"nav-link\" href=\"#\" class.bind=\"!displayMeds ? 'active' : ''\" click.delegate=\"medsTabClicked(false)\">Allergies</a></li></ul></div><div class=\"card-body overflow-auto p-0\"><div if.bind=\"displayMeds\" class=\"tableFixHeadLight\" style=\"height:auto\"><table class=\"table table-sm\"><thead><tr><th scope=\"col\" style=\"background:#f7f7f7;border-top:none\" class=\"${home.currentBoard.editing ? 'tableFixHeadLightEditing' : ''}\">Med</th><th scope=\"col\" style=\"background:#f7f7f7;width:25%\" class=\"${home.currentBoard.editing ? 'tableFixHeadLightEditing' : ''}\">Last Refill</th><th scope=\"col\" style=\"background:#f7f7f7\" class=\"${home.currentBoard.editing ? 'tableFixHeadLightEditing' : ''}\">Status</th></tr></thead><tbody><template repeat.for=\"m of meds\"><tr hammer-swipe.call=\"rowSwipe($event, m)\" css=\"background-color: ${m.isEven() ? '#f2f2f2' : ''}\"><td>${m.description}</td><td>${m.lastRefill}</td><td>${m.status}</td></tr></template></tbody></table></div><div if.bind=\"!displayMeds\" class=\"tableFixHeadLight\"><table class=\"table table-striped table-sm\"><thead><tr><th scope=\"col\">Allergy</th><th scope=\"col\">Reaction</th></tr></thead><tbody><template repeat.for=\"a of allergies\"><tr hammer-swipe.call=\"rowSwipe($event, a)\" css=\"background-color: ${a.isEven() ? '#f2f2f2' : ''}\"><td>${a.description}</td><td>${a.reaction}</td></tr></template></tbody></table></div></div></template>";});;
define('go/blocks/miniFile',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', '../documentPopup', '../xrayPop', 'aurelia-dialog', '../../data/go/data', '../popupHelper', '../home', '../task/taskHelper', 'moment', '../globals'], function (exports, _helper, _http, _aureliaFramework, _documentPopup, _xrayPop, _aureliaDialog, _data, _popupHelper, _home, _taskHelper, _moment, _globals) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MiniFile = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var MiniFile = exports.MiniFile = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _aureliaDialog.DialogService, _data.Data, _popupHelper.PopupHelper, _home.Home, _taskHelper.TaskHelper, _globals.Globals), _dec(_class = function () {
    function MiniFile(helper, http, DialogService, Data, PopupHelper, Home, TaskHelper, Globals) {
      _classCallCheck(this, MiniFile);

      this.isXray = false;
      this.displayFinding = false;
      this.xrayViewerEnabled = false;
      this.xrayData = null;
      this.isPdf = false;
      this.isGoForm = false;
      this.isDocument = false;
      this.canDeleteDocument = false;
      this.backgroundColor = "bg-primary";
      this.xrayPrefs = [];

      this.helper = helper;
      this.http = http;
      this.dialogService = DialogService;
      this.goData = Data;
      this.popHelper = PopupHelper;
      this.home = Home;
      this.taskHelper = TaskHelper;
      this.globals = Globals;
    }

    MiniFile.prototype.activate = function activate(model) {
      var self = this;
      self.data = model;
      self.providerId = model.data.ProviderID;
      self.date = this.helper.getISODateToFormat(model.data.CreateDate, "MM/DD/YYYY");
      self.isXray = model.data.TaskTypeDescription == 'XRAY' ? true : false;
      self.isPdf = self.setIsPdf(model.data);
      self.isGoForm = model.blockType == 'goForm' ? true : false;
      self.isDocument = !self.isPdf && model.blockType == 'document' ? true : false;
      self.setCanDeleteDocument();
      if (self.isXray) {
        self.xrayId = self.data.data.ObjectID;
        self.getXray(self.xrayId, function (res) {
          self.xrayData = res;
        });
        self.getXrayPrefs();
      }

      if (self.helper.xraypath != null && self.helper.xraypath.length > 0) {
        self.xrayViewerEnabled = true;
      }
      if (self.isXray) {
        self.backgroundColor = 'bg-dark';
      }
      if (self.isGoForm) {
        self.backgroundColor = 'bg-info';
      }
    };

    MiniFile.prototype.getXrayPrefs = function getXrayPrefs() {
      var self = this;
      var bp = self.home.currentBoard.visitInfo.bodypart;
      var url = 'xray/pref?providerId=' + self.providerId + '&bodypart=' + bp;
      self.goData.getWithUrl(url, function (res) {
        self.xrayPrefs = res;
      });
    };

    MiniFile.prototype.xrayPrefClick = function xrayPrefClick(pref) {
      if (this.data) {
        this.data.data.Details = pref.XRayText;
      }
    };

    MiniFile.prototype.setCanDeleteDocument = function setCanDeleteDocument() {
      var self = this;

      if (self.home.currentBoard.visitInfo.locked) {
        self.canDeleteDocument = false;
        return;
      }

      if (self.data.data.ProviderID == self.helper._user.UserData.ProviderID) {
        self.canDeleteDocument = true;
      } else if (self.helper._user.RoleDetails.DeleteHistory) {
        self.canDeleteDocument = true;
      }
    };

    MiniFile.prototype.setIsPdf = function setIsPdf(data) {
      if (data.hasOwnProperty('DocPath')) {
        return data.DocPath.includes(".pdf") ? true : false;
      } else if (data.hasOwnProperty('DocumentLocation')) {
        return data.DocumentLocation.includes(".pdf") ? true : false;
      } else {
        return false;
      }
    };

    MiniFile.prototype.detached = function detached() {
      var self = this;

      if (self.xrayData != null && self.xrayData.XRayFinding != self.data.data.Details) {
        self.xrayData.XRayFinding = self.data.data.Details;
        self.updateXray(self.xrayData);
      }
    };

    MiniFile.prototype.toggleFinding = function toggleFinding() {

      var self = this;
      self.displayFinding = self.displayFinding ? false : true;

      if (!self.displayFinding) {
        if (self.xrayData != null) {
          self.xrayData.XRayFinding = self.data.data.Details;
          self.updateXray(self.xrayData);
        }
      }
    };

    MiniFile.prototype.getXray = function getXray(id, callback) {
      var self = this;
      var xralUrl = 'xrayresult/' + id;
      self.goData.getWithUrl(xralUrl, function (res) {
        callback(res);
      });
    };

    MiniFile.prototype.updateXray = function updateXray(xData) {
      var self = this;
      var url = 'xrayresult';
      var dialog = self.helper.createNoty("Updating Findings...", 3000);
      dialog.show();

      self.goData.putWithUrlAndData(url, xData, function (res) {
        dialog.close();
      });
    };

    MiniFile.prototype.parseDocPath = function parseDocPath(docpath) {
      var splitArray = docpath.split("\\");
      var length = splitArray.length;
      if (length > 0) {
        var patientId = splitArray[length - 2];
        var filepath = splitArray[length - 1];
        return {
          "patientId": patientId,
          "filepath": filepath
        };
      }
      return null;
    };

    MiniFile.prototype.deleteDocument = function deleteDocument() {
      var self = this;
      var url = null;
      if (!self.isGoForm) {
        url = 'documents?id=' + self.data.id;
      } else {
        url = 'goforms/instances?id=' + self.data.id;
      }

      self.home.displayDocumentSpinner = true;
      self.goData.deleteWithUrl(url, function (res) {
        self.home.displayDocumentSpinner = false;
        if (res == true) {
          for (var i = 0; i < self.home.currentBoard.documents.length; i++) {
            var aDocument = self.home.currentBoard.documents[i];

            if (aDocument.id == self.data.id) {
              self.home.currentBoard.documents.splice(i, 1);
              self.deleteGoFormBlockInstanceId(self.data.id);
              break;
            }
          }
        }
      });
    };

    MiniFile.prototype.deleteGoFormBlockInstanceId = function deleteGoFormBlockInstanceId(instanceId) {
      var self = this;
      for (var b = 0; b < self.home.currentBoard.blocks.length; b++) {
        var aBlock = self.home.currentBoard.blocks[b];
        if (aBlock.blockType == 'goForm' && aBlock.goFormInstanceId == instanceId) {
          aBlock.goFormInstanceId = null;

          self.goData.saveVisitBoard(self.home.currentBoard);
          self.home.currentBoard.hasChanged = false;
          break;
        }
      }
    };

    MiniFile.prototype.faxDocument = function faxDocument() {
      var self = this;
      var document = self.data.data;

      var docName = self.globals.getFileNameWithPath(document.DocPath);
      self.home.openFax(docName, document.ObjectID, 'DOCUMENT');
    };

    MiniFile.prototype.exportDocument = function exportDocument() {
      var self = this;
      self.home.displayDocumentSpinner = true;
      var jwt = self.helper.jwt();

      var url = 'documents/export/pdf?id=' + self.data.id;
      self.goData.getWithUrl(url, function (res) {
        if (res.Success == true) {

          var aBlock = self.goData.getNewBlock();
          aBlock.description = res.Filetype;
          aBlock.setBlockType('DOCUMENT');
          aBlock.objectId = res.ID;


          var blockData = {
            "CreateDate": (0, _moment2.default)().toISOString(),
            "TaskTypeDescription": "Document",
            "DocPath": res.Filepath,
            "ObjectID": res.ID
          };

          aBlock.data = blockData;
          self.home.currentBoard.documents.push(aBlock);
          self.home.documentCount = self.home.documentCount + 1;
        }
        self.home.displayDocumentSpinner = false;
      });
    };

    MiniFile.prototype.documentClicked = function documentClicked() {
      var self = this;

      if (self.displayFinding) {
        return;
      }

      if (self.isXray && self.xrayViewerEnabled) {
        self.taskHelper.cacheObjectToTask(self.taskHelper.objectId, self.taskHelper.taskTypeId);
        self.popHelper.openXrayPop(self.data.data.DocPath, self.xrayId);
      }
      if (!self.isXray && self.isDocument) {
        var taskTypeId = void 0;
        if (!self.data.data.ObjectID) {
          var tt = self.taskHelper.getTaskTypeWithTypeAndDescription("DOCUMENT", self.data.data.DocumentType);
          taskTypeId = tt.Id;
        } else {
          taskTypeId = self.data.data.TaskTypeID;
        }
        self.home.openDocument(self.data.id, taskTypeId);
      }
      if (!self.isXray && self.isPdf) {
        self.home.openPdf(self.data.data.DocPath, self.data.data.PatientID);
      }
      if (!self.isXray && self.isGoForm) {
        var inst = {
          'Description': this.data.description,
          'Id': self.data.id,
          'FormId': self.data.data.formId
        };
        self.home.openGoFormInstance(inst);
      }
    };

    return MiniFile;
  }()) || _class);
});;
define('text!go/blocks/miniFile.html',[],function(){return "<template><style>.large{width:95%;height:200px}</style><div class=\"card ${displayFinding ? 'large' : 'mini'} ${backgroundColor} text-white text-left\" style=\"flex:none;margin-right:10px;margin-top:10px;margin-left:0;overflow:inherit\"><div class=\"card-img-overlay\" click.delegate=\"documentClicked()\"><div class=\"d-flex align-items-center\"><div class=\"h5 card-title mb-0\">${data.description}</div><div if.bind=\"displayFinding\" class=\"dropdown ml-auto\"><button class=\"btn btn-secondary dropdown-toggle\" style=\"background-color:transparent\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\">Impressions</button><div class=\"dropdown-menu\"><a repeat.for=\"p of xrayPrefs\" class=\"dropdown-item\" href=\"#\" click.delegate=\"xrayPrefClick(p)\">${p.XRayType}</a></div></div></div><div class=\"d-flex align-items-center text-uppercase\" style=\"color:#aed5ff\"><div repeat.for=\"bp of data.bodyparts\" class=\"mr-2\">${bp}</div></div><h6 class=\"card-subtitle mb-2 mt-1\">${date}</h6><p if.bind=\"displayFinding\" class=\"card-text\" style=\"overflow-y:scroll;height:110px\"><textarea class=\"form-control\" rows=\"3\" value.bind=\"data.data.Details\"></textarea></p></div><span if.bind=\"!isXray\" class=\"fa-stack fa-lg\" style=\"right:5px;position:absolute;bottom:10px\"><i if.bind=\"isPdf\" class=\"fa fa-file-pdf-o fa-2x\" aria-hidden=\"true\"></i> <i if.bind=\"isGoForm\" class=\"fa fa-list-alt fa-2x\" aria-hidden=\"true\"></i> <i if.bind=\"isDocument\" class=\"fa fa-file-text-o fa-2x\" aria-hidden=\"true\"></i></span><div if.bind=\"!isXray\" class=\"dropdown\"><button class=\"btn float-right\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-ellipsis-h fa-2x\" style=\"color:#7ebbff\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a class=\"dropdown-item ${isPdf ? 'disabled' : ''}\" href=\"#\" click.delegate=\"exportDocument()\"><i class=\"fa fa-file-pdf-o fa-fw mr-1\" aria-hidden=\"true\"></i>Export</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"faxDocument()\"><i class=\"fa fa-fax fa-fw mr-1\" aria-hidden=\"true\"></i>Fax</a> <a class=\"dropdown-item ${!canDeleteDocument ? 'disabled' : ''}\" href=\"#\" click.delegate=\"deleteDocument()\"><i class=\"fa fa-trash-o fa-fw mr-1\" aria-hidden=\"true\"></i>Delete</a></div></div><i if.bind=\"isXray\" class=\"fa fa-pencil-square-o p-2\" style=\"right:5px;position:absolute;bottom:5px\" aria-hidden=\"true\" click.delegate=\"toggleFinding()\"></i></div></template>";});;
define('go/blocks/mips',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', '../home', '../../data/go/data', 'aurelia-event-aggregator'], function (exports, _helper, _http, _aureliaFramework, _home, _data, _aureliaEventAggregator) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Mips = undefined;

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var MipsRow = function MipsRow(data, description, code) {
    _classCallCheck(this, MipsRow);

    this.data = data;
    this.description = description;
    this.code = code;
    this.snomed;
    this.referringId;
  };

  var Mips = exports.Mips = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _home.Home, _data.Data, _aureliaEventAggregator.EventAggregator), _dec(_class = function () {
    function Mips(helper, http, Home, Data, EventAggregator) {
      _classCallCheck(this, Mips);

      this.rows = [];
      this.loadData = true;
      this.planData = null;
      this.referringProviders = [];

      this.helper = helper;
      this.http = http;
      this.home = Home;
      this.data = Data;
      this.event = EventAggregator;
    }

    Mips.prototype.activate = function activate(model) {
      this.block = model;
      this.loadData = model.loadData;
      this.planData = model.dataObject;
    };

    Mips.prototype.attached = function attached() {
      var self = this;

      self.event.subscribe("addMipsRow", function (plan) {
        self.addRow(plan);
      });

      if (self.home.currentBoard != null && self.home.currentBoard.visitInfo != null) {

        self.patientId = self.home.currentBoard.visitInfo.patientId;
        self.date = self.home.currentBoard.visitInfo.date;
        self.providerId = self.home.currentBoard.visitInfo.providerId;

        self.data.getWithUrl('referring/all', function (refs) {
          self.referringProviders = refs;

          if (self.loadData) {
            self.load();
          } else if (self.planData) {
            self.addRow(self.planData);
          }
        });
      }
    };

    Mips.prototype.addRow = function addRow(plan) {
      var self = this;

      if (plan.SpecialtyReferringID) {
        var refPro = _.find(self.referringProviders, function (r) {
          return r.ReferringID == plan.SpecialtyReferringID;
        });
        var refName = refPro.NameLast + ',' + refPro.NameFirst;
        var aRow = new MipsRow(plan, refName, plan.ReasonCode);
        aRow.referringId = plan.SpecialtyReferringID;
        self.rows.push(aRow);
      }

      if (plan.Snomed) {
        self.data.getWithUrl('snomed/valueset?snomedCode=' + plan.Snomed, function (value) {
          var aRow = new MipsRow(plan, value.DisplayName, plan.ReasonCode);
          aRow.snomed = plan.Snomed;
          self.rows.push(aRow);
        });
      }
    };

    Mips.prototype.load = function load() {
      var self = this;

      var formattedDate = self.helper.getDateWithFormat(self.date, "MM-DD-YYYY");
      var url = 'plans/patients/' + self.patientId + '/providers/' + self.providerId + '/date/' + formattedDate;

      self.http.get(self.helper.getApiUrl(url), function (json) {
        for (var i = 0; i < json.length; i++) {
          var plan = json[i];

          self.addRow(plan);
        }
      });
    };

    return Mips;
  }()) || _class);
});;
define('text!go/blocks/mips.html',[],function(){return "<template><div class=\"card-header\"><h6 class=\"float-left mb-0\">MIPS <small class=\"text-muted\">${rows.length}</small></h6></div><div class=\"card-body overflow-auto p-0\"><table class=\"table table-striped table-sm\"><thead><tr><th scope=\"col\" style=\"width:15%\">Code</th><th scope=\"col\" style=\"width:65%\">Reason</th></tr></thead><tbody><tr repeat.for=\"r of rows\"><td>${r.code}</td><td>${r.description}</td></tr></tbody></table></div></template>";});;
define('go/blocks/order',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', 'moment', '../home', '../../data/go/data', '../pxSearch', 'aurelia-dialog', 'lodash', '../popupHelper', 'aurelia-event-aggregator', '../globals'], function (exports, _helper, _http, _aureliaFramework, _moment, _home, _data, _pxSearch, _aureliaDialog, _lodash, _popupHelper, _aureliaEventAggregator, _globals) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Order = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var Order = exports.Order = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _home.Home, _data.Data, _aureliaDialog.DialogService, _popupHelper.PopupHelper, _aureliaFramework.BindingEngine, _aureliaEventAggregator.EventAggregator, _globals.Globals), _dec(_class = function () {
    function Order(helper, http, Home, Data, DialogService, PopupHelper, BindingEngine, EventAggregator, Globals) {
      _classCallCheck(this, Order);

      this.orders = [];
      this.board = null;
      this.xrays = [];
      this.displayDeleteHeader = false;
      this.locked = false;
      this.ordersObserver = null;
      this.block = null;
      this.prefs = [];
      this.prefTypes = [];
      this.pxObject = null;
      this.loading = true;
      this.isAddingPreference = false;

      this.helper = helper;
      this.http = http;
      this.home = Home;
      this.goData = Data;
      this.dialogService = DialogService;
      this.popupHelper = PopupHelper;
      this.bindingEngine = BindingEngine;
      this.eventAggregator = EventAggregator;
      this.globals = Globals;
    }

    Order.prototype.ordersChanged = function ordersChanged(splices) {
      var self = this;

      if (self.loading && !self.isAddingPreference) {
        return;
      }

      this.save();

      self.isAddingPreference = false;
    };

    Order.prototype.activate = function activate(model) {
      this.block = model;
      this.block.childModel = this;
    };

    Order.prototype.addPreferenceWithId = function addPreferenceWithId(labId) {
      var self = this;
      self.isAddingPreference = true;

      var url = 'procedures/' + labId;
      self.goData.getWithUrl(url, function (res) {
        if (res) {
          var aOrder = self.goData.getNewPx(0, res.CptKey, res.Description, null, res);
          self.tryAddWithExistanceCheck(aOrder);
        }
      });
    };

    Order.prototype.attached = function attached() {

      var self = this;
      self.loading = true;

      self.displayDeleteHeader = !self.globals.isTouchDevice ? true : false;

      if (self.home.currentBoard != null && self.home.currentBoard.patientId != null) {

        self.board = self.home.currentBoard;

        self.patientId = self.home.currentBoard.patientId;
        self.date = self.home.currentBoard.visitInfo.date;
        self.providerId = self.home.currentBoard.visitInfo.providerId;
        self.userId = self.home.currentBoard.userId;
        self.bodypart = self.home.currentBoard.visitInfo.bodypart;
        self.bodyside = self.home.currentBoard.visitInfo.bodyside;
        self.locked = self.home.currentBoard.visitInfo.locked == 0 ? false : true;

        self.goData.getWithUrl('procedure', function (res) {
          self.pxObject = res;
        });

        self.getPrefs(self.providerId);

        self.load(function () {
          if (self.ordersObserver == null) {
            self.ordersObserver = self.bindingEngine.collectionObserver(self.orders).subscribe(self.ordersChanged.bind(self));

            setTimeout(function () {
              self.loading = false;
            }, 1000);
          }
        });

        self.eventAggregator.subscribe("refreshOrders", function () {
          self.load();
        });

        if (self.block.loadPreferenceCallback) {
          self.block.loadPreferenceCallback(self.block);
        }
      }
    };

    Order.prototype.doesOrderExist = function doesOrderExist(order) {
      return _.find(this.orders, function (o) {
        return o.code == order.code && o.side == order.side;
      });
    };

    Order.prototype.displayPxSearch = function displayPxSearch(filterType) {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.popupHelper.openProcedureSearchPop(filterType, false, function (pxs) {
        if (pxs != null) {
          for (var p = 0; p < pxs.length; p++) {
            self.tryAddWithExistanceCheck(pxs[p]);
          }
        }
      });
    };

    Order.prototype.openLabEditPopup = function openLabEditPopup(px) {
      var self = this;

      var viewPath = './labOrderEdit';
      var windowHeight = window.innerHeight - 100;
      var windowWidth = window.innerWidth;

      var width = windowWidth / 3 * 2;
      var left = windowWidth / 5;

      var options = {
        closeActiveDialog: false
      };

      var title = "Lab Order";

      self.popupHelper.openViewModelPop(viewPath, px, title, width, windowHeight, 50, left, options, function (obj, res) {
        if (obj.hasOwnProperty("cancelled")) {
          return;
        } else {
          px = res.output;
          self.save();
        }
      });
    };

    Order.prototype.OD_Lab_LOINCToOD_Lab_Order = function OD_Lab_LOINCToOD_Lab_Order(loinc) {
      var order = this.getNewLabOrder(this.patientId, this.providerId, this.date, this.userId);
      order.TestOrdered = loinc.Short_Name;
      order.Type = "Lab";
      order.Code = loinc.LCODE;
      return order;
    };

    Order.prototype.tryAddWithExistanceCheck = function tryAddWithExistanceCheck(obj) {
      var self = this;
      if (!self.doesOrderExist(obj)) {
        var aOrder = self.goData.getNewPx(0, obj.code, obj.description, (0, _moment2.default)().format("MM/DD/YYYY"), obj.data);
        aOrder.side = obj.side;
        aOrder.part = obj.part;
        aOrder.index = self.orders.length;
        aOrder.canDelete = true;

        if (obj.data.hasOwnProperty("LNAMEID")) {
          aOrder.type = "LAB";

          aOrder.data = self.OD_Lab_LOINCToOD_Lab_Order(obj.data);
        } else if (obj.data.hasOwnProperty("Type")) {
          aOrder.type = obj.data.Type;
          if (aOrder.type.toUpperCase() == "X-RAY" || aOrder.type.toUpperCase() == "XRAY") {
            aOrder.outside = false;
          }
        }

        self.orders.push(aOrder);
      } else {
        self.displayAlert(obj.code + ' ' + obj.description + ' already exists today!', 'Order Exists', ['OK']);
      }
    };

    Order.prototype.displayAlert = function displayAlert(text, header, buttonDescriptionArray, callback) {
      var self = this;
      self.popupHelper.openGenericMessagePop(text, header, buttonDescriptionArray, false, function (res) {
        if (callback) {
          callback(res);
        }
      });
    };

    Order.prototype.detached = function detached() {
      if (this.ordersObserver) {
        this.ordersObserver.dispose();
      }
    };

    Order.prototype.getNewLabOrder = function getNewLabOrder(patientId, providerId, date, userId) {
      return {
        LabReqID: 0,
        PatientID: patientId,
        ProviderID: providerId,
        DateCollect: date,
        ExamDateTime: date,
        UserID: userId,
        OrderStatus: 'Ordered'
      };
    };

    Order.prototype.load = function load(callback) {
      var self = this;

      self.orders = [];

      self.getXrays(self.patientId, function (res) {

        self.xrays = res;

        self.goData.getLabOrders(self.patientId, self.date, function (res) {

          if (res == undefined || res == null) return;

          for (var i = 0; i < res.length; i++) {
            var m = res[i];

            var oDate = self.helper.getISODateToFormat(m.ExamDateTime, "MM/DD/YYYY");

            var aOrder = self.goData.getNewPx(m.LabReqID, m.Code, m.TestOrdered, oDate, m);
            aOrder.side = m.BodySide;
            aOrder.type = m.Type.toUpperCase();
            aOrder.index = i;

            aOrder.canDelete = oDate == self.date && !self.locked ? true : false;

            var foundXray = self.findXrayWithOrder(aOrder.data);
            if (foundXray) {
              aOrder.xray = foundXray;
              aOrder.side = foundXray.Body_Side;
              if (foundXray.Type != null && foundXray.Type == "Outside") {
                aOrder.outside = true;
              } else {
                aOrder.outside = false;
              }
            }

            self.orders.push(aOrder);
          }

          if (callback) {
            callback();
          }
        });
      });
    };

    Order.prototype.loopOrders = function loopOrders() {
      var self = this;
      for (var i = 0; i < self.orders.length; i++) {
        var aOrder = self.orders[i];
        var foundXray = self.findXrayWithOrder(aOrder.data);
        if (foundXray) {
          aOrder.xray = foundXray;
          aOrder.side = foundXray.Body_Side;
          if (foundXray.Type != null && foundXray.Type == "Outside") {
            aOrder.outside = true;
          } else {
            aOrder.outside = false;
          }
        }
      }
    };

    Order.prototype.findXrayWithOrder = function findXrayWithOrder(order) {
      var self = this;

      var bodySide = order.BodySide ? order.BodySide : self.bodyside;

      return _.find(self.xrays, function (x) {
        return x.CptKey == order.Code && (0, _moment2.default)(x.ExamDateTime).format("MM/DD/YYYY") == (0, _moment2.default)(order.ExamDateTime).format("MM/DD/YYYY") && x.Body_Side.toUpperCase() == bodySide.toUpperCase();
      });
    };

    Order.prototype.toggleOutsideImage = function toggleOutsideImage(order) {
      order.outside = order.outside ? false : true;
      if (order.xray) {
        order.xray.Type = order.outside ? 'Outside' : null;

        this.updateXrayResults(order.xray);
      }
    };

    Order.prototype.openXrayHistory = function openXrayHistory() {

      var self = this;
      var path = './xrayHistory';
      var windowHeight = window.innerHeight - 100;
      var windowWidth = window.innerWidth;

      var quarter = windowWidth / 4;
      var third = windowWidth / 3;

      var width = third * 2;
      var left = third / 2;

      var height = windowHeight / 2;
      var qHeight = windowHeight / 4;
      var top = qHeight;

      var options = {
        displayHeader: false,
        bodyPadding: 0
      };

      var model = {
        xrays: self.xrays
      };

      self.popupHelper.openViewModelPop(path, model, 'Xray History', width, height, top, left, options, function (xray) {
        var newX = self.goData.getNewPx(0, xray.data.CptKey, xray.data.Description, (0, _moment2.default)(self.date).format("MM/DD/YYYY"), xray.data);
        newX.canDelete = true;
        self.orders.push(newX);
      });
    };

    Order.prototype.getXrays = function getXrays(patientId, callback) {
      var self = this;
      self.goData.getWithUrl('xrayresult/wlitem?patientId=' + patientId, function (res) {
        callback(res);
      });
    };

    Order.prototype.save = function save(callback) {
      var self = this;
      var updateOrders = [];
      var saveOrders = [];
      var saveOrdersClone = [];

      if (self.block.dontSave) {
        return;
      }

      for (var i = 0; i < self.orders.length; i++) {
        var aOrder = self.orders[i];

        if (aOrder.id == 0) {

          var orderToSave = self.getNewLabOrder(self.patientId, self.providerId, self.date, self.userId);
          orderToSave.TestOrdered = aOrder.description;
          orderToSave.Type = aOrder.data.hasOwnProperty('LNAMEID') ? 'LAB' : aOrder.data.Type;
          orderToSave.Code = aOrder.code;
          orderToSave.VisitType = self.board.visitInfo.visitType;
          orderToSave.BodyPart = aOrder.part ? aOrder.part : self.bodypart;
          orderToSave.BodySide = aOrder.side ? aOrder.side : self.bodyside;
          orderToSave.ExamDateTime = self.date;
          orderToSave.DateCollect = self.date;

          var saveOrderObject = {
            'orderToSave': orderToSave,
            'localOrder': aOrder,
            'orderIndex': i
          };

          saveOrders.push(saveOrderObject);

          saveOrdersClone.push(self.orders[i]);
        } else {
          updateOrders.push(aOrder.data);
        }
      }

      if (saveOrders.length > 0 || updateOrders.length > 0) {

        if (saveOrders.length > 0) {
          var sOrders = _.map(saveOrders, 'orderToSave');

          self.goData.saveLabOrders(sOrders, function (res) {
            var _loop = function _loop(_i) {
              saveOrders[_i].localOrder.id = res[_i].LabReqID;

              var saveOrder = sOrders[_i];

              if (sOrders[_i].Type == 'X-RAY' || sOrders[_i].Type == 'XRAY') {
                orderIndex = saveOrders[_i].orderIndex;

                self.saveXraySubroutine(saveOrder, orderIndex, function (res) {
                  self.orders[orderIndex].data = res;
                  self.orders[orderIndex].xray = res;
                });
              }

              if (self.isProcedureBillable(saveOrdersClone[_i].data)) {
                self.goData.getWithUrl('patientprocedure', function (px) {
                  px.CptCode = saveOrder.Code;
                  px.CodeDescr = saveOrder.TestOrdered;
                  px.BodyPart = saveOrder.BodyPart;
                  px.BodySide = saveOrder.BodySide;
                  px.PatientID = saveOrder.PatientID;
                  px.ProviderID = saveOrder.ProviderID;
                  px.ExamDateTime = saveOrder.ExamDateTime;
                  px.UserID = saveOrder.UserID;
                  px.Type = saveOrdersClone[_i].data.Type;
                  px.ProcedureID = saveOrdersClone[_i].data.ProcedureID;
                  px.MfgCode = saveOrdersClone[_i].data.Cpt_Code;

                  self.goData.postWithUrlAndData('patientprocedures', JSON.stringify(px), function (newPx) {
                    self.eventAggregator.publish("refreshProcedures");
                  });
                });
              }
            };

            for (var _i = 0; _i < sOrders.length; _i++) {
              var orderIndex;

              _loop(_i);
            }
          });
        }

        if (updateOrders.length > 0) {
          self.goData.updateLabOrders(updateOrders, function (res) {
            var s = res;
          });
        }

        if (callback) {
          callback(true);
        }
      } else {
        if (callback) {
          callback(true);
        }
      }
    };

    Order.prototype.saveXraySubroutine = function saveXraySubroutine(saveOrder, index, callback) {
      var self = this;
      self.goData.getXrayResultNew(function (newXray) {

        newXray.CptKey = saveOrder.Code;
        newXray.Description = saveOrder.TestOrdered + " " + saveOrder.BodySide;
        newXray.Body_Part = saveOrder.BodyPart;
        newXray.Body_Side = saveOrder.BodySide;
        newXray.PatientID = saveOrder.PatientID;
        newXray.ExamDateTime = saveOrder.ExamDateTime;
        newXray.ProviderID = saveOrder.ProviderID;
        newXray.UserID = saveOrder.UserID;
        newXray.IsComplete = true;

        self.goData.saveXrayResult(newXray, function (xres) {

          self.xrays.push(xres);

          self.addXrayToDocumentTray(xres, function (res) {
            callback(xres, index);
          });
        });
      });
    };

    Order.prototype.updateXrayResults = function updateXrayResults(xray) {
      var self = this;
      self.goData.updateXrayResult(xray, function (xres) {});
    };

    Order.prototype.addXrayToDocumentTray = function addXrayToDocumentTray(OD_Xray_Results, callback) {
      var self = this;

      self.goData.getWithUrl('worklist?xrayid=' + OD_Xray_Results.XrayID, function (wlitem) {

        var aBlock = self.goData.getNewBlock();
        aBlock.description = OD_Xray_Results.Description;
        aBlock.setBlockType('document');
        aBlock.widthMult = 2;
        aBlock.heightMult = 2;

        var tt = self.home.taskHelper.getTaskTypeWithTypeAndDescription('order', 'xray');

        var obj = {
          TaskTypeID: tt.TaskTypeID,
          TaskTypeDescription: tt.Description,
          TaskType: tt.Type,
          Locked: 0,
          Description: OD_Xray_Results.Description,
          Type: "Order",
          ExamDateTime: OD_Xray_Results.ExamDateTime,
          CreateDate: OD_Xray_Results.ExamDateTime,
          ProviderID: OD_Xray_Results.ProviderID,
          ObjectID: OD_Xray_Results.XrayID,
          DocPath: wlitem.StudyID,
          Part: OD_Xray_Results.Body_Part,
          Details: OD_Xray_Results.XRayFinding,
          DetailsMore: OD_Xray_Results.CptKey,
          BoardId: ""
        };

        aBlock.data = obj;
        aBlock.objectId = OD_Xray_Results.XrayID;
        self.home.currentBoard.documents.push(aBlock);

        callback(obj);
      });
    };

    Order.prototype.openPreferencePicker = function openPreferencePicker(prefType) {
      var self = this;

      var filtered = _.filter(self.prefs, function (p) {
        return p.PrefType == prefType;
      });
      filtered = _.uniqBy(filtered, "PanelDesc");
      var prefItems = [];
      for (var u = 0; u < filtered.length; u++) {
        prefItems.push(self.goData.getGenericPicklistItem(filtered[u].PanelDesc, filtered[u]));
      }
      self.popupHelper.openGenericPicklistPop("Order Prefs", "Select a preference...", prefItems, false, function (selectedPref) {

        var pref = selectedPref.item;

        var orders = _.filter(self.prefs, function (p) {
          return p.PanelDesc == pref.data.PanelDesc;
        });

        for (var i = 0; i < orders.length; i++) {

          var tOrder = orders[i];

          var newPx = _.clone(self.pxObject);
          newPx.CptKey = tOrder.Code;
          newPx.Description = tOrder.LabDescription;
          newPx.Billable = true;
          newPx.Type = tOrder.Type;
          newPx.Body_Part = tOrder.BodyPart;

          var aOrder = self.goData.getNewPx(0, newPx.CptKey, newPx.Description, null, newPx);
          aOrder.canDelete = true;
          self.tryAddWithExistanceCheck(aOrder);
        }
      });
    };

    Order.prototype.getPrefs = function getPrefs(providerId) {
      var self = this;
      var url = "laborder/prefs?providerId=" + providerId;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        for (var i = 0; i < json.length; i++) {
          var m = json[i];

          if (!_.includes(self.prefTypes, m.PrefType)) {
            self.prefTypes.push(m.PrefType);
          }
          self.prefs.push(m);
        }
      });
    };

    Order.prototype.isProcedureBillable = function isProcedureBillable(px) {
      if (px.Billable != null && px.Billable.length > 0 && px.Billable.toUpperCase() == 'YES') {
        return true;
      } else {
        return false;
      }
    };

    Order.prototype.rowSwipe = function rowSwipe(event, row) {

      if (!row.canDelete) {
        return;
      }

      if (event.direction === 'left') {
        if (!row.displayDelete) {
          row.displayDelete = true;
          this.displayDeleteHeader = true;
        }
      } else if (event.direction === 'right') {
        if (row.displayDelete) {
          row.displayDelete = false;
          this.displayDeleteHeader = false;
        }
      }
    };

    Order.prototype.displayDeleteAlert = function displayDeleteAlert(text, header, callback) {
      var self = this;
      self.popupHelper.openGenericMessagePop(text, header, ['YES', 'NO'], false, function (res) {
        callback(res);
      });
    };

    Order.prototype.deleteOrderClick = function deleteOrderClick(index) {
      var self = this;
      self.displayDeleteAlert("Do you wish to delete this order?", 'Delete Order?', function (res) {
        if (res.result == 'YES') {
          var id = self.orders[index].id;
          if (id == 0) {
            self.orders.splice(index, 1);
            self.updateRowIndexes();
          } else {
            self.deleteOrder(self.orders[index], function (res) {
              if (res == true) {
                self.orders.splice(index, 1);
                self.updateRowIndexes();
              }
            });
          }
        } else {
          self.orders[index].displayDelete = false;
        }
      });
    };

    Order.prototype.deleteOrder = function deleteOrder(order, callback) {
      var self = this;
      var url = 'laborders?id=' + order.id;
      self.goData.deleteWithUrl(url, function (res) {

        var strDate = (0, _moment2.default)(order.date).format('MM-DD-YYYY');

        if (order.hasOwnProperty("xray")) {
          self.deleteXray(order.xray.XrayID);
        }

        self.deleteProcedureWithCodeDateAndPatientId(order.code, strDate, self.patientId, function (pxRes) {

          callback(res);
        });
      });
    };

    Order.prototype.deleteXray = function deleteXray(xrayId) {
      var self = this;

      self.goData.deleteXrayResult(xrayId, function (res) {
        var xIndex = _.findIndex(self.home.currentBoard.documents, function (d) {
          return d.objectId == xrayId;
        });
        if (xIndex > -1) {
          self.home.currentBoard.documents.splice(xIndex, 1);
        }
      });
    };

    Order.prototype.deleteProcedureWithCodeDateAndPatientId = function deleteProcedureWithCodeDateAndPatientId(code, date, patientId, callback) {
      var self = this;
      var getUrl = 'patientprocedure/patients/' + patientId + '/code/' + code + '/date/' + date;
      self.goData.getWithUrl(getUrl, function (getRes) {
        if (getRes) {
          var delUrl = 'patientprocedures/' + getRes.PatientCPTID;
          self.goData.deleteWithUrl(delUrl, function (delRes) {

            self.refreshProcedures();
            callback(delRes);
          });
        } else {
          callback(false);
        }
      });
    };

    Order.prototype.refreshProcedures = function refreshProcedures() {
      var self = this;
      self.eventAggregator.publish("refreshProcedures");
    };

    Order.prototype.updateRowIndexes = function updateRowIndexes() {
      var self = this;
      for (var i = 0; i < self.orders.length; i++) {
        var r = self.orders[i];
        r.index = i;
      }
    };

    return Order;
  }()) || _class);
});;
define('text!go/blocks/order.html',[],function(){return "<template><div class=\"card-header d-flex align-items-center\" style=\"height:44px\"><h6 class=\"mb-0 mr-2\">ORDERS <small class=\"text-muted\">${orders.length}</small></h6><div class=\"dropdown mr-2\" style=\"position:inherit\"><button class=\"btn btn-outline-primary dropdown-toggle\" disabled.bind=\"locked\" style=\"padding:4px 12px 4px 12px\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-plus pr-1\"></i></button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><a class=\"dropdown-item px-3\" repeat.for=\"t of prefTypes\" href=\"#\" click.delegate=\"openPreferencePicker(t)\"><i class=\"fa fa-user-plus fa-fw pr-2\" aria-hidden=\"true\"></i>${t}</a></div></div><div class=\"dropdown\"><button class=\"btn btn-primary dropdown-toggle\" style=\"padding:4px 12px 4px 12px\" disabled.bind=\"locked\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\">X-RAY</button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"displayPxSearch('X-RAY')\"><i class=\"fa fa-plus mr-1\" aria-hidden=\"true\"></i>Add</a> <a if.bind=\"xrays.length > 0\" class=\"dropdown-item\" href=\"#\" click.delegate=\"openXrayHistory()\">X Priors</a></div></div><a class=\"btn btn-default ml-auto ${locked ? 'disabled' : ''}\" href=\"#\" style=\"padding:0 34px 0 0\"><i class=\"fa fa-search fa-2x text-primary\" click.delegate=\"displayPxSearch(null)\"></i></a></div><div class=\"card-body p-0 overflow-hidden\"><div class=\"tableFixHeadLight\"><table class=\"table table-sm\"><thead><tr><th scope=\"col\">Code</th><th scope=\"col\">Desc</th><th scope=\"col\" if.bind=\"displayDeleteHeader\" class=\"au-animate animate-swipe-row-right\"></th></tr></thead><tbody><template repeat.for=\"s of orders\"><tr if.bind=\"globals.isTouchDevice\" hammer-swipe.call=\"rowSwipe($event, s)\" css=\"background-color: ${s.isEven() ? '#f2f2f2' : '' & signal: 'refresh-row'}\"><td style=\"vertical-align:middle\">${s.code}</td><td class=\"d-flex align-items-center\"> ${s.description} <span class=\"text-black-50 mr-1 ml-auto text-uppercase\"><strong>${s.side}</strong></span><button if.bind=\"s.type == 'LAB'\" type=\"button\" class=\"btn btn-outline-secondary float-right mr-2\" click.delegate=\"openLabEditPopup(s)\"><i class=\"fa fa-flask mr-1\"></i>Edit</button> <button if.bind=\"s.type == 'X-RAY'\" type=\"button\" class=\"btn ${s.outside == true ? 'btn-warning' : 'btn-outline-secondary'} float-right mr-2\" click.delegate=\"toggleOutsideImage(s)\">Outside <i class=\"fa fa-external-link-square\"></i></button></td><td if.bind=\"displayDeleteHeader && !s.displayDelete\"></td><td if.bind=\"s.displayDelete\" style=\"background-color:#dd3444;vertical-align:middle\" class=\"au-animate animate-swipe-row-left animate-swipe-row-right\"><button type=\"button\" class=\"btn btn-danger\" style=\"display:block;margin:auto\" click.delegate=\"deleteOrderClick($index)\"><i class=\"fa fa-trash\"></i></button></td></tr><tr if.bind=\"!globals.isTouchDevice\" css=\"background-color: ${s.isEven() ? '#f2f2f2' : '' & signal: 'refresh-row'}\"><td style=\"vertical-align:middle\">${s.code}</td><td class=\"d-flex align-items-center\"> ${s.description} <span class=\"text-black-50 mr-1 ml-auto text-uppercase\"><strong>${s.side}</strong></span><button if.bind=\"s.type == 'LAB'\" type=\"button\" class=\"btn btn-outline-secondary float-right mr-2\" click.delegate=\"openLabEditPopup(s)\"><i class=\"fa fa-flask mr-1\"></i>Edit</button> <button if.bind=\"s.type == 'X-RAY'\" type=\"button\" class=\"btn ${s.outside == true ? 'btn-warning' : 'btn-outline-secondary'} float-right mr-2\" click.delegate=\"toggleOutsideImage(s)\">Outside <i class=\"fa fa-external-link-square\"></i></button></td><td style=\"vertical-align:middle\"><button if.bind=\"s.canDelete\" type=\"button\" class=\"btn\" style=\"display:block;margin:auto\" click.delegate=\"deleteOrderClick($index)\"><i class=\"fa fa-trash\"></i></button></td></tr></template></tbody></table></div></div></template>";});;
define('go/blocks/plan',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', '../home', '../../data/go/data', 'aurelia-event-aggregator', '../globals', '../preferenceHelper', '../popupHelper', 'lodash'], function (exports, _helper, _http, _aureliaFramework, _home, _data, _aureliaEventAggregator, _globals, _preferenceHelper, _popupHelper, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Plan = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _desc, _value, _class, _descriptor, _dec, _class3, _desc2, _value2, _class4, _descriptor2, _descriptor3;

  var PlanRow = (_class = function () {
    function PlanRow(data, bodypart, text, title, parent) {
      _classCallCheck(this, PlanRow);

      _initDefineProp(this, 'text', _descriptor, this);

      this.data = data;
      this.parent = parent;
      this.bodypart = bodypart;
      this.text = text;
      this.title = title;
      this.selected = false;
      this.element;
      this.rowid = 0;
      this.displayDelete = false;
      this.canDelete = false;
      this.specialty = null;
      this.reason = null;
      this.hasReason = false;
    }

    PlanRow.prototype.textChanged = function textChanged(newValue, oldValue) {

      if (this.parent.fromPrevious || this.parent.prefClicked) {
        if (newValue !== oldValue) {
          this.parent.trySave();
          this.parent.fromPrevious = false;
          this.parent.prefClicked = false;
        }
      }
    };

    PlanRow.prototype.auto_grow = function auto_grow(element) {};

    return PlanRow;
  }(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'text', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  })), _class);
  var Plan = exports.Plan = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _home.Home, _data.Data, _aureliaEventAggregator.EventAggregator, _globals.Globals, _preferenceHelper.PreferenceHelper, _popupHelper.PopupHelper), _dec(_class3 = (_class4 = function () {
    function Plan(helper, http, Home, Data, EventAggregator, Globals, PreferenceHelper, PopupHelper) {
      _classCallCheck(this, Plan);

      this.data = null;

      _initDefineProp(this, 'bodypart', _descriptor2, this);

      this.prefClicked = false;
      this.locked = false;
      this.title = "";
      this.speechId = 'plan-speech';

      _initDefineProp(this, 'planText', _descriptor3, this);

      this.board = null;
      this.fromPrevious = false;
      this.fromPreviousDate = null;
      this.fromPreviousProviderId = null;
      this.fromPreviousBodyPart = null;
      this.loadData = true;
      this.block = null;
      this.rows = [];
      this.selectedRowIndex = 0;
      this.parentChildItems = [];
      this.bodyparts = [];
      this.textareaHeight = 0;
      this.referringProviders = [];
      this.rowHeight = 100;

      this.helper = helper;
      this.http = http;
      this.home = Home;
      this.goData = Data;
      this.eventAggregator = EventAggregator;
      this.globals = Globals;
      this.prefHelper = PreferenceHelper;
      this.popupHelper = PopupHelper;
    }

    Plan.prototype.activate = function activate(model) {
      this.block = model;
      this.block.childModel = this;

      if (model.hasOwnProperty('fromPrevious')) {
        this.fromPrevious = true;
      }
      if (model.hasOwnProperty('fromPreviousProviderId')) {
        this.fromPreviousProviderId = model.fromPreviousProviderId;
      }
      if (model.hasOwnProperty('fromPreviousDate')) {
        this.fromPreviousDate = model.fromPreviousDate;
      }
      if (model.hasOwnProperty('fromPreviousBodyPart')) {
        this.fromPreviousBodyPart = model.fromPreviousBodyPart;
      }
      this.loadData = model.loadData;
    };

    Plan.prototype.addPreferenceWithId = function addPreferenceWithId(postOpId) {
      var self = this;
      self.goData.getFollowUpPrefPopulated(postOpId, self.patientId, self.providerId, self.date, function (res) {});
    };

    Plan.prototype.hasValue = function hasValue() {
      var self = this;
      if (self.rows.length > 0 && self.rows[self.selectedRowIndex].text != null) {
        return true;
      }
      return false;
    };

    Plan.prototype.loadPreferences = function loadPreferences(providerId, bodypart) {
      var self = this;

      var url = 'plans/preferences/sorted?providerId=' + providerId;
      self.goData.getWithUrl(url, function (res) {

        self.createPreferenceMenu(res);
      });
    };

    Plan.prototype.openReasonCodePicker = function openReasonCodePicker(reasonCode, callback) {
      var self = this;
      var reasonUrl = 'snomed/reasoncodes?snomedCode=' + reasonCode;
      self.goData.getWithUrl(reasonUrl, function (codeRes) {
        var columnHeaders = ['Code', 'Name'];
        var rowData = [];
        for (var i = 0; i < codeRes.length; i++) {
          var code = codeRes[i];
          var genTableRow = self.goData.getGenericTableRow([code.Code, code.DisplayName], code);
          genTableRow.id = i;
          rowData.push(genTableRow);
        }

        self.popupHelper.openGenericTablePop('Select Reason', columnHeaders, rowData, false, { zIndex: 5001 }, function (res) {
          callback(res);
        });
      });
    };

    Plan.prototype.openSpecialityPicker = function openSpecialityPicker(callback) {
      var self = this;

      var specialtyUrl = 'referring/specialty/all';
      self.goData.getWithUrl(specialtyUrl, function (specRes) {
        var columnHeaders = ['Name', 'Specialty'];
        var rowData = [];
        for (var i = 0; i < specRes.length; i++) {
          var specialist = specRes[i];
          var genTableRow = self.goData.getGenericTableRow([specialist.ReferringName, specialist.SpecialtyCodeDescription], specialist);
          genTableRow.id = i;
          rowData.push(genTableRow);
        }

        self.popupHelper.openGenericTablePop('Select Specialist', columnHeaders, rowData, false, { zIndex: 5001 }, function (res) {
          callback(res);
        });
      });
    };

    Plan.prototype.rowHasSameBodypartType = function rowHasSameBodypartType(row, bodypart, type) {
      var rowTitle = row.title.toLowerCase();
      if (rowTitle.includes(bodypart.toLowerCase()) && rowTitle.includes(type.toLowerCase())) {
        return true;
      }
      return false;
    };

    Plan.prototype.addResultsFromPrefPicker = function addResultsFromPrefPicker(data, bodypart) {
      var self = this;

      var bType = self.boardType.toUpperCase();

      if (self.rows.length > 0) {
        var updated = false;

        var _loop = function _loop(r) {
          if (self.rows[r].selected == true && self.rowHasSameBodypartType(self.rows[r], bodypart, bType)) {

            self.popupHelper.openGenericMessagePop("Would you like to create a new plan or append to the current?", 'New or Append?', ['NEW', 'APPEND'], false, function (popRes) {
              if (popRes.result == 'APPEND') {
                var appended = self.rows[r].text + " " + data.Detail;
                self.updateRow(bodypart, appended, r, data);
              } else if (popRes.result == 'NEW') {
                self.addNewRow(bodypart, data.Detail, data);
              }
            });

            updated = true;
            return 'break';
          }
        };

        for (var r = 0; r < self.rows.length; r++) {
          var _ret = _loop(r);

          if (_ret === 'break') break;
        }
        if (!updated) {
          self.addNewRow(bodypart, data.Detail, data);
        }
      } else {
        self.addNewRow(bodypart, data.Detail, data);
      }
    };

    Plan.prototype.openPrefPicker = function openPrefPicker() {
      var self = this;

      var viewPath = './parentChildPicker';

      var windowHeight = window.innerHeight - 100;
      var windowWidth = window.innerWidth;

      var quarter = windowWidth / 4;
      var width = windowWidth / 2;
      var left = quarter;

      var height = windowHeight / 2;
      var qHeight = windowHeight / 4;
      var top = qHeight;

      this.popupHelper.openViewModelPop(viewPath, self, 'Plan Preferences', width, height, top, left, null, function (res) {

        var prefBodypart = res.parent.description;

        if (res.data.Object.NeedsSpecialty) {
          self.openSpecialityPicker(function (specialtyRes) {
            var specRes = specialtyRes.row.data;

            res.data.reason = specRes;
            res.data.reason.Detail = res.data.Detail;
            res.data.reason.Lcode = res.data.Object.Lcode;
            res.data.reason.PlanPreferenceId = res.data.Object.PlanID;
            self.addResultsFromPrefPicker(res.data.reason, prefBodypart);
          });
        } else if (res.data.Object.NeedsReason) {
          self.openReasonCodePicker(res.data.Object.Snomed, function (reasonRes) {
            var rRes = reasonRes.row.data;
            res.data.reason = rRes;

            res.data.reason.Snomed = res.data.Object.Snomed;
            res.data.reason.SnomedType = res.data.Object.SnomedType;
            res.data.reason.Detail = res.data.Detail;
            res.data.reason.Lcode = res.data.Object.Lcode;
            res.data.reason.PlanPreferenceId = res.data.Object.PlanID;

            self.addResultsFromPrefPicker(res.data.reason, prefBodypart);
          });
        } else {
          self.addResultsFromPrefPicker(res.data, prefBodypart);
        }
      });
    };

    Plan.prototype.currentItemHasItem = function currentItemHasItem(currentItem, id) {
      return _.find(currentItem.items, function (i) {
        return i.id == id;
      });
    };

    Plan.prototype.createPreferenceMenu = function createPreferenceMenu(prefs) {
      var self = this;
      if (prefs.length == 0 || prefs[0].Children.length == 0) return;

      var bps = self.goData.bodyparts;
      var row_bodypart = null;
      if (self.rows.length > 0) {
        row_bodypart = self.rows[self.selectedRowIndex].bodypart.toUpperCase();
      } else {
        row_bodypart = self.bodypart;
      }

      var _loop2 = function _loop2() {
        var pci = self.goData.getParentChildItem(bps[b], null);
        var aPrefs = _.find(prefs, function (p) {
          return p.Path == pci.description;
        });
        if (aPrefs) {
          aPrefs = aPrefs.Children;
        }

        if (bps[b].toUpperCase() == row_bodypart) {
          self.currentParentChildItem = pci;
        }

        self.parentChildItems.push(pci);

        var rootItem = pci;

        if (!aPrefs) return 'continue';

        for (var p = 0; p < aPrefs.length; p++) {
          var currentItem = rootItem;
          var parentItem = null;
          var currentPref = aPrefs[p];
          var parentPref = null;

          var topItem = self.goData.getParentChildItem(currentPref.Path, currentPref, currentItem);
          currentItem.items.push(topItem);
          currentItem = currentItem.items[currentItem.items.length - 1];

          while (currentPref != null && currentPref.Children.length > 0) {
            parentItem = currentItem;
            parentPref = currentPref;
            var childPref = currentPref.Children.shift();
            var childItem = self.goData.getParentChildItem(childPref.Path, childPref, parentItem);
            currentItem.items.push(childItem);

            if (childPref.Children.length > 0) {
              currentItem = childItem;
              currentPref = childPref;
            } else {
              if (parentPref.Children.length > 0) {
                currentItem = parentItem;
                currentPref = parentPref;
              } else {
                var foundParentWithChildren = parentItem;
                var foundParent = false;
                while (!foundParent) {

                  if (foundParentWithChildren.parent.data == null) {
                    currentPref = null;
                    foundParent = true;
                    break;
                  }

                  if (foundParentWithChildren.parent.data.Children.length == 0) {
                    var tParent = foundParentWithChildren.parent;
                    foundParentWithChildren = tParent;
                  } else {
                    currentItem = foundParentWithChildren.parent;
                    currentPref = foundParentWithChildren.parent.data;
                    foundParent = true;
                  }
                }
              }
            }
          }
        }
      };

      for (var b = 0; b < bps.length; b++) {
        var _ret2 = _loop2();

        if (_ret2 === 'continue') continue;
      }
    };

    Plan.prototype.planTextChanged = function planTextChanged(newValue, oldValue) {
      if (this.fromPrevious || this.prefClicked) {
        if (newValue !== oldValue) {
          this.trySave();
          this.fromPrevious = false;
          this.prefClicked = false;
        }
      }
    };

    Plan.prototype.bodypartChanged = function bodypartChanged(newValue, oldValue) {
      var self = this;
      if (oldValue == undefined) {
        self.loadPreferences(self.providerId, newValue);
      }
    };

    Plan.prototype.resizeTextarea = function resizeTextarea() {
      var self = this;
      if (self.scrollbody) {
        if (self.rows.length == 1) {
          self.rowHeight = self.scrollbody.clientHeight;
        } else {
          self.rowHeight = Math.round(self.scrollbody.clientHeight * 0.75);
        }
      }
    };

    Plan.prototype.attached = function attached() {
      var self = this;

      self.resizeTextarea();

      if (self.home.currentBoard != null && self.home.currentBoard.visitInfo != null) {

        self.board = self.home.currentBoard;

        var _loop3 = function _loop3(i) {
          var found = _.find(self.bodyparts, function (f) {
            return f.part == self.board.visitInfo.bodyparts[i].part;
          });
          if (!found) {
            self.bodyparts.push(self.board.visitInfo.bodyparts[i]);
          }
        };

        for (var i = 0; i < self.board.visitInfo.bodyparts.length; i++) {
          _loop3(i);
        }

        self.bodyparts.push({ part: 'General', side: '' });

        self.patientId = self.home.currentBoard.visitInfo.patientId;
        self.date = self.home.currentBoard.visitInfo.date;
        self.providerId = self.home.currentBoard.visitInfo.providerId;
        self.userId = self.home.currentBoard.userId;
        self.bodypart = self.home.currentBoard.visitInfo.bodypart;
        self.boardType = self.home.currentBoard.visitInfo.typeForSave;
        if (self.home.currentBoard.visitInfo.locked != null) self.locked = self.home.currentBoard.visitInfo.locked == 0 ? false : true;

        self.eventAggregator.publish("planNewBlockAttached", self);

        if (self.loadData) {
          if (!self.fromPrevious) {
            self.load();
          } else {
            self.loadPrevious();
          }
        }

        self.eventAggregator.publish("modelAttached", self);

        if (self.block.loadPreferenceCallback) {
          self.block.loadPreferenceCallback(self.block);
        }

        self.eventAggregator.subscribe('blockresized', function () {
          self.resizeTextarea();
        });
      }
    };

    Plan.prototype.detached = function detached() {
      this.trySave();
    };

    Plan.prototype.trySave = function trySave() {
      var self = this;

      if (self.block.dontSave) {
        return;
      }

      if (self.board != null && !self.locked) {
        self.home.saveQueue.addItem(self);
      }
    };

    Plan.prototype.getNewRowId = function getNewRowId() {
      var self = this;
      var id = 0;
      for (var i = 0; i < self.rows.length; i++) {
        var aRow = self.rows[i];
        if (aRow.rowid > id) {
          id = aRow.rowid;
        }
      }

      return id + 1;
    };

    Plan.prototype.setSelectedRowWithIndex = function setSelectedRowWithIndex(index) {
      var self = this;
      self.selectedRow = self.rows[index];
      self.selectedRowIndex = index;
      self.planRowClicked(self.selectedRow);
    };

    Plan.prototype.addNewRow = function addNewRow(bodypart, text, data) {
      var self = this;
      var tTitle = self.boardType.toUpperCase() == 'FOLLOW' ? 'FOLLOW UP' : self.boardType.toUpperCase();
      var titleAndBp = tTitle + ": " + bodypart;


      var newRow = new PlanRow();
      newRow.data = null;
      newRow.parent = self;
      newRow.bodypart = bodypart;
      newRow.title = titleAndBp;
      newRow.text = text;


      newRow.referringId = data ? data.ReferringId : null;
      newRow.snomed = data ? data.Snomed : null;
      newRow.snomedType = data ? data.SnomedType : null;
      newRow.lcode = data ? data.Lcode : null;
      newRow.planPreferenceId = data ? data.PlanPreferenceId : null;
      newRow.reasonCode = null;
      if (data && (data.SpecialtyCode || data.Code)) {
        newRow.reasonCode = data.SpecialtyCode ? data.SpecialtyCode : data.Code;
      }

      if (newRow.reasonCode) {
        self.saveNewPlanObjectForMips(newRow, function (res) {
          newRow.data = res;
          var options = {
            loadData: false,
            dataObject: res,
            objectId: res.PlanID
          };
          var exists = self.board.getBlockWithType("mips");
          if (exists) {
            self.eventAggregator.publish("addMipsRow", res);
          } else {
            self.home.addNewBlockComponentToBoard('mips', options);
          }
        });
      }

      newRow.rowid = self.getNewRowId();

      self.rows.unshift(newRow);
      self.selectedRow = newRow;
      self.selectedRowIndex = 0;

      self.planRowClicked(newRow);

      var sb = self.scrollbody;
      setTimeout(function () {
        sb.scrollTop = 0;
      }, 500);

      return newRow;
    };

    Plan.prototype.updateRow = function updateRow(bodypart, text, index, data) {
      var self = this;
      var tTitle = self.boardType.toUpperCase() == 'FOLLOW' ? 'FOLLOW UP' : self.boardType.toUpperCase();
      var newRow = new PlanRow(null, bodypart, text, tTitle + ": " + bodypart, self);
      newRow.specialty = data.specialty;
      newRow.reason = data.reason;

      var rowToUpdate = self.rows[index];
      newRow.rowid = rowToUpdate.rowid;

      self.rows.splice(index, 1);
      self.rows.splice(index, 0, newRow);

      self.selectedRow = rowToUpdate;
      self.selectedRowIndex = index;

      self.planRowClicked(rowToUpdate);

      return rowToUpdate;
    };

    Plan.prototype.addRowClick = function addRowClick(bodypart) {
      this.addNewRow(bodypart.part, null);
    };

    Plan.prototype.planRowClicked = function planRowClicked(r) {
      var self = this;
      for (var i = 0; i < this.rows.length; i++) {
        if (this.rows[i].rowid == r.rowid) {
          this.rows[i].selected = true;
          self.selectedRowIndex = i;
        } else {
          this.rows[i].selected = false;
        }
      }
    };

    Plan.prototype.getPlanRowWithBodypart = function getPlanRowWithBodypart(bodypart) {
      for (var i = 0; i < this.rows.length; i++) {
        if (this.rows[i].bodypart == bodypart) {
          return this.rows[i];
        }
      }
      return null;
    };

    Plan.prototype.displayDeleteAlert = function displayDeleteAlert(description, callback) {
      var self = this;
      self.popupHelper.openGenericMessagePop('Do you wish to delete plan: ' + description + '?', 'Delete Plan?', ['YES', 'NO'], false, function (res) {
        callback(res);
      });
    };

    Plan.prototype.deletePlanClick = function deletePlanClick(index) {
      var self = this;
      self.displayDeleteAlert(self.rows[index].title, function (res) {
        if (res.result == 'YES') {
          var id = self.rows[index].data ? self.rows[index].data.PlanID : 0;
          if (id == 0) {
            self.rows.splice(index, 1);
          } else {
            self.deletePlan(id, function (res) {
              if (res == true) {
                self.rows.splice(index, 1);
              }
            });
          }
        } else {
          self.rows[index].displayDelete = false;
        }
      });
    };

    Plan.prototype.deletePlan = function deletePlan(id, callback) {
      var self = this;
      var url = 'plans/' + id;
      self.goData.deleteWithUrl(url, function (res) {
        callback(res);
      });
    };

    Plan.prototype.rowSwipe = function rowSwipe(event, row) {

      if (!row.canDelete) {
        return;
      }

      if (event.direction === 'left') {
        if (!row.displayDelete) {
          row.displayDelete = true;
        }
      } else if (event.direction === 'right') {
        if (row.displayDelete) {
          row.displayDelete = false;
        }
      }
    };

    Plan.prototype.saveNewPlanObjectForMips = function saveNewPlanObjectForMips(row, callback) {
      var self = this;
      self.goData.getNewPlan(function (newPlan) {
        newPlan.PatientID = self.patientId;
        newPlan.ExamDateTime = self.date;
        newPlan.ProviderID = self.providerId;
        newPlan.UserID = self.userId;
        newPlan.BodyPart = row.bodypart;
        newPlan.IsOrigin = true;
        newPlan.PlanType = self.boardType;
        newPlan.SpecialtyReferringID = row.referringId;
        newPlan.Snomed = row.snomed;
        newPlan.ReasonCode = row.reasonCode;

        newPlan.SnomedType = row.snomedType;

        newPlan.Lcode = row.lcode;

        newPlan.PlanPreferenceID = row.planPreferenceId;
        newPlan.IsComplete = true;

        self.http.post(self.helper.getApiUrl('plans'), newPlan, function (res) {
          row.data = res;
          if (callback) callback(res);
        }, null, function (error) {
          if (callback) callback(null);
        });
      });
    };

    Plan.prototype.save = function save(callback) {
      var self = this;
      var url = 'plans';

      if (self.rows.length == 0) {
        callback(false);
        return;
      }

      var _loop4 = function _loop4(i) {

        var planRow = self.rows[i];

        if (planRow.data == null || planRow.data.PlanID == 0) {
          self.goData.getNewPlan(function (newPlan) {
            newPlan.PatientID = self.patientId;
            newPlan.ExamDateTime = self.date;
            newPlan.ProviderID = self.providerId;
            newPlan.UserID = self.userId;
            newPlan.BodyPart = planRow.bodypart;
            newPlan.IsOrigin = true;
            newPlan.PlanType = self.boardType;
            newPlan.PlanText = planRow.text;
            newPlan.IsComplete = true;

            self.http.post(self.helper.getApiUrl(url), newPlan, function (res) {

              planRow.data = res;

              self.goData.saveVisitBoard(self.board);

              if (callback) callback(true);
            }, null, function (error) {
              if (callback) callback(false);
            });
          });
        } else {

          planRow.data.PlanText = planRow.text;
          planRow.data.PlanType = self.boardType;

          self.http.put(self.helper.getApiUrl(url), planRow.data, function (returnData) {
            if (callback) callback(true);
          }, function (error) {
            if (callback) callback(false);
          });
        }
      };

      for (var i = 0; i < self.rows.length; i++) {
        _loop4(i);
      }
    };

    Plan.prototype.populateWithPreference = function populateWithPreference(text, bodypart, title) {
      var self = this;
      self.prefClicked = true;

      self.selectedRow.bodypart = bodypart;
      self.selectedRow.text = text;
      self.selectedRow.title = title + ": " + bodypart;

      self.resizeTextarea();
    };

    Plan.prototype.previousClick = function previousClick() {
      this.loadPrevious();
    };

    Plan.prototype.loadPrevious = function loadPrevious() {
      var self = this;
      var formattedDate = self.helper.getDateWithFormat(self.date, "MM-DD-YYYY");
      var formattedBp = self.board.visitInfo.getFirstAvailBodypartForExam('plan').part;
      var proId = self.providerId;

      if (self.fromPreviousDate) {
        formattedDate = self.fromPreviousDate;
        formattedBp = self.fromPreviousBodyPart;
        proId = self.fromPreviousProviderId;
      }

      var url = 'plan/previous?patientId=' + self.patientId + '&bodypart=' + formattedBp + '&priorToDate=' + formattedDate + '&providerId=' + proId;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {

          json.UserID = self.userId;
          json.ProviderID = self.providerId;
          json.ExamDateTime = self.date;
          json.DateCreated = null;
          json.DateModified = null;
          json.PlanID = self.data == null ? 0 : self.data.PlanID;

          self.data = json;


          var tTitle = json.PlanType.toUpperCase() == 'FOLLOW' ? 'FOLLOW UP' : json.PlanType.toUpperCase();
          tTitle = tTitle + ": " + formattedBp;

          var row = new PlanRow(json, formattedBp, json.PlanText, tTitle, self);
          self.rows.push(row);

          self.trySave();
          self.fromPrevious = false;
          self.prefClicked = false;

          self.resizeTextarea();
        }
      });
    };

    Plan.prototype.load = function load() {
      var self = this;
      var formattedDate = self.helper.getDateWithFormat(self.date, "MM-DD-YYYY");
      var url = 'plans/patients/' + self.patientId + '/providers/' + self.providerId + '/date/' + formattedDate;

      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {
          if (Array.isArray(json)) {
            if (json.length > 0) {

              self.data = json;

              for (var i = 0; i < json.length; i++) {
                self.populateGrid(json[i]);
              }

              self.resizeTextarea();
            }
          }
        }
      });
    };

    Plan.prototype.populateGrid = function populateGrid(plan) {
      var self = this;
      var row = new PlanRow();
      row.parent = self;

      if (plan != null) {
        row.data = plan;

        var oDate = self.helper.getISODateToFormat(plan.ExamDateTime, "MM/DD/YYYY");

        row.canDelete = oDate == self.date && !self.locked ? true : false;

        if (plan.BodyPart != null) {
          self.board.visitInfo.removeBodypartToLoad('plan', plan.BodyPart);
          row.bodypart = plan.BodyPart;
        } else {
          row.bodypart = self.board.visitInfo.getFirstAvailBodypartForExam('plan').part;
        }

        row.text = plan.PlanText;

        var tTitle = plan.PlanType.toUpperCase() == 'FOLLOW' ? 'FOLLOW UP' : plan.PlanType.toUpperCase();

        row.title = tTitle + ": " + row.bodypart;
      } else {
        row.bodypart = self.board.visitInfo.getFirstAvailBodypartForExam('plan').part;
        row.title = ": " + row.bodypart;
      }

      var rowid = self.rows.length + 1;
      row.rowid = rowid;

      self.rows.push(row);
    };

    Plan.prototype.loadComplete = function loadComplete() {
      var self = this;
    };

    return Plan;
  }(), (_descriptor2 = _applyDecoratedDescriptor(_class4.prototype, 'bodypart', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class4.prototype, 'planText', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  })), _class4)) || _class3);
});;
define('text!go/blocks/plan.html',[],function(){return "<template><require from=\"../planRowCustomAttribute\"></require><style>textarea{resize:none;overflow:hidden;min-height:50px;width:100%}.selected{background-color:#d4eff3}.selected>textarea{border:1px solid #5f9ea0!important;border-radius:6px}</style><div class=\"card-header d-flex align-items-center\" style=\"height:44px\"><h6 class=\"mb-0 mr-1\">PLAN <small class=\"text-muted mr-2\">${rows.length}</small></h6><div class=\"dropdown\" style=\"position:inherit\"><button class=\"btn btn-outline-primary dropdown-toggle\" disabled.bind=\"locked\" style=\"padding:4px 12px 4px 12px\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-plus pr-1\"></i></button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><h6 class=\"dropdown-header\">New Row</h6><a class=\"dropdown-item px-3\" repeat.for=\"b of bodyparts\" click.delegate=\"addRowClick(b)\" href=\"#\"><i class=\"fa fa-plus fa-fw pr-2\" aria-hidden=\"true\"></i>${b.part}</a><div class=\"dropdown-divider\"></div><a class=\"dropdown-item px-3\" href=\"#\" click.delegate=\"openPrefPicker()\"><i class=\"fa fa-user-plus fa-fw pr-2\" aria-hidden=\"true\"></i>Pref</a> <a class=\"dropdown-item px-3\" href=\"#\" click.delegate=\"previousClick()\"><i class=\"fa fa-arrow-circle-left fa-fw pr-2\" aria-hidden=\"true\"></i>Previous Plan</a></div></div></div><div ref=\"scrollbody\" class=\"card-body p-0\" style=\"overflow-y:scroll\"><template repeat.for=\"r of rows\"><div if.bind=\"globals.isTouchDevice\" hammer-swipe.call=\"rowSwipe($event, r)\" click.delegate=\"planRowClicked(r)\" css=\"height: ${rowHeight}px;\" class=\"${r.selected ? 'selected' : ''} p-2 d-flex flex-column\"><div ref=\"titleHeader\" class=\"d-flex align-items-center\"><label class=\"form-label\"><strong>${r.title}</strong></label><div if.bind=\"r.displayDelete\" class=\"ml-auto py-1 au-animate animate-swipe-row-left animate-swipe-row-right\"><button type=\"button\" class=\"btn btn-danger\" click.delegate=\"deletePlanClick($index)\"><i class=\"fa fa-trash pr-1\"></i>Delete</button></div></div><textarea planrow readonly.bind=\"locked\" class=\"flex-grow-1\" style=\"width:100%;border:none;outline:0;background-color:#fff;border-radius:4px;padding:5px;overflow-y:auto\" value.bind=\"r.text\" blur.trigger=\"trySave()\"></textarea></div><div if.bind=\"!globals.isTouchDevice\" click.delegate=\"planRowClicked(r)\" css=\"height: ${rowHeight}px;\" class=\"${r.selected ? 'selected' : ''} p-2 d-flex flex-column\"><div ref=\"titleHeader\" class=\"d-flex align-items-center\"><label class=\"form-label\"><strong>${r.title}</strong></label><div class=\"ml-auto py-1\"><button if.bind=\"r.canDelete\" type=\"button\" class=\"btn\" click.delegate=\"deletePlanClick($index)\"><i class=\"fa fa-trash pr-1\"></i></button></div></div><textarea planrow readonly.bind=\"locked\" class=\"flex-grow-1\" style=\"width:100%;border:none;outline:0;background-color:#fff;border-radius:4px;padding:5px;overflow-y:auto\" value.bind=\"r.text\" blur.trigger=\"trySave()\"></textarea></div></template><div if.bind=\"rows.length==0\" class=\"card-body\"><div class=\"text-muted\" style=\"border:1px dashed #d8d8d8;border-radius:7px;padding:10px;text-align:center\">Use the <span class=\"font-weight-bold\"><i class=\"fa fa-plus px-1 text-muted\"></i>Row</span> or <span class=\"font-weight-bold\"><i class=\"fa fa-user-plus px-1 text-muted\"></i>Pref</span> button to add a new plan.</div></div></div></template>";});;
define('go/blocks/procedure',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', 'moment', '../home', '../../data/go/data', '../pxSearch', 'aurelia-dialog', 'lodash', '../popupHelper', 'aurelia-templating-resources', 'aurelia-event-aggregator', '../../ptdaysheet/calculator', '../globals'], function (exports, _helper, _http, _aureliaFramework, _moment, _home, _data, _pxSearch, _aureliaDialog, _lodash, _popupHelper, _aureliaTemplatingResources, _aureliaEventAggregator, _calculator, _globals) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Procedure = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor;

  var Procedure = exports.Procedure = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _home.Home, _data.Data, _aureliaDialog.DialogService, _popupHelper.PopupHelper, _aureliaTemplatingResources.BindingSignaler, _aureliaEventAggregator.EventAggregator, _globals.Globals), _dec(_class = (_class2 = function () {
    Procedure.prototype.filterStringChanged = function filterStringChanged(newVal, oldVal) {
      if (newVal.length > 0) {
        this.filterInputPercentWidth = 50;
        this.filterProcedures();
      } else {
        this.filterInputPercentWidth = 15;
        this.data = JSON.parse(JSON.stringify(this.cacheData));
        this.cacheData = null;
      }
    };

    function Procedure(helper, http, Home, Data, DialogService, PopupHelper, BindingSignaler, EventAggregator, Globals) {
      _classCallCheck(this, Procedure);

      this.data = [];
      this.board = null;
      this.displayDeleteHeader = false;
      this.block = null;
      this.modlist = [];
      this.searchResultCounter = 0;

      _initDefineProp(this, 'filterString', _descriptor, this);

      this.filterInputPercentWidth = 15;
      this.cacheData = null;
      this.locked = false;

      this.helper = helper;
      this.http = http;
      this.home = Home;
      this.goData = Data;
      this.dialogService = DialogService;
      this.popupHelper = PopupHelper;
      this.signaler = BindingSignaler;
      this.eventAggregator = EventAggregator;
      this.globals = Globals;
    }

    Procedure.prototype.activate = function activate(model) {
      this.block = model;
      this.block.childModel = this;
    };

    Procedure.prototype.filterProcedures = function filterProcedures() {
      var self = this;
      if (self.filterString != null && self.filterString.length > 1) {

        if (self.cacheData == null) {
          self.cacheData = JSON.parse(JSON.stringify(self.data));
        }

        var letter = self.filterString.substring(0, 1);
        var number = self.filterString.substring(1, 2);
        var isNumber = parseInt(number);
        if (letter && !Object.is(isNumber, NaN)) {
          self.data = _.filter(self.cacheData, function (p) {
            return p.code.startsWith(self.filterString);
          });
        } else {
          self.data = _.filter(self.cacheData, function (p) {
            return p.description.toLowerCase().startsWith(self.filterString.toLowerCase());
          });
        }
      }
    };

    Procedure.prototype.addPreferenceWithId = function addPreferenceWithId(pxId) {
      var self = this;
      self.goData.getWithUrl('procedures/' + pxId, function (pxRes) {
        if (pxRes) {
          var aPx = self.goData.getNewPx(0, pxRes.CptKey, pxRes.Description, null, pxRes);
          self.tryAddWithExistanceCheck(aPx);
          self.save();
        }
      });
    };

    Procedure.prototype.attached = function attached() {

      var self = this;

      self.displayDeleteHeader = !self.globals.isTouchDevice ? true : false;

      if (self.home.currentBoard != null && self.home.currentBoard.patientId != null) {

        self.board = self.home.currentBoard;

        self.patientId = self.home.currentBoard.patientId;
        self.date = self.home.currentBoard.visitInfo.date;
        self.providerId = self.home.currentBoard.visitInfo.providerId;
        self.userId = self.home.currentBoard.userId;
        self.bodypart = self.home.currentBoard.visitInfo.bodypart;
        self.bodyside = self.home.currentBoard.visitInfo.bodyside;
        self.locked = self.home.currentBoard.visitInfo.locked == 0 ? false : true;

        self.loadModifierList();

        self.eventAggregator.subscribe("refreshProcedures", function () {
          self.load();
        });

        this.load();

        if (self.block.loadPreferenceCallback) {
          self.block.loadPreferenceCallback(self.block);
        }
      }
    };

    Procedure.prototype.selectModifiersWithModiferString = function selectModifiersWithModiferString(str) {
      var self = this;

      if (str == null) return;

      var splitMods = str.split(',');

      _.forEach(self.modlist, function (m) {
        m.selected = false;
      });

      var _loop = function _loop(i) {
        var found = _.find(self.modlist, function (m) {
          return m.description == splitMods[i];
        });
        if (found) {
          found.selected = true;
        }
      };

      for (var i = 0; i < splitMods.length; i++) {
        _loop(i);
      }
    };

    Procedure.prototype.loadModifierList = function loadModifierList() {
      var self = this;

      self.goData.getListWithListTypeDescription2AndProviderId('Miscellaneous', 'Modifiers', self.providerId, function (res) {
        if (res.length > 0) {
          for (var i = 0; i < res.length; i++) {
            var oItm = self.goData.getGenericPicklistItem(res[i].Description1, res[i]);
            oItm.selected = false;
            self.modlist.push(oItm);
          }
        } else {
          self.addDefaultPtModifiers(self.board.visitInfo.visitType);
        }
      });
    };

    Procedure.prototype.addDefaultPtModifiers = function addDefaultPtModifiers(visitType) {
      var self = this;
      if (visitType.toLowerCase() == 'pt visit') {
        var pList = ['GP', 'GA', 'GX', 'GY', 'KX', 'CQ', '59'];

        var _loop2 = function _loop2(i) {
          var pItm = self.goData.getGenericPicklistItem(pList[i], null);
          pItm.selected = false;
          exists = _.find(self.modlist, function (m) {
            return m.description == pItm.description;
          });

          if (!exists) {
            self.modlist.push(pItm);
          }
        };

        for (var i = 0; i < pList.length; i++) {
          var exists;

          _loop2(i);
        }
      } else if (visitType.toLowerCase() == 'ot visit') {
        var oList = ['GO', 'CO', 'KX', 'GA', '59'];

        var _loop3 = function _loop3(i) {
          var oItm = self.goData.getGenericPicklistItem(oList[i], null);
          oItm.selected = false;
          exists = _.find(self.modlist, function (m) {
            return m.description == oItm.description;
          });

          if (!exists) {
            self.modlist.push(oItm);
          }
        };

        for (var i = 0; i < oList.length; i++) {
          var exists;

          _loop3(i);
        }
      }
    };

    Procedure.prototype.doesProcedureExist = function doesProcedureExist(code, date, providerId) {
      return _.find(this.data, function (o) {
        return o.code == code && o.date == date && o.data.ProviderID == providerId;
      });
    };

    Procedure.prototype.displayExistingPxAlert = function displayExistingPxAlert(px, callback) {
      var self = this;
      var alertTemplate = '<span class="font-weight-bold pr-1">' + px.code + '</span><span class="text-uppercase">' + px.description + '</span><div class="text-muted">...already exists today!</div><div><bold>Add Anyways?</bold></div>';
      self.displayAlert(null, 'Procedure Exists', ['OK'], function (res) {
        if (callback && res.result == 'OK') {
          callback(px);
        }
      }, alertTemplate, 'warning');
    };

    Procedure.prototype.displayPxSearch = function displayPxSearch() {
      var self = this;
      self.searchResultCounter = 0;
      self.searchResultTotal = 0;
      self.popupHelper.openProcedureSearchPop('All', false, function (pxs) {

        self.searchResultTotal = pxs.length;

        for (var i = 0; i < pxs.length; i++) {

          var px = pxs[i];

          var vt = self.board.visitInfo.visitType.toLowerCase();
          if (vt == 'ot visit' || vt == 'pt visit') {
            px.modifier = vt == 'pt visit' ? "GP" : "GO";
          }

          self.tryAddWithExistanceCheck(px, function () {
            self.searchResultCounter++;
            if (self.searchResultCounter == self.searchResultTotal) {
              self.save();
            }
          });
        }
      });
    };

    Procedure.prototype.tryAddWithExistanceCheck = function tryAddWithExistanceCheck(px, callback) {
      var self = this;

      if (!self.doesProcedureExist(px.code)) {
        self.addToGrid(px);
        if (callback) {
          callback();
        }
      } else {
        self.displayExistingPxAlert(px, function (res) {
          self.addToGrid(px);
          if (callback) {
            callback();
          }
        });
      }
    };

    Procedure.prototype.addToGrid = function addToGrid(px) {
      var self = this;

      var pxDate = (0, _moment2.default)(self.date).format('MM/DD/YYYY');


      var data = {
        "Type": px.data.Type,
        "ProcedureID": px.data.ProcedureID
      };

      var aPx = self.goData.getNewPx(0, px.code, px.description, pxDate, data);
      aPx.selected = true;
      aPx.modifier = px.modifier;
      aPx.type = px.data.Type;

      if (self.data.length > 0) {
        self.data.splice(0, 0, aPx);
      } else {
        self.data.push(aPx);
      }
      self.updateRowIndexes();
    };

    Procedure.prototype.unitClicked = function unitClicked(px) {
      var self = this;
      var act = {
        "value": px.data.JCodeUnits
      };
      self.dialogService.open({ viewModel: _calculator.Calculator, model: { activity: act } }).whenClosed(function (response) {

        px.data.JCodeUnits = response.output.value;
        px.selected = true;

        self.save();
      });
    };

    Procedure.prototype.modifierClick = function modifierClick(px) {
      var self = this;
      self.selectModifiersWithModiferString(px.modifier);
      self.popupHelper.openGenericMultiTabPickerPopup("Select a modifier", "Modifier", self.modlist, false, function (res) {
        var r = res;
        var modStr = "";
        for (var i = 0; i < res.items.length; i++) {
          modStr += res.items[i].description + ",";
        }
        if (modStr.length > 0) {
          modStr = modStr.substring(0, modStr.length - 1);
        }
        px.modifier = modStr;
        px.selected = true;

        self.save();
      });
    };

    Procedure.prototype.detached = function detached() {
      this.trySave();
    };

    Procedure.prototype.trySave = function trySave() {
      var self = this;

      if (self.block.dontSave) {
        return;
      }

      if (self.board != null) {
        self.home.saveQueue.addItem(self);
      }
    };

    Procedure.prototype.load = function load() {
      var self = this;

      self.data = [];

      var frmtDate = self.helper.getDateWithFormat(self.date, "MM-DD-YYYY");
      var url = 'patientprocedures/patients/' + self.patientId + '/todate/' + frmtDate;

      self.http.get(self.helper.getApiUrl(url), function (res) {

        if (res == undefined || res == null) return;

        var todayDate = (0, _moment2.default)(self.date).format('MM/DD/YY');

        var list = [];
        var todaysPxs = [];

        var tPxs = _.filter(res, function (t) {
          return self.helper.getISODateToFormat(t.ExamDateTime, "MM/DD/YY") == todayDate;
        });
        for (var p = 0; p < tPxs.length; p++) {
          var m = tPxs[p];
          var aPx = self.goData.getNewPx(m.PatientCPTID, m.CptCode, m.CodeDescr, self.helper.getISODateToFormat(m.ExamDateTime, "MM/DD/YYYY"), m);
          aPx.displayPlus = false;
          aPx.historical = false;
          aPx.type = m.Type;
          aPx.index = list.length;

          if (m.ProviderID != self.providerId) {
            aPx.historical = true;
          }

          list.push(aPx);
        }

        var uniqs = _.uniqBy(res, 'CptCode');
        for (var u = 0; u < uniqs.length; u++) {
          var found = _.find(list, function (f) {
            return f.code == uniqs[u].CptCode;
          });
          if (!found) {
            var aPx = self.goData.getNewPx(uniqs[u].PatientCPTID, uniqs[u].CptCode, uniqs[u].CodeDescr, self.helper.getISODateToFormat(uniqs[u].ExamDateTime, "MM/DD/YYYY"), uniqs[u]);
            aPx.displayPlus = true;
            aPx.historical = true;
            aPx.type = uniqs[u].Type;
            aPx.index = list.length;

            list.push(aPx);
          }
        }

        self.data = list;
      });
    };

    Procedure.prototype.pxChecked = function pxChecked(dx) {
      var self = this;
      var todayDate = (0, _moment2.default)(self.date).format('MM/DD/YY');
      if (self.doesProcedureExist(dx.code, todayDate, self.providerId)) {
        self.displayExistingPxAlert(dx);
        return;
      }

      var aDx = self.createPxObject(dx);
      aDx.selected = true;
      aDx.historical = false;
      aDx.displayPlus = false;
      aDx.data.PatientCPTID = 0;
      aDx.type = dx.type;
      self.data.splice(0, 0, aDx);

      self.hidePlusInGridForCode(aDx.code);

      self.savePxToDb(aDx, self.patientId, self.providerId, self.date, function (res) {

        self.updateRowIdWithCodeAndDescription(res.PatientCPTID, res.CptCode, res.CodeDescr);
      });
    };

    Procedure.prototype.updateRowIdWithCodeAndDescription = function updateRowIdWithCodeAndDescription(id, code, description) {
      var self = this;
      for (var i = 0; i < self.data.length; i++) {
        var row = self.data[i];
        if (row.code == code && row.description == description) {
          row.id = id;
          row.data.PatientCPTID = id;

          break;
        }
      }
    };

    Procedure.prototype.createPxObject = function createPxObject(dx) {
      var self = this;
      var aDx = {
        "id": 0,
        "code": dx.code,
        "description": dx.description,
        "date": self.helper.getDateWithFormat(self.date, "MM/DD/YY"),
        "data": dx.data,
        "selected": true
      };
      if (dx.modifier) {
        aDx.modifier = dx.modifier;
      } else if (dx.data.Modifier) {
        aDx.modifier = dx.data.Modifier;
      }
      return aDx;
    };

    Procedure.prototype.hidePlusInGridForCode = function hidePlusInGridForCode(pxCode) {
      var self = this;
      for (var i = 0; i < self.data.length; i++) {
        if (self.data[i].code == pxCode) {
          self.data[i].displayPlus = false;
        }
      }
    };

    Procedure.prototype.save = function save(callback) {
      var self = this;
      var selectedPxs = _.filter(self.data, function (p) {
        return p.selected === true;
      });
      if (selectedPxs.length == 0) {
        callback(true);
      }

      var _loop4 = function _loop4() {
        var aPx = selectedPxs[i];
        aPx.bodypart = self.bodypart;
        aPx.bodyside = self.bodyside;
        aPx.selected = false;

        self.savePxToDb(aPx, self.patientId, self.providerId, self.date, function (res) {

          aPx.data = res;
          aPx.id = res.PatientCPTID;

          if (aPx.type != null && aPx.type.toUpperCase() == 'VISIT') {
            self.board.visitInfo.visitCode.Visit_Code_Selected = res.CptCode;
            self.goData.updateVisitCode(self.board.visitInfo.visitCode, function (vcRes) {
              self.board.visitInfo.visitCode = vcRes;
            });
          }

          if (callback) callback(true);
        });
      };

      for (var i = 0; i < selectedPxs.length; i++) {
        _loop4();
      };
    };

    Procedure.prototype.savePxToDb = function savePxToDb(px, patientId, providerId, date, callback) {
      var self = this;
      self.goData.saveProcedure(px, patientId, providerId, date, function (res) {
        if (callback) callback(res);
      });
    };

    Procedure.prototype.displayAlert = function displayAlert(text, header, buttonDescriptionArray, callback, template, alertType) {
      var self = this;
      self.popupHelper.openGenericMessagePop(text, header, buttonDescriptionArray, false, function (res) {
        if (callback) {
          callback(res);
        }
      }, { htmlTemplate: template, alertType: alertType });
    };

    Procedure.prototype.isPxDeletable = function isPxDeletable(row) {
      var today = (0, _moment2.default)().format('MM/DD/YYYY');
      var pxDate = (0, _moment2.default)(row.date).format('MM/DD/YYYY');
      return today == pxDate ? true : false;
    };

    Procedure.prototype.rowSwipe = function rowSwipe(event, row) {
      if (event.direction === 'left') {
        if (!row.displayDelete && this.isPxDeletable(row)) {
          row.displayDelete = true;
          this.displayDeleteHeader = true;
        } else {
          this.displayAlert("You cannot delete a historical procedure.", 'Deletion Not Allowed!', ['OK']);
        }
      } else if (event.direction === 'right') {
        if (row.displayDelete) {
          row.displayDelete = false;
          this.displayDeleteHeader = false;
        }
      }
    };

    Procedure.prototype.displayDeleteAlert = function displayDeleteAlert(text, header, callback) {
      var self = this;
      self.popupHelper.openGenericMessagePop(text, header, ['YES', 'NO'], false, function (res) {
        callback(res);
      });
    };

    Procedure.prototype.deletePxClick = function deletePxClick(index) {
      var self = this;
      self.displayDeleteAlert("Do you wish to delete this procedure?", 'Delete Procedure?', function (res) {
        if (res.result == 'YES') {
          var id = self.data[index].id;
          if (id == 0) {
            self.data.splice(index, 1);
            self.updateRowIndexes();
          } else {
            self.deleteProcedure(self.data[index], function (res) {
              if (res == true) {
                self.data.splice(index, 1);
                self.updateRowIndexes();
              }
            });
          }
        } else {
          self.data[index].displayDelete = false;
        }
      });
    };

    Procedure.prototype.deleteProcedure = function deleteProcedure(px, callback) {
      var self = this;
      var url = 'patientprocedures/' + px.id;
      self.goData.deleteWithUrl(url, function (res) {

        var strDate = (0, _moment2.default)(px.date).format('MM-DD-YYYY');

        self.deleteOrderWithPatientIdCodeAndDate(self.patientId, px.code, strDate, function (pxRes) {

          callback(res);
        });
      });
    };

    Procedure.prototype.deleteOrderWithPatientIdCodeAndDate = function deleteOrderWithPatientIdCodeAndDate(patientId, code, date, callback) {
      var self = this;
      var geturl = 'laborder?patientId=' + patientId + '&code=' + code + '&date=' + date;
      self.goData.getWithUrl(geturl, function (getRes) {
        if (getRes) {
          var delUrl = 'laborders?id=' + getRes.LabReqID;
          self.goData.deleteWithUrl(delUrl, function (delRes) {

            self.refreshOrders();
            callback(delRes);
          });
        } else {
          callback(false);
        }
      });
    };

    Procedure.prototype.refreshOrders = function refreshOrders() {
      var self = this;
      self.eventAggregator.publish("refreshOrders");
    };

    Procedure.prototype.updateRowIndexes = function updateRowIndexes() {
      var self = this;
      for (var i = 0; i < self.data.length; i++) {
        var r = self.data[i];
        r.index = i;
      }
      self.signaler.signal('refresh-row');
    };

    return Procedure;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'filterString', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  })), _class2)) || _class);
});;
define('text!go/blocks/procedure.html',[],function(){return "<template><div class=\"card-header pr-1 d-flex align-items-center\" style=\"height:44px\"><h6 class=\"mb-0 d-inline-block\">PROCEDURE <small class=\"text-muted\">${data.length}</small></h6><input type=\"text\" class=\"form-control ml-auto\" placeholder=\"filter...\" aria-label=\"search code or description...\" aria-describedby=\"button-addon2\" css=\"width: ${filterInputPercentWidth}%;\" value.bind=\"filterString\"> <a class=\"btn btn-default ${locked ? 'disabled': ''}\" href=\"#\" style=\"margin-right:38px\"><i class=\"fa fa-search fa-2x text-primary\" click.delegate=\"displayPxSearch()\"></i></a></div><div class=\"card-body p-0 overflow-auto\"><div class=\"tableFixHeadLight\" style=\"height:auto\"><table class=\"table table-sm\"><thead><tr><th scope=\"col\"></th><th scope=\"col\" style=\"width:15%\" class=\"${home.currentBoard.editing ? 'tableFixHeadLightEditing' : ''}\">Date</th><th scope=\"col\" style=\"width:15%\" class=\"${home.currentBoard.editing ? 'tableFixHeadLightEditing' : ''}\">Code</th><th scope=\"col\" style=\"width:15%\" class=\"${home.currentBoard.editing ? 'tableFixHeadLightEditing' : ''}\">Mod</th><th scope=\"col\" class=\"${home.currentBoard.editing ? 'tableFixHeadLightEditing' : ''}\">Desc</th><th scope=\"col\">Units</th><th scope=\"col\" if.bind=\"displayDeleteHeader\" class=\"au-animate animate-swipe-row-right\"></th></tr></thead><tbody><template repeat.for=\"s of data\"><tr if.bind=\"globals.isTouchDevice\" hammer-swipe.call=\"rowSwipe($event, s)\" class=\"${!s.historical ? 'table-success' : 'table-secondary'}\"><td><i if.bind=\"s.displayPlus\" class=\"fa fa-plus-square\" click.delegate=\"pxChecked(s)\"></i></td><td>${s.date}</td><td>${s.code}</td><td click.delegate=\"modifierClick(s)\">${s.modifier}</td><td>${s.description}</td><td click.delegate=\"unitClicked(s)\">${s.data.JCodeUnits}</td><td if.bind=\"displayDeleteHeader && !s.displayDelete\"></td><td if.bind=\"s.displayDelete\" style=\"background-color:#dd3444;vertical-align:middle\" class=\"au-animate animate-swipe-row-left animate-swipe-row-right\"><button type=\"button\" class=\"btn btn-danger\" style=\"display:block;margin:auto\" click.delegate=\"deletePxClick($index)\"><i class=\"fa fa-trash\"></i></button></td></tr><tr if.bind=\"!globals.isTouchDevice\" class=\"${!s.historical ? 'table-success' : 'table-secondary'}\"><td><i if.bind=\"s.displayPlus\" class=\"fa fa-plus-square\" click.delegate=\"pxChecked(s)\"></i></td><td>${s.date}</td><td>${s.code}</td><td click.delegate=\"modifierClick(s)\">${s.modifier}</td><td>${s.description}</td><td click.delegate=\"unitClicked(s)\">${s.data.JCodeUnits}</td><td style=\"vertical-align:middle\"><button if.bind=\"!s.historical\" type=\"button\" class=\"btn\" style=\"display:block;margin:auto\" click.delegate=\"deletePxClick($index)\"><i class=\"fa fa-trash\"></i></button></td></tr></template></tbody></table></div></div></template>";});;
define('go/blocks/ptAuthorization',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', 'moment', '../home', '../popupHelper', '../../data/go/data', 'lodash'], function (exports, _helper, _http, _aureliaFramework, _moment, _home, _popupHelper, _data, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PtAuthorization = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var PtRow = function PtRow(data) {
    _classCallCheck(this, PtRow);

    this.bodypart = "";
    this.data = data;
    this.date = (0, _moment2.default)(data.AuthDate).format('MM/DD/YYYY');
    this.daysRemaining = 0;
    this.visitsRemaining = 0;
    this.expired = false;

    if (data.BodySide) {
      this.bodypart = data.BodySide;
    }
    if (data.BodyPart) {
      this.bodypart += " " + data.BodyPart;
    }
  };

  var PtAuthorization = exports.PtAuthorization = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _home.Home, _data.Data, _popupHelper.PopupHelper), _dec(_class = function () {
    function PtAuthorization(helper, http, Home, Data, PopupHelper) {
      _classCallCheck(this, PtAuthorization);

      this.rows = [];
      this.board = null;
      this.timeRemainingText = "";
      this.locked = false;
      this.insurance = null;
      this.authorizationType = null;

      this.helper = helper;
      this.http = http;
      this.home = Home;
      this.goData = Data;
      this.popupHelper = PopupHelper;
    }

    PtAuthorization.prototype.attached = function attached() {

      var self = this;
      if (self.home.currentBoard != null && self.home.currentBoard.patientId != null) {
        self.patientId = self.home.currentBoard.patientId;
        self.bodypart = self.home.currentBoard.visitInfo.bodypart;
        self.locked = self.home.currentBoard.visitInfo.locked == 0 ? false : true;
        self.authorizationType = self.home.currentBoard.visitInfo.typeForSave;
        if (self.home.patient) {
          self.insurance = self.home.patient.data.OD_Insurance ? self.home.patient.data.OD_Insurance.OD_InsuranceCompany.Name : "";
        }
        self.load();
      }
    };

    PtAuthorization.prototype.addAuth = function addAuth() {
      var self = this;
      self.goData.getWithUrl('ptauth/new', function (res) {
        self.openAuthPop(res);
      });
    };

    PtAuthorization.prototype.calculateAuthTimeRemaining = function calculateAuthTimeRemaining() {
      var self = this;

      var _loop = function _loop(i) {
        var data = self.rows[i].data;

        var aDate = data.AuthDate ? (0, _moment2.default)(data.AuthDate) : (0, _moment2.default)();

        var aDatePlusAuthorizedDays = data.AuthDate ? (0, _moment2.default)(data.AuthDate) : (0, _moment2.default)();
        aDatePlusAuthorizedDays.add('days', data.AuthDays);

        var today = (0, _moment2.default)();

        var daysRemaining = _moment2.default.duration(aDatePlusAuthorizedDays.diff(today)).asDays();
        self.rows[i].daysRemaining = Math.max(0, Math.floor(daysRemaining));
        if (self.rows[i].daysRemaining == 0) {
          self.rows[i].expired = true;
        }

        var visitRemaining = data.AuthVisits;

        var visitUrl = 'examfollowups/patients/' + self.patientId + '/type/' + data.Type + '/date/' + aDate.format('MM-DD-YYYY');
        self.goData.getWithUrl(visitUrl, function (res) {
          var usedVisits = res.length > data.AuthVisits ? data.AuthVisits : res.length;
          if (usedVisits == data.AuthVisits) {
            self.rows[i].expired = true;
          }
          self.rows[i].visitsRemaining = usedVisits;
        });
      };

      for (var i = 0; i < self.rows.length; i++) {
        _loop(i);
      }
    };

    PtAuthorization.prototype.openAuthPop = function openAuthPop(ptAuth) {

      var self = this;
      var path = './ptAuthPop';
      var windowHeight = window.innerHeight - 100;
      var windowWidth = window.innerWidth;

      var quarter = windowWidth / 4;
      var width = windowWidth / 2;
      var left = quarter;

      var height = windowHeight / 2;
      var qHeight = windowHeight / 4;
      var top = qHeight;

      var options = {
        displayHeader: false,
        bodyPadding: 0,
        scrollHeight: 610
      };

      var header = ptAuth.Id == 0 ? 'New Authorization' : ptAuth.Type + " Authorization";

      self.popupHelper.openViewModelPop(path, ptAuth, header, width, height, top, left, options, function (authRes) {
        self.save(authRes);
      });
    };

    PtAuthorization.prototype.edit = function edit(row) {
      var self = this;
      self.openAuthPop(row.data);
    };

    PtAuthorization.prototype.load = function load() {
      var self = this;
      self.rows = [];
      var url = 'ptauth?patientId=' + self.patientId;
      self.goData.getWithUrl(url, function (res) {

        res = _.filter(res, function (a) {
          return a.Status == 'ACT' && a.Type == self.authorizationType && a.BodyPart.toUpperCase() == self.bodypart.toUpperCase();
        });

        res = _.orderBy(res, 'AuthDate', 'desc');
        for (var i = 0; i < res.length; i++) {
          var aRow = new PtRow(res[i]);
          self.rows.push(aRow);
        }
        self.calculateAuthTimeRemaining();
      });
    };

    PtAuthorization.prototype.save = function save(auth) {
      var self = this;

      delete auth.dialog;

      if (auth.hasOwnProperty('overlay')) {
        delete auth.overlay;
      }

      if (auth.Id == 0) {
        auth.PatientId = self.patientId;

        var saveDx = self.helper.createNoty('Saving Authorization...', 3000);
        saveDx.show();
        self.goData.postWithUrlAndData('ptauth', JSON.stringify(auth), function (res) {
          saveDx.close();

          var newRow = new PtRow(res);
          self.rows.unshift(newRow);
        });
      } else {
        var updateDx = self.helper.createNoty('Updating Authorization...', 3000);
        updateDx.show();
        self.goData.putWithUrlAndData('ptauth', auth, function (res) {
          updateDx.close();
        });
      }
    };

    return PtAuthorization;
  }()) || _class);
});;
define('text!go/blocks/ptAuthorization.html',[],function(){return "<template><div class=\"card-header pr-1\" style=\"height:44px\"><h6 class=\"float-left mb-0\"><i class=\"fa fa-list pr-2\" aria-hidden=\"true\"></i>Therapy Auth <small class=\"text-muted\">${rows.length}</small></h6><a class=\"btn btn-default float-right ${locked ? 'disabled' : ''}\" href=\"#\" style=\"padding:0 50px 0 0;margin-top:-7px\"><i class=\"fa fa-plus fa-2x text-primary\" click.delegate=\"addAuth()\"></i></a></div><div class=\"card-body p-0\" style=\"overflow-y:scroll\"><div repeat.for=\"s of rows\" class=\"card-body p-2 position-relative ${s.data.Status == 'ACT' ? 'alert-success' : 'alert-danger'}\" style=\"border-bottom:1px solid #cbcbcb\"><h5 class=\"d-flex\"><div class=\"font-weight-bold pr-2\">${s.data.Type}</div><div class=\"text-uppercase font-weight-light pr-2\">${s.bodypart}</div><span class=\"badge ${s.expired ? 'badge-danger' : 'badge-warning'}\">${s.daysRemaining} days, ${s.visitsRemaining} of ${s.data.AuthVisits} visits used</span> <i class=\"fa fa-pencil-square-o ml-auto alert-link pl-4 pr-2\" style=\"position:absolute;right:10px;font-weight:400\" click.delegate=\"edit(s)\"></i></h5><div class=\"mb-2 d-flex\"><div class=\"flex-fill pr-2\"><small class=\"pr-1 font-weight-bold\">Insurance:</small><small>${insurance}</small></div></div><div class=\"mb-2 d-flex\"><div class=\"flex-fill pr-2\"><small class=\"pr-1 font-weight-bold\"><i class=\"fa fa-calendar-o pr-1\" aria-hidden=\"true\"></i>AUTH:</small><small>${s.date}</small><br><span if.bind=\"s.data.AuthDays\" class=\"pr-1\">${s.data.AuthDays} days</span><span if.bind=\"s.data.AuthVisits\">${s.data.AuthVisits} visits</span></div><div class=\"flex-fill pr-2\" if.bind=\"s.data.AuthNumber\"><small class=\"font-weight-bold\">AUTH#</small><br>${s.data.AuthNumber}</div><div if.bind=\"s.data.ClaimID\" class=\"flex-fill pr-2\"><small class=\"font-weight-bold\">CID:</small><br>${s.data.ClaimID}</div></div><p class=\"card-text text-muted\">${s.data.Comments}</p></div></div></template>";});;
define('go/blocks/surgery',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', '../home', '../../data/go/data', 'moment'], function (exports, _helper, _http, _aureliaFramework, _home, _data, _moment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Surgery = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var Surgery = exports.Surgery = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _home.Home, _data.Data), _dec(_class = function () {
    function Surgery(helper, http, Home, Data) {
      _classCallCheck(this, Surgery);

      this.rows = [];

      this.helper = helper;
      this.http = http;
      this.home = Home;
      this.data = Data;
    }

    Surgery.prototype.activate = function activate(model) {
      this.block = model;
    };

    Surgery.prototype.attached = function attached() {
      if (this.home.currentBoard.patientId != null) {
        this.load();
      }
    };

    Surgery.prototype.load = function load() {
      var self = this;
      var patId = self.home.currentBoard.patientId;
      self.getPatientSurgeries(patId, function (res) {
        self.rows = res;
      });
    };

    Surgery.prototype.calculatePostOpDays = function calculatePostOpDays(procedureData) {
      var aDate = (0, _moment2.default)(procedureData);
      var today = (0, _moment2.default)();
      var daysRemaining = _moment2.default.duration(today.diff(aDate)).asDays();
      return Math.floor(daysRemaining);
    };

    Surgery.prototype.getPatientSurgeries = function getPatientSurgeries(patientId, callback) {
      var self = this;
      var url = 'patientprocedure/Query';
      var qObject = {
        'PatientId': patientId,
        'ProcedureTypes': ["Surgery"]
      };

      self.http.post(self.helper.getApiUrl(url), JSON.stringify(qObject), function (res) {

        if (res == undefined || res == null) return;

        var list = [];
        for (var i = 0; i < res.length; i++) {
          var m = res[i];
          var surgDate = m.SurgeryDate != null ? self.helper.getISODateToFormat(m.SurgeryDate, "MM/DD/YY") : '';
          var aRow = self.data.getNewScheduleRow();
          aRow.id = m.PatientCPTID;
          aRow.name = m.CodeDescr;
          aRow.time = surgDate;
          aRow.data = m;
          if (m.SurgeryDate != null) {
            aRow.postOpDays = self.calculatePostOpDays(m.SurgeryDate) + " days";
          }

          list.push(aRow);
        }
        callback(list);
      }, { contentType: "application/json" }, function (err) {
        var e = 'oops';
      });
    };

    return Surgery;
  }()) || _class);
});;
define('text!go/blocks/surgery.html',[],function(){return "<template><div class=\"card-header\"><h6 class=\"float-left mb-0\">SURGERY <small class=\"text-muted\">${rows.length}</small></h6></div><div class=\"card-body overflow-auto p-0\"><table class=\"table table-striped table-sm\"><thead><tr><th scope=\"col\" style=\"width:15%\">Date</th><th scope=\"col\" style=\"width:65%\">Description</th><th scope=\"col\">PO Days</th></tr></thead><tbody><tr repeat.for=\"r of rows\"><td>${r.time}</td><td>${r.name}</td><td>${r.postOpDays}</td></tr></tbody></table></div></template>";});;
define('go/blocks/visitInfo',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', '../../data/go/data', 'aurelia-event-aggregator', '../ptPopup', 'aurelia-dialog', '../home', '../pxSearch', '../popupHelper', '../task/taskHelper', '../task/taskPopup', 'lodash', '../preferenceHelper', 'moment', 'aurelia-router'], function (exports, _helper, _http, _aureliaFramework, _data, _aureliaEventAggregator, _ptPopup, _aureliaDialog, _home, _pxSearch, _popupHelper, _taskHelper, _taskPopup, _lodash, _preferenceHelper, _moment, _aureliaRouter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.VisitInfo = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var PreferenceObj = function PreferenceObj(description, id, data) {
    _classCallCheck(this, PreferenceObj);

    this.description = description;
    this.data = data;
    this.prefId = id;
    this.isMap = false;
  };

  var VisitInfo = exports.VisitInfo = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _aureliaEventAggregator.EventAggregator, _aureliaDialog.DialogService, _home.Home, _popupHelper.PopupHelper, _taskHelper.TaskHelper, _preferenceHelper.PreferenceHelper, _aureliaRouter.Router), _dec(_class = function () {
    _createClass(VisitInfo, [{
      key: 'userName',
      get: function get() {
        return this.helper._user.FirstName + ' ' + this.helper._user.LastName;
      }
    }]);

    function VisitInfo(helper, http, Data, EventAggregator, DialogService, Home, PopupHelper, TaskHelper, PreferenceHelper, Router) {
      _classCallCheck(this, VisitInfo);

      this.preferences = [];
      this.prefTypeButtonText = "Follow";
      this.providerId = 0;
      this.displayPreference = false;
      this.prefTypes = ['Follow', 'Telemed', 'PT', 'OT'];
      this.prefTypeIndex = 0;
      this.patientName = null;
      this.locked = false;
      this.selectedPreference = null;
      this.preferenceCallbackCounter = 0;
      this.preferenceCallbackObjects = [];
      this.saveDialog = null;
      this.prefDropdownHeight = 0;

      this.helper = helper;
      this.http = http;
      this.goData = Data;
      this.eventAggregator = EventAggregator;
      this.dialogService = DialogService;
      this.home = Home;
      this.popHelper = PopupHelper;
      this.taskHelper = TaskHelper;
      this.prefHelper = PreferenceHelper;
      this.router = Router;
    }

    VisitInfo.prototype.activate = function activate(model) {

      var self = this;
      self.prefTypeIndex = 0;

      self.bodyparts = self.goData.bodyparts;

      self.locked = false;

      self.prefDropdownHeight = window.innerHeight - 50;

      if (model == null) return;

      self.displayPreference = false;
      self.board = model;

      if (self.board.visitInfo != null) {
        self.selectedBodyPart = self.board.visitInfo.bodypart;

        self.board.visitInfo.selectedBodypart = self.goData.getBodypartSide(self.board.visitInfo.bodypart, self.board.visitInfo.bodyside);

        self.locked = self.board.visitInfo.locked;

        self.visitType = self.board.visitInfo.visitType;

        if (self.board.visitInfo.visitCode != null) self.selectedVisitCode = self.board.visitInfo.visitCode.Visit_Code_System;

        if (self.board.visitInfo.checkForPt(self.board.visitInfo.visitType)) {
          var split_type = self.board.visitInfo.visitType.split(" ");
          if (split_type.length > 1) {
            var vType = split_type[0].toLowerCase();
            if (vType === 'pt') {
              self.prefTypeIndex = 2;
            } else {
              self.prefTypeIndex = 3;
            }
          } else {
            self.prefTypeIndex = 2;
          }
        }

        if (self.board.visitInfo.visitType && self.board.visitInfo.visitType.toLowerCase() == 'telemed') {
          self.prefTypeIndex = 1;
        }
      }

      if (model.visitInfo != null && self.home.currentProvider != null && self.home.currentProvider.hasOwnProperty('ProviderID')) {
        self.displayPreference = true;
        self.providerId = self.home.currentProvider.ProviderID;
        self.filterExamPref(self.providerId);
        self.prefHelper.clearPreferenceObjects();
      }

      self.home.getPatientName(undefined, function (name) {
        self.patientName = name;
      });

      self.eventAggregator.subscribe('filterPreferencesWithProviderAndType', function (obj) {

        for (var i = 0; i < self.prefTypes.length; i++) {
          if (self.prefTypes[i] == obj.type) {
            self.prefTypeIndex = i;
            self.filterExamPref(obj.providerId);
            break;
          }
        }
      });
    };

    VisitInfo.prototype.logout = function logout() {
      this.router.navigate('#/login/login');
    };

    VisitInfo.prototype.doHelp = function doHelp(e) {
      e.stopPropagation();
      this.home.tryDriverSample();
    };

    VisitInfo.prototype.taskCurrentObject = function taskCurrentObject() {
      var self = this;
      if (self.taskHelper.taskTypeId != 0) {

        var taskObjectList = [];

        if (self.taskHelper.patientId) {

          var taskPopupObject = self.goData.getNewTaskPopupObject(self.taskHelper.patientId, self.board.visitInfo.providerId, self.taskHelper.date, self.taskHelper.objectId, self.taskHelper.taskTypeId);
          taskObjectList.push(taskPopupObject);
        } else {
          var dateStr = self.board.visitInfo.date;
          var provId = self.board.visitInfo.providerId;
          var taskPopupObject = self.goData.getNewTaskPopupObject(self.board.visitInfo.patientId, provId, dateStr, self.taskHelper.objectId, self.taskHelper.taskTypeId);
          taskPopupObject.patientName = self.faxes[faxIndex].data.Meta.PatientName;
          taskObjectList.push(taskPopupObject);
        }

        self.home.taskObjectList(taskObjectList, true);
      } else {
        self.popupHelper.openGenericMessagePop('Please select a taskable object', 'Task Error', ['OK'], false, function (res) {});
      }
    };

    VisitInfo.prototype.updateExisitingBlockTypes = function updateExisitingBlockTypes(boardType) {
      var self = this;
      for (var i = 0; i < self.board.blocks.length; i++) {
        var aBlock = self.board.blocks[i];
        if (aBlock.blockType === 'hpi') {
          aBlock.childModel.boardType = boardType;
          aBlock.childModel.data.HpiType = boardType;
        } else if (aBlock.blockType === 'plan') {
          aBlock.childModel.boardType = boardType;
          for (var p = 0; p < aBlock.childModel.data.length; p++) {
            var aPlan = aBlock.childModel.data[p];
            aPlan.PlanType = boardType;
          }
        } else if (aBlock.blockType === 'exam') {
          aBlock.childModel.boardType = boardType;
          aBlock.childModel.data.TYPE = boardType;
        }
      }
    };

    VisitInfo.prototype.openVisitPopup = function openVisitPopup() {
      var self = this;
      self.popHelper.openCreateVisitPopup(self.board.visitInfo, self.home, function (res) {

        var visitObj = res.visitObject;
        var visitType = visitObj.visitType;
        var bps = visitObj.bodyparts;

        var bodypartsString = self.goData.bodypartsToString(bps);

        var visitTypeChanged = false;
        if (self.board.visitInfo.visitCode.Visit_Type != visitType) {
          visitTypeChanged = true;
        }

        var visitProviderChanged = false;
        var originalVisitCodeProviderId = self.board.visitInfo.visitCode.ProviderID;
        if (self.board.visitInfo.visitCode.ProviderID != visitObj.providerId) {
          visitProviderChanged = true;
        }

        self.board.visitInfo.visitCode.Visit_Type = visitType;

        self.board.visitInfo.visitCode.VisitBodyParts = bodypartsString;

        self.board.visitInfo.visitCode.ProviderID = visitObj.providerId;
        self.board.providerId = visitObj.providerId;
        self.board.visitInfo.visitCode.BillingProvider = visitObj.billingProviderId;

        self.goData.updateVisitCode(self.board.visitInfo.visitCode, function (vcRes) {
          self.visitType = visitType;

          self.board.visitInfo.visitType = visitType;
          self.board.visitInfo.bodyparts = bps;

          self.board.visitInfo.isPt = visitType.toLowerCase() == 'pt visit' ? true : false;

          if (visitTypeChanged) {
            self.updateExisitingBlockTypes(self.board.visitInfo.isPt ? 'PT' : 'FOLLOW');
          }

          var visitToUpdate = _.find(self.home.patientVisits, function (v) {
            return v.ObjectID == self.board.visitInfo.visitCodeId;
          });
          if (visitToUpdate) {
            visitToUpdate.Description = visitType;
            visitToUpdate.Part = bodypartsString;
            visitToUpdate.ProviderID = visitObj.providerId;
            visitToUpdate.ProviderName = self.home.getProviderName(visitObj.providerId);
          }

          if (visitProviderChanged) {
            self.goData.saveVisitBoard(self.board, function (res) {
              var obj = {
                'NewProviderID': visitObj.providerId,
                'ExistingProviderID': originalVisitCodeProviderId,
                'ExistingPatientID': self.board.visitInfo.visitCode.PatientID,
                'ExistingDate': (0, _moment2.default)(self.board.visitInfo.visitCode.ExamDateTime).format('MM-DD-YYYY')
              };
              self.goData.putWithUrlAndData('visit/changeprovider', obj, function (res) {
                self.setBlocksToLocked(self.board.blocks);

                self.home.loadVisit(self.board.visitInfo);
              });
            });
          } else {
            self.home.loadVisit(self.board.visitInfo);
          }
        });
      });
    };

    VisitInfo.prototype.setBlocksToLocked = function setBlocksToLocked(blocks) {
      for (var b = 0; b < blocks.length; b++) {
        var aBlock = blocks[b];
        aBlock.dontSave = true;
      }
    };

    VisitInfo.prototype.visitTypeClick = function visitTypeClick() {
      var self = this;

      self.popHelper.showVisitTypePicker(function (visittype) {

        self.board.visitInfo.visitCode.Visit_Type = visittype.description;
        self.goData.updateVisitCode(self.board.visitInfo.visitCode, function (vcRes) {
          self.visitType = visittype.description;

          self.board.visitInfo.visitType = self.visitType;

          self.board.visitInfo.isPt = self.visitType.toLowerCase() == 'pt visit' ? true : false;

          self.home.loadVisit(self.board.visitInfo);

          var visitToUpdate = _.find(self.home.patientVisits, function (v) {
            return v.ObjectID == self.board.visitInfo.visitCodeId;
          });
          if (visitToUpdate) {
            visitToUpdate.Description = self.visitType;
          }
        });
      });
    };

    VisitInfo.prototype.togglePrefTypeClicked = function togglePrefTypeClicked() {
      var self = this;

      var i = self.prefTypeIndex + 1;
      if (i == self.prefTypes.length) {
        self.prefTypeIndex = 0;
      } else {
        self.prefTypeIndex = i;
      }
      self.filterExamPref(self.providerId);
    };

    VisitInfo.prototype.filterPreferencesWithCurrentProvider = function filterPreferencesWithCurrentProvider() {
      this.filterExamPref(this.providerId);
    };

    VisitInfo.prototype.doesPreferenceExist = function doesPreferenceExist(description) {
      for (var i = 0; i < this.preferences.length; i++) {
        if (this.preferences[i].description == description) {
          return true;
        }
      }
      return false;
    };

    VisitInfo.prototype.filterExamPref = function filterExamPref(providerId) {
      var self = this;
      self.preferences = [];

      self.board.visitInfo.selectedBodypart = self.goData.getBodypartSide(self.selectedBodyPart, self.board.visitInfo.bodyside);

      var selectedType = self.prefTypes[self.prefTypeIndex];

      if ((selectedType == 'PT' || selectedType == 'OT') && self.home.displayDaysheet) {
        self.goData.getPtDaysheetPref(providerId, self.selectedBodyPart, function (prefs) {
          var unique = _.uniqBy(prefs, 'PrefDescription');
          for (var i = 0; i < unique.length; i++) {
            if (!self.doesPreferenceExist(unique[i].PrefDescription)) {
              var aPref = new PreferenceObj(unique[i].PrefDescription, unique[i].PrefID, unique[i]);
              self.preferences.push(aPref);
            }
          }
        });
      } else {
        self.goData.getFollowUpPrefsAndMaps(providerId, self.selectedBodyPart, selectedType, function (prefsMaps) {
          self.buildPreferenceObjectsForPostOpMaps(prefsMaps);
        });
      }
    };

    VisitInfo.prototype.buildPreferenceObjectsForPostOpMaps = function buildPreferenceObjectsForPostOpMaps(prefsMaps) {
      var self = this;
      var prefs = prefsMaps.prefs;
      var maps = prefsMaps.maps;
      var suppressed = prefsMaps.suppressed;

      var _loop = function _loop(s) {
        var foundIndex = _.findIndex(prefs, function (p) {
          return p.PostOpID == suppressed[s].PostOpID;
        });

        var oMap = _.find(maps, function (m) {
          return m.Id == suppressed[s].SuppressWithMapId;
        });
        if (oMap && foundIndex > -1) {
          oMap.isMap = true;
          prefs.splice(foundIndex, 1, oMap);
          _.remove(maps, function (m) {
            return m.Id == oMap.Id;
          });
        }
      };

      for (var s = 0; s < suppressed.length; s++) {
        _loop(s);
      }

      for (var i = 0; i < prefs.length; i++) {
        if (!self.doesPreferenceExist(prefs[i].PostOpProcedure)) {
          var aPref = null;
          if (!prefs[i].isMap) {
            aPref = new PreferenceObj(prefs[i].PostOpProcedure, prefs[i].PostOpID, prefs[i]);
          } else {
            aPref = new PreferenceObj(prefs[i].Description, prefs[i].Id, prefs[i]);
            aPref.isMap = true;
          }

          self.preferences.push(aPref);
        }
      }

      for (var i = 0; i < maps.length; i++) {
        var aMap = new PreferenceObj(maps[i].Description, maps[i].Id, maps[i]);
        aMap.isMap = true;
        self.preferences.push(aMap);
      }
    };

    VisitInfo.prototype.preferenceClick = function preferenceClick(pref) {
      var self = this;

      if (self.locked) return;

      self.selectedPreference = pref;

      if (self.home.displayDaysheet && pref.data.PrefID != null) {
        self.eventAggregator.publish('preferenceMessage', { message: 'load', prefId: pref.data.PrefID });
      } else {
        self.prefHelper.populatePreference(pref, self.board);
      }
    };

    VisitInfo.prototype.getSelectedFollowupPrefData = function getSelectedFollowupPrefData() {
      var self = this;

      var prefType = self.prefTypes[self.prefTypeIndex];

      var hpiBlock = self.board.getBlockWithType('hpi');
      var examBlock = self.board.getBlockWithType('exam');
      var planBlock = self.board.getBlockWithType('plan');
      var hpiTxt = void 0,
          examTxt = void 0,
          planTxt = void 0;
      if (hpiBlock) {
        var hpiEl = hpiBlock.element;
        hpiTxt = $(hpiEl).find('textarea').val();
      }
      if (examBlock) {
        var examEl = examBlock.element;
        examTxt = $(examEl).find('textarea').val();
      }
      if (planBlock) {
        var planEl = planBlock.element;
        planTxt = $(planEl).find('textarea').val();
      }

      return {
        type: prefType,
        hpiText: hpiTxt,
        planText: planTxt,
        examText: examTxt
      };
    };

    VisitInfo.prototype.openPreferenceEditor = function openPreferenceEditor() {
      var self = this;

      var path = './preference/preferenceEditor';
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var quarter = windowWidth / 4;
      var eights = windowWidth / 8;

      var width = eights * 6;
      var left = eights;

      var height = windowHeight - 10;
      var top = 0;

      var options = {
        displayHeader: false,
        bodyPadding: 0
      };

      self.popHelper.openViewModelPop(path, self, "", width, height, top, left, options, function (res) {});
    };

    VisitInfo.prototype.createNewPrefClick = function createNewPrefClick() {
      var self = this;
      var pref = self.selectedPreference;
      var postOpId = 0;
      if (pref != null && pref.data.hasOwnProperty('PostOpID')) {
        postOpId = pref.data.PostOpID;
      }

      var bp = self.selectedBodyPart;
      if (!bp) {
        self.popHelper.openGenericMessagePop('Please select a bodypart for preference.', 'Save Preference Requirements', ['OK'], true, function (res) {});
        return;
      }

      self.popHelper.openGenericInputPop('Create New Preference', ['Description'], null, false, function (res) {
        if (self.home.displayDaysheet) {
          self.eventAggregator.publish('preferenceMessage', { message: 'create', prefId: postOpId, description: res.inputs[0].value, bodypart: self.selectedBodyPart });
        } else {
          var hpiTxt = void 0,
              examTxt = void 0,
              planTxt = void 0,
              prefType = void 0;

          var prefData = self.getSelectedFollowupPrefData();
          hpiTxt = prefData.hpiText;
          planTxt = prefData.planText;
          examTxt = prefData.examText;
          prefType = prefData.type;

          var saveDetail = 'Saving ' + res.inputs[0].value + " Preference...";
          self.saveDialog = self.helper.createNoty(saveDetail, 3000);
          self.saveDialog.show();

          var fuPrefObj = self.createFollowUpPrefObject(self.providerId, self.selectedBodyPart, prefType, res.inputs[0].value, hpiTxt, examTxt, planTxt, postOpId);
          self.goData.saveFollowUpPref(fuPrefObj, function (res) {

            self.saveDialog.close();
            self.saveDialog = null;
          });
        }
      });
    };

    VisitInfo.prototype.createFollowUpPrefObject = function createFollowUpPrefObject(providerId, bodypart, type, prefDescription, hpiText, examText, planText, postopId) {

      var preference = {
        ProviderID: providerId,
        BodyPart: bodypart,
        Type: type,
        PostOpProcedure: prefDescription,
        NoteHistory: hpiText,
        NoteExam: examText,
        NotePlan: planText,
        Timeframe: '',
        visitCode: '',
        PostOpID: postopId
      };

      return preference;
    };

    VisitInfo.prototype.savePreferenceClick = function savePreferenceClick() {
      var self = this;
      var pref = self.selectedPreference;
      var bp = self.selectedBodyPart;
      var errTxt = "";
      if (!pref) {
        errTxt = 'Please select preference to update. ';
      }
      if (!bp) {
        errTxt += 'Please select a bodypart for preference.';
      }

      if (errTxt.length > 0) {
        self.popHelper.openGenericMessagePop(errTxt, 'Save Preference Requirements', ['OK'], true, function (res) {});
        return;
      }

      var postOpId = pref.data.PostOpID;
      if (self.home.displayDaysheet) {
        self.eventAggregator.publish('preferenceMessage', { message: 'update', prefId: postOpId, description: pref.description, bodypart: bp });
      } else {
        var hpiTxt = void 0,
            examTxt = void 0,
            planTxt = void 0,
            prefType = void 0;
        var prefData = self.getSelectedFollowupPrefData();
        hpiTxt = prefData.hpiText;
        planTxt = prefData.planText;
        examTxt = prefData.examText;
        prefType = prefData.type;

        var saveDetail = 'Saving ' + pref.description + " Preference...";
        self.saveDialog = self.helper.createNoty(saveDetail, 3000);
        self.saveDialog.show();

        var fuPrefObj = self.createFollowUpPrefObject(self.providerId, bp, prefType, pref.description, hpiTxt, examTxt, planTxt, postOpId);
        self.goData.updateFollowUpPref(fuPrefObj, function (res) {

          self.saveDialog.close();
          self.saveDialog = null;
        });
      }
    };

    VisitInfo.prototype.getPreviousExam = function getPreviousExam() {
      var self = this;
      self.data.getPreviousExamData(self.patient.data.PatientID, self.selectedBodyPart, self.date, function (res) {
        if (self.examData != null) {
          res.exam.PostOpID = self.examData.PostOpID;
        }
        if (self.historyData != null) {
          res.hpi.HPIID = self.historyData.HPIID;
        }
        if (self.planData != null) {
          res.plan.PlanID = self.planData.PlanID;
        }

        res.plan.ProviderID = self.selectedProvider.ProviderID;
        res.exam.ProviderID = self.selectedProvider.ProviderID;
        res.hpi.ProviderID = self.selectedProvider.ProviderID;

        self.examData = res.exam;
        self.planData = res.plan;
        self.historyData = res.hpi;

        self.resize();
      });
    };

    return VisitInfo;
  }()) || _class);
});;
define('text!go/blocks/visitInfo.html',[],function(){return "<template><style>.dropdown-toggle::after{-ms-flex-item-align:center!important;align-self:center!important}</style><div id=\"visitinfo\" class=\"row px-1 pt-0 bg-primary d-block\" style=\"border-bottom:1px solid #606060;min-height:50px;max-height:50px;margin-right:25px\"><div class=\"d-flex align-items-start\"><div class=\"ml-3 mb-0 mr-auto align-self-center h4 text-white\"><b>${patientName}</b></div><button disabled.bind=\"!taskHelper.hasTaskableObject\" type=\"button\" class=\"btn btn-primary\"><i class=\"fa fa-thumb-tack fa-2x\" click.delegate=\"taskCurrentObject()\"></i></button><div if.bind=\"displayPreference\" class=\"align-self-center pr-1\"><label class=\"col-form-label pr-2\" for=\"examToggleButton\"><b>Pref</b></label><div class=\"btn-group\"><button type=\"button\" class=\"btn btn-secondary\" id=\"examToggleButton\" style=\"background-color:#fff;color:#000;border-color:#ced4da\" click.delegate=\"togglePrefTypeClicked()\">${prefTypes[prefTypeIndex]}</button> <button type=\"button\" style=\"background-color:#fff;border-color:#ced4da\" class=\"btn btn-secondary dropdown-toggle dropdown-toggle-split caret\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"></button><div class=\"dropdown-menu\" style=\"overflow-y:scroll\" css=\"height: ${prefDropdownHeight}px;\"><a class=\"dropdown-item\" repeat.for=\"p of preferences\" model.bind=\"p\" click.delegate=\"preferenceClick(p)\" href=\"#\"><i class=\"fa ${p.isMap ? 'fa-map-marker' : 'fa-user-o'} mr-2\"></i> ${p.description} </a></div></div></div><div if.bind=\"displayPreference\" class=\"align-self-center\"><select class=\"form-item form-control\" value.bind=\"selectedBodyPart\" change.delegate=\"filterExamPref(providerId)\"><option model.bind=\"null\">Bodypart...</option><option repeat.for=\"b of bodyparts\" model.bind=\"b\"> ${b} </option></select></div><div class=\"dropdown\"><button class=\"btn btn-primary dropdown-toggle d-flex\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-user fa-2x align-self-center text-light mr-1\" aria-hidden=\"true\"></i><span class=\"align-self-center\">${userName}</span></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"openPreferenceEditor()\"><i class=\"fa fa-user text-secondary fa-fw mr-1\" aria-hidden=\"true\"></i>Preference Editor</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"doHelp($event)\"><i class=\"fa fa-question-circle text-secondary fa-fw mr-1\" aria-hidden=\"true\"></i>Help</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"logout()\"><i class=\"fa fa-sign-out text-secondary fa-fw mr-1\" aria-hidden=\"true\"></i>Logout</a></div></div></div></div></template>";});;
define('go/board',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', './globals', '../data/go/data'], function (exports, _helper, _http, _aureliaFramework, _globals, _data) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Board = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var Board = exports.Board = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _globals.Globals, _data.Data), _dec(_class = function () {
    function Board(helper, http, Globals, Data) {
      _classCallCheck(this, Board);

      this.helper = helper;
      this.http = http;
      this.globals = Globals;
      this.data = Data;
    }

    Board.prototype.activate = function activate(params) {
      this.board = params;
    };

    Board.prototype.cancelClick = function cancelClick() {
      var self = this;

      self.board.toggleEditing(function () {});
    };

    Board.prototype.togglePreference = function togglePreference() {
      var self = this;
      self.board.isDefault = self.board.isDefault ? false : true;
    };

    Board.prototype.updateClick = function updateClick() {
      var self = this;
      self.board.toggleEditing(function () {
        if (self.board.userBoardEdit) {
          self.board.userBoardEdit = false;
          self.saveUserBoard();
        } else {
          self.saveVisitBoard();
        }
      });
    };

    Board.prototype.saveVisitBoard = function saveVisitBoard() {
      var self = this;

      if (self.board.hasChanged) {
        self.data.saveVisitBoard(self.board);
        self.board.hasChanged = false;
      }
    };

    Board.prototype.saveUserBoard = function saveUserBoard() {
      var self = this;

      self.data.saveUserBoard(self.board);
    };

    return Board;
  }()) || _class);
});;
define('text!go/board.html',[],function(){return "<template><img style=\"position:absolute;height:400px;width:auto;max-height:100%;max-width:100%;top:0;bottom:0;left:0;right:0;margin:auto\" src=\"${helper.goFileUrl}images/phxMeteorGray.svg\"><compose repeat.for=\"b of board.blocks\" view-model=\"./block\" model.bind=\"b\" containerless></compose><div if.bind=\"board.editing\" class=\"fixed-bottom\" style=\"background-color:rgba(0,0,0,.25);left:80px\"><div class=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\" style=\"z-index:1000;position:absolute;bottom:0\"><div class=\"btn-group dropup mr-2\" role=\"group\" aria-label=\"First group\"><button type=\"button\" class=\"btn btn-outline-dark dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a click.delegate=\"board.addBlock(i.component)\" repeat.for=\"i of data.getBlockTypes()\" class=\"dropdown-item\" href=\"#\">${i.name}</a></div></div><div class=\"input-group mr-2\"><input type=\"text\" value.bind=\"board.description\" class=\"form-control\" aria-describedby=\"button-addon2\"></div><div class=\"btn-group mr-2\"><button type=\"button\" class=\"btn ${board.isDefault ? 'btn-primary' : 'btn-outline-primary'}\" aria-haspopup=\"true\" aria-expanded=\"false\" click.delegate=\"togglePreference()\"><i class=\"fa fa-user\" aria-hidden=\"true\"></i></button></div><div if.bind=\"!board.quickAdd\" class=\"btn-group mr-2\" role=\"group\" aria-label=\"Update group\"><button type=\"button\" class=\"btn btn-primary\" click.delegate=\"updateClick()\">Update Board</button></div><div class=\"btn-group mr-2\" role=\"group\" aria-label=\"Third group\"><button click.delegate=\"cancelClick()\" type=\"button\" class=\"btn btn-secondary\">Cancel</button></div></div></div></template>";});;
define('go/boardPicker',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'lodash', 'moment', '../data/go/data', './globals', 'aurelia-event-aggregator'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _data, _globals, _aureliaEventAggregator) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BoardPicker = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var BoardPicker = exports.BoardPicker = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _globals.Globals, _aureliaEventAggregator.EventAggregator, _data.Data), _dec(_class = function () {
    function BoardPicker(helper, http, Globals, EventAggregator, Data) {
      _classCallCheck(this, BoardPicker);

      this.boards = [];
      this.home = null;
      this.locked = false;

      this.helper = helper;
      this.http = http;
      this.globals = Globals;
      this.events = EventAggregator;
      this.data = Data;
    }

    BoardPicker.prototype.activate = function activate(model) {
      var self = this;
      self.home = model.home;
      self.boards = model.userBoards;

      if (self.home.currentBoard == null || self.home.currentBoard.visitInfo == null || self.home.currentBoard.visitInfo.locked == 0 || self.home.currentBoard.visitInfo.locked == undefined) {
        self.locked = false;
      } else {
        self.locked = true;
      }
    };

    BoardPicker.prototype.close = function close() {
      this.home.toggleBoardPicker();
    };

    BoardPicker.prototype.selectBoardAndClose = function selectBoardAndClose(index) {
      var self = this;

      self.selectBoard(index, true);

      self.close();
    };

    BoardPicker.prototype.selectBoard = function selectBoard(index, saveBoard) {
      var self = this;

      if (self.home.currentBoard == self.boards[index]) return;

      var els = self.globals.packery.getItemElements();
      self.globals.packery.remove(els);

      if (self.home.currentBoard != null) {
        self.home.currentBoard.clearDraggables();
      }

      var newBoard = self.boards[index];

      for (var b = 0; b < newBoard.blocks.length; b++) {
        newBoard.blocks[b].objectId = 0;
      }
      newBoard.clearDraggables();

      if (self.home.currentBoard != null) {
        newBoard.visitInfo = self.home.currentBoard.visitInfo;
      }

      if (newBoard.visitInfo != null && newBoard.visitInfo.visitCodeId != 0 && newBoard.id > 0 && saveBoard) {
        self.createVisitBoardWithBoardAndVisitCodeId(newBoard, newBoard.visitInfo.visitCodeId, function (res) {
          newBoard.visitInfo.boardId = res.id;
          self.home.currentBoard = newBoard;

          var visit = _.find(self.home.patientVisits, function (v) {
            return v.ObjectID == newBoard.visitInfo.visitCodeId;
          });
          if (visit != undefined) {
            visit.BoardId = res.id;
          }
        });
      } else if (saveBoard) {
        self.data.saveUserBoard(newBoard, function (savedBoard) {
          self.home.currentBoard = self.boards[index];
          self.home.currentBoard.id = savedBoard.id;
        });
      } else {
        self.home.currentBoard = newBoard;
      }
    };

    BoardPicker.prototype.createVisitBoardWithBoardAndVisitCodeId = function createVisitBoardWithBoardAndVisitCodeId(board, visitCodeId, callback) {

      var self = this;

      var boardId = board.visitInfo ? board.visitInfo.boardId : board.id;
      var boardToSave = self.home.getUserBoardById(board.id);
      boardToSave.providerId = board.visitInfo.providerId;
      boardToSave.patientId = board.visitInfo.patientId;
      boardToSave.date = board.visitInfo.date;
      boardToSave.id = boardId;
      boardToSave.visitCodeId = visitCodeId;

      self.data.saveVisitBoard(boardToSave, function (boardRes) {
        if (boardRes == false || boardRes == null) {} else {

          self.data.getVisitCode(visitCodeId, function (vc) {
            vc.VisitBoardId = boardRes.id;
            self.data.updateVisitCode(vc, function (res) {
              callback(boardRes);
            });
          });
        }
      });
    };

    BoardPicker.prototype.createNewBoard = function createNewBoard() {
      var aBoard = this.data.getNewBoard(this.globals.packery);
      aBoard.editing = true;
      this.boards.push(aBoard);
    };

    BoardPicker.prototype.updateBoard = function updateBoard() {
      var boardIndex = this.boards.length - 1;
      this.boards[boardIndex].editing = false;
      this.selectBoard(boardIndex, true);
    };

    BoardPicker.prototype.editCurrentBoard = function editCurrentBoard(isQuickAdd, editUserBoard) {
      this.home.currentBoard.quickAdd = isQuickAdd;
      if (editUserBoard) this.home.currentBoard.userBoardEdit = editUserBoard;
      this.home.currentBoard.toggleEditing();
      this.close();
    };

    BoardPicker.prototype.editBoardClick = function editBoardClick(isQuickAdd, index) {
      var self = this;

      if (index != undefined && self.home.currentBoard !== self.boards[index]) {
        self.selectBoard(index, false);

        setTimeout(self.editCurrentBoard.bind(self, false, true), 200);
      } else {
        self.editCurrentBoard(isQuickAdd, true);
      }
    };

    return BoardPicker;
  }()) || _class);
});;
define('text!go/boardPicker.html',[],function(){return "<template><div class=\"card-body p-0\" style=\"overflow-y:auto\"><ul class=\"list-group list-group-flush\"><li repeat.for=\"b of boards\" class=\"list-group-item ${locked ? 'disabled' : ''}\"><div if.bind=\"!b.editing\"><span click.delegate=\"selectBoardAndClose($index)\">${b.description}</span><i class=\"fa fa-cog text-secondary float-right\" click.delegate=\"editBoardClick(false, $index)\"></i></div><div if.bind=\"b.editing\" class=\"input-group mb-3\"><input type=\"text\" value.bind=\"b.description\" class=\"form-control\" placeholder=\"Board Description...\" aria-label=\"Board Description\" aria-describedby=\"button-addon2\"><div class=\"input-group-append\"><button class=\"btn btn-outline-primary\" type=\"button\" id=\"button-addon2\" click.delegate=\"updateBoard()\">Save</button></div></div></li></ul></div><div class=\"card-footer\"><i class=\"fa fa-plus fa-2x text-primary float-right\" click.delegate=\"createNewBoard()\"></i></div></template>";});;
define('go/boardPickerContainer',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'lodash', 'moment', '../data/go/data', './globals', 'aurelia-event-aggregator'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _data, _globals, _aureliaEventAggregator) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BoardPickerContainer = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var BoardPickerContainer = exports.BoardPickerContainer = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _globals.Globals, _aureliaEventAggregator.EventAggregator, _data.Data), _dec(_class = function () {
    function BoardPickerContainer(helper, http, Globals, EventAggregator, Data) {
      _classCallCheck(this, BoardPickerContainer);

      this.boardPickerModel = null;
      this.componentSelected = false;
      this.userBoardSelected = false;
      this.componentEnabled = false;

      this.helper = helper;
      this.http = http;
      this.globals = Globals;
      this.events = EventAggregator;
      this.data = Data;
    }

    BoardPickerContainer.prototype.activate = function activate(model) {
      var self = this;
      self.boardPickerModel = model;
      self.componentEnabled = model.home.currentBoard != null ? true : false;
      if (self.componentEnabled == true) {
        self.componentSelected = true;
      }
    };

    BoardPickerContainer.prototype.selectTab = function selectTab(t) {
      var self = this;
      if (t == 'card') {
        self.componentSelected = true;
        self.userBoardSelected = false;
      } else {
        self.componentSelected = false;
        self.userBoardSelected = true;
      }
    };

    BoardPickerContainer.prototype.close = function close() {
      this.boardPickerModel.home.toggleBoardPicker();
    };

    return BoardPickerContainer;
  }()) || _class);
});;
define('text!go/boardPickerContainer.html',[],function(){return "<template><div id=\"boardpicker\" class=\"card h-50\" style=\"position:absolute;bottom:0;left:0;width:18rem;box-shadow:2px 5px .25rem rgba(0,0,0,.3)\"><div class=\"card-header\"><ul class=\"nav nav-pills card-header-pills\"><li class=\"nav-item\"><a class=\"nav-link ${componentSelected ? 'active' : ''} ${componentEnabled ? '' : 'disabled'}\" href=\"#\" click.delegate=\"selectTab('card')\"><i class=\"fa fa-plus-square\"></i> Card</a></li><li class=\"nav-item\"><a class=\"nav-link ${userBoardSelected ? 'active' : ''}\" href=\"#\" click.delegate=\"selectTab('user')\"><i class=\"fa fa-th\"></i> User Boards</a></li></ul></div><compose if.bind=\"userBoardSelected\" view-model=\"./boardPicker\" model.bind=\"boardPickerModel\" containerless></compose><compose if.bind=\"componentSelected\" view-model=\"./componentPicker\" model.bind=\"boardPickerModel\" containerless></compose></div><i class=\"fa fa-caret-left fa-3x\" style=\"position:absolute;bottom:0;left:-16px\"></i></template>";});;
define('go/bodypartPickerPopup',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BodypartPickerPopup = undefined;

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var BodypartSelect = function () {
    function BodypartSelect(bodypartSide) {
      _classCallCheck(this, BodypartSelect);

      this.bodypartSide = bodypartSide;
      this.selected = false;
    }

    BodypartSelect.prototype.select = function select() {
      this.selected = this.selected ? false : true;
    };

    return BodypartSelect;
  }();

  var BodypartPickerPopup = exports.BodypartPickerPopup = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
    function BodypartPickerPopup(DialogController, http, helper) {
      _classCallCheck(this, BodypartPickerPopup);

      this.popupTop = 0;
      this.popupLeft = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.bodyparts = [];

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
    }

    BodypartPickerPopup.prototype.activate = function activate(obj) {
      var self = this;
      self.popupWidth = obj.popupWidth / 4;
      self.popupHeight = obj.popupHeight / 4;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;

      for (var i = 0; i < obj.bodyparts.length; i++) {
        self.bodyparts.push(new BodypartSelect(obj.bodyparts[i]));
      }
    };

    BodypartPickerPopup.prototype.ok = function ok() {
      var self = this;
      var selectedBodyparts = [];
      for (var i = 0; i < self.bodyparts.length; i++) {
        if (self.bodyparts[i].selected) {
          selectedBodyparts.push(self.bodyparts[i].bodypartSide);
        }
      }

      self.dialogController.close(true, { bodyparts: selectedBodyparts });
    };

    BodypartPickerPopup.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    return BodypartPickerPopup;
  }()) || _class);
});;
define('text!go/bodypartPickerPopup.html',[],function(){return "<template><ux-dialog css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\">Select Bodyparts</h4><i class=\"fa fa-times fa-2x float-right\" style=\"cursor:pointer\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body><div class=\"row\"><div class=\"col-md-12\"><ul class=\"list-group\"><li repeat.for=\"b of bodyparts\" click.delegate=\"b.select()\" class=\"list-group-item\"><h4><i if.bind=\"!b.selected\" class=\"fa fa-square-o\"></i> <i if.bind=\"b.selected\" class=\"fa fa-check-square-o\"></i> ${b.bodypartSide.side} ${b.bodypartSide.part} </h4></li></ul></div></div></ux-dialog-body><ux-dialog-footer><button click.delegate=\"ok()\">OK</button></ux-dialog-footer></ux-dialog></template>";});;
define('go/calendar',['exports', '../helpers/helper', 'aurelia-framework', 'aurelia-dialog', '../data/go/data', 'moment', 'lodash', './calendarHelper', './popupHelper', './globals'], function (exports, _helper, _aureliaFramework, _aureliaDialog, _data, _moment, _lodash, _calendarHelper, _popupHelper, _globals) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Calendar = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  var calHelper = _interopRequireWildcard(_calendarHelper);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _dec, _class2;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var appointment = function () {
    function appointment(schedule) {
      _classCallCheck(this, appointment);

      this.schedule = schedule;
      this.width = 0;
      this.height = 0;
      this.top = 0;
      this.left = 0;
      this.index = 0;
      this.class = this.getClassWithStatus(schedule.Status);
    }

    appointment.prototype.getClassWithStatus = function getClassWithStatus(status) {
      if (status == 'Ready') {
        return 'alert alert-success';
      } else if (status == 'Waiting') {
        return 'alert alert-primary';
      } else if (status == 'Next') {
        return 'alert alert-danger';
      } else if (status == 'Not Arrived' || status == null || status.length == 0) {
        return 'alert alert-dark';
      }
    };

    return appointment;
  }();

  var calDay = function () {
    function calDay(number, date, strClass, dateObj) {
      _classCallCheck(this, calDay);

      this.dayNames = ["SUN", "MON", 'TUE', "WED", 'THU', "FRI", "SAT"];

      this.number = number;
      this.date = date;
      this.dateObj = dateObj;
      this.name = this.dayNames[dateObj.getDay()];
      this.class = strClass;
      this.timeSlots = [];
      this.setupTimeslots(dateObj);
      this.index = 0;
      this.display = true;
      this.providersAndScheduleCount = [];
    }

    calDay.prototype.addProviderAndScheduleCountWithSchedule = function addProviderAndScheduleCountWithSchedule(schedule) {
      var found = _.find(this.providersAndScheduleCount, function (p) {
        return p.providerId == schedule.ProviderID;
      });
      if (found) {
        var count = found.count;
        count++;
        found.count = count;
      } else {
        var providers = calHelper.getProviderList();
        var prov = _.find(providers, function (p) {
          return p.ProviderID == schedule.ProviderID;
        });
        if (prov) {
          var obj = { 'providerName': prov.NameLast, 'providerId': schedule.ProviderID, 'count': 1 };
          this.providersAndScheduleCount.push(obj);
        }
      }
    };

    calDay.prototype.addScheduleToSlot = function addScheduleToSlot(schedule) {
      var foundSlot = _.find(this.timeSlots, function (t) {
        return t.time == schedule.Time;
      });
      if (foundSlot) {

        var newApt = foundSlot.getNewAppointment(schedule);
        foundSlot.appointments.push(newApt);
        this.addProviderAndScheduleCountWithSchedule(schedule);
      }
    };

    calDay.prototype.removeScheduleFromSlot = function removeScheduleFromSlot(time, scheduleId) {
      var foundSlot = _.find(this.timeSlots, function (t) {
        return t.time == time;
      });
      if (foundSlot) {
        var schedIndex = _.findIndex(foundSlot.appointments, function (a) {
          return a.schedule && a.schedule.ScheduleID == scheduleId;
        });
        if (schedIndex > -1) {
          foundSlot.appointments.splice(schedIndex, 1);
        }
      }
    };

    calDay.prototype.getAvailableSlots = function getAvailableSlots() {
      var avails = [];
      for (var i = 0; i < this.timeSlots.length; i++) {
        avails.push({ 'time': this.timeSlots[i].time, 'disabled': this.timeSlots[i].appointments.length == 0 ? false : true });
      }
      return avails;
    };

    calDay.prototype.setupTimeslots = function setupTimeslots(date) {
      this.timeSlots = [];

      var startHour = calHelper.getWeekDayStartTime().getHours();
      var endHour = calHelper.getWeekDayEndTime().getHours();

      var totalHours = endHour - startHour + 1;
      var totalDaySlots = totalHours * (60 / calHelper.getTimeSlotIncrementInMinutes());

      var weekStartDayTime = calHelper.getWeekDayStartTime();
      var startDayTime = new Date(date.getFullYear(), date.getMonth(), date.getDate(), weekStartDayTime.getHours(), weekStartDayTime.getMinutes());

      for (var i = 0; i < totalDaySlots; i++) {
        var slotIncrimentMins = calHelper.getTimeSlotIncrementInMinutes();
        var minsToAdd = i * slotIncrimentMins;
        var slotDate = calHelper.addMinutesToDate(startDayTime, minsToAdd);

        var aSlot = new timeSlot(slotDate, calHelper.getStringTime(slotDate), this);
        this.timeSlots.push(aSlot);
      }
    };

    return calDay;
  }();

  var timeSlot = function () {
    function timeSlot(date, time, calDay) {
      _classCallCheck(this, timeSlot);

      this.time = time;
      this.date = date;
      this.appointments = [];
      this.topOfHour = this.date.getMinutes() == 0 ? true : false;
      this.timeline = false;
      this.calDay = calDay;
    }

    timeSlot.prototype.getNewAppointment = function getNewAppointment(schedule) {

      var newApt = new appointment(schedule);
      newApt.index = this.appointments.length;

      var width = calHelper.getWeekContainerWith() / calHelper.getDaysInWeekIndex().length;
      width = this.appointments.length > 0 ? width / (this.appointments.length + 1) : width;

      var startDate = this.date;
      var endTime = 15;
      var endDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), startDate.getHours(), startDate.getMinutes() + endTime);
      if (schedule.EndTime) {
        var timeStr = schedule.EndTime.replace("AM", "");
        var isPm = timeStr.includes("PM");
        timeStr = timeStr.replace("PM", "");
        timeStr = timeStr.trimEnd();
        var timeSplit = timeStr.split(':');
        var finalHour = parseInt(timeSplit[0]);
        if (isPm && finalHour < 12) {
          finalHour = 12 + finalHour;
        }
        endDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), finalHour, timeSplit[1]);
      }

      var diffMins = Math.abs(startDate - endDate) / 60000;
      var slotSegments = diffMins / calHelper.getTimeSlotIncrementInMinutes();
      var height = slotSegments * calHelper.getTimeslotHeight();

      var weekdayStartHour = calHelper.getWeekDayStartTime().getHours();
      var weekdayStartMinutes = calHelper.getWeekDayStartTime().getMinutes();
      var currentDayStartTime = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), weekdayStartHour, weekdayStartMinutes);
      var dayStartDiffMins = Math.abs(currentDayStartTime - startDate) / 60000;
      var segmentsToTop = dayStartDiffMins / calHelper.getTimeSlotIncrementInMinutes() * calHelper.getTimeslotHeight();

      var dayIndex = this.calDay.index;

      var colWidth = calHelper.getWeekContainerWith() / calHelper.getDaysInWeekIndex().length;
      var colLeft = dayIndex * colWidth;
      var left = dayIndex * colWidth + width * newApt.index;

      newApt.height = height;
      newApt.width = width;
      newApt.top = segmentsToTop;
      newApt.left = left;

      this.updateAppointmentsWidthAndColumnLeft(width, colLeft);

      return newApt;
    };

    timeSlot.prototype.updateAppointmentsWidthAndColumnLeft = function updateAppointmentsWidthAndColumnLeft(width, columnLeft) {
      for (var i = 0; i < this.appointments.length; i++) {
        this.appointments[i].width = width;
        this.appointments[i].left = columnLeft + width * i;
      }
    };

    return timeSlot;
  }();

  var Calendar = exports.Calendar = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _aureliaDialog.DialogController, _data.Data, _popupHelper.PopupHelper, _globals.Globals), _dec(_class2 = function () {
    function Calendar(helper, DialogController, Data, PopupHelper, Globals) {
      _classCallCheck(this, Calendar);

      this.home = null;
      this.locations = [];
      this.currentLocation = null;
      this.currentProvider = null;
      this.currentDays = [];
      this.currentDate = "";
      this.dayBlockHeight = 100;
      this.calendarDaysClientHeight = 750;
      this.currentView = 'month';
      this.weekTimeDescriptions = [];
      this.numberOfDaysInWeek = 5;
      this.indexOfDaysInWeek = [1, 2, 3, 4, 5];
      this.timeslotHeightPixels = 24;
      this.setup = true;
      this.timeSlotIncrementMinutes = 15;
      this.timelineTopOffset = 0;
      this.canAddAppointment = false;
      this.months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

      this.helper = helper;
      this.dialogController = DialogController;
      this.data = Data;
      this.popupHelper = PopupHelper;
      this.globals = Globals;
    }

    Calendar.prototype.activate = function activate(params) {

      var self = this;

      self.home = params.home;

      self.canAddAppointment = this.globals.admin.HL7Enabled ? false : true;

      self.currentProvider = params.home.currentProvider;

      self.locations = params.locations;
      self.currentLocation = params.currentLocation;

      self.date = new Date();
      self.year = self.date.getFullYear();
      self.month = self.date.getMonth();
      self.days = [];

      calHelper.setDaysInWeekIndex(this.indexOfDaysInWeek);
      calHelper.setTimeSlotIncrementInMinutes(this.timeSlotIncrementMinutes);
      self.startOfDayTime = new Date(self.date.getFullYear(), self.date.getMonth(), self.date.getDate(), 8, 0);
      self.endOfDayTime = new Date(self.date.getFullYear(), self.date.getMonth(), self.date.getDate(), 17, 0);
      calHelper.setWeekDayStartTime(self.startOfDayTime);
      calHelper.setWeekDayEndTime(self.endOfDayTime);
      calHelper.setTimeslotHeight(self.timeslotHeightPixels);
      calHelper.setProviderList(params.home.providers);

      this.dayColumnWidth = calHelper.getWeekContainerWith() / calHelper.getDaysInWeekIndex().length;

      self.switchView("week");

      self.updateCalendar();
    };

    Calendar.prototype.providerSelected = function providerSelected() {
      this.updateCalendar();
    };

    Calendar.prototype.setSelectedProviderWithId = function setSelectedProviderWithId(providerId) {
      for (var i = 0; i < this.home.providers.length; i++) {
        if (this.home.providers[i].ProviderID == providerId) {
          this.currentProvider = this.home.providers[i];
          break;
        }
      }
    };

    Calendar.prototype.switchView = function switchView(view) {
      this.currentView = view;
    };

    Calendar.prototype.setupWeekViewDetails = function setupWeekViewDetails(date) {
      this.weekTimeDescriptions = [];

      var startHour = calHelper.getWeekDayStartTime().getHours();
      var endHour = calHelper.getWeekDayEndTime().getHours();

      var totalHours = endHour - startHour + 1;
      var totalDaySlots = totalHours * (60 / calHelper.getTimeSlotIncrementInMinutes());

      for (var i = 0; i < totalDaySlots; i++) {
        var slotIncrimentMins = calHelper.getTimeSlotIncrementInMinutes();
        var minsToAdd = i * slotIncrimentMins;
        var slotDate = calHelper.addMinutesToDate(calHelper.getWeekDayStartTime(), minsToAdd);
        var hour = slotDate.getHours();
        var amPm = hour > 12 ? 'PM' : 'AM';
        hour = hour > 12 ? hour - 12 : hour;
        var mins = slotDate.getMinutes();
        var isHour = mins == 0 ? true : false;
        this.weekTimeDescriptions.push({ "time": isHour ? hour + " " + amPm : ":" + mins, "class": isHour ? "time-description-hour" : "time-description-min" });
      }
    };

    Calendar.prototype.getWeekStartDateFromDate = function getWeekStartDateFromDate(date) {
      var day = date.getDay();
      return new Date(date.getFullYear(), date.getMonth(), date.getDate() - day);
    };

    Calendar.prototype.getWeekFromDate = function getWeekFromDate(date) {
      var self = this;
      var week = [];

      var startOfWeekDate = self.getWeekStartDateFromDate(date);
      var dateToFind = calHelper.getStringDate(startOfWeekDate.getFullYear(), startOfWeekDate.getMonth(), startOfWeekDate.getDate());
      var dayIndex = _.findIndex(self.days, function (d) {
        return d.date == dateToFind;
      });

      for (var i = 0; i < 7; i++) {
        var dayToAdd = self.days[dayIndex + i];

        var found = _.findIndex(calHelper.getDaysInWeekIndex(), function (d) {
          return d == dayToAdd.dateObj.getDay();
        });
        if (found > -1) {
          dayToAdd.index = found;
          week.push(dayToAdd);
        }
      }

      self.currentDays = week;
    };

    Calendar.prototype.updateTimeline = function updateTimeline() {
      var self = this;

      var now = new Date();

      var mins = now.getMinutes();
      var diff = mins % 15;
      mins = mins - diff;
      var timeToCheck = calHelper.getStringTime(new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours(), mins));
      var calDate = calHelper.getStringDate(now.getFullYear(), now.getMonth(), now.getDate());
      var foundDate = _.find(self.currentDays, function (d) {
        return d.date == calDate;
      });
      if (foundDate) {
        var slotIndex = _.findIndex(foundDate.timeSlots, function (s) {
          return s.time == timeToCheck;
        });

        if (slotIndex < 0) return;
        var slot = foundDate.timeSlots[slotIndex];
        if (slot) {
          var now = new Date();
          var minsDiff = now.getMinutes() - slot.date.getMinutes();
          var slotMinutes = calHelper.getTimeSlotIncrementInMinutes();
          var slotHeightPixels = calHelper.getTimeslotHeight();
          var minutePixelHeight = slotHeightPixels / slotMinutes;
          var timelineTopOffset = minsDiff * minutePixelHeight;
          var topOfSlot = slotHeightPixels * slotIndex;
          topOfSlot += timelineTopOffset;

          this.timelineTopOffset = topOfSlot;
        }
      }
    };

    Calendar.prototype.attached = function attached() {
      calHelper.setWeekContainerWith(this.weekContainer.clientWidth);
      this.calendarContainerWidth = this.calContainer.clientWidth;
    };

    Calendar.prototype.getCalendarWithProviderAndDateRange = function getCalendarWithProviderAndDateRange(providerId, start, end) {
      var self = this;
      var url = 'schedule/range?';
      var dateQueryString = 'start=' + (0, _moment2.default)(start).format("MM-DD-YYYY") + '&end=' + (0, _moment2.default)(end).format("MM-DD-YYYY");
      if (providerId == null) {
        url += dateQueryString;
      } else {
        url += 'providerId=' + providerId + '&' + dateQueryString;
      }
      self.data.getWithUrl(url, function (res) {
        var grouped = _.groupBy(res, "Date");
        var keys = Object.keys(grouped);

        for (var i = 0; i < keys.length; i++) {
          var date = keys[i];
          var schedule = grouped[date];

          var foundDay = _.find(self.days, function (d) {
            return d.date == date;
          });
          if (foundDay) {
            for (var s = 0; s < schedule.length; s++) {
              var aSched = schedule[s];
              aSched.Time = self.helper.utcDateToTimeString(aSched.Time);
              foundDay.addScheduleToSlot(aSched);
            }
          }
        }
      });
    };

    Calendar.prototype.updateCalendar = function updateCalendar() {

      var self = this;

      var dayone = new Date(self.year, self.month, 1).getDay();

      var lastdate = new Date(self.year, self.month + 1, 0).getDate();

      var dayend = new Date(self.year, self.month, lastdate).getDay();

      var monthlastdate = new Date(self.year, self.month, 0).getDate();

      var lit = [];
      for (var i = dayone; i > 0; i--) {
        var mlt = monthlastdate - i + 1;
        var strDate = calHelper.getStringDate(self.year, self.month - 1, mlt);
        var aDate = new Date(self.year, self.month - 1, mlt);

        var isToday = self.isDateToday(aDate);
        if (isToday && self.setup) {
          self.setup = false;
          self.weekStartDate = self.getWeekStartDateFromDate(aDate);
        }
        lit.push(new calDay(mlt, strDate, isToday ? "active" : "inactive", aDate));
      }

      for (var _i = 1; _i <= lastdate; _i++) {

        var strDate = calHelper.getStringDate(self.year, self.month, _i);
        var aDate = new Date(self.year, self.month, _i);

        var isToday = self.isDateToday(aDate);
        if (isToday && self.setup) {
          self.setup = false;
          self.weekStartDate = self.getWeekStartDateFromDate(aDate);
        }
        lit.push(new calDay(_i, strDate, isToday ? "active" : "", aDate));
      }

      for (var _i2 = dayend; _i2 < 6; _i2++) {
        var tDay = _i2 - dayend + 1;
        var strDate = calHelper.getStringDate(self.year, self.month + 1, tDay);
        var aDate = new Date(self.year, self.month + 1, tDay);
        var isToday = self.isDateToday(aDate);
        if (isToday && self.setup) {
          self.setup = false;
          self.weekStartDate = self.getWeekStartDateFromDate(aDate);
        }
        lit.push(new calDay(tDay, strDate, isToday ? "active" : "inactive", aDate));
      }

      self.currentDate = self.months[self.month] + ' ' + self.year;

      self.days = lit;
      self.currentDays = self.days;

      self.calendarWeeks = lit.length / 7;

      self.dayBlockHeight = self.calendarDaysClientHeight / self.calendarWeeks;

      var startDateDay = monthlastdate - dayone;
      var startDate = new Date(self.year, self.month - 1, startDateDay);
      var endDate = new Date(self.year, self.month + 1, 0);

      if (self.currentProvider) {
        var provId = self.currentProvider.ProviderID == 0 ? null : self.currentProvider.ProviderID;
        self.getCalendarWithProviderAndDateRange(provId, startDate, endDate);
      }

      self.setupWeekViewDetails(self.weekStartDate);

      if (self.currentView == 'week') {
        self.getWeekFromDate(self.weekStartDate);
      }

      self.updateTimeline();
    };

    Calendar.prototype.isDateToday = function isDateToday(dateInQuestion) {
      var self = this;
      var today = new Date();
      var res = today.getDate() == dateInQuestion.getDate() && today.getMonth() === dateInQuestion.getMonth() && today.getFullYear() === dateInQuestion.getFullYear() ? true : false;
      return res;
    };

    Calendar.prototype.prevNextClick = function prevNextClick(prev) {
      var self = this;


      if (self.currentView == 'week') {
        if (prev) {
          var prevDate = new Date(self.weekStartDate.getFullYear(), self.weekStartDate.getMonth(), self.weekStartDate.getDate() - 7);

          var exists = _.find(self.days, function (d) {
            return d.date == calHelper.getStringDate(prevDate.getFullYear(), prevDate.getMonth(), prevDate.getDate());
          });
          if (!exists) {
            self.month = self.month - 1;
          }
          self.weekStartDate = prevDate;
        } else {
          var nextDate = new Date(self.weekStartDate.getFullYear(), self.weekStartDate.getMonth(), self.weekStartDate.getDate() + 7);

          var exists = _.find(self.days, function (d) {
            return d.date == calHelper.getStringDate(nextDate.getFullYear(), nextDate.getMonth(), nextDate.getDate());
          });
          if (!exists) {
            self.month = self.month + 1;
          }
          self.weekStartDate = nextDate;
        }
      } else {
        self.month = prev ? self.month - 1 : self.month + 1;

        if (self.month < 0 || self.month > 11) {
          self.date = new Date(self.year, self.month, new Date().getDate());

          self.year = self.date.getFullYear();

          self.month = self.date.getMonth();
        } else {
          self.date = new Date();
        }
      }

      self.updateCalendar();
    };

    Calendar.prototype.goToDay = function goToDay(date) {
      this.date = date;
      this.month = date.getMonth();
      this.year = date.getFullYear();
      this.weekStartDate = this.getWeekStartDateFromDate(this.date);
      this.switchView('week');
      this.updateCalendar();
    };

    Calendar.prototype.goToDayWithProviderId = function goToDayWithProviderId(date, providerId) {
      this.setSelectedProviderWithId(providerId);
      this.date = date;
      this.month = date.getMonth();
      this.year = date.getFullYear();
      this.weekStartDate = this.getWeekStartDateFromDate(this.date);
      this.switchView('week');
      this.updateCalendar();
    };

    Calendar.prototype.goToToday = function goToToday() {
      var today = new Date();
      this.goToDay(today);
    };

    Calendar.prototype.moveScheduleItem = function moveScheduleItem(schedule, oldDate, oldTime) {
      var self = this;
      var foundDay = _.find(self.days, function (d) {
        return d.date == schedule.Date;
      });
      if (foundDay) {
        foundDay.addScheduleToSlot(schedule);
      }

      var oldDay = _.find(self.days, function (d) {
        return d.date == oldDate;
      });
      if (oldDay) {
        oldDay.removeScheduleFromSlot(oldTime, schedule.ScheduleID);
      }
    };

    Calendar.prototype.slotClicked = function slotClicked(slot, event) {
      var self = this;
      var tApt = null;

      if (slot.appointments.length == 0 && !this.globals.admin.HL7Enabled) {

        var OD_Schedule = {
          'Time': slot.time,
          'Date': calHelper.getStringDate(slot.date.getFullYear(), slot.date.getMonth(), slot.date.getDate()),
          'Patient_Name': null,
          'Reason_for_Visit': null,
          'PatientID': null,
          'Type': 'Office'
        };
        var newApt = new appointment(OD_Schedule);
        tApt = newApt;
      } else {
        tApt = slot.appointments[0];
      }

      self.openSchedulePop(slot, tApt);
      event.stopPropagation();
    };

    Calendar.prototype.appointmentClicked = function appointmentClicked(slot, apt) {

      var self = this;

      self.home.setLocationId(apt.schedule.LocationID);
      self.home.loadPatientWithMostRecentVisit(apt.schedule.PatientID);

      self.dialogController.cancel();
    };

    Calendar.prototype.openSchedulePop = function openSchedulePop(slot, apt) {
      var self = this;
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var halfW = windowWidth / 2;
      var halfH = windowHeight / 2;

      var options = {
        bodyPadding: 0,
        scrollHeight: 300
      };
      self.popupHelper.openViewModelPop('./schedulePopup', { "slot": slot,
        "slotDate": slot.date,
        "slotTime": slot.time,
        "apt": apt,
        "home": self.home,
        "locations": self.locations,
        "currentLocation": self.currentLocation,
        "editable": self.canAddAppointment,
        "calendar": self }, 'Schedule', halfW, halfH, halfH / 2, halfW / 2, options, function (res) {
        if (res.cancelled) return;

        if (res.appointment && res.appointment.schedule.ScheduleID && !res.appointmentCreated) {
          var slotDateStr = calHelper.getStringDate(slot.date.getFullYear(), slot.date.getMonth(), slot.date.getDate());
          if (res.appointment.schedule.Time != slot.time || res.appointment.schedule.Date != slotDateStr) {
            self.moveScheduleItem(res.appointment.schedule, slotDateStr, slot.time);
          }
        } else if (res.appointmentCreated) {
          var newApt = slot.getNewAppointment(res.appointment.schedule);
          slot.appointments.push(newApt);
        }
      });
    };

    Calendar.prototype.openSettings = function openSettings() {
      var self = this;
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var halfW = windowWidth / 2;
      var halfH = windowHeight / 2;

      var options = {
        bodyPadding: 20,
        scrollHeight: 300,
        displayHeader: true
      };

      var obj = {
        slotIncrementMinutes: calHelper.getTimeSlotIncrementInMinutes(),
        startTime: calHelper.getWeekDayStartTime(),
        endTime: calHelper.getWeekDayEndTime(),
        indexOfDaysInWeek: calHelper.getDaysInWeekIndex()
      };

      self.popupHelper.openViewModelPop('./calendarSettings', obj, 'Settings', halfW, halfH, halfH / 2, halfW / 2, options, function (res) {

        if (res.cancelled) return;

        var newDaysInWeek = [];
        for (var i = 0; i < res.daysInWeek.length; i++) {
          if (res.daysInWeek[i].selected) {
            newDaysInWeek.push(res.daysInWeek[i].index);
          }
        }
        calHelper.setDaysInWeekIndex(newDaysInWeek);
        calHelper.setTimeSlotIncrementInMinutes(res.slotIncrementMinutes);
        calHelper.setWeekDayStartTime(res.startTime);
        calHelper.setWeekDayEndTime(res.endTime);

        self.updateCalendar();
      });
    };

    return Calendar;
  }()) || _class2);
});;
define('text!go/calendar.html',[],function(){return "<template><style>*{margin:0;padding:0;font-family:Poppins,sans-serif}.calendar-container{background:#fff;width:100%;border-radius:10px;box-shadow:0 15px 40px rgba(0,0,0,.12)}.calendar-container header{display:flex;align-items:center;padding:25px 30px 10px;justify-content:space-between}header .calendar-current-date{font-weight:500;font-size:1.45rem}.calendar-weekdays div{cursor:default;font-weight:500}.calendar-weekdays-month div{width:calc(100% / 7);cursor:default;color:#444}.calendar-day{border:1px solid #f2f2f2}.row{flex-direction:row;margin:0}.column{display:flex;flex-direction:column;flex-basis:100%;flex:1}.time-slot-column{padding-left:5px;padding-right:5px;width:57px;text-align:right;color:#888}.time-slot-hour{border-bottom:1px solid #f2f2f2;border-top:1px solid #c7c7c7!important}.time-slot{border-bottom:1px solid #f2f2f2}.time-current{border-top:1px solid red!important}.weekview-day-name{display:block;margin:auto;width:50%!important;color:#888;font-size:small}.weekview-day-name.active{color:#007bff!important}.weekview-day-date{font-size:30px;padding:8px;line-height:normal;margin-bottom:5px;width:50px!important;display:inline-block;color:#888;margin:auto}.weekview-day-date.active{height:50px!important;width:50px!important;color:#fff!important;border-radius:50%!important;display:inline-block!important;background-color:#007bff!important}.monthview-day.active{height:25px!important;width:25px!important;color:#fff!important;border-radius:50%!important;display:inline-block!important;background-color:#007bff!important;text-align:center}.monthview-day.inactive{color:#888!important;font-weight:inherit!important}.monthview-day{color:#444}.monthview-day-content{font-size:smaller;border:1px solid #047bff;border-radius:4px;background-color:rgba(4,123,255,.15);padding-left:2px;padding-right:2px;margin-top:2px}.monthview-day-content.inactive{color:#888!important;border-color:#888;background-color:rgba(0,0,0,.15)}.time-description-hour{font-weight:700}.time-description-min{color:#888}.time-line{border-top:1px solid red;width:100%;display:block;position:absolute;left:0}.appointment-block{font-size:smaller;padding:2px;margin-right:2px;position:absolute;overflow:hidden}.add-plus{z-index:2000;position:relative;float:right;margin-top:3px;margin-right:3px;background-color:rgb(255 255 255 / 75%);border-radius:2px;height:13px;color:#8e8e8e}</style><div ref=\"calContainer\" class=\"calendar-container\" css=\"width: ${calendarContainerWidth}px;\"><div class=\"d-flex align-items-center\" style=\"padding:.75rem 1.25rem\"><div class=\"h3\">${months[month]} ${year}</div><select value.bind=\"currentProvider\" class=\"form-control ml-auto mr-2\" style=\"width:auto\" change.delegate=\"providerSelected()\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"p of home.providers\" model.bind=\"p\">${p.ProviderEntity}</option></select> <button class=\"btn btn-outline-secondary mr-1\" type=\"button\" click.delegate=\"goToToday()\">Today</button> <button class=\"btn mr-1\" type=\"button\" click.delegate=\"prevNextClick(true)\"><i class=\"fa fa-chevron-left text-muted\"></i></button> <button class=\"btn mr-1\" type=\"button\" click.delegate=\"prevNextClick(false)\"><i class=\"fa fa-chevron-right text-muted\"></i></button><div class=\"dropdown mr-1\"><button class=\"btn btn-outline-secondary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"> ${currentView} </button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"switchView('month')\">Month</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"switchView('week')\">Week</a></div></div><button class=\"btn mr-1\" type=\"button\" click.delegate=\"openSettings()\"><i class=\"fa fa-cog fa-2x text-muted\"></i></button></div><div if.bind=\"currentView=='month'\"><div class=\"d-flex align-items-center calendar-weekdays-month\"><div>SUN</div><div>MON</div><div>TUE</div><div>WED</div><div>THU</div><div>FRI</div><div>SAT</div></div><div ref=\"calendardays\" class=\"d-flex flex-wrap align-items-stretch\" style=\"height:750px\"><div repeat.for=\"d of days\" style=\"width:calc(100%/ 7);border:1px solid #f2f2f2;overflow:hidden\" css=\"height: ${dayBlockHeight}px;\" class=\"p-1\"><div class=\"monthview-day ${d.class}\">${d.number}</div><div repeat.for=\"a of d.providersAndScheduleCount\" class=\"d-flex monthview-day-content ${d.class}\" style=\"color:#444\" click.delegate=\"goToDayWithProviderId(d.dateObj, a.providerId)\"><div class=\"mr-1 w-100\" style=\"font-weight:700\">${a.providerName}</div><div class=\"flex-shrink-1\">${a.count}</div></div></div></div></div><div if.bind=\"currentView=='week'\"><div class=\"row\"><div class=\"time-slot-column\"></div><div class=\"col-md-11 pl-0\"><div class=\"d-flex align-items-center calendar-weekdays\"><div repeat.for=\"d of currentDays\" if.bind=\"d.display\" class=\"column\" style=\"text-align:center\" css=\"width: ${dayColumnWidth}px;\"><div class=\"weekview-day-name ${d.class}\">${d.name}</div><div class=\"weekview-day-date ${d.class}\">${d.number}</div></div></div></div></div><div class=\"row\"><div class=\"time-slot-column\"><div repeat.for=\"s of weekTimeDescriptions\" class.bind=\"s.class\"> ${s.time} </div></div><div class=\"col-md-11 pl-0\"><div ref=\"weekContainer\" class=\"row\"><div repeat.for=\"d of currentDays\" if.bind=\"d.display\" class=\"column\" style=\"border:1px solid #f2f2f2;overflow:hidden\" css=\"width: ${dayColumnWidth}px;\"><div repeat.for=\"s of d.timeSlots\" class=\"${s.topOfHour ? 'time-slot-hour' : 'time-slot'}\" css=\"height: ${timeslotHeightPixels}px;\"><div repeat.for=\"apt of s.appointments\" click.delegate=\"appointmentClicked(s, apt)\" class=\"appointment-block ${apt.class} d-flex align-items-center\" css=\"width: ${apt.width}px; height: ${apt.height}px; top: ${apt.top}px; left: ${apt.left}px;\"><div class=\"text-muted text-nowrap\">${apt.schedule.Patient_Name}</div><i if.bind=\"!canAddAppointment\" class=\"fa fa-info-circle ml-auto mr-1\" aria-hidden=\"true\" click.delegate=\"slotClicked(s, $event)\"></i></div><div class=\"time-line\" css=\"top: ${timelineTopOffset}px;\"></div><i if.bind=\"canAddAppointment\" class=\"fa fa-plus-square-o add-plus\" aria-hidden=\"true\" click.delegate=\"slotClicked(s, $event)\"></i></div></div></div></div></div></div></div></template>";});;
define('go/calendarHelper',['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addMinutesToDate = addMinutesToDate;
  exports.getStringTime = getStringTime;
  exports.getStringDate = getStringDate;
  exports.setDaysInWeekIndex = setDaysInWeekIndex;
  exports.getDaysInWeekIndex = getDaysInWeekIndex;
  exports.setProviderList = setProviderList;
  exports.getProviderList = getProviderList;
  exports.setWeekContainerWith = setWeekContainerWith;
  exports.getWeekContainerWith = getWeekContainerWith;
  exports.setTimeSlotIncrementInMinutes = setTimeSlotIncrementInMinutes;
  exports.getTimeSlotIncrementInMinutes = getTimeSlotIncrementInMinutes;
  exports.setWeekDayStartTime = setWeekDayStartTime;
  exports.getWeekDayStartTime = getWeekDayStartTime;
  exports.setWeekDayEndTime = setWeekDayEndTime;
  exports.getWeekDayEndTime = getWeekDayEndTime;
  exports.setTimeslotHeight = setTimeslotHeight;
  exports.getTimeslotHeight = getTimeslotHeight;
  function addMinutesToDate(date, minutes) {
    return new Date(date.getTime() + minutes * 60000);
  }

  function getStringTime(date) {
    var hour = date.getHours();
    var mins = date.getMinutes();

    var amPm = hour > 12 ? 'PM' : 'AM';
    hour = hour > 12 ? hour - 12 : hour;
    mins = mins.toString().length == 1 ? "0" + mins : mins;
    return hour + ':' + mins + ' ' + amPm;
  }

  function getStringDate(year, month, day) {

    var tMonth = "";

    month += 1;

    if (month.toString().length == 1) {
      tMonth = "0" + month;
    } else {
      tMonth = month;
    }

    var tDay = "";
    if (day.toString().length == 1) {
      tDay = "0" + day;
    } else {
      tDay = day;
    }

    return tMonth + '/' + tDay + '/' + year;
  }

  var numberOfDaysInWeek = 7;
  var weekContainerWidth = 0;
  var timeslotHeight = 0;
  var slotTimeIncrementInMinutes = 15;
  var weekDayStartTime = null;
  var weekDayEndTime = null;
  var daysInWeekIndex = [];
  var providerList = [];

  function setDaysInWeekIndex(daysIndex) {
    this.daysInWeekIndex = daysIndex;
  }

  function getDaysInWeekIndex() {
    return this.daysInWeekIndex;
  }

  function setProviderList(providers) {
    this.providerList = providers;
  }

  function getProviderList() {
    return this.providerList;
  }

  function setWeekContainerWith(width) {
    this.weekContainerWidth = width;
  }

  function getWeekContainerWith() {
    return this.weekContainerWidth;
  }

  function setTimeSlotIncrementInMinutes(increment) {
    this.slotTimeIncrementInMinutes = increment;
  }

  function getTimeSlotIncrementInMinutes() {
    return this.slotTimeIncrementInMinutes;
  }

  function setWeekDayStartTime(date) {
    this.weekDayStartTime = date;
  }

  function getWeekDayStartTime() {
    return this.weekDayStartTime;
  }

  function setWeekDayEndTime(date) {
    this.weekDayEndTime = date;
  }

  function getWeekDayEndTime() {
    return this.weekDayEndTime;
  }

  function setTimeslotHeight(height) {
    this.timeslotHeight = height;
  }

  function getTimeslotHeight() {
    return this.timeslotHeight;
  }
});;
define('go/calendarSettings',['exports', 'aurelia-framework', '../helpers/http', '../helpers/helper', 'lodash', '../data/go/data', 'aurelia-dialog', './calendarHelper'], function (exports, _aureliaFramework, _http, _helper, _lodash, _data, _aureliaDialog, _calendarHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CalendarSettings = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var calHelper = _interopRequireWildcard(_calendarHelper);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var CalendarSettings = exports.CalendarSettings = (_dec = (0, _aureliaFramework.inject)(_http.http, _helper.helper, _data.Data, _aureliaDialog.DialogController), _dec(_class = function () {
    function CalendarSettings(http, helper, Data, DialogController) {
      _classCallCheck(this, CalendarSettings);

      this.daysInWeek = [{ day: 'SUN', index: 0, selected: false }, { day: 'MON', index: 1, selected: false }, { day: 'TUE', index: 2, selected: false }, { day: 'WED', index: 3, selected: false }, { day: 'THU', index: 4, selected: false }, { day: 'FRI', index: 5, selected: false }, { day: 'SAT', index: 6, selected: false }];

      this.http = http;
      this.helper = helper;
      this.data = Data;
      this.dialogController = DialogController;
    }

    CalendarSettings.prototype.activate = function activate(params) {

      this.slotIncrementMinutes = params.slotIncrementMinutes;
      this.date = new Date(params.startTime.getFullYear(), params.startTime.getMonth(), params.startTime.getDate());
      this.startTime = this.getFormattedTime(params.startTime);
      this.endTime = this.getFormattedTime(params.endTime);
      this.selectDaysInWeek(params.indexOfDaysInWeek);
    };

    CalendarSettings.prototype.close = function close() {
      this.dialogController.close();
    };

    CalendarSettings.prototype.save = function save() {
      var startMills = this.inputStartTime.valueAsNumber;
      var endMills = this.inputEndTime.valueAsNumber;

      var dateMills = this.date.getTime();

      var finalStartTime = new Date(dateMills + startMills);
      var finalEndTime = new Date(dateMills + endMills);

      var obj = {
        daysInWeek: this.daysInWeek,
        slotIncrementMinutes: this.slotIncrementMinutes,
        'startTime': finalStartTime,
        'endTime': finalEndTime
      };

      this.dialogController.close(true, obj);
    };

    CalendarSettings.prototype.getFormattedTime = function getFormattedTime(fromDate) {
      var hour = fromDate.getHours().toString().length;
      if (hour == 1) {
        hour = '0' + fromDate.getHours();
      } else {
        hour = fromDate.getHours();
      }
      return hour + ':' + (fromDate.getMinutes() == 0 ? '00' : fromDate.getMinutes());
    };

    CalendarSettings.prototype.selectDaysInWeek = function selectDaysInWeek(daysInWeekIndex) {
      for (var i = 0; i < this.daysInWeek.length; i++) {
        var options = this.daysInWeek[i];

        var foundDay = _.find(daysInWeekIndex, function (d) {
          return d == options.index;
        });
        if (foundDay) {
          options.selected = true;
        }
      }
    };

    return CalendarSettings;
  }()) || _class);
});;
define('text!go/calendarSettings.html',[],function(){return "<template><div class=\"form-row\"><div class=\"form-group col-md-4\"><small id=\"daysInWeekHelp\" class=\"form-text text-muted\">Days in week</small><div repeat.for=\"d of daysInWeek\" class=\"form-check\" id=\"daysInWeekHelp\"><input class=\"form-check-input\" type=\"checkbox\" checked.bind=\"d.selected\" id=\"defaultCheck1\"> <label class=\"form-check-label\" for=\"defaultCheck1\"> ${d.day} </label></div></div><div class=\"form-group col-md-4\"><small id=\"slotIncrements\" class=\"form-text text-muted\">Appointment slot minutes</small> <input type=\"number\" placeholder=\"minutes\" class=\"form-control\" value.bind=\"slotIncrementMinutes\" aria-describedby=\"slotIncrements\"></div><div class=\"form-group col-md-4\"><small id=\"startTimeOfDay\" class=\"form-text text-muted\">Day start time</small> <input ref=\"inputStartTime\" type=\"time\" class=\"form-control\" value.bind=\"startTime\" aria-describedby=\"startTimeOfDay\"> <small id=\"endTimeOfDay\" class=\"form-text text-muted\">Day end time</small> <input ref=\"inputEndTime\" type=\"time\" class=\"form-control\" value.bind=\"endTime\" aria-describedby=\"endTimeOfDay\"></div><button class=\"btn btn-primary ml-auto mr-2\" type=\"button\" click.delegate=\"save()\">Save</button></div></template>";});;
define('go/camera',['exports', '../helpers/helper', 'aurelia-framework', 'aurelia-dialog'], function (exports, _helper, _aureliaFramework, _aureliaDialog) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Camera = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var Camera = exports.Camera = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _aureliaDialog.DialogController), _dec(_class = function () {
    function Camera(helper, DialogController) {
      _classCallCheck(this, Camera);

      this.showVideo = true;
      this.imageData = null;
      this.displaySpinner = true;
      this.facingUser = true;

      this.helper = helper;
      this.dialogController = DialogController;
    }

    Camera.prototype.activate = function activate(params) {};

    Camera.prototype.attached = function attached() {

      var res = $(this.camerapop).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5000", "important");

      this.video.setAttribute('autoplay', '');
      this.video.setAttribute('muted', '');
      this.video.setAttribute('playsinline', '');

      this.setupVideo();
    };

    Camera.prototype.detached = function detached() {
      this.video.srcObject.getTracks().forEach(function (mediaTrack) {
        mediaTrack.stop();
      });
    };

    Camera.prototype.flip = function flip() {
      var self = this;
      self.displaySpinner = true;
      self.facingUser = self.facingUser ? false : true;

      var options = {
        audio: false,
        video: {
          facingMode: self.facingUser ? 'user' : 'environment' }
      };

      var stream = self.video.srcObject;
      var tracks = stream.getTracks();
      tracks.forEach(function (track) {
        return track.stop();
      });

      navigator.mediaDevices.getUserMedia(options).then(function (MediaStream) {
        self.video.srcObject = null;
        self.video.srcObject = MediaStream;
        self.video.play();
        self.displaySpinner = false;
      }).catch(function (error) {

        self.displaySpinner = false;
      });
    };

    Camera.prototype.setupVideo = function setupVideo() {
      var self = this;

      var constraints = {
        audio: false,
        video: {
          facingMode: 'user'
        }
      };

      navigator.mediaDevices.getUserMedia(constraints).then(function (MediaStream) {
        self.video.srcObject = MediaStream;
        self.displaySpinner = false;
      }).catch(function (error) {

        self.displaySpinner = false;
      });
    };

    Camera.prototype.take = function take() {
      var self = this;

      self.showVideo = false;

      self.canvas.getContext('2d').drawImage(self.video, 0, 0, self.canvas.width, self.canvas.height);
      self.imageData = self.canvas.toDataURL('image/jpeg');
    };

    Camera.prototype.clear = function clear() {
      this.showVideo = true;
    };

    Camera.prototype.save = function save() {

      var res = this.imageData.replace('data:image/jpeg;base64,', '');

      this.dialogController.close(true, { image: res });
    };

    Camera.prototype.cancel = function cancel() {
      this.dialogController.cancel();
    };

    return Camera;
  }()) || _class);
});;
define('text!go/camera.html',[],function(){return "<template><div ref=\"camerapop\" class=\"row border border-bottom-0 rounded-top bg-white\"><div class=\"col-md-12\" style=\"padding-top:15px\"><video ref=\"video\" width=\"320\" height=\"240\" autoplay class=\"border rounded\" css=\"display: ${showVideo ? 'block' : 'none'}\"></video><i if.bind=\"displaySpinner\" class=\"fa fa-spinner fa-pulse fa-3x fa-fw\" style=\"position:absolute;left:50%;top:50%\"></i><div css=\"display: ${showVideo ? 'none' : 'block'}\"><canvas ref=\"canvas\" width=\"320\" height=\"240\"></canvas><button class=\"btn btn-outline-danger\" click.delegate=\"clear()\" style=\"position:absolute;right:20px;bottom:12px\">Clear</button></div></div></div><div class=\"row justify-content-around pt-2 border border-top-0 rounded-bottom bg-white\" style=\"padding-bottom:15px\"><button class=\"btn btn-outline-primary\" click.delegate=\"take()\"><i class=\"fa fa-camera\" aria-hidden=\"true\"></i></button> <button class=\"btn btn-outline-secondary\" click.delegate=\"flip()\"><i class=\"fa fa-repeat\" aria-hidden=\"true\"></i></button> <button class=\"btn btn-primary\" click.delegate=\"save()\" disabled.bind=\"showVideo\">Save</button> <button class=\"btn btn-secondary\" click.delegate=\"cancel()\">Cancel</button></div></template>";});;
define('go/caseManagerPop',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'moment', './home', '../data/go/data', 'lodash', 'aurelia-binding'], function (exports, _helper, _http, _aureliaFramework, _moment, _home, _data, _lodash, _aureliaBinding) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CaseManagerPop = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2;

  var CaseManagerPop = exports.CaseManagerPop = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _home.Home, _data.Data), _dec(_class = (_class2 = function () {
    function CaseManagerPop(helper, http, Home, Data) {
      _classCallCheck(this, CaseManagerPop);

      this.bodysides = ['Right', 'Left'];
      this.statusList = ['ACTIVE'];
      this.providers = [];

      _initDefineProp(this, 'casedatepicker', _descriptor, this);

      _initDefineProp(this, 'injurydatepicker', _descriptor2, this);

      this.caseData = null;

      this.helper = helper;
      this.http = http;
      this.home = Home;
      this.goData = Data;
    }

    CaseManagerPop.prototype.cancel = function cancel() {
      this.dialog.cancel();
    };

    CaseManagerPop.prototype.close = function close() {

      if (this.selectedProvider == null) {
        return;
      }

      this.caseData.ProviderID = this.selectedProvider.ProviderID;
      this.caseData.CaseDate = this.casedate;
      this.caseData.DateInjury = this.injurydate;

      this.dialog.close(true, this.caseData);
    };

    CaseManagerPop.prototype.delete = function _delete() {
      this.close();
    };

    CaseManagerPop.prototype.openInjuryCalendar = function openInjuryCalendar() {
      this.injurydatepicker.methods.toggle();
    };

    CaseManagerPop.prototype.openCaseCalendar = function openCaseCalendar() {
      this.casedatepicker.methods.toggle();
    };

    CaseManagerPop.prototype.activate = function activate(model) {
      var self = this;
      self.caseData = model.data;
      self.providers = model.providers;

      self.dialog = model.dialog;

      self.bodyparts = self.goData.bodyparts;

      for (var p = 0; p < self.providers.length; p++) {
        if (self.providers[p].ProviderID == self.caseData.ProviderID) {
          self.selectedProvider = self.providers[p];
          break;
        }
      }

      if (self.caseData.CaseID == 0) {
        self.casedate = (0, _moment2.default)().format('MM/DD/YYYY');
        self.caseData.State = 'ACTIVE';
      } else {
        self.casedate = (0, _moment2.default)(self.caseData.CaseDate).format('MM/DD/YYYY');
        self.injurydate = (0, _moment2.default)(self.caseData.DateInjury).format('MM/DD/YYYY');
      }
    };

    return CaseManagerPop;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'casedatepicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'injurydatepicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!go/caseManagerPop.html',[],function(){return "<template><div ref=\"ptauthpop\" class=\"card\"><div class=\"card-header\"><h4 style=\"display:inline-block;margin-bottom:0\"><i class=\"fa fa-list mr-2\"></i>Case Info</h4><i class=\"fa fa-close fa-2x float-right\" click.delegate=\"cancel()\"></i></div><div class=\"card-body\"><div class=\"form-row\"><div class=\"form-group col-md-4\"><label>Case Date</label><div class=\"input-group ml-auto\"><abp-datetime-picker style=\"width:120px\" icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"casedatepicker\" value.bind=\"casedate\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary\" type=\"button\" click.delegate=\"openCaseCalendar()\"><i class=\"fa fa-calendar\"></i></button></div></div></div><div class=\"form-group col-md-4\"><label>Status</label> <select value.bind=\"caseData.State\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"p of statusList\" model.bind=\"p\">${p}</option></select></div><div class=\"form-group col-md-4\"><label>Provider</label> <select value.bind=\"selectedProvider\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"p of providers\" model.bind=\"p\">${p.ProviderEntity}</option></select></div></div><div class=\"form-row\"><div class=\"form-group col-md-4\"><label>Injury Date</label><div class=\"input-group ml-auto\"><abp-datetime-picker style=\"width:120px\" icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"injurydatepicker\" value.bind=\"injurydate\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary\" type=\"button\" click.delegate=\"openInjuryCalendar()\"><i class=\"fa fa-calendar\"></i></button></div></div></div><div class=\"form-group col-md-4\"><label>Bodyside</label> <select value.bind=\"caseData.CaseBodySide\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"b of bodysides\" model.bind=\"b\">${b}</option></select></div><div class=\"form-group col-md-4\"><label>Bodypart</label> <select value.bind=\"caseData.CaseBodyPart\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"b of bodyparts\" model.bind=\"b\">${b}</option></select></div></div><div class=\"form-row\"><div class=\"form-group col-md-6\"><label>Claim ID</label> <input type=\"text\" class=\"form-control\" value.bind=\"caseData.ClaimID\"></div><div class=\"form-group col-md-6\"><label>Case ID</label> <input type=\"text\" class=\"form-control\" value.bind=\"caseData.CaseKey\"></div></div><div class=\"form-row\"><div class=\"form-group col-md-12\"><label>Injury Details</label> <textarea type=\"text\" class=\"form-control\" value.bind=\"caseData.CaseInjDetail\"></textarea></div></div></div><div class=\"card-footer\"><button type=\"button\" class=\"btn btn-primary float-right\" click.delegate=\"close()\">OK</button> <button if.bind=\"statusText =='ACTIVE'\" type=\"button\" class=\"btn btn-danger\" click.delegate=\"delete()\">DELETE</button></div></div></template>";});;
define('go/componentPicker',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'lodash', 'moment', '../data/go/data', './globals', 'aurelia-event-aggregator'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _data, _globals, _aureliaEventAggregator) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ComponentPicker = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var ComponentPicker = exports.ComponentPicker = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _globals.Globals, _aureliaEventAggregator.EventAggregator, _data.Data), _dec(_class = function () {
    function ComponentPicker(helper, http, Globals, EventAggregator, Data) {
      _classCallCheck(this, ComponentPicker);

      this.home = null;
      this.components = [];
      this.locked = false;

      this.helper = helper;
      this.http = http;
      this.globals = Globals;
      this.events = EventAggregator;
      this.data = Data;
    }

    ComponentPicker.prototype.activate = function activate(model) {
      var self = this;
      self.home = model.home;
      self.components = model.components;
      self.locked = self.home.currentBoard.visitInfo.locked == 0 ? false : true;
    };

    ComponentPicker.prototype.attached = function attached() {
      var self = this;
    };

    ComponentPicker.prototype.close = function close() {
      this.home.toggleBoardPicker();
    };

    ComponentPicker.prototype.addComponent = function addComponent(c) {

      this.home.addNewBlockComponentToBoard(c);

      this.close();
    };

    return ComponentPicker;
  }()) || _class);
});;
define('text!go/componentPicker.html',[],function(){return "<template><div class=\"card-body p-0\" style=\"overflow-y:auto\"><ul class=\"list-group list-group-flush\"><li repeat.for=\"c of components\" class=\"list-group-item ${locked ? 'disabled' : ''}\" click.delegate=\"addComponent(c.component)\"><i class=\"fa fa-plus-square text-secondary\"></i> ${c.name} </li></ul></div></template>";});;
define('go/createVisitPopup',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper', 'moment', 'lodash', '../data/go/data'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper, _moment, _lodash, _data) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CreateVisitPopup = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var CreateVisitPopup = exports.CreateVisitPopup = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper, _aureliaDialog.DialogService, _data.Data), _dec(_class = function () {
    function CreateVisitPopup(DialogController, http, helper, DialogService, Data) {
      _classCallCheck(this, CreateVisitPopup);

      this.visitTypes = [];
      this.bodySides = ["Right", "Left", "None"];
      this.userBoards = [];
      this.selectedVisitType = null;
      this.selectedBodypart = null;
      this.selectedBodyside = null;
      this.selectedBoard = null;
      this.selectedBodyparts = [];
      this.providers = [];
      this.popupLR = 0;
      this.popupTB = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.visitObject = null;
      this.extraVisible = false;

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
      this.dialogService = DialogService;
      this.data = Data;
    }

    CreateVisitPopup.prototype.extraToggle = function extraToggle() {
      this.extraVisible = this.extraVisible ? false : true;
    };

    CreateVisitPopup.prototype.close = function close() {
      var self = this;

      if (self.selectedBodyparts.length == 0) return;

      self.visitObject.visitType = self.selectedVisitType;
      self.visitObject.date = (0, _moment2.default)(self.createVisitDate).format('MM-DD-YYYY');
      self.visitObject.bodypart = self.selectedBodypart;
      self.visitObject.bodyside = self.selectedBodyside == 'None' ? 'EMPTY' : self.selectedBodyside;
      self.visitObject.bodyparts = self.selectedBodyparts;
      self.visitObject.providerId = self.selectedVisitProvider ? self.selectedVisitProvider.ProviderID : 0;
      self.visitObject.billingProviderId = self.selectedBillingProvider ? self.selectedBillingProvider.ProviderID : 0;

      var boardId = self.selectedBoard ? self.selectedBoard.id : 0;

      self.dialogController.close(true, { 'visitObject': self.visitObject, "boardId": boardId });
    };

    CreateVisitPopup.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    CreateVisitPopup.prototype.sideClicked = function sideClicked(s) {
      this.selectedBodyside = s;
    };

    CreateVisitPopup.prototype.partClicked = function partClicked(p) {
      this.selectedBodypart = p;
    };

    CreateVisitPopup.prototype.addBodypart = function addBodypart() {
      var self = this;
      for (var i = 0; i < self.selectedBodyparts.length; i++) {
        var b = self.selectedBodyparts[i];
        if (b.part == self.selectedBodypart && b.side == self.selectedBodyside) {
          return;
        }
      }

      var side = self.selectedBodyside == "None" ? null : self.selectedBodyside;

      self.selectedBodyparts.push(self.data.getBodypartSide(self.selectedBodypart, side));
    };

    CreateVisitPopup.prototype.bodypartClick = function bodypartClick(bp) {
      var self = this;
      for (var i = 0; i < self.selectedBodyparts.length; i++) {
        var b = self.selectedBodyparts[i];
        if (b.part == bp.part && b.side == bp.side) {
          self.selectedBodyparts.splice(i, 1);
        }
      }
    };

    CreateVisitPopup.prototype.activate = function activate(obj) {
      var self = this;

      self.bodyParts = self.data.bodyparts;

      self.visitTypes = self.data.getVisitTypes();

      self.visitObject = obj.visitObject;
      self.createVisitDate = (0, _moment2.default)(obj.visitObject.date).format('YYYY-MM-DD');
      self.selectedBodypart = obj.visitObject.bodypart == null ? self.bodyParts[0] : obj.visitObject.bodypart;

      if (obj.visitObject.bodyside != null && obj.visitObject.bodyside == 'EMPTY') {
        self.selectedBodyside = 'None';
      } else {
        self.selectedBodyside = obj.visitObject.bodyside == null ? "Right" : obj.visitObject.bodyside;
      }

      if (obj.visitObject.visitType != null) {
        var regex = new RegExp(RegExp.quote('Pt'), 'g');
        self.selectedVisitType = obj.visitObject.visitType.replace(regex, 'PT');
      } else {
        self.selectedVisitType = self.visitTypes[0];
      }

      if (obj.visitObject.bodyparts) {
        self.selectedBodyparts = obj.visitObject.bodyparts;
      }

      for (var i = 0; i < obj.home.providers.length; i++) {
        if (obj.home.providers[i].ProviderID != 0) {
          self.providers.push(obj.home.providers[i]);

          if (obj.visitObject.visitCode == null) {
            if (obj.home.providers[i].ProviderID == obj.home.currentProvider.ProviderID) {
              self.selectedVisitProvider = obj.home.currentProvider;
              self.selectedBillingProvider = obj.home.currentProvider;
            }
          } else {
            if (obj.home.providers[i].ProviderID == obj.visitObject.visitCode.ProviderID) {
              self.selectedVisitProvider = obj.home.providers[i];
              if (obj.home.providers[i].ProviderID == obj.visitObject.visitCode.BillingProvider) {
                self.selectedBillingProvider = obj.home.providers[i];
              }
            }
          }
        }
      }

      self.userBoards = obj.home.userBoards;

      if (self.userBoards.length > 0) {
        self.selectedBoard = self.userBoards[0];
      }

      self.popupWidth = obj.popupWidth * .8;
      self.popupHeight = (obj.popupHeight - 75) * .8;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;
    };

    return CreateVisitPopup;
  }()) || _class);
});;
define('text!go/createVisitPopup.html',[],function(){return "<template><ux-dialog style=\"z-index:2000;width:600px\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\">Create Visit</h4><i class=\"fa fa-times fa-lg\" style=\"cursor:pointer;float:right\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body class=\"pb-0\"><form><div class=\"form-row\"><div class=\"form-group col-md-5\"><label for=\"visittype\">Visit Type</label> <select id=\"visittype\" class=\"form-control\" value.bind=\"selectedVisitType\" required><option model.bind=\"null\">Select...</option><option repeat.for=\"v of visitTypes\" model.bind=\"v\"> ${v} </option></select></div><div class=\"form-group col-auto\"><label for=\"bodypart\">Body Part</label><div id=\"bodypart\" class=\"dropdown\"><button class=\"btn btn-outline-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-expanded=\"false\"> ${selectedBodypart} </button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><a repeat.for=\"b of bodyParts\" class=\"dropdown-item\" href=\"#\" click.delegate=\"partClicked(b)\">${b}</a></div></div></div><div class=\"form-group col-auto\"><label for=\"bodyside\">Body Side</label><div id=\"bodyside\" class=\"dropdown\"><button class=\"btn btn-outline-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton2\" data-toggle=\"dropdown\" aria-expanded=\"false\"> ${selectedBodyside} </button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><a repeat.for=\"s of bodySides\" class=\"dropdown-item\" href=\"#\" click.delegate=\"sideClicked(s)\">${s}</a></div></div></div><div class=\"form-group col-auto\"><button id=\"add\" type=\"button\" class=\"btn btn-primary\" style=\"margin-top:32px\" click.delegate=\"addBodypart()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button></div></div><div class=\"form-row\"><div class=\"form-group col-md-5\"><label for=\"userboard\">User Board</label> <select id=\"userboard\" class=\"form-control\" value.bind=\"selectedBoard\" required><option model.bind=\"null\">Select...</option><option repeat.for=\"b of userBoards\" model.bind=\"b\"> ${b.description} </option></select></div><div class=\"form-group col-md-7\"><div class=\"${selectedBodyparts.length == 0 ? 'create-visit-error-border' : ''}\"><template repeat.for=\"t of selectedBodyparts\"><span click.delegate=\"bodypartClick(t)\" class=\"p-1 text-primary d-inline-block\">${t.side}&nbsp;${t.part} <i class=\"fa fa-times float-right\" aria-hidden=\"true\"></i></span></template></div><div if.bind=\"selectedBodyparts.length == 0\" class=\"create-visit-error-bodypart\">Bodypart missing</div></div></div><div class=\"form-row\"><div class=\"form-group col-md-12 m-0\"><button id=\"add\" type=\"button\" data-toggle=\"collapse\" data-target=\".extra\" aria-expanded=\"false\" class=\"btn float-right collapsed\" click.delegate=\"extraToggle()\"><i class=\"fa ${ extraVisible ? 'fa-ellipsis-h' : 'fa-ellipsis-h'} fa-2x text-secondary\" aria-hidden=\"true\"></i></button></div><div class=\"form-group col-auto extra collapse\"><label for=\"visitdate\">Visit Date</label> <input type=\"date\" class=\"form-control\" id=\"visitdate\" value.bind=\"createVisitDate\"></div><div class=\"form-group col-auto extra collapse\"><label for=\"visitprovider\">Visit Provider</label> <select id=\"visitprovider\" class=\"form-control\" value.bind=\"selectedVisitProvider\"><option model.bind=\"null\">Select...</option><option repeat.for=\"p of providers\" model.bind=\"p\"> ${p.ProviderEntity} </option></select></div><div class=\"form-group col-auto extra collapse\"><label for=\"billingprovider\">Billing Provider</label> <select id=\"billingprovider\" class=\"form-control\" value.bind=\"selectedBillingProvider\"><option model.bind=\"null\">Select...</option><option repeat.for=\"p of providers\" model.bind=\"p\"> ${p.ProviderEntity} </option></select></div></div></form></ux-dialog-body><ux-dialog-footer><button click.delegate=\"close()\">OK</button></ux-dialog-footer></ux-dialog></template>";});;
define('go/customElements/blockPreferencePicker',['exports', 'aurelia-framework', 'lodash', '../home', '../../data/go/data'], function (exports, _aureliaFramework, _lodash, _home, _data) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BlockPreferencePicker = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _dec2, _class, _desc, _value, _class2, _descriptor, _descriptor2;

  var BlockPreferencePicker = exports.BlockPreferencePicker = (_dec = (0, _aureliaFramework.customElement)('block-preference'), _dec2 = (0, _aureliaFramework.inject)(_aureliaFramework.ObserverLocator, _home.Home, _data.Data), _dec(_class = _dec2(_class = (_class2 = function () {
    function BlockPreferencePicker(ObserverLocator, Home, Data) {
      _classCallCheck(this, BlockPreferencePicker);

      _initDefineProp(this, 'callback', _descriptor, this);

      _initDefineProp(this, 'preferences', _descriptor2, this);

      this.filteredPreferences = [];

      this.observerLocator = ObserverLocator;
      this.home = Home;
      this.data = Data;
    }

    BlockPreferencePicker.prototype.setup = function setup() {
      var self = this;
      self.bodyparts = self.data.bodyparts;
      var bp = self.home.currentBoard.visitInfo.bodypart;
      self.selectedBodyPart = bp ? bp : self.bodyparts[0];

      self.prefid = 'pref' + Math.floor(Math.random() * 10000);
    };

    BlockPreferencePicker.prototype.attached = function attached() {
      var self = this;
      self.setup();

      setTimeout(self.attachClick.bind(self), 500);
    };

    BlockPreferencePicker.prototype.attachClick = function attachClick() {
      var self = this;

      self.filterByBodypart();

      $('#' + self.prefid).on('click', function (e) {
        if (e.currentTarget.classList.contains('show')) {

          if (e.target.classList.contains('list-group-item')) {} else {
            e.stopPropagation();
          }
        }
      });

      $('#' + self.prefid).on('show.bs.dropdown', function () {
        if (self.filteredPreferences.length == 0) {
          self.filterByBodypart();
        }
      });
    };

    BlockPreferencePicker.prototype.prefSelected = function prefSelected(p) {
      var self = this;
      if (self.callback) {
        self.callback({ preference: p });
      }
    };

    BlockPreferencePicker.prototype.filterByBodypart = function filterByBodypart() {
      var self = this;
      self.filteredPreferences = _.filter(self.preferences, function (p) {
        return p.bodypart == self.selectedBodyPart;
      });
    };

    return BlockPreferencePicker;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'callback', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'preferences', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: function initializer() {
      return [];
    }
  })), _class2)) || _class) || _class);
});;
define('text!go/customElements/blockPreferencePicker.html',[],function(){return "<template style=\"position:absolute;top:0;padding:2px\"><div id.bind=\"prefid\" class=\"dropdown\"><button class=\"btn dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-expanded=\"false\">Pref</button><div class=\"dropdown-menu\" style=\"padding:10px;width:175px\"><div class=\"form-group\"><label for=\"bodypart\">Body Part</label> <i class=\"fa fa-male fa-2x text-success pl-2\" style=\"display:inline-block;position:absolute;right:0;padding:4px;margin-right:5px;top:2px\" click.delegate=\"createPreferenceClicked()\"></i> <select id=\"bodypart\" class=\"form-item form-control\" value.bind=\"selectedBodyPart\" change.delegate=\"filterByBodypart()\"><option model.bind=\"null\">Bodypart...</option><option repeat.for=\"b of bodyparts\" model.bind=\"b\"> ${b} </option></select></div><ul class=\"list-group\" style=\"overflow-y:auto;height:250px\"><li repeat.for=\"p of filteredPreferences\" class=\"list-group-item\" click.delegate=\"prefSelected(p)\">${p.description}</li></ul></div></div></template>";});;
define('go/customElements/myCheckbox',['exports', 'aurelia-framework'], function (exports, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MyCheckbox = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _dec2, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

  var MyCheckbox = exports.MyCheckbox = (_dec = (0, _aureliaFramework.customElement)('my-checkbox'), _dec2 = (0, _aureliaFramework.inject)(_aureliaFramework.ObserverLocator), _dec(_class = _dec2(_class = (_class2 = function () {
    function MyCheckbox(ObserverLocator) {
      _classCallCheck(this, MyCheckbox);

      _initDefineProp(this, 'selected', _descriptor, this);

      _initDefineProp(this, 'value', _descriptor2, this);

      _initDefineProp(this, 'editing', _descriptor3, this);

      _initDefineProp(this, 'callback', _descriptor4, this);

      this.observerLocator = ObserverLocator;
    }

    MyCheckbox.prototype.selectedChanged = function selectedChanged(newValue, oldValue) {
      var self = this;
      if (self.callback != undefined) {
        self.callback({ checked: newValue });
      }
    };

    return MyCheckbox;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'selected', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'value', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'editing', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, 'callback', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class) || _class);
});;
define('text!go/customElements/myCheckbox.html',[],function(){return "<template><div class=\"d-inline-block m-1\" style=\"width:100%\"><div if.bind=\"!editing\" class=\"d-inline-block m-1\" style=\"vertical-align:middle;width:inherit\"> ${value} </div><div if.bind=\"editing\" class=\"d-inline-block m-1\" style=\"border-radius:4px;border:1px solid #ced4da;cursor:pointer;vertical-align:middle;width:inherit\"><div style=\"background-color:#eee;border-right:1px solid #ccc;padding:6px 12px;display:table-cell;width:1%;border-top-left-radius:4px;border-bottom-left-radius:4px\"><span style=\"width:20px\"><i if.bind=\"selected\" class=\"fa fa-check-square-o fa-lg\" aria-hidden=\"true\"></i> <i if.bind=\"!selected\" class=\"fa fa-square-o fa-lg\" aria-hidden=\"true\"></i></span></div><div style=\"display:table-cell;padding-left:12px;padding-right:12px\">${value}</div></div></div></template>";});;
define('go/demographics',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'lodash', 'moment', '../data/go/data', './home', 'aurelia-event-aggregator', './popupHelper'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _data, _home, _aureliaEventAggregator, _popupHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Demographics = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var ListObject = function ListObject(description, data) {
    _classCallCheck(this, ListObject);

    this.description = description;
    this.data = data;
  };

  var Demographics = exports.Demographics = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home, _aureliaEventAggregator.EventAggregator, _popupHelper.PopupHelper), _dec(_class = (_class2 = function () {
    Demographics.prototype.filesVisibleChanged = function filesVisibleChanged(newVal, oldVal) {
      var self = this;
      if (!newVal && oldVal) {
        this.event.publish("fileFolderClosed");
      } else {
        this.event.publish("fileFolderOpened", self.patient.data.PatientID);
      }
    };

    function Demographics(helper, http, Data, Home, EventAggregator, PopupHelper) {
      _classCallCheck(this, Demographics);

      this.demographicsVisible = false;
      this.visitsVisible = true;
      this.pastHistoryVisible = false;

      _initDefineProp(this, 'filesVisible', _descriptor, this);

      this.patientAlertVisible = false;
      this.patient = null;

      _initDefineProp(this, 'currentWidth', _descriptor2, this);

      this.fullscreen = false;
      this.home = null;
      this.sexList = ['M', 'F', 'UNK'];
      this.marriedList = ['Married', 'Single', 'Divorced', 'Separated', 'Widowed'];
      this.stateList = ['AK', 'AL', 'AR', 'AS', 'AZ', 'CA', 'CO', 'CT', 'DC', 'DE', 'FL', 'GA', 'GU', 'HI', 'IA', 'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME', 'MI', 'MN', 'MO', 'MP', 'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY', 'OH', 'OK', 'OR', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UM', 'UT', 'VA', 'VI', 'VT', 'WA', 'WI', 'WV', 'WY'];
      this.raceList = ['Hispanic or Latino', 'Not Hispanic or Latino', 'Patient Declined Race'];
      this.ethnicityList = ['Unknown', 'Asian Indian or Alaskan', 'Asian', 'Black or African American', 'Declined', 'Native Hawaiian or Other Pacific Islander', 'White'];
      this.sexPrefs = [];
      this.genderIds = [];
      this.languages = [];
      this.races = [];
      this.ethnicities = [];
      this.providerList = [];
      this.disableDemographics = false;
      this.showImage = false;

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
      this.event = EventAggregator;
      this.popupHelper = PopupHelper;
    }

    Demographics.prototype.openCamera = function openCamera() {
      var self = this;
      this.popupHelper.openCameraPop(function (imgStr) {

        var obj = {
          imageString: imgStr.image,
          patientId: self.patient.data.PatientID
        };

        self.data.postWithUrlAndData('patients/photo', JSON.stringify(obj), function (res) {
          if (res == true) {
            var imgName = self.patient.data.PatientID + '.jpg';
            var imagePath = self.helper.imageTenantBaseUrl + 'Photos/' + imgName;
            self.home.patient.imagepath = imagePath;
            self.patient.data.Photo = imgName;
          } else {}
        });
      });
    };

    Demographics.prototype.takePhoto = function takePhoto() {
      var self = this;
      self.showImage = true;
      self.getVideo();
    };

    Demographics.prototype.snap = function snap() {
      var self = this;

      var data = self.canvas.toDataURL('image/jpeg');
      var link = document.createElement('a');
      link.href = data;
      link.setAttribute('download', 'handsome');
      link.innerHTML = '<img src="' + data + '" alt="Handsome Man" />';
      self.imagecontainer.insertBefore(link, self.imagecontainer.firstChild);
    };

    Demographics.prototype.getVideo = function getVideo() {
      var self = this;
      navigator.mediaDevices.getUserMedia({ video: true }).then(function (localMediaStream) {
        console.log(localMediaStream);

        console.dir(self.video);
        if ('srcObject' in self.video) {
          self.video.srcObject = localMediaStream;
        } else {
          self.video.src = URL.createObjectURL(localMediaStream);
        }

        self.video.addEventListener('canplay', self.paintToCanvas);

        self.video.play();

        self.snap();
      }).catch(function (err) {
        console.error('OH NO!!!!', err);
      });
    };

    Demographics.prototype.paintToCanvas = function paintToCanvas() {
      var self = this;
      var width = self.videoWidth;
      var height = self.videoHeight;
      self.canvas.width = width;
      self.canvas.height = height;

      var ctx = self.canvas.getContext('2d');

      return setInterval(function () {
        ctx.drawImage(self, 0, 0, width, height);
      }, 16);
    };

    Demographics.prototype.activate = function activate(model) {
      var self = this;
      self.visitsVisible = true;
      self.patient = model.patient;
      self.home = model;

      self.disableDemographics = self.home.demographicsDisabled;

      self.event.subscribe('showDemographicsFiles', function (patient) {

        self.patient = patient;

        self.toggleNavigation("files");
        self.event.publish('loadPatientFileFolder', patient.data.PatientID);
      });
    };

    Demographics.prototype.attached = function attached() {
      this.currentWidth = 600;
      this.minWidth = this.currentWidth;
      this.maxWidth = window.innerWidth;
    };

    Demographics.prototype.toggleFullscreen = function toggleFullscreen() {
      this.fullscreen = this.fullscreen ? false : true;
      this.currentWidth = this.fullscreen ? this.maxWidth : this.minWidth;
    };

    Demographics.prototype.photoClick = function photoClick() {
      this.home.hideDemographics();
    };

    Demographics.prototype.toggleNavigation = function toggleNavigation(nav) {
      var self = this;
      if (nav == 'demographics') {
        self.currentWidth = 600;
        self.demographicsVisible = true;
        self.visitsVisible = false;
        self.pastHistoryVisible = false;
        self.filesVisible = false;
        self.scrollHeight = self.demo.clientHeight;
        self.patientAlertVisible = false;
      } else if (nav == 'visits') {
        self.currentWidth = 600;
        self.demographicsVisible = false;
        self.visitsVisible = true;
        self.pastHistoryVisible = false;
        self.filesVisible = false;
        self.patientAlertVisible = false;
      } else if (nav == 'history') {
        self.currentWidth = 950;
        self.demographicsVisible = false;
        self.visitsVisible = false;
        self.pastHistoryVisible = true;
        self.filesVisible = false;
        self.patientAlertVisible = false;
      } else if (nav == 'files') {
        var fileWidth = window.innerWidth / 2 - 72;
        self.currentWidth = fileWidth;
        self.demographicsVisible = false;
        self.visitsVisible = false;
        self.pastHistoryVisible = false;
        self.patientAlertVisible = false;
        self.filesVisible = true;
      } else {
        self.currentWidth = 600;
        self.demographicsVisible = false;
        self.visitsVisible = false;
        self.pastHistoryVisible = false;
        self.filesVisible = false;
        self.patientAlertVisible = true;
      }
    };

    return Demographics;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'filesVisible', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'currentWidth', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!go/demographics.html',[],function(){return "<template><style>.form-group{margin-bottom:.5rem}.demo-icon-select>div{border-left:1px solid grey;border-top:1px solid grey;border-bottom:1px solid grey;border-top-left-radius:6px;border-bottom-left-radius:6px;background-color:#fff}.demo-icon{border-left:1px solid grey;border-right:1px solid grey}.demo-top-icon{border-right:1px solid grey}.photo{width:100%;float:left}.player{position:absolute;top:20px;right:20px;width:200px}</style><div id=\"demotop\" class=\"card border-left-0 h-100\" css=\"width:${currentWidth}px;\" style=\"box-shadow:5px 5px 4px rgba(0,0,0,.25);border-top-left-radius:0\"><div ref=\"demo\" class=\"row p-0 m-0 h-100\"><div class=\"d-flex flex-column\" style=\"width:4.5rem;background-color:#dfe1e5\"><div class=\"py-0 pl-2 pr-0\" style=\"border-right:1px solid grey\"><div style=\"height:6px\"></div></div><div class=\"text-center py-0 pl-2 pr-0 ${demographicsVisible ? 'demo-icon-select' : 'demo-top-icon'}\"><div class=\"py-2\"><a href=\"#\" click.delegate=\"toggleNavigation('demographics')\" class=\"nav-link\" title=\"\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\" data-bs-original-title=\"Dashboard\"><i class=\"fa fa-user fa-2x\"></i></a></div></div><div class=\"text-center py-0 pl-2 pr-0 ${visitsVisible ? 'demo-icon-select' : 'demo-icon'}\" style=\"border-left:1px solid grey\"><div class=\"py-2\"><a href=\"#\" click.delegate=\"toggleNavigation('visits')\" class=\"nav-link\" title=\"\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\" data-bs-original-title=\"Dashboard\"><i class=\"fa fa-calendar fa-2x\"></i></a></div></div><div class=\"text-center py-0 pl-2 pr-0 ${pastHistoryVisible ? 'demo-icon-select' : 'demo-icon'}\" style=\"border-left:1px solid grey\"><div class=\"py-2\"><a href=\"#\" click.delegate=\"toggleNavigation('history')\" class=\"nav-link\" title=\"\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\"><i class=\"fa fa-heartbeat fa-2x\"></i></a></div></div><div class=\"text-center py-0 pl-2 pr-0 ${filesVisible ? 'demo-icon-select' : 'demo-icon'}\" style=\"border-left:1px solid grey\"><div class=\"py-2\"><a href=\"#\" click.delegate=\"toggleNavigation('files')\" class=\"nav-link\" title=\"\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\"><i class=\"fa fa-folder fa-2x\"></i></a></div></div><div class=\"text-center py-0 pl-2 pr-0 ${patientAlertVisible ? 'demo-icon-select' : 'demo-icon'}\" style=\"border-left:1px solid grey\"><div class=\"py-2\"><a href=\"#\" click.delegate=\"toggleNavigation('alert')\" class=\"nav-link\" title=\"\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\"><i class=\"fa fa-exclamation-triangle fa-2x\"></i></a></div></div><div class=\"flex-grow-1\" style=\"border-left:1px solid grey;border-right:1px solid grey\"></div></div><div style=\"flex:1\"><compose if.bind=\"visitsVisible\" view-model=\"./visitPicker\" model.bind=\"patientVisits\" containerless></compose><div if.bind=\"demographicsVisible\" class=\"container-fluid h-100 w-100\"><div class=\"row h-100\"><div class=\"col px-3 pt-2 pb-3\"><compose view-model=\"./patientDetails\" model.bind=\"$this\" containerless></compose></div></div></div><div if.bind=\"pastHistoryVisible\" class=\"px-3 py-2\"><compose view-model=\"./patientHistory/patientHistory\" model.bind=\"$this\" containerless></compose></div><div if.bind=\"filesVisible\" class=\"px-3 py-2\"><compose view-model=\"./fileFolder\" model.bind=\"$this\" containerless></compose></div><div if.bind=\"patientAlertVisible\" class=\"px-3 py-2\"><compose view-model=\"./patientHistory/patientAlert\" model.bind=\"$this\" containerless></compose></div></div></div></div></template>";});;
define('go/docPicker',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'lodash', 'moment', '../data/go/data', './home', './documentPopup', 'aurelia-dialog'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _data, _home, _documentPopup, _aureliaDialog) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DocPicker = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var DocPicker = exports.DocPicker = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home, _aureliaDialog.DialogService), _dec(_class = function () {
    function DocPicker(helper, http, Data, Home, DialogService) {
      _classCallCheck(this, DocPicker);

      this.documents = [];

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
      this.dialogService = DialogService;
    }

    DocPicker.prototype.activate = function activate(model) {
      this.documents = model;
    };

    DocPicker.prototype.openDocument = function openDocument(doc) {
      var self = this;
      var url = self.data.createDocumentUrl(doc.id);
      this.displayDocumentPopup(url);

      this.home.togglePicker('documents');
    };

    DocPicker.prototype.displayDocumentPopup = function displayDocumentPopup(url) {
      var self = this;
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.dialogService.open({ viewModel: _documentPopup.DocumentPopup, model: { popupWidth: windowWidth, popupHeight: windowHeight, documentUrl: url } }).whenClosed(function (response) {});
    };

    return DocPicker;
  }()) || _class);
});;
define('text!go/docPicker.html',[],function(){return "<template><div class=\"card h-100\" style=\"width:18rem;box-shadow:2px 5px .25rem rgba(0,0,0,.3)\"><div class=\"card-header\"><i class=\"fa fa-file-text-o fa-2x\" aria-hidden=\"true\"></i> Documents<div class=\"dropdown float-right\"><button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><li><a href=\"#\">Service A</a></li><li><a href=\"#\">Service B</a></li><li class=\"dropdown-submenu\"><a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><span class=\"nav-label\">Service C</span><span class=\"caret\"></span></a><ul class=\"dropdown-menu\"><li><a href=\"#\">Service C1</a></li><li><a href=\"#\">Service C2</a></li><li><a href=\"#\">Service C3</a></li><li><a href=\"#\">Service C4</a></li><li><a href=\"#\">Service C5</a></li></ul></li></div></div></div><ul class=\"list-group list-group-flush\"><li repeat.for=\"d of documents\" class=\"list-group-item\" click.delegate=\"openDocument(d)\"><i class=\"fa fa-file-text-o pr-1\" aria-hidden=\"true\"></i> <span>${d.description}</span></li></ul></div><i class=\"fa fa-caret-left fa-3x\" style=\"position:absolute;top:92px;left:-16px\"></i></template>";});;
define('go/documentPopup',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DocumentPopup = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var DocumentPopup = exports.DocumentPopup = (_dec = (0, _aureliaFramework.inject)(_http.http, _helper.helper, _aureliaDialog.DialogController), _dec(_class = function () {
    function DocumentPopup(http, helper, DialogController) {
      _classCallCheck(this, DocumentPopup);

      this.popupLR = 0;
      this.popupTB = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.mynewValue = null;
      this.bgColor = 'white';
      this.borderSize = 1;
      this.closeColor = 'black';
      this.docTop = 50;
      this.title = 'Document';

      this.http = http;
      this.helper = helper;
      this.dialogController = DialogController;
    }

    DocumentPopup.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    DocumentPopup.prototype.onFrameLoad = function onFrameLoad() {
      var self = this;

      window.setTimeout(function () {
        var res = $(self.docframe).contents().find('head');
        console.log(res);
      }, 4000);
    };

    DocumentPopup.prototype.attached = function attached() {
      var self = this;
      var style = {
        'top': self.popupTop + 'px'
      };

      $('ux-dialog-overlay').css(style);
      $('ux-dialog-container').css(style);

      var res = $(self.docpop).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5002", "important");
    };

    DocumentPopup.prototype.activate = function activate(obj) {
      var self = this;

      document.cookie = 'SameSite=None;';
      document.cookie = 'Secure;';

      self.url = obj.url;

      self.popupWidth = obj.popupWidth - 72;
      self.popupHeight = obj.popupHeight - 50;
      self.popupTop = 50;
      self.popupLeft = 72;
      self.docTop = 0;
      self.contentHeight = obj.popupHeight - 100 + 'px';

      if (obj.options) {
        if (obj.options.hasOwnProperty('width')) {
          self.popupWidth = obj.options.width;
        }
        if (obj.options.hasOwnProperty('height')) {
          self.popupHeight = obj.options.height;
        }
        if (obj.options.hasOwnProperty('popupHeight')) {
          self.contentHeight = obj.options.popupHeight;
        }
        if (obj.options.hasOwnProperty('top')) {
          self.popupTop = obj.options.top;
          self.docTop = obj.options.top;
        }
        if (obj.options.hasOwnProperty('left')) {
          self.popupLeft = obj.options.left;
        }
        if (obj.options.hasOwnProperty('title')) {
          self.title = obj.options.title;
        }
      }
    };

    return DocumentPopup;
  }()) || _class);
});;
define('text!go/documentPopup.html',[],function(){return "<template><style>.dialog-header-content{display:flex!important}</style><ux-dialog ref=\"docpop\" css=\"position: absolute; top: ${docTop}px; left: ${popupLeft}px; width: ${popupWidth}; height: ${popupHeight}; background: ${bgColor};\"><ux-dialog-header css=\"background: ${bgColor}; border: ${borderSize};\" style=\"padding:8px\"><h4 style=\"display:inline-block;margin-bottom:0\">${title}</h4><i class=\"fa fa-times fa-lg fa-2x ml-auto mr-2\" style=\"cursor:pointer\" css=\"color: ${closeColor};\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body style=\"height:100%;overflow-y:auto;padding:0\"><iframe ref=\"docframe\" load.bind=\"onFrameLoad()\" css=\"border: ${borderSize};\" src.bind=\"url\" title.bind=\"title\" width=\"100%\" height.bind=\"contentHeight\"></iframe></ux-dialog-body></ux-dialog></template>";});;
define('go/dxSearch',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper', '../data/go/data', 'lodash'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper, _data, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DxSearch = undefined;

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Dx = function Dx(id, code, desc, data, bodypart) {
    _classCallCheck(this, Dx);

    this.id = id;
    this.selected = false;
    this.code = code;
    this.description = desc;
    this.data = data;
    this.side = null;
    this.part = bodypart;
  };

  var DxSearch = exports.DxSearch = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper, _data.Data), _dec(_class = function () {
    function DxSearch(DialogController, http, helper, Data) {
      _classCallCheck(this, DxSearch);

      this.popupTop = 0;
      this.popupLeft = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.searchResults = [];
      this.searchString = "";
      this.bodypart = null;
      this.bodyside = null;
      this.sortByUsage = true;
      this.distinct = true;
      this.popupHelper = null;
      this.spinnerLeft = 0;
      this.spinnerTop = 0;
      this.displaySpinner = false;
      this.selectedDiagnosis = [];
      this.initialDiagnosis = [];
      this.bodyparts = [];
      this.searchFilters = [];

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
      this.goData = Data;
    }

    DxSearch.prototype.close = function close() {
      var self = this;
      self.dialogController.close(true, self.selectedDiagnosis);
    };

    DxSearch.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    DxSearch.prototype.addSearchFilter = function addSearchFilter(filter) {
      var index = _.findIndex(this.searchFilters, function (f) {
        return f == filter;
      });
      if (index == -1) {
        this.searchFilters.push(filter);
      }
    };

    DxSearch.prototype.removeSearchFilter = function removeSearchFilter(index) {
      this.searchFilters.splice(index, 1);
    };

    DxSearch.prototype.activate = function activate(obj) {
      var self = this;

      for (var i = 0; i < self.goData.bodyparts.length; i++) {
        self.bodyparts.push(self.goData.bodyparts[i]);
      }

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.popupWidth = windowWidth * .8;
      self.popupHeight = (windowHeight - 75) * .8;
      self.popupTop = (windowHeight - self.popupHeight) / 2;
      self.popupLeft = (windowWidth - self.popupWidth) / 2;

      self.spinnerLeft = self.popupWidth / 2 - 21;
      self.spinnerTop = self.popupHeight / 2 - 21;

      self.popupHelper = obj.popupHelper;

      var specifyCode = false;

      if (obj.options) {
        if (obj.options.hasOwnProperty('width')) {
          self.popupWidth = obj.options.width;
        }
        if (obj.options.hasOwnProperty('height')) {
          self.popupHeight = obj.options.height;
        }
        if (obj.options.hasOwnProperty('top')) {
          self.popupTop = obj.options.top;
        }
        if (obj.options.hasOwnProperty('left')) {
          self.popupLeft = obj.options.left;
        }
        if (obj.options.hasOwnProperty('searchString')) {
          self.searchString = obj.options.searchString;
        } else if (obj.options.hasOwnProperty("initialDiagnosis")) {
          self.initialDiagnosis = obj.options.initialDiagnosis;
        }
        if (obj.options.hasOwnProperty('specifyCode')) {
          specifyCode = obj.options.specifyCode;
        }
      }

      self.bodypart = obj.bodypart;
      if (self.bodypart != undefined && self.bodypart != null) {
        self.searchFilters.push(self.bodypart);
      }

      self.bodyside = obj.bodyside;

      if (self.initialDiagnosis.length > 0) {
        self.populateInitialDiagnosis();
      } else {
        if (self.searchString.length == 0) {
          self.search();
        } else {
          if (!specifyCode) {
            self.seachIcd10();
          } else {
            self.openChildPopup(self.searchString, "NONE");
          }
        }
      }
    };

    DxSearch.prototype.populateInitialDiagnosis = function populateInitialDiagnosis() {
      var self = this;
      for (var i = 0; i < self.initialDiagnosis.length; i++) {
        self.searchResults.push(new Dx(0, self.initialDiagnosis[i].PatientDxCode, self.initialDiagnosis[i].PatientDxDescription, self.initialDiagnosis[i], self.bodypart));
      }
    };

    DxSearch.prototype.attached = function attached() {
      var res = $(this.dxpop).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");

      var style = {
        'z-index': 5001
      };

      $('ux-dialog-overlay').css(style);

      this.resizeSearchResults();
    };

    DxSearch.prototype.resizeSearchResults = function resizeSearchResults() {
      var self = this;
      this.resizeSearchTimeout = setTimeout(self.resizeSearchResultsCallback.bind(self), 50);
    };

    DxSearch.prototype.resizeSearchResultsCallback = function resizeSearchResultsCallback() {
      var self = this;
      clearTimeout(self.resizeSearchTimeout);

      var selectedPxHeight = $('#selectedDiagnosis').height();
      selectedPxHeight = selectedPxHeight == undefined ? 0 : selectedPxHeight;
      self.searchResultsHeight = self.popupHeight - 198 - selectedPxHeight;
    };

    DxSearch.prototype.searchClicked = function searchClicked() {
      this.seachIcd10();
    };

    DxSearch.prototype.removeDiagnosisClick = function removeDiagnosisClick(t) {
      var self = this;
      for (var i = 0; i < self.selectedDiagnosis.length; i++) {
        if (self.selectedDiagnosis[i].code == t.code) {
          self.selectedDiagnosis.splice(i, 1);
        }
      }
      self.resizeSearchResults();
    };

    DxSearch.prototype.checkForSideSelection = function checkForSideSelection(px) {

      var part = null;

      if (px.data.hasOwnProperty("Body_Part")) {
        if (px.data.Body_part == null) {
          return false;
        }
        part = px.data.Body_Part.toUpperCase();
      }

      if (px.data.hasOwnProperty("Region")) {
        if (px.data.Region == null) {
          return false;
        }
        part = px.data.Region.toUpperCase();
      }

      if (part == 'ANKLE' || part == 'KNEE' || part == 'HIP' || part == 'HAND' || part == 'WRIST' || part == 'SHOULDER' || part == 'FOOT' || part == 'ELBOW') {
        return true;
      }
      return false;
    };

    DxSearch.prototype.tryBodysidePicker = function tryBodysidePicker(showPicker, callback) {
      var self = this;
      if (showPicker) {
        self.popupHelper.openBodysidePickerPop(function (side) {
          callback(side);
        });
      } else {
        callback(null);
      }
    };

    DxSearch.prototype.checkSelectedDiagnosisForExisting = function checkSelectedDiagnosisForExisting(px) {
      return _.find(this.selectedDiagnosis, function (p) {
        return p.code == px.code;
      });
    };

    DxSearch.prototype.addClicked = function addClicked(r) {
      var self = this;

      if (r.data.Child_Count > 0) {
        self.popupHelper.openBodysidePickerPop(function (side) {
          self.openChildPopup(r.code, side);
        });
      } else {
        var displaySideSelection = self.checkForSideSelection(r);
        self.tryBodysidePicker(displaySideSelection, function (side) {

          var dxToAdd = r;

          var foundDx = self.checkSelectedDiagnosisForExisting(dxToAdd);
          if (foundDx) {
            dxToAdd = new Dx(r.id, r.code, r.description, r.data, self.bodypart);
          }

          if (side != null) {
            dxToAdd.side = side;
          }

          self.selectedDiagnosis.push(dxToAdd);
          self.resizeSearchResults();
        });
      }
    };

    DxSearch.prototype.resizeSearchResults = function resizeSearchResults() {
      var self = this;
      this.resizeSearchTimeout = setTimeout(self.resizeSearchResultsCallback.bind(self), 50);
    };

    DxSearch.prototype.resizeSearchResultsCallback = function resizeSearchResultsCallback() {
      var self = this;
      clearTimeout(self.resizeSearchTimeout);

      var selectedPxHeight = $('#selectedDiagnosis').height();
      selectedPxHeight = selectedPxHeight == undefined ? 0 : selectedPxHeight;
      self.searchResultsHeight = self.popupHeight - 198 - selectedPxHeight;
    };

    DxSearch.prototype.search = function search() {
      var self = this;
      self.searchResults = [];
      self.displaySpinner = true;

      var url = 'Diagnosis/search?query=' + this.searchString + "&icd10=true&bodypart=" + self.bodypart + "&sortByUsage=" + self.sortByUsage + "&distinct=" + self.distinct;
      self.goData.getWithUrl(url, function (res) {
        for (var i = 0; i < res.length; i++) {
          var dx = res[i];
          self.searchResults.push(new Dx(dx.Id, dx.Icd10Code, dx.Description, dx, self.bodypart));
        }
        self.displaySpinner = false;
      });
    };

    DxSearch.prototype.seachIcd10 = function seachIcd10() {
      var self = this;
      self.searchResults = [];
      self.displaySpinner = true;

      var finalSearch = "";
      for (var i = 0; i < self.searchFilters.length; i++) {
        finalSearch += self.searchFilters[i] + " ";
      }

      finalSearch += self.searchString;

      var url = 'icd10codes/search?pageSize=100&pageNumber=1&searchTerm=' + finalSearch;
      self.goData.getWithUrl(url, function (res) {
        if (res.ICD10Codes != null) {
          for (var i = 0; i < res.ICD10Codes.length; i++) {
            var dx = res.ICD10Codes[i];
            self.searchResults.push(new Dx(dx.Code, dx.Code, dx.Descriptor, dx, self.bodypart));
          }
        }
        self.displaySpinner = false;
      });
    };

    DxSearch.prototype.getCodeWithLaterality = function getCodeWithLaterality(code, laterality, callback) {
      var self = this;
      var url = 'icd10data?icd10code=' + code + '&laterality=' + laterality;
      self.goData.getWithUrl(url, function (res) {
        callback(res);
      });
    };

    DxSearch.prototype.openChildPopup = function openChildPopup(code, laterality) {
      var self = this;
      self.getCodeWithLaterality(code, laterality, function (res) {

        if (res.Children.length > 0) {
          var columnHeaders = ['Code', 'Description'];
          var rowData = [];
          for (var i = 0; i < res.Children.length; i++) {
            var _code = res.Children[i];
            var genTableRow = self.goData.getGenericTableRow([_code.Code, _code.Descriptor], _code);
            genTableRow.id = i;
            rowData.push(genTableRow);
          }

          self.popupHelper.openGenericTablePop('Select Child Code', columnHeaders, rowData, false, { zIndex: 5001 }, function (res) {
            var side = self.goData.lateralityFromIcd10Code(res.row.data.Code);
            var dx = new Dx(res.row.data.Code, res.row.data.Code, res.row.data.Descriptor, res.row.data, self.bodypart);
            dx.childCode = true;
            dx.side = side;
            self.selectedDiagnosis.push(dx);
            self.popupHelper.activeController.close();
          });
        } else {
          var dx = new Dx(0, res.ICD10Code.Code, res.ICD10Code.Descriptor, res.ICD10Code, self.bodypart);
          dx.side = laterality;
          self.selectedDiagnosis.push(dx);

          return;
        }
      });
    };

    return DxSearch;
  }()) || _class);
});;
define('text!go/dxSearch.html',[],function(){return "<template><style>.dialog-header-content{display:flex!important}.fax-number-input{display:inline-block;width:auto;border:none;height:auto;padding:0;width:100%}.no-left-border-radius{border-top-left-radius:0;border-bottom-left-radius:0}.no-right-border-radius{border-top-right-radius:0;border-bottom-right-radius:0}</style><ux-dialog ref=\"dxpop\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\">Diagnosis</h4><i class=\"fa fa-times fa-2x ml-auto mr-2\" style=\"cursor:pointer\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body style=\"height:75%\"><i if.bind=\"displaySpinner\" class=\"fa fa-spinner fa-pulse fa-3x fa-fw\" style=\"position:absolute\" css=\"left:${spinnerLeft}px; top:${spinnerTop}px;\"></i><div class=\"d-flex align-items-center mb-3\"><div class=\"btn-group\"><button type=\"button\" class=\"btn\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-plus fa-2x text-primary\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" repeat.for=\"bp of bodyparts\" click.delegate=\"addSearchFilter(bp)\">${bp}</a></div></div><div class=\"border-right-0 form-control no-right-border-radius d-flex align-items-center\"><template repeat.for=\"r of searchFilters\"><span click.delegate=\"removeSearchFilter($index)\" class=\"p-1 text-primary d-inline-block\" style=\"position:relative;margin-right:20px\">${r} <i class=\"fa fa-times float-right\" style=\"position:absolute;top:5px;right:-10px\" aria-hidden=\"true\"></i></span></template><input type=\"text\" class=\"form-control fax-number-input flex-fill\" placeholder=\"search code or description...\" value.bind=\"searchString\"></div><button class=\"btn btn-outline-secondary ml-auto no-left-border-radius\" type=\"button\" id=\"button-addon2\" click.delegate=\"searchClicked()\"><i class=\"fa fa-search\" aria-hidden=\"true\"></i></button></div><div id=\"selectedDiagnosis\" class=\"d-flex flex-wrap\"><span repeat.for=\"t of selectedDiagnosis\" click.delegate=\"removeDiagnosisClick(t)\" class=\"p-1 text-primary d-inline-block\"> ${t.code}&nbsp;${t.description}&nbsp;${t.side} <i class=\"fa fa-times float-right\" aria-hidden=\"true\"></i></span></div><div class=\"tableFixHeadLight\" css=\"height: ${searchResultsHeight}px;\"><table class=\"table table-sm table-striped\"><thead><tr><th scope=\"col\"></th><th scope=\"col\">Code</th><th scope=\"col\">Desc</th></tr></thead><tbody><template repeat.for=\"s of searchResults\"><tr class.bind=\"s.selected ? 'table-primary' : 'table-light'\"><td click.delegate=\"addClicked(s)\"><i class=\"fa fa-plus-square fa-2x text-primary\"></i></td><td>${s.code}</td><td>${s.description}</td></tr></template></tbody></table></div></ux-dialog-body><ux-dialog-footer><button click.delegate=\"close()\">OK</button></ux-dialog-footer></ux-dialog></template>";});;
define('go/examRowCustomAttribute',['exports', 'aurelia-framework'], function (exports, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ExamRowCustomAttribute = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _dec2, _class;

  var ExamRowCustomAttribute = exports.ExamRowCustomAttribute = (_dec = (0, _aureliaFramework.customAttribute)('examrow'), _dec2 = (0, _aureliaFramework.inject)(Element), _dec(_class = _dec2(_class = function () {
    function ExamRowCustomAttribute(element) {
      _classCallCheck(this, ExamRowCustomAttribute);

      this.element = element;
    }

    ExamRowCustomAttribute.prototype.bind = function bind(bindingContext, overridingContext) {
      bindingContext.element = this.element;
      bindingContext.auto_grow(this.element);
    };

    return ExamRowCustomAttribute;
  }()) || _class) || _class);
});;
define('go/fileFolder',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'lodash', 'moment', '../data/go/data', './home', './createVisitPopup', 'aurelia-dialog', './popupHelper', 'aurelia-event-aggregator', './globals'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _data, _home, _createVisitPopup, _aureliaDialog, _popupHelper, _aureliaEventAggregator, _globals) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FileFolder = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Image = function () {
    function Image(id, name, data) {
      _classCallCheck(this, Image);

      this.id = id;
      this.name = name;
      this.data = data;
      this.selected = false;
      this.path;
      this.displayDelete = false;
      this.icon = this.getIcon(name);
    }

    Image.prototype.getIcon = function getIcon(name) {
      var lName = name.toLowerCase();
      if (lName.indexOf('.pdf') > 0) {
        return 'fa-file-pdf-o';
      } else if (lName.indexOf('.doc') > 0 || lName.indexOf('.docx') > 0) {
        return 'fa-file-word-o';
      } else if (lName.indexOf('.txt') > 0) {
        return 'fa-file-text-o';
      } else if (lName.indexOf('.png') > 0 || lName.indexOf('.jpg') > 0 || lName.indexOf('.jpeg') > 0 || lName.indexOf('.bmp') > 0) {
        return 'fa-file-image-o';
      } else {
        return 'fa-file-o';
      }
    };

    return Image;
  }();

  var Folder = function () {
    function Folder(id, name, data) {
      _classCallCheck(this, Folder);

      this.id = id;
      this.name = name;
      this.data = data;
      this.folders = [];
      this.selected = false;
      this.images = [];
      this.hasParent = false;
      this.parent = null;
      this.index = -1;
      this.hasChildren = false;
    }

    Folder.prototype.select = function select() {
      this.selected = this.selected ? false : true;
    };

    return Folder;
  }();

  var FileFolder = exports.FileFolder = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home, _aureliaDialog.DialogService, _popupHelper.PopupHelper, _aureliaEventAggregator.EventAggregator, _globals.Globals), _dec(_class = (_class2 = function () {
    FileFolder.prototype.currentFolderChanged = function currentFolderChanged(newVal, oldVal) {
      if (newVal) {
        var n = newVal;
        if (newVal.folders.length > 0 || newVal.images.length > 0) {
          newVal.hasChildren = true;
        } else {
          newVal.hasChildren = false;
        }
      }
    };

    function FileFolder(helper, http, Data, Home, DialogService, PopupHelper, EventAggregator, Globals) {
      _classCallCheck(this, FileFolder);

      this.allFiles = [];
      this.folders = [];
      this.allFolders = [];
      this.zIndex = 1000;
      this.listHeight = 0;
      this.faxEnabled = false;

      _initDefineProp(this, 'currentFolder', _descriptor, this);

      this.folderCount = 0;

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
      this.dialogService = DialogService;
      this.popupHelper = PopupHelper;
      this.eventAggregator = EventAggregator;
      this.globals = Globals;
    }

    FileFolder.prototype.activate = function activate(model) {
      var self = this;

      self.faxEnabled = self.home.faxEnabled;

      self.popupHelper = model.home.popupHelper;

      self.patientId = model.patient.data.PatientID;
      self.userId = self.helper._user.UserID;

      self.data.getWithUrl('folders', function (f) {
        self.allFolders = f;

        self.loadPatientFileFolder(self.patientId);
      });

      self.eventAggregator.subscribe("loadPatientFileFolder", function (patientId) {

        self.loadPatientFileFolder(patientId);
      });

      self.eventAggregator.subscribe("inboundFaxClick", function (fax) {
        var url = 'images/move';
        var od_image = {
          ImageID: 0,
          PatientID: fax.data.Meta.PatientID,
          Date: fax.date,
          ImageType: "File",
          ImageName: fax.data.DisplayName,
          ImagePath: fax.data.FilePath,
          ImageLogicalFolder: self.currentFolder.data.LogicalPath,
          Folder_Id: self.currentFolder.data.Folder_Id
        };

        var saveDescription = 'Moving ' + od_image.ImageName + ' to ' + od_image.ImageLogicalFolder;
        var saveDialog = self.helper.createNoty(saveDescription, 3000);
        saveDialog.show();

        self.data.postWithUrlAndData(url, JSON.stringify(od_image), function (res) {

          if (res) {
            self.addImagesToFolder([res], self.currentFolder);
            self.eventAggregator.publish("inboundFaxClickComplete", fax);
          }

          saveDialog.close();
        });
      });
    };

    FileFolder.prototype.openFax = function openFax(image, event) {

      var self = this;

      event.stopPropagation();

      self.home.openFax(image.data.ImageName, image.data.ImageID, image.data.ImageType.toUpperCase());
    };

    FileFolder.prototype.loadPatientFileFolder = function loadPatientFileFolder(patientId) {
      var self = this;
      self.loadAllFiles(patientId, function () {
        self.loadFolders();
      });
    };

    FileFolder.prototype.attached = function attached() {
      var self = this;
      self.listHeight = window.innerHeight - 16;

      var imgPicker = document.getElementById('fileFolderPicker');
      imgPicker.onchange = function () {
        for (var i = 0; i < imgPicker.files.length; i++) {
          var imgFile = imgPicker.files[i];
          self.saveFileDrop(imgFile);
        }
      };
    };

    FileFolder.prototype.loadAllFiles = function loadAllFiles(patientId, callback) {
      var self = this;
      self.data.getWithUrl('images?patientId=' + patientId, function (imgs) {
        self.allFiles = imgs;
        callback();
      });
    };

    FileFolder.prototype.loadFolders = function loadFolders() {
      var self = this;

      self.currentFolder = null;

      var folderList = JSON.parse(JSON.stringify(self.allFolders));

      var imagingFolder = _.find(folderList, function (f) {
        return f.FolderName == 'Imaging';
      });
      self.rootFolder = new Folder(imagingFolder.Folder_Id, imagingFolder.FolderName, imagingFolder);

      _.remove(folderList, function (r) {
        r.Folder_Id == imagingFolder.Folder_Id;
      });

      self.currentFolder = self.rootFolder;

      self.loopFolder(self.currentFolder);

      self.currentFolder = self.rootFolder;

      self.listHeight = self.fileListDiv.clientHeight;
    };

    FileFolder.prototype.loopFolder = function loopFolder(folder) {
      var self = this;

      if (self.folderCount == self.allFolders.length) return;

      var childFolders = self.getListOfChildFolders(folder.id, self.allFolders);
      if (childFolders.length > 0) {

        if (folder.folders.length == 0 && !folder.complete) {
          self.createChildFoldersWithFolder(folder);
        }

        for (var i = 0; i < folder.folders.length; i++) {
          self.currentFolder = folder.folders[i];
          if (!self.currentFolder.complete) {
            self.loopFolder(self.currentFolder);
          }
        }
      } else {
        folder.complete = true;

        var nextChild = self.getNextChildFromParentWithIndex(folder.parent, folder.index);
        if (nextChild != null) {
          self.loopFolder(nextChild);
        } else {
          folder.parent.complete = true;

          if (folder.parent && folder.parent.parent) {
            self.currentFolder = folder.parent.parent;
            self.loopFolder(folder.parent.parent);
          }
        }
      }
    };

    FileFolder.prototype.createChildFoldersWithFolder = function createChildFoldersWithFolder(folder) {
      var self = this;
      var children = _.filter(self.allFolders, function (f) {
        return f.Parent_Id == folder.id;
      });
      for (var i = 0; i < children.length; i++) {
        var aChild = children[i];

        var childFolder = new Folder(aChild.Folder_Id, aChild.FolderName, aChild);
        childFolder.index = i;
        childFolder.parent = folder;
        childFolder.hasParent = true;

        var imgs = self.getChildImages(childFolder.id);
        self.addImagesToFolder(imgs, childFolder);

        folder.folders.push(childFolder);

        self.folderCount++;

        folder.complete = true;
      }
    };

    FileFolder.prototype.getNextChildFromParentWithIndex = function getNextChildFromParentWithIndex(parent, currentFolderIndex) {
      if (parent.folders.length > currentFolderIndex + 1) {
        return parent.folders[currentFolderIndex + 1];
      } else {
        return null;
      }
    };

    FileFolder.prototype.addFolderToFolder = function addFolderToFolder(folderToAdd, folderToAddTo) {
      folderToAddTo.folders.push(folderToAdd);
    };

    FileFolder.prototype.addImagesToFolder = function addImagesToFolder(images, folder) {
      for (var i = 0; i < images.length; i++) {
        var aImg = new Image(images[i].ImageID, images[i].ImageName, images[i]);

        folder.images.push(aImg);
      }
    };

    FileFolder.prototype.getChildImages = function getChildImages(folderId) {
      var self = this;
      return _.filter(self.allFiles, function (f) {
        return f.Folder_Id == folderId;
      });
    };

    FileFolder.prototype.getListOfChildFolders = function getListOfChildFolders(parentId, folders) {
      var self = this;
      return _.filter(folders, function (f) {
        return f.Parent_Id == parentId && f.UserID == 0;
      });
    };

    FileFolder.prototype.getFolder = function getFolder(folderId) {
      var self = this;
      return _.filter(self.allFolders, function (f) {
        return f.Folder_Id == folderId;
      });
    };

    FileFolder.prototype.doesFolderChildIndexExist = function doesFolderChildIndexExist(folder, index) {
      for (var i = 0; i < folder.folders.length; i++) {
        var child = folder.folders[i];
        if (child.index == index) {
          return true;
        }
      }
      return false;
    };

    FileFolder.prototype.backClick = function backClick() {
      var self = this;

      if (self.currentFolder.parent) {
        self.currentFolder = self.currentFolder.parent;
      }
    };

    FileFolder.prototype.folderClick = function folderClick(folder) {
      var self = this;

      self.currentFolder = folder;
      self.currentFolder.hasParent = folder.parent ? true : false;
    };

    FileFolder.prototype.imageClick = function imageClick(i) {
      this.openImage(i);
    };

    FileFolder.prototype.createImagePath = function createImagePath(image) {
      var physicalPath = image.data.ImagePath;
      var patientDocuemntIndex = physicalPath.indexOf('Documents');
      var docPathSplit = physicalPath.substring(patientDocuemntIndex, physicalPath.length).split('\\');
      var docPath = '';
      for (var i = 0; i < docPathSplit.length; i++) {
        docPath += docPathSplit[i] + '/';
      }
      return '' + docPath + image.data.ImageName;
    };

    FileFolder.prototype.openImage = function openImage(image) {

      var self = this;

      var physicalPath = image.data.ImagePath;

      var url = null;

      if (self.globals.selfHosted) {
        var isFullPath = image.data.ImagePath.indexOf(image.data.ImageName) > -1;
        if (isFullPath) {
          url = image.data.ImagePath;
        } else {
          url = image.data.ImagePath + '/' + image.data.ImageName;
        }
      } else {
        url = physicalPath + '/' + image.data.ImageName;
      }

      var windowHeight = '100%';
      var windowWidth = '100%';

      var options = {
        closeActiveDialog: false,
        width: windowWidth,
        height: windowHeight,
        top: 0,
        left: 0,
        title: "",
        popupHeight: '100%'
      };

      this.popupHelper.openUrlPathPop(url, options);
    };

    FileFolder.prototype.fileDropped = function fileDropped(event) {
      event.preventDefault();
      var dt = event.dataTransfer;
      if (dt) {
        var files = dt.files;
        for (var i = 0; i < files.length; i++) {
          this.saveFileDrop(files[i]);
        }
      }
    };

    FileFolder.prototype.dragOver = function dragOver(event) {
      event.preventDefault();
    };

    FileFolder.prototype.folderDragEnter = function folderDragEnter(event) {
      event.stopPropagation();
      if (event.target.nodeName == 'LI') {
        event.target.classList.add("file-dragenter");
      }

      return true;
    };

    FileFolder.prototype.folderDragLeave = function folderDragLeave(event) {
      event.stopPropagation();
      if (event.target.nodeName == 'LI') {
        event.target.classList.remove("file-dragenter");
      }
      return true;
    };

    FileFolder.prototype.saveFileDrop = function saveFileDrop(file) {
      var self = this;
      var fData = new FormData();
      fData.append("pic", file, file.name);
      fData.append("patientId", self.patientId);
      fData.append("logicalFolder", self.currentFolder.data.LogicalPath);
      fData.append("folderId", self.currentFolder.data.Folder_Id);


      var url = self.helper.getApiUrl('images');
      fetch(url, {
        method: "POST",
        body: fData,
        headers: {
          "Authorization-Token": self.helper.jwt()
        }
      }).then(function (response) {
        return response.text();
      }).then(function (imgTxt) {
        var img = JSON.parse(imgTxt);
        var aImg = new Image(img.ImageID, img.ImageName, img);
        self.currentFolder.images.push(aImg);
      });
    };

    FileFolder.prototype.blobToBase64 = function blobToBase64(blob, callback) {
      var reader = new FileReader();
      reader.readAsDataURL(blob);
      reader.onloadend = function () {
        var base64String = reader.result;

        base64String = base64String.substr(base64String.indexOf(',') + 1);
        callback(base64String);
      };
    };

    FileFolder.prototype.openFileBrowser = function openFileBrowser() {
      var self = this;
      self.myInput.click();
    };

    FileFolder.prototype.filesPicked = function filesPicked(event) {
      var e = event;
    };

    FileFolder.prototype.openCamera = function openCamera() {
      var self = this;
      this.popupHelper.openCameraPop(function (imgStr) {

        self.popupHelper.openGenericInputPop("Create New Image", ['Name'], null, false, function (res) {

          var imageName = res.inputs[0].value;

          var iData = imgStr.image;
          var folderID = self.currentFolder.id;

          var newImg = {
            'PatientID': self.patientId,
            'UserID': self.userId,
            'ImageName': imageName + ".jpeg",
            'ImageLogicalFolder': self.getLogicalFolderPath(folderID),
            'Folder_Id': folderID,
            'Base64String': iData,
            'ImageFormat': 'JPEG'
          };

          self.saveImage(newImg);
        });
      });
    };

    FileFolder.prototype.saveImage = function saveImage(ImageAndData) {
      var self = this;
      var saveDescription = 'Saving ' + ImageAndData.ImageName + '...';
      var saveDialog = self.helper.createNoty(saveDescription, 3000);
      saveDialog.show();

      self.data.postWithUrlAndData('images/camera', JSON.stringify(ImageAndData), function (res) {

        saveDialog.close();

        var newImg = new Image(res.ImageID, res.ImageName, res);
        self.currentFolder.images.push(newImg);
      });
    };

    FileFolder.prototype.newImage = function newImage() {
      var self = this;
      self.home.openCamera(function (img) {

        self.popupHelper.openGenericInputPop("Create New Image", ['Name'], null, false, function (res) {

          var imageName = res.inputs[0].value;

          img = img.replace('data:image/jpeg;base64,', '');

          var iData = img;
          var folderID = self.currentFolder.id;

          var newImg = {
            'PatientID': self.patientId,
            'UserID': self.userId,
            'ImageName': imageName,
            'ImageLogicalFolder': self.getLogicalFolderPath(folderID),
            'Folder_Id': folderID,
            'Base64String': iData
          };

          var saveDescription = 'Saving ' + imageName + '...';
          var saveDialog = self.helper.createNoty(saveDescription, 3000);
          saveDialog.show();

          self.data.postWithUrlAndData('images/camera', JSON.stringify(newImg), function (res) {

            saveDialog.close();

            var newImg = new Image(res.ImageID, res.ImageName, res);
            self.currentFolder.images.push(newImg);
          });
        });
      });
    };

    FileFolder.prototype.getLogicalFolderPath = function getLogicalFolderPath(folderId) {
      var self = this;
      var logicalPath = '';
      var current = _.find(self.allFolders, function (f) {
        return f.Folder_Id == folderId;
      });
      if (!current) {
        return null;
      }
      logicalPath = current.FolderName;
      while (current.Parent_Id != 0) {
        current = _.find(self.allFolders, function (f) {
          return f.Folder_Id == current.Parent_Id;
        });
        logicalPath = current.FolderName + "\\" + logicalPath;
      }
      return logicalPath;
    };

    FileFolder.prototype.newFolder = function newFolder() {
      var self = this;
      self.popupHelper.openGenericInputPop("Create New Folder", ['Name'], null, false, function (res) {
        var folderNmae = res.inputs[0].value;

        var aFolder = {
          'FolderName': folderNmae,
          'PatientID': 0,
          'Parent_Id': self.currentFolder.id,
          'IsFolderFixed': 0,
          'IsPatientFolder': 0,
          'UserID': 0
        };

        var saveDescription = 'Saving ' + folderNmae + '...';
        var saveDialog = self.helper.createNoty(saveDescription, 3000);
        saveDialog.show();
        self.data.postWithUrlAndData('folders', JSON.stringify(aFolder), function (res) {

          saveDialog.close();

          if (res == null) {} else {
            var newFolder = new Folder(res.Folder_Id, res.FolderName, res);
            newFolder.index = self.currentFolder.folders.length;
            newFolder.parent = self.currentFolder;
            newFolder.hasParent = true;

            self.currentFolder.folders.push(newFolder);
          }
        });
      });
    };

    FileFolder.prototype.renameFolder = function renameFolder() {
      var self = this;
      self.popupHelper.openGenericInputPop("Rename Folder", ['Name'], null, false, function (res) {
        var folderNmae = res.inputs[0].value;

        var aFolder = {
          'Folder_Id': self.currentFolder.data.Folder_Id,
          'FolderName': folderNmae,
          'PatientID': self.currentFolder.data.PatientID,
          'Parent_Id': self.currentFolder.data.Parent_Id,
          'IsFolderFixed': self.currentFolder.data.IsFolderFixed,
          'IsPatientFolder': self.currentFolder.data.IsPatientFolder,
          'UserID': self.currentFolder.data.UserID
        };

        var saveDescription = 'Renaming ' + folderNmae + '...';
        var saveDialog = self.helper.createNoty(saveDescription, 3000);
        saveDialog.show();
        self.data.putWithUrlAndData('folders', aFolder, function (res) {

          saveDialog.close();

          if (res == null) {} else {
            self.currentFolder.name = folderNmae;
          }
        });
      });
    };

    FileFolder.prototype.moveImage = function moveImage(image) {
      var self = this;

      var viewPath = './moveFolderView';

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var quarter = windowWidth / 4;
      var third = windowWidth / 3;

      var width = third * 2;
      var left = third / 2;

      var height = windowHeight - 100;
      var top = 50;

      var options = {
        displayHeader: false,
        bodyPadding: 0
      };

      this.popupHelper.openViewModelPop(viewPath, self, 'Move to new folder...', width, height, top, left, options, function (res) {

        if (res.cancelled == true) {
          image.displayDelete = false;
          return;
        }

        var targetFolder = res.folder;

        image.data.Folder_Id = targetFolder.data.Folder_Id;
        image.data.ImageLogicalFolder = targetFolder.data.FolderName;

        var saveDescription = 'Moving ' + image.name + ' to ' + targetFolder.data.name + '...';
        var saveDialog = self.helper.createNoty(saveDescription, 3000);
        saveDialog.show();
        self.data.putWithUrlAndData('images', image.data, function (res) {
          image.displayDelete = false;

          saveDialog.close();

          if (res == null) {} else {
            var images = self.currentFolder.images;

            for (var f = 0; f < images.length; f++) {
              var img = images[f];
              if (img.id == image.id) {
                images.splice(f, 1);

                targetFolder.images.push(image);
                break;
              }
            }
          }
        });
      });
    };

    FileFolder.prototype.deleteImage = function deleteImage(image) {
      var self = this;

      var msg = 'Do you wish to delete ' + image.name + '?';
      self.popupHelper.openGenericMessagePop(msg, 'Delete Image', ['YES', 'NO'], false, function (res) {
        var r = res.result;
        if (r == 'YES') {

          var saveDescription = 'Deleting ' + image.name + '...';
          var saveDialog = self.helper.createNoty(saveDescription, 3000);
          saveDialog.show();

          var url = 'images?id=' + image.id;
          self.data.deleteWithUrl(url, function (res) {

            saveDialog.close();

            if (!res) {} else {
              var images = self.currentFolder.images;

              for (var f = 0; f < images.length; f++) {
                var img = images[f];
                if (img.id == image.id) {
                  images.splice(f, 1);
                  break;
                }
              }
            }
          });
        }
      });
    };

    FileFolder.prototype.deleteFolder = function deleteFolder() {
      var self = this;

      if (self.currentFolder.hasChildren) {
        self.popupHelper.openGenericMessagePop('You cannot delete a folder with children.', 'Delete Failed', ['OK'], false, function (res) {
          return;
        });
      } else {

        var msg = 'Do you wish to delete ' + self.currentFolder.name + '?';
        self.popupHelper.openGenericMessagePop(msg, 'Delete Folder', ['YES', 'NO'], false, function (res) {
          var r = res.result;
          if (r == 'YES') {

            var saveDescription = 'Deleting ' + self.currentFolder.name + '...';
            var saveDialog = self.helper.createNoty(saveDescription, 3000);
            saveDialog.show();

            var url = 'folders?id=' + self.currentFolder.id;
            self.data.deleteWithUrl(url, function (res) {

              saveDialog.close();

              if (!res) {} else {
                var parent = self.currentFolder.parent;

                for (var f = 0; f < parent.folders.length; f++) {
                  var folder = parent.folders[f];
                  if (folder.id == self.currentFolder.id) {
                    parent.folders.splice(f, 1);

                    self.currentFolder = parent;
                    break;
                  }
                }
              }
            });
          }
        });
      }
    };

    FileFolder.prototype.rowSwipe = function rowSwipe(event, row) {
      if (event.direction === 'left') {
        if (!row.displayDelete) {
          row.displayDelete = true;
        }
      } else if (event.direction === 'right') {
        if (row.displayDelete) {
          row.displayDelete = false;
        }
      }
    };

    return FileFolder;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'currentFolder', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  })), _class2)) || _class);
});;
define('text!go/fileFolder.html',[],function(){return "<template><style>.file-dragenter{border:1px dashed grey!important}</style><div class=\"h-100 w-100\" css=\"z-index:${zIndex}\" style=\"background-color:#fff\"><div ref=\"fileListDiv\" class=\"row h-100\" dragover.trigger=\"dragOver($event)\" drop.trigger=\"fileDropped($event)\"><div class=\"col px-2 pb-2\" style=\"overflow-y:auto\" css=\"height: ${listHeight}px;\"><div with.bind=\"currentFolder\"><div class=\"d-flex align-items-center\"><div class=\"d-flex align-items-center\" click.delegate=\"backClick()\"><i if.bind=\"hasParent\" class=\"fa fa-angle-left fa-2x mr-2 text-primary\" aria-hidden=\"true\"></i> <i class=\"fa fa-folder text-warning fa-2x pr-1\" aria-hidden=\"true\"></i> <strong class=\"text-capitalize\">${name}</strong></div><div class=\"dropdown ml-auto\"><button class=\"btn\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-plus fa-2x\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" click.delegate=\"newFolder()\"><i class=\"fa fa-folder-o mr-2\" aria-hidden=\"true\"></i>New Folder</a> <a class=\"dropdown-item\" click.delegate=\"openCamera()\"><i class=\"fa fa-camera mr-2\" aria-hidden=\"true\"></i>Take Photo</a> <a class=\"dropdown-item\"><i class=\"fa fa-file-o mr-2\" aria-hidden=\"true\"></i> <label for=\"fileFolderPicker\">Add from file</label></a></div></div><div if.bind=\"currentFolder.index > -1\" class=\"dropdown\"><button class=\"btn\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-ellipsis-h fa-2x\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" click.delegate=\"renameFolder()\"><i class=\"fa fa-pencil-square-o mr-2\" aria-hidden=\"true\"></i>Rename</a> <a if.bind=\"!currentFolder.hasChildren\" class=\"dropdown-item\" click.delegate=\"deleteFolder()\"><i class=\"fa fa-trash-o mr-2\" aria-hidden=\"true\"></i>Delete</a></div></div></div><ul class=\"list-group list-group-flush\"><li repeat.for=\"f of folders\" class=\"list-group-item\" click.delegate=\"$this.folderClick(f)\"><div class=\"d-flex align-items-center\"><i class=\"fa fa-folder text-warning fa-2x pr-1\" aria-hidden=\"true\"></i><div class=\"text-capitalize\">${f.name}</div><span if.bind=\"f.images.length > 0\" class=\"mx-1 badge rounded-pill bg-danger text-light\"> ${f.images.length} </span><i if.bind=\"f.folders.length > 0 || f.images.length > 0\" class=\"fa fa-angle-right fa-2x ml-auto text-primary\" aria-hidden=\"true\"></i></div></li><template repeat.for=\"i of images\"><li if.bind=\"globals.isTouchDevice\" repeat.for=\"i of images\" class=\"list-group-item\" hammer-swipe.call=\"rowSwipe($event, i)\"><div class=\"d-flex align-items-center au-animate animate-swipe-row-left animate-swipe-row-right\"><span click.delegate=\"imageClick(i)\"><i class=\"fa ${i.icon} fa-2x pr-2\" aria-hidden=\"true\"></i><div class=\"text-capitalize text-truncate\" style=\"display:inline-block;max-width:250px\">${i.name}</div></span><i if.bind=\"faxEnabled\" class=\"fa fa-fax ml-auto text-muted\" aria-hidden=\"true\" click.delegate=\"openFax(i, $event)\"></i> <button if.bind=\"i.displayDelete\" type=\"button\" class=\"ml-auto btn btn-outline-danger mr-2\" click.delegate=\"deleteImage(i)\"><i class=\"fa fa-trash\"></i></button> <button if.bind=\"i.displayDelete\" type=\"button\" class=\"btn btn-outline-dark\" click.delegate=\"moveImage(i)\"><i class=\"fa fa-folder-o\"></i></button></div></li><li if.bind=\"!globals.isTouchDevice\" repeat.for=\"i of images\" class=\"list-group-item\"><div class=\"d-flex align-items-center\"><span click.delegate=\"imageClick(i)\"><i class=\"fa ${i.icon} fa-2x pr-2\" aria-hidden=\"true\"></i><div class=\"text-capitalize text-truncate\" style=\"display:inline-block;max-width:250px\">${i.name}</div></span><i if.bind=\"faxEnabled\" class=\"fa fa-fax ml-auto text-muted\" aria-hidden=\"true\" click.delegate=\"openFax(i, $event)\"></i> <button type=\"button\" class=\"ml-auto btn btn-outline-danger mr-2\" click.delegate=\"deleteImage(i)\"><i class=\"fa fa-trash\"></i></button> <button type=\"button\" class=\"btn btn-outline-dark\" click.delegate=\"moveImage(i)\"><i class=\"fa fa-folder-o\"></i></button></div></li></template></ul></div></div></div><input id=\"fileFolderPicker\" type=\"file\" multiple=\"multiple\" style=\"display:none\"></div></template>";});;
define('go/fileFolderRowCustomAttribute',['exports', 'aurelia-framework'], function (exports, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FileFolderRowCustomAttribute = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _dec2, _class;

  var FileFolderRowCustomAttribute = exports.FileFolderRowCustomAttribute = (_dec = (0, _aureliaFramework.customAttribute)('filefolderrow'), _dec2 = (0, _aureliaFramework.inject)(Element), _dec(_class = _dec2(_class = function () {
    function FileFolderRowCustomAttribute(element) {
      _classCallCheck(this, FileFolderRowCustomAttribute);

      this.last = false;
    }

    FileFolderRowCustomAttribute.prototype.bind = function bind(bindingContext, overridingContext) {
      if (overridingContext.$last == true) {
        this.last = true;
        this.parent = overridingContext.parentOverrideContext.parentOverrideContext.bindingContext;
      }
    };

    FileFolderRowCustomAttribute.prototype.attached = function attached() {
      if (this.last == true) {}
    };

    return FileFolderRowCustomAttribute;
  }()) || _class) || _class);
});;
define('go/genericPopups/genericInputPopup',['exports', 'aurelia-dialog', 'aurelia-framework', '../../helpers/http', '../../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.GenericInputPopup = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var GenericInputPopup = exports.GenericInputPopup = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
    function GenericInputPopup(DialogController, http, helper) {
      _classCallCheck(this, GenericInputPopup);

      this.popupTop = 0;
      this.popupLeft = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.message = "";
      this.header = "";
      this.inputValue = "";
      this.buttonText = "";
      this.inputs = [];

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
    }

    GenericInputPopup.prototype.activate = function activate(obj) {
      var self = this;
      self.popupWidth = obj.popupWidth / 3;
      self.popupHeight = obj.popupHeight / 4;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;

      self.buttonText = obj.buttonText;
      self.message = obj.message;
      for (var i = 0; i < obj.inputs.length; i++) {

        if (typeof obj.inputs[i] === 'string') {
          var inputObj = {
            description: obj.inputs[i],
            value: null,
            placeholder: "",
            inputType: "text"
          };
          self.inputs.push(inputObj);
        } else {
          var _inputObj = {
            value: null,
            inputType: "text"
          };
          var options = obj.inputs[i];
          if (options['name']) {
            _inputObj['description'] = options.name;
          }
          if (options['placeholder']) {
            _inputObj['placeholder'] = options.placeholder;
          }
          if (options['inputType']) {
            _inputObj['inputType'] = options.inputType;
          }
          if (options['value']) {
            _inputObj['value'] = options.value;
          }
          self.inputs.push(_inputObj);
        }
      }
    };

    GenericInputPopup.prototype.buttonClick = function buttonClick() {
      var self = this;
      self.dialogController.close(true, { inputs: self.inputs });
    };

    GenericInputPopup.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    GenericInputPopup.prototype.attached = function attached() {
      var self = this;
      var res = $(self.genInput).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");

      var overlays = $('ux-dialog-overlay');
      for (var i = 0; i < overlays.length; i++) {
        var over = overlays[i];
        over.style.setProperty("z-index", "5001", "important");
      }
    };

    return GenericInputPopup;
  }()) || _class);
});;
define('text!go/genericPopups/genericInputPopup.html',[],function(){return "<template><style>.dialog-header-content{display:flex!important}</style><ux-dialog ref=\"genInput\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\">${message}</h4><i class=\"fa fa-times fa-2x ml-auto mr-2\" style=\"cursor:pointer\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body><div class=\"row justify-content-center\"><div repeat.for=\"i of inputs\" class=\"col\"><small class=\"form-text text-muted\">${i.description}</small><input type.bind=\"i.inputType\" value.bind=\"i.value\" placeholder.bind=\"i.placeholder\" class=\"form-control\"></div></div></ux-dialog-body><ux-dialog-footer><button type=\"button\" class=\"btn btn-primary float-right\" click.delegate=\"buttonClick()\">${buttonText}</button></ux-dialog-footer></ux-dialog></template>";});;
define('go/genericPopups/genericMessagePopup',['exports', 'aurelia-dialog', 'aurelia-framework', '../../helpers/http', '../../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.GenericMessagePopup = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var GenericMessagePopup = exports.GenericMessagePopup = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
    function GenericMessagePopup(DialogController, http, helper) {
      _classCallCheck(this, GenericMessagePopup);

      this.popupTop = 0;
      this.popupLeft = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.message = "";
      this.header = "";
      this.buttonOptions = [];

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
    }

    GenericMessagePopup.prototype.activate = function activate(obj) {
      var self = this;
      self.popupWidth = obj.popupWidth / 3;
      self.popupHeight = obj.popupHeight / 4;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;
      self.contentHeight = self.popupHeight * 0.5;

      self.message = obj.message;
      self.header = obj.header;
      self.buttonOptions = obj.options.buttons;
      if (obj.options.hasOwnProperty('template')) {
        self.customTemplate = obj.options.template;
      }
      if (obj.options.hasOwnProperty('alertType')) {
        if (obj.options.alertType == 'warning') {
          self.styleClass = 'alert-warning';
        }
      }
    };

    GenericMessagePopup.prototype.attached = function attached() {
      var self = this;
      var res = $(self.messagepop).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");
    };

    GenericMessagePopup.prototype.buttonClick = function buttonClick(data) {
      var self = this;
      self.dialogController.close(true, { result: data });
    };

    GenericMessagePopup.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    return GenericMessagePopup;
  }()) || _class);
});;
define('text!go/genericPopups/genericMessagePopup.html',[],function(){return "<template><style>.dialog-header-content{display:flex!important}</style><ux-dialog ref=\"messagepop\" class.bind=\"styleClass\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\">${header}</h4><i class=\"fa fa-times fa-2x ml-auto mr-2\" style=\"cursor:pointer\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body><div class=\"row justify-content-center\"><div class=\"col-auto\"><h4 if.bind=\"!customTemplate\"><small class=\"text-muted\">${message}</small></h4><div if.bind=\"customTemplate\" innerhtml.bind=\"customTemplate\"></div></div></div><div class=\"container\"><div class=\"row justify-content-center\"><div class=\"col-auto align-self-center\"><button repeat.for=\"o of buttonOptions\" type=\"button\" class=\"btn btn-outline-primary mr-2\" click.delegate=\"buttonClick(o)\">${o}</button></div></div></div></ux-dialog-body></ux-dialog></template>";});;
define('go/genericPopups/genericMultiTabPickerPopup',['exports', 'aurelia-dialog', 'aurelia-framework', '../../helpers/http', '../../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.GenericMultiTabPickerPopup = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var GenericMultiTabPickerPopup = exports.GenericMultiTabPickerPopup = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
    function GenericMultiTabPickerPopup(DialogController, http, helper) {
      _classCallCheck(this, GenericMultiTabPickerPopup);

      this.popupTop = 0;
      this.popupLeft = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.items = [];

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
    }

    GenericMultiTabPickerPopup.prototype.activate = function activate(obj) {
      var self = this;
      self.popupWidth = obj.popupWidth / 4;
      self.popupHeight = obj.popupHeight / 4;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;

      self.header = obj.header;
      self.description = obj.description;

      self.items = obj.items;
    };

    GenericMultiTabPickerPopup.prototype.attached = function attached() {
      var self = this;

      self.deselectItems();

      var res = $(self.genmultipicklist).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");

      var overlays = $('ux-dialog-overlay');
      for (var i = 0; i < overlays.length; i++) {
        var over = overlays[i];
        over.style.setProperty("z-index", "5001", "important");
      }
    };

    GenericMultiTabPickerPopup.prototype.itemClick = function itemClick(i) {
      var self = this;
      i.selected = i.selected ? false : true;
    };

    GenericMultiTabPickerPopup.prototype.deselectItems = function deselectItems() {
      var self = this;
      for (var i = 0; i < self.items.length; i++) {
        self.items[i].selected = false;
      }
    };

    GenericMultiTabPickerPopup.prototype.getSelectedItems = function getSelectedItems() {
      var self = this;
      var selected = [];
      for (var i = 0; i < self.items.length; i++) {
        if (self.items[i].selected) {
          selected.push(self.items[i]);
        }
      }
      return selected;
    };

    GenericMultiTabPickerPopup.prototype.ok = function ok() {
      var self = this;

      var selectedItems = self.getSelectedItems();

      self.dialogController.close(true, { items: selectedItems });
    };

    GenericMultiTabPickerPopup.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    return GenericMultiTabPickerPopup;
  }()) || _class);
});;
define('text!go/genericPopups/genericMultiTabPickerPopup.html',[],function(){return "<template><style>.dialog-header-content{display:flex!important}</style><ux-dialog ref=\"genmultipicklist\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\">${header}</h4><i class=\"fa fa-times fa-2x ml-auto mr-2\" style=\"cursor:pointer\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body><form><div class=\"form-row\"><div class=\"form-group col-md-12\"><button repeat.for=\"t of items\" click.delegate=\"itemClick(t)\" type=\"button\" class=\"btn ${t.selected ? 'btn-primary' : 'btn-outline-primary'} m-2\">${t.description}</button></div></div></form></ux-dialog-body><ux-dialog-footer><button type=\"button\" class=\"btn btn-primary float-right\" click.delegate=\"ok()\">OK</button></ux-dialog-footer></ux-dialog></template>";});;
define('go/genericPopups/genericPicklistPopup',['exports', 'aurelia-dialog', 'aurelia-framework', '../../helpers/http', '../../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.GenericPicklistPopup = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var GenericPicklistPopup = exports.GenericPicklistPopup = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
    function GenericPicklistPopup(DialogController, http, helper) {
      _classCallCheck(this, GenericPicklistPopup);

      this.popupTop = 0;
      this.popupLeft = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.items = [];

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
    }

    GenericPicklistPopup.prototype.activate = function activate(obj) {
      var self = this;
      self.popupWidth = obj.popupWidth / 4;
      self.popupHeight = obj.popupHeight / 4;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;

      self.header = obj.header;
      self.description = obj.description;

      self.items = obj.items;
    };

    GenericPicklistPopup.prototype.attached = function attached() {
      var self = this;
      var res = $(self.genpicklist).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");
    };

    GenericPicklistPopup.prototype.ok = function ok() {
      var self = this;
      self.dialogController.close(true, { item: self.selectedItem });
    };

    GenericPicklistPopup.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    return GenericPicklistPopup;
  }()) || _class);
});;
define('text!go/genericPopups/genericPicklistPopup.html',[],function(){return "<template><style>.dialog-header-content{display:flex!important}</style><ux-dialog ref=\"genpicklist\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\">${header}</h4><i class=\"fa fa-times fa-2x ml-auto mr-2\" style=\"cursor:pointer\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body><div class=\"row\"><div class=\"col-md-12\"> ${description} <select value.bind=\"selectedItem\" class=\"form-control\" id=\"exampleFormControlSelect1\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"p of items\" model.bind=\"p\">${p.description}</option></select></div></div></ux-dialog-body><ux-dialog-footer><button click.delegate=\"ok()\">OK</button></ux-dialog-footer></ux-dialog></template>";});;
define('go/genericPopups/genericTablePopup',['exports', 'aurelia-dialog', 'aurelia-framework', '../../helpers/http', '../../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.GenericTablePopup = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var GenericTablePopup = exports.GenericTablePopup = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
    function GenericTablePopup(DialogController, http, helper) {
      _classCallCheck(this, GenericTablePopup);

      this.popupTop = 0;
      this.popupLeft = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.zIndex = 1000;
      this.rows = [];
      this.columnHeaders = [];

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
    }

    GenericTablePopup.prototype.activate = function activate(obj) {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.popupWidth = windowWidth / 2;
      self.popupHeight = windowHeight / 2;
      self.popupTop = windowHeight / 4;
      self.popupLeft = windowWidth / 4;

      if (obj.options) {
        if (obj.options.hasOwnProperty('width')) {
          self.popupWidth = obj.options.width;
        }
        if (obj.options.hasOwnProperty('height')) {
          self.popupHeight = obj.options.height;
        }
        if (obj.options.hasOwnProperty('top')) {
          self.popupTop = obj.options.top;
        }
        if (obj.options.hasOwnProperty('left')) {
          self.popupLeft = obj.options.left;
        }
        if (obj.options.hasOwnProperty('zIndex')) {
          self.zIndex = obj.options.zIndex;
        }
      }

      self.header = obj.header;
      self.rows = obj.rows;
      self.columnHeaders = obj.columnHeaders;
    };

    GenericTablePopup.prototype.attached = function attached() {
      this.scrollHeight = this.popupHeight - (this.dxheader.clientHeight + this.footer.clientHeight);

      var res = $(this.genTablePop).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");
    };

    GenericTablePopup.prototype.rowClick = function rowClick(r) {
      var self = this;
      self.selectedRow = r;
      for (var i = 0; i < self.rows.length; i++) {
        if (self.rows[i].id == r.id) {
          self.rows[i].selected = true;
        } else {
          self.rows[i].selected = false;
        }
      }
    };

    GenericTablePopup.prototype.ok = function ok() {
      var self = this;
      self.dialogController.close(true, { row: self.selectedRow });
    };

    GenericTablePopup.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    return GenericTablePopup;
  }()) || _class);
});;
define('text!go/genericPopups/genericTablePopup.html',[],function(){return "<template><style>.dialog-header-content{display:flex!important}</style><ux-dialog ref=\"genTablePop\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px; z-index: ${zIndex} !important;\"><ux-dialog-header ref=\"dxheader\"><h4 style=\"display:inline-block;margin-bottom:0\">${header}</h4><i class=\"fa fa-times fa-2x ml-auto mr-2\" style=\"cursor:pointer\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body style=\"height:75%\" class=\"p-0\"><div class=\"row\"><div class=\"col-md-12\"><div class=\"tableFixHeadLight\" css=\"height: ${scrollHeight}px;\" style=\"overflow-y:scroll;overflow-x:hidden\"><table class=\"table\"><thead style=\"font-size:small;color:grey\"><tr><th repeat.for=\"h of columnHeaders\" scope=\"col\">${h}</th></tr></thead><tbody><template repeat.for=\"r of rows\"><tr click.delegate=\"rowClick(r)\" class.bind=\"r.selected ? 'table-primary' : 'table-light'\"><td repeat.for=\"c of r.cells\">${c}</td></tr></template></tbody></table></div></div></div></ux-dialog-body><ux-dialog-footer ref=\"footer\"><button click.delegate=\"ok()\">OK</button></ux-dialog-footer></ux-dialog></template>";});;
define('go/globals',['exports', 'packery', 'moment', '../helpers/helper'], function (exports, _packery, _moment, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Globals = undefined;

  var _packery2 = _interopRequireDefault(_packery);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Globals = exports.Globals = function () {
    Globals.prototype.getFileNameWithPath = function getFileNameWithPath(filepath) {
      var indexOf = this.selfHosted ? "\\" : "/";
      var slashIndex = filepath.lastIndexOf(indexOf) + 1;
      var docName = filepath.slice(slashIndex, filepath.length);
      return decodeURI(docName);
    };

    Globals.prototype.add_patient_alert = function add_patient_alert(patientId) {
      var pat = window.localStorage.getItem(patientId);
      if (!pat) {
        window.localStorage.setItem(patientId, "alert");
      }
    };

    Globals.prototype.check_patient_alert = function check_patient_alert(patientId) {
      return window.localStorage.getItem(patientId);
    };

    Globals.prototype.clear_patient_alerts = function clear_patient_alerts() {
      window.localStorage.clear();
    };

    Globals.prototype.checkConversationResultIsSender = function checkConversationResultIsSender(conversationResult, userId) {
      var isSender = false;
      if (conversationResult.User != null) {
        isSender = conversationResult.User.UserID == userId ? true : false;
      } else {
        isSender = false;
      }
      return isSender;
    };

    Globals.prototype.determineGender = function determineGender(macro, patient) {
      var txtGender = "";

      switch (macro) {
        case "[he/she]":
          if (patient.data.Sex == "M") txtGender = "He";else txtGender = "She";
          break;
        case "[his/her]":
          if (patient.data.Sex == "M") txtGender = "His";else txtGender = "Her";
          break;
        case "[him/her]":
          if (patient.data.Sex == "M") txtGender = "Him";else txtGender = "Her";
          break;
      }

      return txtGender;
    };

    Globals.prototype.replaceMacros = function replaceMacros(txt, pat, provider, bodySide) {
      var self = this;

      if (txt == null) return "";

      var genderList = [];
      var heShe = "[he/she]";
      var hisHer = "[his/her]";
      var himHer = "[him/her]";
      var patient = "[patient]";
      var side = "[side]";
      var postOpDays = "[PostOpDays]";
      var age = "[AGE]";
      var gender = "[Gender]";
      var currentProvider = "[Current Provider]";
      var handDom = "[Hand Dominance]";
      genderList.push(himHer);
      genderList.push(heShe);
      genderList.push(hisHer);
      var txtGender = "";
      var results = txt;
      var tempVal = "";
      var genderLoc;

      results = results.replace(currentProvider, provider.ProviderEntity);

      if (results.indexOf(age) > -1 && pat.data.DOB != undefined && pat.data.DOB != null) {
        var today = (0, _moment2.default)();
        var patDob = (0, _moment2.default)(pat.data.DOB, "MM/DD/YYYY");
        var diff = _moment2.default.duration(today.diff(patDob));
        var years = diff.years();
        var patientAge = years;

        results = results.replace(age, patientAge);
      }

      results = results.replace(gender, pat.data.Sex.toUpperCase() == "M" ? "male" : "female");

      for (var i = 0; i < txt.length; i++) {
        for (var g = 0; g < genderList.length; g++) {
          var s = genderList[g];

          genderLoc = results.indexOf(s);
          if (genderLoc > -1) {
            if (genderLoc == 0) {
                results = results.slice(s.length, results.length - s.length);
                txtGender = self.determineGender(s, pat);
                results = txtGender + results;
              } else {
                var sIndex = genderLoc - 2;
                var eIndex = sIndex + 1;
                tempVal = results.substring(sIndex, eIndex);
                txtGender = self.determineGender(s, pat);

                if (tempVal != ".") {
                  txtGender = txtGender.toLowerCase();
                }

                results = results.replace(s, "");
                results = results.slice(0, genderLoc) + txtGender + results.slice(genderLoc);
              }
          }
        }
      }

      results = results.replace(patient, pat.data.NameFirst + " " + pat.data.NameLast);

      var regex = new RegExp(RegExp.quote(side), 'g');
      results = results.replace(regex, bodySide.toLowerCase());

      return results;
    };

    function Globals() {
      _classCallCheck(this, Globals);

      this.packery = null;
      this.fullSizeSchedule = false;
      this.admin = null;
      this.mobileView = false;
      this.isTouchDevice = false;
      this.selfHosted = true;
      this.alertManager = [];


      RegExp.quote = function (str) {
        return str.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
      };

      _packery2.default.prototype.getShiftPositions = function (attrName) {
        attrName = attrName || 'id';
        var _this = this;
        return this.items.map(function (item) {
          return {
            attr: item.element.getAttribute(attrName),
            x: item.rect.x / _this.packer.width
          };
        });
      };

      _packery2.default.prototype.initShiftLayout = function (positions, attr) {
        if (!positions) {
          this.layout();
          return;
        }

        if (typeof positions == 'string') {
          try {
            positions = JSON.parse(positions);
          } catch (error) {
            console.error('JSON parse error: ' + error);
            this.layout();
            return;
          }
        }

        attr = attr || 'id';
        this._resetLayout();

        this.items = positions.map(function (itemPosition) {
          var selector = '[' + attr + '="' + itemPosition.attr + '"]';
          var itemElem = this.element.querySelector(selector);
          var item = this.getItem(itemElem);
          item.rect.x = itemPosition.x * this.packer.width;

          return item;
        }, this);
        this.shiftLayout();
      };
    }

    return Globals;
  }();
});;
define('go/home',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', '../data/go/data', 'lodash', 'moment', 'aurelia-dialog', 'aurelia-router', 'packery', 'draggabilly', './globals', './popupHelper', './documentPopup', './task/task', './ptPopup', '../access', './patientSearch', './task/taskHelper', 'aurelia-event-aggregator', 'driver.js', 'driver.js/dist/driver.min.css'], function (exports, _helper, _http, _aureliaFramework, _data, _lodash, _moment, _aureliaDialog, _aureliaRouter, _packery, _draggabilly, _globals, _popupHelper, _documentPopup, _task, _ptPopup, _access, _patientSearch, _taskHelper, _aureliaEventAggregator, _driver) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Home = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  var _packery2 = _interopRequireDefault(_packery);

  var _draggabilly2 = _interopRequireDefault(_draggabilly);

  var _driver2 = _interopRequireDefault(_driver);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _dec2, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var SaveQueue = function () {
    function SaveQueue(helper) {
      _classCallCheck(this, SaveQueue);

      this.items = [];
      this.dialog = null;
      this.isSaving = false;
      this.visible = false;
      this.helper = helper;
      this.saveCounter = 0;
      this.timer = null;
      this.timeout = 3000;
    }

    SaveQueue.prototype.addItem = function addItem(item) {
      var add = true;
      for (var i = 0; i < this.items.length; i++) {
        if (this.items[i].block.blockType == item.block.blockType) {
          add = false;
          break;
        }
      }
      if (add) {
        this.items.push(item);
        this.save();
      }
    };

    SaveQueue.prototype.clear = function clear() {
      this.items = [];
      this.isSaving = false;
      this.saveCounter = 0;
      this.dialog = null;
      this.visible = false;
      this.timer = null;
    };

    SaveQueue.prototype.updateText = function updateText(value) {
      this.dialog.setText(value);
    };

    SaveQueue.prototype.timerComplete = function timerComplete() {
      clearTimeout(this.timer);
      this.timer = null;
      if (this.saveCounter == 0) {
        this.dialog.close();
        this.clear();
      }
    };

    SaveQueue.prototype.save = function save() {
      var self = this;

      self.saveCounter = self.saveCounter + 1;

      self.isSaving = true;

      if (self.dialog == null) {
        self.timer = setTimeout(self.timerComplete.bind(self), self.timeout);
        self.dialog = self.helper.createNoty("Saving...", self.timeout);
        self.dialog.show();
      }

      var itm = self.items.shift();
      self.updateText("Saving " + itm.constructor.name + "...");

      itm.save(function (res) {
        self.saveCounter = self.saveCounter - 1;
        self.saveCounter = self.saveCounter < 0 ? 0 : self.saveCounter;
        console.log("Saved " + itm.constructor.name);

        if (self.saveCounter == 0 && self.timer == null) {
          if (self.dialog != null) {
            self.dialog.close();
          }
          self.clear();
        }
      });
    };

    return SaveQueue;
  }();

  var Home = exports.Home = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _aureliaDialog.DialogService, _aureliaRouter.Router, _data.Data, _globals.Globals, _access.Access, _popupHelper.PopupHelper, _taskHelper.TaskHelper, _aureliaEventAggregator.EventAggregator), _dec2 = (0, _aureliaFramework.computedFrom)('goForms'), _dec(_class = (_class2 = function () {
    Home.prototype.currentProviderChanged = function currentProviderChanged(newVal, oldVal) {
      if (newVal == undefined || newVal == null) {
        this.setSidebarItemDisabledWithTitle(true, 'Workflow');
      } else {
        this.setSidebarItemDisabledWithTitle(false, 'Workflow');
      }
    };

    Home.prototype.demographicsVisibleChanged = function demographicsVisibleChanged(newVal, oldVal) {
      if (!newVal && oldVal) {
        this.event.publish("demographicsClosed");
      }
    };

    _createClass(Home, [{
      key: 'examGoForms',
      get: function get() {
        console.log("EXAMGOFORMS!");
        return _.filter(this.goForms, function (f) {
          return f.DisplayInExamDropdown;
        });
      }
    }]);

    function Home(helper, http, DialogService, Router, Data, Globals, Access, PopupHelper, TaskHelper, EventAggregator) {
      _classCallCheck(this, Home);

      this.admin = null;
      this.sizeList = [1, 2, 3, 4];
      this.editing = false;
      this.currentBoard = null;
      this.userBoards = [];
      this.pickerList = ['schedule', 'patientHx', 'board', 'visit', 'documents', 'task', 'pt', 'demographics', 'workflow'];
      this.boardPickerModel = null;
      this.providers = [];
      this.allProviders = [];

      _initDefineProp(this, 'currentProvider', _descriptor, this);

      this.schedule = [];
      this.webdocs = {
        "default": [],
        "provider": []
      };
      this.scheduleVisible = false;
      this.boardPickerVisible = false;
      this.visitPickerVisible = false;
      this.docPickerVisible = false;
      this.adminVisible = false;
      this.workflowVisible = false;
      this.patient = null;
      this.patientVisits = [];
      this.currentVisit = null;
      this.locationId = 0;
      this.documentCount = 0;
      this.ptDialog = null;
      this.saveQueue = null;
      this.messageTimer = null;
      this.idleCounter = 0;
      this.idleMinutes = 59;

      _initDefineProp(this, 'demographicsVisible', _descriptor2, this);

      this.demographicsMenu = null;
      this.demographicsNeedsSave = false;
      this.demographicsDisabled = false;
      this.appendOverwriteResults = null;
      this.showAdminButton = false;
      this.moreIconsVisible = false;
      this.daysheetParams = null;

      _initDefineProp(this, 'displayDaysheet', _descriptor3, this);

      this.externalapps = [];
      this.erxEnabled = false;
      this.faxEnabled = false;
      this.displayDocumentSpinner = false;
      this.goForms = [];
      this.showDocumentTray = true;
      this.mobileView = false;
      this.sidebarItems = [];
      this.sidebarMoreItems = [];
      this.is_visit_today = false;
      this.showPatientAlertIcon = false;

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.dialogService = DialogService;
      this.router = Router;
      this.globals = Globals;
      this.access = Access;
      this.popupHelper = PopupHelper;
      this.taskHelper = TaskHelper;
      this.event = EventAggregator;

      this.setupChatbotEventListeners();
    }

    Home.prototype.setupChatbotEventListeners = function setupChatbotEventListeners() {
      var self = this;

      this.event.subscribe('open-patient-static', function (data) {
        console.log('Opening patient statically:', data.patientName, data.patientId);

        self.loadPatientWithMostRecentVisit(data.patientId);

        setTimeout(function () {
          self.event.publish('message-sent', {
            message: 'Successfully opened ' + data.patientName + '\'s patient record with the most recent visit.',
            type: 'assistant'
          });
        }, 1500);
      });

      this.event.subscribe('office-visits-requested', function (data) {
        console.log('Handling chatbot office visits request for:', data.patientName);
      });
    };

    Home.prototype.trySelectLoggedInUser = function trySelectLoggedInUser() {
      var self = this;

      var userId = self.helper._user.UserID;
      var aProvider = _.find(self.providers, function (p) {
        return p.UserID == userId;
      });
      if (aProvider != undefined) {
        self.currentProvider = aProvider;
      }
    };

    Home.prototype.addNewBlockComponentToBoard = function addNewBlockComponentToBoard(blockType, optional) {
      var self = this;

      var exists = self.currentBoard.getBlockWithType(blockType);
      if (exists && exists.blockType != "goForm") {
        return;
      }

      var tLoadData = true;
      var tLeftToRightSort = true;
      var tDataObject = null;
      var tObjectId = 0;
      if (optional) {
        tLoadData = optional.hasOwnProperty('loadData') ? optional.loadData : true;
        tLeftToRightSort = optional.hasOwnProperty('leftToRightSort') ? optional.leftToRightSort : true;
        tDataObject = optional.hasOwnProperty('dataObject') ? optional.dataObject : null;
        tObjectId = optional.hasOwnProperty('objectId') ? optional.objectId : 0;
      }

      var options = {
        editing: false,

        widthMult: "2",
        heightMult: "2",
        loadData: tLoadData,
        leftToRightSort: tLeftToRightSort,
        openPopup: blockType == 'jointInjection' ? true : false,
        dataObject: tDataObject,
        objectId: tObjectId
      };

      var newBlock = self.currentBoard.addBlock(blockType, options);

      self.currentBoard.addPosition(newBlock.id, newBlock.x);
      self.data.saveVisitBoard(self.currentBoard);
    };

    Home.prototype.openDocumentEditor = function openDocumentEditor() {
      var self = this;
      self.popupHelper.openDocPop(undefined, true);
    };

    Home.prototype.isMobile = function isMobile() {
      return window.orientation ? true : false;
    };

    Home.prototype.canTouchEvent = function canTouchEvent() {
      try {
        document.addEventListener("touchstart", function () {});
        document.removeEventListener("touchstart", function () {});
        return true;
      } catch (e) {
        return false;
      }
    };

    Home.prototype.isTouchDevice = function isTouchDevice() {
      return 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msTouchPoints > 0;
    };

    Home.prototype.openPtForPatient = function openPtForPatient() {
      var self = this;

      if (self.displayDaysheet) {
        return;
      }

      var vi = self.currentBoard.visitInfo;
      self.daysheetParams = {
        patientid: vi.patientId,
        providerid: vi.providerId,
        bodypart: vi.selectedBodypart.part,
        userid: self.currentBoard.userId,
        visitdate: vi.date,
        type: vi.typeForSave,
        displayCloseButton: true,
        parent: self,
        displayPreferences: false,
        editMode: false
      };
      self.displayDaysheet = true;

      self.event.publish('filterPreferencesWithProviderAndType', { providerId: vi.providerId, type: vi.typeForSave });
    };

    Home.prototype.displayDaysheetChanged = function displayDaysheetChanged(newVal, oldVal) {
      var self = this;
      if (newVal != true) {
        self.event.publish('savedaysheet');

        var daysheetType = self.currentBoard.visitInfo.typeForSave;

        self.event.publish('filterPreferencesWithProviderAndType', { providerId: self.currentProvider.ProviderID, type: daysheetType });
      }
    };

    Home.prototype.updatePatientVisitBoardIdWithVisitCode = function updatePatientVisitBoardIdWithVisitCode(visitCode, boardId) {
      for (var i = 0; i < this.patientVisits.length; i++) {
        if (this.patientVisits[i].ObjectID == visitCode) {
          this.patientVisits[i].BoardId = boardId;
          break;
        }
      }
    };

    Home.prototype.getPatientName = function getPatientName(patientId, callback) {
      var self = this;


      if (patientId) {
        self.data.getWithUrl('patients/' + patientId, function (res) {
          callback(self._parsePatientName(res));
        });
      } else if (self.patient && self.patient.data) {
        callback(self._parsePatientName(self.patient.data));
      } else {
        callback("NO PATIENT");
      }
    };

    Home.prototype._parsePatientName = function _parsePatientName(patient) {
      if (patient.hasOwnProperty('NameLast')) {
        return patient.NameLast + ", " + patient.NameFirst;
      } else {
        return "";
      }
    };

    Home.prototype.setLocationId = function setLocationId(id) {
      this.locationId = id;
    };

    Home.prototype.activate = function activate(params) {
      var self = this;
      var myContainerWidth = $('#mycontainer').width();
      var myContainerHeight = $('#mycontainer').height();
      this.colWidth = 1 / 12 * myContainerWidth * 3;
      this.rowHeight = 1 / 12 * myContainerHeight * 3;
    };

    Home.prototype.toggleDemographics = function toggleDemographics() {
      if (this.demographicsVisible) {
        this.hideDemographics();
      } else {
        this.showDemographics();
      }
    };

    Home.prototype.showDemographics = function showDemographics(hidePickers) {

      if (this.patient.data.PatientID.length == 0) return;

      if (hidePickers == undefined) {
        this.closeAllOtherVisiblePickers('demographics');
      }
      this.demographicsVisible = true;
    };

    Home.prototype.hideDemographics = function hideDemographics() {
      this.demographicsVisible = false;
    };

    Home.prototype.drfirstDropdownClicked = function drfirstDropdownClicked() {
      this.closeAllOtherVisiblePickers('drfirst');
    };

    Home.prototype.closeAllOtherVisiblePickers = function closeAllOtherVisiblePickers(notThisPicker) {
      for (var i = 0; i < this.pickerList.length; i++) {
        var pickerDescription = this.pickerList[i];
        if (pickerDescription != notThisPicker) {
          if (pickerDescription == 'schedule') {
            this.scheduleVisible = false;
          }
          if (pickerDescription == 'patientHx') {}
          if (pickerDescription == 'board') {
            this.boardPickerVisible = false;
          }
          if (pickerDescription == 'visit') {
            this.visitPickerVisible = false;
          }
          if (pickerDescription == 'documents') {
            this.docPickerVisible = false;
          }
          if (pickerDescription == 'demographics') {
            this.demographicsVisible = false;
          }
          if (pickerDescription == 'admin') {
            this.adminVisible = false;
          }
          if (pickerDescription == 'workflow') {
            this.workflowVisible = false;
          }
        }
      }
    };

    Home.prototype.toggleMoreIcons = function toggleMoreIcons() {
      this.moreIconsVisible = this.moreIconsVisible ? false : true;
    };

    Home.prototype.togglePicker = function togglePicker(picker) {

      if (this.moreIconsVisible) {
        this.moreIconsVisible = false;
      }

      this.closeAllOtherVisiblePickers(picker);

      if (picker == 'schedule') {
        this.popupHelper.closeActiveDialog();
        this.toggleSchedulePicker();
      } else if (picker == 'patientHx') {} else if (picker == 'board') {
        this.popupHelper.closeActiveDialog();
        this.toggleBoardPicker();
      } else if (picker == 'visit') {
        this.popupHelper.closeActiveDialog();
        this.toggleVisitPicker();
      } else if (picker == 'documents') {
        this.popupHelper.closeActiveDialog();
        this.toggleDocumentPicker();
      } else if (picker == 'charges') {
        this.openCharges();
      } else if (picker == 'task') {
        this.displayTaskForm();
      } else if (picker == 'patient') {
        this.displayPatientSearch();
      } else if (picker == 'admin') {
        this.popupHelper.closeActiveDialog();
        this.displayAdmin();
      } else if (picker == 'workflow') {
        this.popupHelper.closeActiveDialog();
        this.toggleWorkflow();
      } else if (picker == 'kiosk') {
        this.displayKioskDashboard();
      } else if (picker == 'returnto') {
        this.openReturnTo();
      } else if (picker == 'ptOrder') {
        this.openPtOrder('./ptOrder');
      } else if (picker == 'camera') {
        this.openCamera();
      } else if (picker == 'phone') {
        this.openPhonecall();
      } else if (picker == 'inboundfax') {
        this.openInboundFax('fax');
      } else if (picker == 'scan') {
        this.openInboundFax('scan');
      } else if (picker == 'surgerySchedule') {
        this.openPtOrder('./surgerySchedule');
      }
    };

    Home.prototype.toggleAdmin = function toggleAdmin() {
      this.adminVisible = this.adminVisible ? false : true;
    };

    Home.prototype.toggleWorkflow = function toggleWorkflow() {
      this.workflowVisible = this.workflowVisible ? false : true;
    };

    Home.prototype.toggleVisitPicker = function toggleVisitPicker() {
      this.visitPickerVisible = this.visitPickerVisible ? false : true;
    };

    Home.prototype.toggleSchedulePicker = function toggleSchedulePicker() {
      this.scheduleVisible = this.scheduleVisible ? false : true;
    };

    Home.prototype.toggleBoardPicker = function toggleBoardPicker() {
      this.boardPickerVisible = this.boardPickerVisible ? false : true;
    };

    Home.prototype.toggleDocumentPicker = function toggleDocumentPicker() {
      this.docPickerVisible = this.docPickerVisible ? false : true;
    };

    Home.prototype.doctrayClick = function doctrayClick() {
      this.showDocumentTray = this.showDocumentTray ? false : true;
    };

    Home.prototype.toggleBoardLayout = function toggleBoardLayout(e) {
      var self = this;
      e.stopPropagation();
      var layout = self.currentBoard.blockLayout ? 'list' : 'block';
      self.currentBoard.toggleLayout(layout);
      self.event.publish('resetBlockSize');
    };

    Home.prototype.testDrFirstReports = function testDrFirstReports(erxUserId) {
      var self = this;
      var url = 'drfirst/notificationcount?erxUserId=' + erxUserId;

      self.http.get(self.helper.getApiUrl(url), function (res) {
        var data = res;
      });
    };

    Home.prototype.getProviderForms = function getProviderForms(providerId) {
      var self = this;

      self.goForms = [];

      var url = 'goforms/provider?providerId=' + providerId;
      self.data.getWithUrl(url, function (res) {
        self.goForms = _.filter(res, function (f) {
          return f.DisplayInExamDropdown == true;
        });
      });
    };

    Home.prototype.openGoFormInstance = function openGoFormInstance(instance) {
      var self = this;

      var form = null;

      if (instance.hasOwnProperty('FormId')) {
        form = {
          'Description': instance.Description,
          'Id': instance.FormId
        };
      }

      self.openGoForm(form, instance);
    };

    Home.prototype.openGoFormPreferenceEditor = function openGoFormPreferenceEditor(form) {
      var self = this;

      var path = '../formbuilder/viewer';

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var options = {
        bodyPadding: 0,
        icon: 'fa-user'
      };

      var description = 'Go Form Preference Editor';

      self.popupHelper.openViewModelPop(path, {
        formId: form.Id,
        providerId: self.currentProvider.ProviderID,

        showPreferenceToolbar: true,
        showPreferenceToolbarSave: true,
        prefId: 0
      }, description, windowWidth, windowHeight, 0, 0, options, function (res) {});
    };

    Home.prototype.openGoForm = function openGoForm(form, instance) {
      var self = this;

      if (this.moreIconsVisible) {
        this.moreIconsVisible = false;
      }

      if (!self.patient && !self.currentProvider) {
        return;
      }

      var path = '../formbuilder/viewer';
      var aDate = self.helper.parseMMDDYYDateString(self.currentBoard.visitInfo.date, "/");
      var date = self.helper.getMMDDYYYYDateWithDate(aDate);
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var options = {
        bodyPadding: 0,
        icon: 'fa-list-alt'
      };

      var instanceId = instance ? instance.Id : null;
      var formId = form ? form.Id : null;
      var description = form ? form.Description : instance.Description;

      self.taskHelper.cacheObjectToTask(self.taskHelper.objectId, self.taskHelper.taskTypeId);

      self.popupHelper.openViewModelPop(path, {
        jwt: self.helper._jwt,
        formId: formId,
        patientId: self.patient.data.PatientID,
        providerId: self.currentProvider.ProviderID,
        date: date,
        instanceId: instanceId,
        showSubmit: true,
        showSubmitAsToolbar: true,
        showPreferenceToolbar: true
      }, description, windowWidth, windowHeight, 0, 0, options, function (res) {
        self.taskHelper.clear();

        self.taskHelper.setObjectToTask(self.taskHelper.cacheObjectId, self.taskHelper.cacheTaskTypeId);
        self.taskHelper.patientId = self.patient.data.PatientID;
        self.taskHelper.userId = self.helper._user.UserID;
        self.taskHelper.date = self.currentBoard.visitInfo.date;
        self.taskHelper.clearCachedTask();
      });
    };

    Home.prototype.getDrFirstUrl = function getDrFirstUrl(patientId, mode, callback) {
      var self = this;

      if (self.helper._user.ErxUserID == null || self.helper._user.ErxUserID.length == 0) return;

      var patId = patientId == null ? "" : patientId;
      var screen = mode == null ? 'message' : mode;
      var url = "drfirst/url?screen=" + screen + "&userId=" + self.helper._user.ErxUserID + "&patientId=" + patId;
      self.http.get(self.helper.getApiUrl(url), function (res) {

        if (self.webkit != undefined) {

          var url = { 'url': res };

          webkit.messageHandlers.launchDrFirst.postMessage(url);
        }

        if (callback) {
          callback(res);
        }
      }, function (err) {
        var e = err;
      });
    };

    Home.prototype.initPackery = function initPackery(columnWidthClass) {
      var self = this;
      self.globals.packery = new _packery2.default('#blockContainer', {
        itemSelector: '.block',
        columnWidth: columnWidthClass,

        percentPosition: true
      });
      self.globals.packery.on('dragItemPositioned', function (draggedItem) {
        self.currentBoard.hasChanged = true;
      });
    };

    Home.prototype.didClickInsideDemographics = function didClickInsideDemographics(elementClicked) {
      var self = this;
      var parents = $(elementClicked).parents('#demo');
      if (parents.length || elementClicked.classList.contains('demo')) {
        return true;
      }
      return false;
    };

    Home.prototype.didClickInsideSchedule = function didClickInsideSchedule(elementClicked) {
      var self = this;
      var container = document.getElementById('providerschedule');
      if (container != null && container !== elementClicked && !container.contains(elementClicked)) {
        return false;
      }
      return true;
    };

    Home.prototype.didClickInsideWorkflow = function didClickInsideWorkflow(elementClicked) {
      var self = this;
      var container = document.getElementById('workflow');
      if (container !== elementClicked && !container.contains(elementClicked)) {
        return false;
      }
      return true;
    };

    Home.prototype.didClickInsideBoardpicker = function didClickInsideBoardpicker(elementClicked) {
      var self = this;
      if (elementClicked.id == 'boardpicker') return true;

      var parents = $(elementClicked).parents('#boardpicker');
      if (parents.length || elementClicked.classList.contains('boardpicker')) {
        return true;
      }
      return false;
    };

    Home.prototype.tryDriverSample = function tryDriverSample() {

      var driver = new _driver2.default({
        animate: false
      });

      driver.defineSteps([{
        element: '#toolbar-demographics',
        popover: {
          title: 'Patient Details',
          description: 'Click here to access the current patients demographics, visit history, review past history and document images.',
          position: 'right'
        }
      }, {
        element: '#toolbar-patient-search',
        popover: {
          title: 'Patient Search',
          description: 'Click here to search for a patient.',
          position: 'right'
        }
      }, {
        element: '#toolbar-schedule',
        popover: {
          title: 'Provider Schedule',
          description: 'Click here to review visit schedule by provider and location.',
          position: 'right'
        }
      }, {
        element: '#toolbar-messaging',
        popover: {
          title: 'Messaging / Tasking',
          description: 'Click here to review assigned tasks and patient or staff messages.',
          position: 'right'
        }
      }, {
        element: '#toolbar-workflow',
        popover: {
          title: 'Workflow',
          description: 'Click here to review patient work flow status: Diagnosis, Plan, Document created, History reviewed, Visit Code selected, x-ray review and more.',
          position: 'right'
        }
      }, {
        element: '#toolbar-kiosk',
        popover: {
          title: 'Patient Kiosk',
          description: 'Click here to review Kiosk Check-in Progress.',
          position: 'right'
        }
      }, {
        element: '#toolbar-phonecall',
        popover: {
          title: 'Patient Phone Conversations',
          description: 'Click here to check your phone call messages.',
          position: 'right'
        }
      }, {
        element: '#toolbar-prescription',
        popover: {
          title: 'Prescription Writer',
          description: 'Click here to prescribe medications, view pharmacy messages or prescription reports.',
          position: 'right'
        }
      }, {
        element: '#toolbar-more',
        popover: {
          title: 'More Items',
          description: 'Click here to access external apps, submit charges, therapy orders, return to school and return to work notes.',
          position: 'right'
        }
      }, {
        element: '#toolbar-admin',
        popover: {
          title: 'Settings',
          description: 'Click here for settings, including file maintenance and additional administrative features.',
          position: 'right'
        }
      }]);

      driver.start();
    };

    Home.prototype.setup = function setup() {
      var self = this;

      window.onresize = function () {
        self.getOrientation();
      };

      self.taskHelper.setup();

      $(window).on("tap", function () {
        self.idleCounter = 0;
      });

      $(window).mousemove(function (e) {
        self.idleCounter = 0;
      });
      $(window).keypress(function (e) {
        self.idleCounter = 0;
      });

      $(self.home).click(function (event) {

        if (self.demographicsVisible) {
          var isDemographics = self.didClickInsideDemographics(event.target);
          if (!isDemographics) {
            self.hideDemographics();
          }
        }
        if (self.boardPickerVisible) {
          var isBoardpicker = self.didClickInsideBoardpicker(event.target);
          if (!isBoardpicker) {
            self.boardPickerVisible = false;
          }
        }
        if (self.scheduleVisible) {
          var isSchedule = self.didClickInsideSchedule(event.target);
          if (!isSchedule) {
            self.scheduleVisible = false;
          }
        }
        if (self.workflowVisible) {
          var isWorkflow = self.didClickInsideWorkflow(event.target);
          if (!isWorkflow) {
            self.workflowVisible = false;
          }
        }
      });

      self.saveQueue = new SaveQueue(self.helper);

      self.initPackery('.pack-w25');

      self.data.getUserBoardData(function (res) {
        self.userBoards = res;

        self.boardPickerModel = self.setupBoardPickerModel();
      });

      setTimeout(function () {
        self.updateSidebarItemBadges();
      }, 1000);

      self.data.getAdmin(function (a) {

        self.admin = a;

        self.globals.admin = a;

        var timeoutSeconds = a.AutoLogOffTimeout;
        if (timeoutSeconds != 0) {
          self.idleMinutes = timeoutSeconds / 60;
        }

        self.demographicsDisabled = a.HL7Enabled;

        self.helper.xraypath = a.MedstratURL;

        self.data.getWithUrl('tenant?tenantId=' + a.TenantId, function (res) {
          self.helper.imageTenantRoot = res.ImageRoot;
          self.helper.imageRoot = res.ImageRoot;
          self.globals.selfHosted = res.Tenant.SelfHosted;

          self.patient = self.data.getPatientEmpty(a);
        });
      });

      self.messageTimer = setInterval(function () {
        self.updateSidebarItemBadges.call(self);

        self.idleCounter = self.idleCounter + 1;

        if (self.idleCounter > self.idleMinutes) {
          self.logout();
        }
      }, 60000);

      self.loadScheduledProviders(null, function () {
        self.trySelectLoggedInUser();
      });

      self.data.getProviders(true, function (pros) {
        self.allProviders = pros;
      });

      self.getDrFirstUrl(null, null);

      self.showAdminButton = self.helper._user.RoleName.toUpperCase() == 'ADMINISTRATOR' ? true : false;

      self.refreshHeight();

      self.data.getWithUrl('externalapps/all', function (res) {
        if (!res) {
          return;
        }
        for (var i = 0; i < res.length; i++) {
          if (res[i].Enabled) {
            self.externalapps.push(res[i]);
          }
        }
      });

      self.data.getBodypartList();

      self.data.getUser(self.helper._user.UserID, function (res) {

        self.checkUserLicense(res);

        self.helper._user.UserData = res;
        self.erxEnabled = self.helper._user.UserData.eRx;
        self.faxEnabled = self.helper._user.UserData.eFaxUser ? true : false;

        self.helper._user.ProviderData = null;
        self.data.getProvider(res.ProviderID, function (provider) {
          self.helper._user.ProviderData = provider;
        });
      });
    };

    Home.prototype.setSidebarItemDisabledWithTitle = function setSidebarItemDisabledWithTitle(disabled, title) {
      var model = this.sidebarRef.currentController.view.bindingContext;
      var foundItm = _.find(model.sidebarItems, function (s) {
        return s.title == title;
      });
      if (!foundItm) {
        foundItm = _.find(model.sidebarItemsMore, function (s) {
          return s.title == title;
        });
      }

      if (foundItm) {
        foundItm.disabled = disabled;
      }
    };

    Home.prototype.updateWorkflowSidebarItemBadge = function updateWorkflowSidebarItemBadge(count) {
      var model = this.sidebarRef.currentController.view.bindingContext;
      var foundItm = _.find(model.sidebarItems, function (s) {
        return s.title == 'Workflow';
      });
      if (!foundItm) {
        foundItm = _.find(model.sidebarItemsMore, function (s) {
          return s.title == 'Workflow';
        });
      }

      if (foundItm) {
        foundItm.badgeCount = count;
      }
    };

    Home.prototype.updateSidebarItemBadges = function updateSidebarItemBadges() {

      var itemsWithBadges = ['Messaging/Tasking', 'Workflow'];

      if (this.sidebarRef) {

        var model = this.sidebarRef.currentController.view.bindingContext;

        var foundItm = null;

        for (var i = 0; i < itemsWithBadges.length; i++) {
          foundItm = _.find(model.sidebarItems, function (s) {
            return s.title == itemsWithBadges[i];
          });
          if (!foundItm) {
            foundItm = _.find(model.sidebarItemsMore, function (s) {
              return s.title == itemsWithBadges[i];
            });
          }

          if (foundItm) {
            if (foundItm.title == 'Messaging/Tasking') {
              this.updateMessageBadgeWithSidebarItem(foundItm);
            } else if (foundItm.title == 'Workflow') {}
          }
        }
      }
    };

    Home.prototype.openFax = function openFax(documentName, objectId, documentType) {

      var self = this;

      if (self.popupHelper.activeController && self.popupHelper.activeController.settings.model.header == "Fax") {
        self.popupHelper.activeController.settings.model.viewModel.faxItems.push({ "Description": documentName, "Id": objectId });
        return;
      }

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;
      var halfW = windowWidth / 2;
      var halfH = windowHeight / 2;

      var options = {
        closeActiveDialog: false,
        icon: 'fa-fax',
        bodyPadding: 0
      };

      var data = {
        faxItems: [{ "Description": documentName, "Id": objectId, "Type": documentType }]
      };

      self.popupHelper.openViewModelPop('../fax/outboundFax', data, 'Fax', halfW, halfH, halfH / 2, 0, options, function (res) {

        self.popupHelper.activeController = null;

        if (res.cancelled && res.cancelled) {
          return;
        }
      });
    };

    Home.prototype.checkUserLicense = function checkUserLicense(user) {
      var self = this;

      if (user.License) {
        self.data.getWithUrl('license/claims?token=' + user.License, function (claims) {
          if (claims && claims.hasOwnProperty('ExpireDate')) {
            var expDate = _moment2.default.unix(claims.ExpireDate);

            var remainingDays = expDate.diff((0, _moment2.default)(), 'days');
            if (remainingDays <= 0) {
              user.License = null;
            } else {
              var txt = 'You have ' + remainingDays + ' days remaining in your trial license.';
              self.popupHelper.openGenericMessagePop(txt, "License Trial", [], false, function (res) {
                if (callback) {
                  callback(res);
                }
              }, { alertType: 'warning' });
            }
          }
        });
      }
    };

    Home.prototype.refreshHeight = function refreshHeight() {
      this.scrollContainerHeight = window.innerHeight - 56;
    };

    Home.prototype.testThumbnails = function testThumbnails(callback) {

      var self = this;
      var url = self.helper._server + ':8090/dicomweb/studies/1.3.6.1.4.1.11157.2017.10.23.10.57.32.169/series/1.3.6.1.4.1.11157.2017.10.23.11.3.5.170/thumbnail';

      return $.ajax({
        type: 'GET',
        url: url,
        contentType: "image/jpeg"
      }).fail(function (err) {
        callback(err);
      }).done(function (data) {
        callback(data);
      });
    };

    Home.prototype.testCharges = function testCharges() {
      var self = this;
      self.data.getWithUrl('charges/all', function (res) {
        if (res && res.length > 0) {
          var aCharge = res[0];

          var detailUrl = 'charges/detail?visitId=' + aCharge.VisitCodeID;
          self.data.getWithUrl(detailUrl, function (detail) {
            var deets = detail;
          });
        }
      });
    };

    Home.prototype.launchDrFirst = function launchDrFirst(mode) {

      var self = this;

      self.moreIconsVisible = false;

      var patientId = null;

      if (mode == 'patient') {
        patientId = self.patient ? self.patient.data.PatientID : null;
      }

      var windowHeight = '100%';
      var windowWidth = '100%';

      var options = {
        closeActiveDialog: false,
        width: windowWidth,
        height: windowHeight,
        top: 0,
        left: 0,
        title: "",
        popupHeight: '100%'
      };

      self.getDrFirstUrl(patientId, mode, function (url) {
        self.popupHelper.openUrlPathPop(url, options);
      });
    };

    Home.prototype.launchExternalApp = function launchExternalApp(app) {

      this.moreIconsVisible = false;

      var windowHeight = '100%';
      var windowWidth = '100%';

      var options = {
        closeActiveDialog: false,
        width: windowWidth,
        height: windowHeight,
        top: 0,
        left: 0,
        title: "",
        popupHeight: '100%'
      };

      this.popupHelper.openUrlPathPop(app.ExternalAppPathOrUrl, options);
    };

    Home.prototype.logout = function logout() {
      var self = this;

      var dxo = $("ux-dialog-overlay");
      if (dxo.length > 0) {
        for (var d = 0; d < dxo.length; d++) {
          var dx = dxo[d];
          $(dx).remove();
        }
      }
      var dxs = $("ux-dialog-container");
      if (dxs.length > 0) {
        for (var _d = 0; _d < dxs.length; _d++) {
          var _dx = dxs[_d];
          $(_dx).remove();
        }
      }
      self.router.navigate('#/login/login');
    };

    Home.prototype.updateMessageBadgeWithSidebarItem = function updateMessageBadgeWithSidebarItem(item) {
      var self = this;
      self.data.getMessageConversationsWithUserId(self.helper._user.UserID, function (conversations) {

        var unreadMessages = 0;

        var nonArchived = _.filter(conversations, function (m) {
          return m.Status != 'ARCHIVED';
        });

        var grouped = _.groupBy(nonArchived, 'ConversationID');
        var groupKeys = Object.keys(grouped);

        for (var k = 0; k < groupKeys.length; k++) {
          var conv = grouped[groupKeys[k]];
          if (conv.length > 0) {
            var isSender = self.globals.checkConversationResultIsSender(conv[0], self.helper._user.UserID);
            unreadMessages = !isSender ? unreadMessages + 1 : unreadMessages + 0;
          }
        }

        if (unreadMessages > 0) {
          item.badgeCount = unreadMessages;
        }
      });
    };

    Home.prototype.getProviderFromScheduledProviderList = function getProviderFromScheduledProviderList(providerId) {
      return _.find(this.providers, function (p) {
        return p.ProviderID == providerId;
      });
    };

    Home.prototype.loadScheduledProviders = function loadScheduledProviders(date, callback) {

      var self = this;

      self.providers = [];

      self.data.getScheduledProviders(date, function (res) {

        self.providers = _.sortBy(res, function (p) {
          return p.ProviderEntity;
        });

        var all = {
          "ProviderEntity": "All",
          "ProviderID": 0
        };

        self.providers.splice(0, 0, all);

        if (callback) {
          callback();
        }
      });
    };

    Home.prototype.setupBoardPickerModel = function setupBoardPickerModel() {
      var self = this;
      return {
        "home": self,
        "userBoards": self.userBoards == null ? [] : self.userBoards,
        "components": self.data.getBlockTypes()
      };
    };

    Home.prototype.attached = function attached() {
      var self = this;

      self.globals.clear_patient_alerts();

      self.setup();

      self.event.subscribe('goFormPdfSaved', function (doc) {
        var foundPdf = _.find(self.currentBoard.documents, function (d) {
          return d.blockType == 'document' && d.id == doc.DocumentID;
        });

        if (!foundPdf) {
          self.data.getWithUrl('tasktype?description=Goform&type=Goform', function (tt) {
            var hxRes = self.data.getHistoryResultObject();
            hxRes.TaskTypeID = tt.Id;
            hxRes.TaskTypeDescription = tt.Description;
            hxRes.TaskType = tt.Type;
            hxRes.Locked = false;
            hxRes.Description = doc.DocumentName;
            hxRes.Type = 'document';
            hxRes.ExamDateTime = doc.CreationDate;
            hxRes.CreateDate = doc.CreationDate;
            hxRes.ProviderID = doc.ProviderID;
            hxRes.ObjectID = doc.DocumentID;
            hxRes.DocPath = doc.DocumentLocation;


            var aBlock = self.data.getNewBlock();

            var docLocation = doc.DocumentLocation;
            var splitDash = docLocation.split('-');
            var filename = splitDash[splitDash.length - 1];

            filename = filename.replace('.pdf', "");

            aBlock.description = filename;
            aBlock.blockType = 'document';
            aBlock.widthMult = 1;
            aBlock.heightMult = 1;
            aBlock.data = hxRes;
            aBlock.id = doc.DocumentID;
            self.currentBoard.documents.push(aBlock);

            self.documentCount = self.home.documentCount + 1;
          });
        }
      });

      self.event.subscribe('goFormSaved', function (form) {
        var foundDoc = _.find(self.currentBoard.documents, function (f) {
          return f.blockType == 'goForm' && f.id == form.Id;
        });

        if (!foundDoc) {
          var aBlock = self.data.getNewBlock();
          aBlock.description = form.Description;
          aBlock.blockType = 'goForm';
          aBlock.widthMult = 1;
          aBlock.heightMult = 1;
          aBlock.data = { 'CreateDate': form.Date };
          aBlock.id = form.Id;

          self.currentBoard.documents.push(aBlock);
          self.documentCount = self.home.documentCount + 1;
        }

        var foundGoForm = _.find(self.currentBoard.blocks, function (b) {
          return b.blockType == 'goForm' && b.goFormId == form.FormId;
        });
        if (foundGoForm) {
          foundGoForm.goFormInstanceId = form.Id;

          self.data.saveVisitBoard(self.currentBoard);
          self.currentBoard.hasChanged = false;
        }
      });

      self.event.subscribe('daysheet_saved', function () {
        var b = self.currentBoard;
        var procedureBlock = self.currentBoard.getBlockWithType('procedure');
        if (procedureBlock) {
          procedureBlock.childModel.load();
        }
      });

      if (window.innerWidth <= 576) {
        self.globals.mobileView = true;
      }

      window.localStorage.clear();
      window.localStorage.setItem(self.helper._user.UserName, self.helper._user.RoleName);


      self.globals.isTouchDevice = self.isTouchDevice();
    };

    Home.prototype.getOrientation = function getOrientation() {

      var self = this;
      self.refreshHeight();

      var orientation = window.innerWidth > window.innerHeight ? "Landscape" : "Portrait";
      return orientation;
    };

    Home.prototype.getUserBoardById = function getUserBoardById(boardId) {
      var self = this;
      for (var i = 0; i < self.userBoards.length; i++) {
        var aBoard = self.userBoards[i];
        if (aBoard.id == boardId) {
          return aBoard;
        }
      }
      return null;
    };

    Home.prototype.clearBoard = function clearBoard() {
      var self = this;
      self.currentBoard = self.data.getNewBoard();
      self.currentBoard.description = "";
      self.documentCount = 0;
    };

    Home.prototype.loadEmptyBoard = function loadEmptyBoard(visitInfo, callback) {
      var self = this;
      self.clearBoard();
      self.currentBoard.visitInfo = visitInfo;
      callback();
    };

    Home.prototype.loadBoardWithPatientVisitData = function loadBoardWithPatientVisitData(visitData, providerId, callback) {
      var self = this;

      var res = [];

      self.documentCount = 0;

      res = self.data.filterPatientVisitData(visitData, providerId);

      var visit = _.find(visitData, function (d) {
        return d.Type == 'Visit';
      });

      var aBoard = self.data.getNewBoard();
      aBoard.description = "";
      aBoard.patientId = self.patient.data.PatientID;
      aBoard.providerId = visit.ProviderID;
      aBoard.userId = self.helper._user.UserID;
      aBoard.date = self.helper.getISODateToFormat(visit.ExamDateTime, "MM/DD/YYYY");
      if (visit.BoardId != null) {
        aBoard.id = visit.BoardId;
      }

      var defaultBlocks = self.data.getBlocksWithVisitData(visitData);
      aBoard.blocks = defaultBlocks;

      var docs = _.filter(res, function (d) {
        return d.type == 'document';
      });

      for (var i = 0; i < docs.length; i++) {
        var block = docs[i];
        var aBlock = self.data.getNewBlock();
        aBlock.description = block.data.Description;

        aBlock.setBlockType(block.type);

        aBlock.widthMult = 2;
        aBlock.heightMult = 2;
        aBlock.data = block.data;

        aBlock.id = i;
        aBlock.objectId = block.data.ObjectID;

        if (block.type == 'document') {

          if (aBlock.data && aBlock.data.Bodyparts) {
            for (var bp = 0; bp < aBlock.data.Bodyparts.length; bp++) {
              aBlock.bodyparts.push(aBlock.data.Bodyparts[bp]);
            }
          }

          aBoard.documents.push(aBlock);
          self.documentCount = self.documentCount + 1;
        }
      }

      self.currentBoard = aBoard;

      if (visit) {
        var bodyparts = self.data.parseVisitBodyparts(visit.Part);
        var vInfo = self.data.getVisitInfo(aBoard.date, aBoard.patientId, visit.ProviderID, visit.Description, bodyparts, visit.BoardId == null ? aBoard.id : visit.BoardId, visit.ObjectID, visit.Locked);
        vInfo.bodyside = visit.DetailsMore;

        self.currentBoard.visitInfo = vInfo;

        self.data.getVisitCode(vInfo.visitCodeId, function (vRes) {
          self.currentBoard.visitInfo.visitCode = vRes;

          if (self.currentBoard.id == 0) {
            self.data.saveVisitBoard(self.currentBoard, function (res) {

              self.currentBoard.id = res.id;
              self.currentBoard.visitInfo.boardId = res.id;

              self.updatePatientVisitBoardIdWithVisitCode(vRes.VisitCodeID, res.id);

              if (callback) {
                callback(self.currentBoard);
              }
            });
          } else {
            if (callback) {
              callback(self.currentBoard);
            }
          }
        });
      }
    };

    Home.prototype.loadBoard = function loadBoard(visitInfo, callback) {
      var self = this;
      var aDate = (0, _moment2.default)(visitInfo.date).format("MM-DD-YYYY");

      self.documentCount = 0;

      self.data.getPatientVisitData(visitInfo.patientId, (0, _moment2.default)(visitInfo.date).format("MM-DD-YYYY"), function (visitData) {

        self.getDocumentsFromPatientVisitData(visitData, visitInfo, function (docs) {

          if (docs.length > 0) {
            self.documentCount = docs.length;
          }

          if (visitInfo.boardId != null) {
            self.data.getVisitBoardDataWithBoardId(visitInfo.boardId, function (res) {
              self._getVisitBoardDataCallback(res, docs, visitInfo, callback);
            });
          } else {
            self.data.getVisitBoardData(visitInfo.patientId, visitInfo.providerId, aDate, function (res) {
              self._getVisitBoardDataCallback(res, docs, visitInfo, callback);
            });
          }
        });
      });
    };

    Home.prototype._getVisitBoardDataCallback = function _getVisitBoardDataCallback(res, docs, visitInfo, callback) {
      var self = this;
      self.currentBoard = res;
      self.currentBoard.documents = docs;
      self.currentBoard.visitInfo = visitInfo;

      self.data.getVisitCode(visitInfo.visitCodeId, function (vRes) {
        self.currentBoard.visitInfo.visitCode = vRes;

        if (callback) {
          callback(self.currentBoard);
        }
      });
    };

    Home.prototype.getDocumentsFromPatientVisitData = function getDocumentsFromPatientVisitData(visitData, visitInfo, callback) {
      var self = this;
      var docs = [];

      var visit = _.find(visitData, function (v) {
        return v.hasOwnProperty('ExamDateTime');
      });
      var visitDate = visit ? (0, _moment2.default)(visit.ExamDateTime).format('MM-DD-YYYY') : (0, _moment2.default)().format('MM-DD-YYYY');

      var res = self.data.filterPatientVisitData(visitData, visitInfo.providerId);

      var examParts = [];
      var og_exams = _.filter(visitData, function (d) {
        return d.Type == 'Exam' && d.ProviderID == visitInfo.providerId;
      });
      if (og_exams.length > 0) {
        for (var d = 0; d < og_exams.length; d++) {
          var eData = og_exams[d];
          examParts.push(eData.Part);
        }
      }

      var dataObj = {
        "PatientId": self.patient.data.PatientID,
        "ProviderID": visitInfo.providerId,
        "Date": visitDate,
        "Bodyparts": examParts
      };

      var goInstanceUrl = 'goforms/instances/and/ogexams';
      self.data.postWithUrlAndData(goInstanceUrl, JSON.stringify(dataObj), function (goRes) {
        if (goRes && goRes.length > 0) {
          for (var i = 0; i < goRes.length; i++) {
            var goForm = goRes[i];

            var aBlock = self.data.getNewBlock();
            aBlock.description = goForm.Description;
            aBlock.blockType = 'goForm';
            aBlock.widthMult = 1;
            aBlock.heightMult = 1;
            aBlock.data = { 'CreateDate': goForm.Date, 'formId': goForm.FormId, 'ObjectID': goForm.Id };
            aBlock.id = goForm.Id;

            docs.push(aBlock);
          }
        }

        if (res && res.length > 0) {
          for (var i = 0; i < res.length; i++) {
            var block = res[i];

            if (block.type == 'document') {
              var aBlock = self.data.getNewBlock();
              if (block.data && block.data.Bodyparts) {
                for (var bp = 0; bp < block.data.Bodyparts.length; bp++) {
                  aBlock.bodyparts.push(block.data.Bodyparts[bp]);
                }
              }

              block.data.PatientID = visitInfo.patientId;

              aBlock.description = block.data.Description;
              aBlock.blockType = 'document';
              aBlock.widthMult = 1;
              aBlock.heightMult = 1;
              aBlock.data = block.data;
              aBlock.id = block.data.ObjectID;

              docs.push(aBlock);
            }
          }
        }

        callback(docs);
      });
    };

    Home.prototype.loadProviderWebdocs = function loadProviderWebdocs(proId) {
      var self = this;
      self.data.getWebDocsWithProviderID(proId, function (res) {
        var defDocs = _.filter(res, function (d) {
          return d.ProviderId == 0;
        });
        defDocs = _.sortBy(defDocs, function (d) {
          return d.Description;
        });

        var proDocs = _.filter(res, function (d) {
          return d.ProviderId == proId;
        });
        proDocs = _.sortBy(proDocs, function (d) {
          return d.Description;
        });

        self.webdocs.default = defDocs;
        self.webdocs.provider = proDocs;
      });
    };

    Home.prototype.loadVisit = function loadVisit(visitInfo, callback) {
      var self = this;

      self.is_visit_today = self.helper.is_today(visitInfo.date);

      self.taskHelper.clear();

      self.loadProviderWebdocs(visitInfo.providerId);

      if (visitInfo.boardId == null) {
        self.clearBoard();

        self.data.getPatientVisitData(visitInfo.patientId, (0, _moment2.default)(visitInfo.date).format("MM-DD-YYYY"), function (res) {

          if (res && res.length == 0) {
            self.loadEmptyBoard(visitInfo, function (res) {
              if (callback) {
                callback();
              }
            });
          } else {
            self.loadBoardWithPatientVisitData(res, visitInfo.providerId, function (board) {
              var tt = self.taskHelper.getTaskTypeWithTypeAndDescription("board", "board");
              self.taskHelper.setObjectToTask(board.visitInfo.boardId, tt.Id);
              self.taskHelper.patientId = visitInfo.patientId;
              self.taskHelper.userId = self.helper._user.UserID;
              self.taskHelper.date = visitInfo.date;

              if (callback) {
                callback();
              }
            });
          }
        });
      } else {
        self.loadBoard(visitInfo, function (board) {
          var tt = self.taskHelper.getTaskTypeWithTypeAndDescription("board", "board");
          self.taskHelper.setObjectToTask(board.visitInfo.boardId, tt.Id);
          self.taskHelper.patientId = visitInfo.patientId;
          self.taskHelper.userId = self.helper._user.UserID;
          self.taskHelper.date = visitInfo.date;

          if (callback) {
            callback();
          }
        });
      }
    };

    Home.prototype.loadVisitFromPrevious = function loadVisitFromPrevious(visitInfo, previousBoard) {
      var self = this;
      self.clearBoard();

      self.currentBoard = previousBoard;
      self.currentBoard.visitInfo = visitInfo;

      if (previousBoard.documents.length > 0) {
        self.documentCount = previousBoard.documents.length;
      } else {
        self.documentCount = 0;
      }
    };

    Home.prototype.visitRowClicked = function visitRowClicked(visitInfo) {
      var self = this;

      self.loadVisit(visitInfo);
      self.toggleVisitPicker();
    };

    Home.prototype.clearPatient = function clearPatient() {
      var self = this;
      self.patient = self.data.getPatientEmpty(self.admin);
      self.patientVisits = [];
      self.currentVisit = null;
    };

    Home.prototype.sendPatientToDrFirst = function sendPatientToDrFirst(patientId) {
      var self = this;
      if (self.erxEnabled) {
        self.data.getWithUrl('drfirst/patient?patientId=' + patientId, function (res) {
          var pat = res;
        });
      }
    };

    Home.prototype.loadPatient = function loadPatient(patientId, callback) {
      var self = this;

      if (self.displayDaysheet) {
        self.displayDaysheet = false;
        self.daysheetParams = null;
      }

      self.sendPatientToDrFirst(patientId);

      self.taskHelper.clear();

      var noty = self.helper.createNoty("loading patient...", 3000);
      noty.show();

      if (self.ptDialog != null) {
        self.ptDialog.canClose = true;
        self.ptDialog.controller.cancel();
        self.ptDialog = null;
      }

      self.clearPatient();
      self.clearBoard();

      self.data.getPatient(patientId, function (res) {

        self.patient = res;

        self.doPatientAlerts(self.patient.data.PatientID);

        self.data.getPatientVisitsAndDocuments(patientId, function (res) {

          if (!res) {
            noty.close();
            callback(self.patient);
            return;
          }

          for (var v = 0; v < res.length; v++) {
            var providerName = self.getProviderName(res[v].ProviderID);
            res[v].ProviderName = providerName;

            if (res[v].Locked == null) {
              res[v].Locked = 1;
            }

            res[v].selected = false;
            self.showPatientAlertIcon = res[v].HasPatientAlert;
          }

          self.patientVisits = res;

          noty.close();

          callback(self.patient);
        });
      });
    };

    Home.prototype.getProviderName = function getProviderName(providerId) {
      var self = this;
      var aProvider = self.getProviderWithId(providerId);
      return aProvider ? aProvider.NameFirst.substring(0, 1) + " " + aProvider.NameLast : "";
    };

    Home.prototype.getProviderWithId = function getProviderWithId(providerId) {
      var self = this;
      return _.find(self.allProviders, function (p) {
        return p.ProviderID == providerId;
      });
    };

    Home.prototype.doPatientAlerts = function doPatientAlerts(patientId) {
      var self = this;

      var alert_res = self.globals.check_patient_alert(patientId);
      if (alert_res) {
        return;
      }

      self.globals.add_patient_alert(patientId);

      var urlGet = 'alerts?location=general';
      var alertRun = {
        Alerts: []
      };

      self.data.getWithUrl(urlGet, function (res) {
        if (!res) {
          return;
        }
        for (var i = 0; i < res.length; i++) {
          var alertParam = {
            Alert: res[i],
            Params: []
          };
          alertParam.Params.push({ Param: 'PATIENTID', Value: patientId });
          alertRun.Alerts.push(alertParam);
        }
        self.data.postWithUrlAndData('alert/run', JSON.stringify(alertRun), function (alertRes) {
          if (alertRes.hasOwnProperty('Response')) {
            if (alertRes.Response.length > 0) {
              self.popupHelper.openAlertPop(alertRes, {}, function () {});
            }
          }
        });
      });
    };

    Home.prototype.getBodypartSideFromVisitWithBodypart = function getBodypartSideFromVisitWithBodypart(bodypart, callback) {
      if (this.currentBoard && this.currentBoard.visitInfo) {
        var bps = _.filter(this.currentBoard.visitInfo.bodyparts, function (b) {
          return b.part.toUpperCase() == bodypart.toUpperCase();
        });
        if (bps.length > 1) {
          this.popupHelper.openBodysidePickerPop(function (side) {
            var bp = _.find(bps, function (bp) {
              return bp.side.toUpperCase() == side.toUpperCase();
            });
            callback(bp);
          }, 'Please select bodyside for ' + bodypart + '.');
        } else {
          callback(bps[0]);
        }
      } else {
        callback(null);
      }
    };

    Home.prototype.webdocClick = function webdocClick(webdoc) {
      var self = this;
      var patientId = self.currentBoard.visitInfo.patientId;
      var date = self.currentBoard.visitInfo.date;
      var providerId = self.currentBoard.visitInfo.providerId;
      var userId = self.currentBoard.userId;

      var addSql = [];

      if (self.currentBoard.visitInfo.bodyparts && self.currentBoard.visitInfo.bodyparts.length > 1) {
        self.popupHelper.openBodypartPickerPop(self.currentBoard.visitInfo.bodyparts, function (pickerRes) {
          var bodypartArray = [];
          for (var b = 0; b < pickerRes.bodyparts.length; b++) {
            bodypartArray.push(pickerRes.bodyparts[b].part);
          }
          addSql = self.data.buildAdditionalSqlFromBodyparts(bodypartArray);

          self._createDocumentName(webdoc, patientId, providerId, userId, date, pickerRes, function (res) {

            if (res == null) {
              return;
            } else if (res.documentId == null || res.documentId == 0) {
              self._generateDocumentExtractName(webdoc, patientId, providerId, userId, date, addSql, res.filepath, pickerRes.bodyparts);
            } else {
              self.popupHelper.openDocPop(res.documentId);
            }
          });
        });
      } else {
        self._createDocumentName(webdoc, patientId, providerId, userId, date, null, function (res) {

          if (res == null) {
            return;
          } else if (res.documentId == null || res.documentId == 0) {

            self._generateDocumentExtractName(webdoc, patientId, providerId, userId, date, addSql, res.filepath, self.currentBoard.visitInfo.bodyparts);
          } else {
            self.popupHelper.openDocPop(res.documentId);
          }
        });
      }
    };

    Home.prototype._createDocumentName = function _createDocumentName(webdoc, patientId, providerId, userId, date, bodypartsides, callback) {
      var self = this;
      self.data.createDocumentName(webdoc, patientId, providerId, userId, date, false, bodypartsides, function (doc) {

        if (doc.locked) {
          var message = 'This ' + webdoc.Description + ' is locked. Please unlock to modify or create an addendum.';
          var header = 'Document Locked!';
          var options = ['OK'];
          self.popupHelper.openGenericMessagePop(message, header, options, true, function (res) {
            callback(null);
            return;
          });
        }
        if (doc.exists) {
          var _message = 'A ' + webdoc.Description + ' has already been created for this patient for the current date. Do you want to recreate?';
          var _header = 'Document Exists!';
          var _options = ['YES', 'NO'];
          self.popupHelper.openGenericMessagePop(_message, _header, _options, true, function (res) {
            if (res.result == 'NO') {
              callback(doc);
            } else {
              doc.documentId = 0;
              callback(doc);
            }
          });
        } else {
          callback(doc);
        }
      });
    };

    Home.prototype._generateDocumentExtractName = function _generateDocumentExtractName(webdoc, patientId, providerId, userId, date, addSql, filepath, bodyparts) {
      var self = this;

      var noty = self.helper.createNoty("Generating " + webdoc.Description + "...", 3000);
      noty.show();

      self.data.generateDocumentExtractName(webdoc, patientId, providerId, userId, date, addSql, filepath, function (res) {
        var aBlock = self.data.getNewBlock();
        aBlock.description = res.DocumentType;
        aBlock.blockType = 'document';

        if (bodyparts) {
          for (var i = 0; i < bodyparts.length; i++) {
            aBlock.bodyparts.push(bodyparts[i].part);
          }
        }

        res.CreateDate = res.CreationDate;

        aBlock.data = res;
        aBlock.id = res.DocumentID;

        var success = self.currentBoard.addDocument(aBlock);
        if (success) {
          self.documentCount = self.documentCount + 1;
        }

        var tt = self.taskHelper.getTaskTypeWithTypeAndDescription("DOCUMENT", res.DocumentType);

        self.popupHelper.openDocPop(res.DocumentID, undefined, tt.Id);

        noty.close();

        $(self.docTray).collapse('show');
      });
    };

    Home.prototype._generateDocument = function _generateDocument(webdoc, patientId, providerId, userId, date, addSql) {
      var self = this;

      var noty = self.helper.createNoty("Generating " + webdoc.Description + "...", 3000);
      noty.show();

      self.data.generateDocument(webdoc, patientId, providerId, userId, date, addSql, function (res) {
        var aBlock = self.data.getNewBlock();
        aBlock.description = res.DocumentType;
        aBlock.blockType = 'document';

        res.CreateDate = res.CreationDate;

        aBlock.data = res;
        aBlock.id = res.DocumentID;

        var success = self.currentBoard.addDocument(aBlock);
        if (success) {
          self.documentCount = self.documentCount + 1;

          self.popupHelper.openDocPop(res.DocumentID);
        }

        noty.close();

        $(self.docTray).collapse('show');
      });
    };

    Home.prototype.displayDocumentPopup = function displayDocumentPopup(url) {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.dialogService.open({ viewModel: _documentPopup.DocumentPopup, model: { popupWidth: windowWidth, popupHeight: windowHeight, documentUrl: url } }).whenClosed(function (response) {});
    };

    Home.prototype.displayAdmin = function displayAdmin() {
      var self = this;
      self.adminVisible = true;
    };

    Home.prototype.displayKioskDashboard = function displayKioskDashboard() {
      var self = this;
      var path = '../phxCheckinDashboard/home';
      var date = (0, _moment2.default)().format('MM/DD/YYYY');
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var options = {
        displayHeader: false,
        bodyPadding: 0
      };

      self.popupHelper.openViewModelPop(path, { jwt: self.helper._jwt, userid: self.helper._user.UserID, date: date }, "Kiosk", windowWidth, windowHeight, 0, 0, options, function (res) {});
    };

    Home.prototype.openCharges = function openCharges() {
      var self = this;
      var path = './submitCharges';
      var date = (0, _moment2.default)().format('MM/DD/YYYY');
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var quarter = windowWidth / 4;
      var third = windowWidth / 3;

      var width = third * 2;
      var left = third / 2;

      var height = windowHeight - 10;
      var top = 0;

      var options = {
        displayHeader: false,
        bodyPadding: 0
      };

      self.popupHelper.openViewModelPop(path, self, "", width, height, top, left, options, function (res) {});
    };

    Home.prototype.openCamera = function openCamera(callback) {
      var self = this;
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var quarter = windowWidth / 4;
      var third = windowWidth / 3;

      var topThird = windowHeight / 3;

      var width = 'auto';
      var left = third / 2;
      var height = 'auto';
      var top = topThird / 2;

      var options = {
        bodyPadding: 0,
        scrollHeight: 300
      };
      self.popupHelper.openViewModelPop('./camera', self, '', width, height, top, quarter, options, function (res) {
        var imgData = res.image;
        callback(imgData);
      });
    };

    Home.prototype.openInboundFax = function openInboundFax(type) {
      var self = this;
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var left = windowWidth / 2;
      var width = left;
      var top = 0;
      var height = windowHeight;

      var options = {
        bodyPadding: 0,
        scrollHeight: 300,
        dropshadow: false,
        displayHeader: false
      };

      var vmObj = {
        home: self,
        'filewatcherType': type
      };

      self.popupHelper.openViewModelPop('../fax/inbound', vmObj, '', width, height, top, left, options, function (res) {});
    };

    Home.prototype.openPhonecall = function openPhonecall() {
      var self = this;

      var path = './phoneCall';
      var date = (0, _moment2.default)().format('MM/DD/YYYY');
      var windowHeight = window.innerHeight - 100;
      var windowWidth = window.innerWidth;

      var quarter = windowWidth / 4;
      var third = windowWidth / 3;

      var width = third * 2;
      var left = third / 2;

      var height = windowHeight;
      var top = 0;

      var options = {
        displayHeader: false,
        bodyPadding: 0,
        overlayTop: 50,
        overflowY: "hidden"
      };

      self.taskHelper.cacheObjectToTask(self.taskHelper.objectId, self.taskHelper.taskTypeId);

      self.popupHelper.openViewModelPop(path, self, "", width, height, top, left, options, function (res) {
        self.taskHelper.setObjectToTask(self.taskHelper.cacheObjectId, self.taskHelper.cacheTaskTypeId);
        self.taskHelper.clearCachedTask();
      });
    };

    Home.prototype.taskObject = function taskObject(patientId, providerId, date, objectId, taskTypeId, openTaskedObject) {
      var self = this;
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.popupHelper.openTaskPop(patientId, providerId, date, objectId, taskTypeId, self, function (res) {
        if (openTaskedObject) {
          self.openTask(res.taskToOpen);
        }
      }, null, { closeActiveDialog: false });
    };

    Home.prototype.taskObjectList = function taskObjectList(TaskPopupObjects, openTaskedObject) {
      var self = this;
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.popupHelper.openTaskPopNew(TaskPopupObjects, self, function (res) {
        if (openTaskedObject) {
          self.openTask(res.taskToOpen);
        }
      }, null, { closeActiveDialog: false });
    };

    Home.prototype.openDocument = function openDocument(documentId, taskTypeId) {
      var self = this;

      self.taskHelper.cacheCurrentTask();
      self.popupHelper.openDocPop(documentId, undefined, taskTypeId);
    };

    Home.prototype.openPdf = function openPdf(documentPath, patientId) {

      var self = this;

      console.log('openPdf', documentPath);

      self.taskHelper.cacheCurrentTask();
      self.popupHelper.openPdfPop(patientId, documentPath, function () {}, false);

      var splitArray = documentPath.split("\\");
      var length = splitArray.length;
      var patientId = null;
      var filepath = null;
      if (length > 0) {
        patientId = splitArray[length - 2];
        filepath = splitArray[length - 1];
      }
      if (patientId != null && filepath != null) {
        self.popupHelper.openPdfPop(patientId, filepath, function () {}, true);
      }
      if (documentPath) {
        self.popupHelper.openPdfPop(patientId, documentPath, function () {}, false);
      }
    };

    Home.prototype.openReturnTo = function openReturnTo() {
      var self = this;

      if (self.currentBoard == null || self.currentBoard.visitInfo == null) {
        return;
      }

      var path = './returnForm';
      var date = (0, _moment2.default)().format('MM/DD/YYYY');
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var quarter = windowWidth / 4;
      var third = windowWidth / 3;

      var width = third * 2;
      var left = third / 2;

      var height = windowHeight - 10;
      var top = 0;

      var options = {
        displayHeader: false,
        bodyPadding: 0
      };

      self.popupHelper.openViewModelPop(path, self, "", width, height, top, left, options, function (res) {});
    };

    Home.prototype.openPtOrder = function openPtOrder(path) {
      var self = this;

      if (!self.currentBoard && !self.currentBoard.visitInfo) {
        return;
      }

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var third = windowWidth / 3;

      var width = third * 2;
      var left = third / 2;

      var height = windowHeight - 10;
      var top = 0;

      var options = {
        displayHeader: false,
        bodyPadding: 0
      };

      self.popupHelper.openViewModelPop(path, self, "", width, height, top, left, options, function (res) {});
    };

    Home.prototype.displayTaskForm = function displayTaskForm() {
      var self = this;

      self.popupHelper.openMessagePop(function (response) {
        var res = response;
        if (res != null) {
          self.openTask(res);
        }
      }, self.popupHelper, self);
    };

    Home.prototype.openTask = function openTask(task) {
      var self = this;
      self.loadPatient(task.PatientID, function (res) {
        var tDate = self.helper.getDateWithFormat(task.Date, 'MM/DD/YYYY');

        var visit = _.find(self.patientVisits, function (v) {
          var vDate = self.helper.getISODateToFormat(v.ExamDateTime, 'MM/DD/YYYY');
          return vDate == tDate;
        });

        var visitInfo = null;

        if (visit != null && visit != undefined) {
          var vData = visit;
          var vDate = self.helper.getISODateToFormat(vData.ExamDateTime, "MM/DD/YYYY");
          var bodyparts = self.data.parseVisitBodyparts(vData.Part);
          visitInfo = self.data.getVisitInfo(vDate, task.PatientID, vData.ProviderID, vData.Desccription, bodyparts, vData.BoardId, vData.ObjectID, vData.Locked);
        } else {
          var vDate = self.helper.getISODateToFormat(task.DateCreated, "MM/DD/YYYY");
          visitInfo = self.data.getVisitInfo(vDate, task.PatientID, task.ProviderID, "", undefined, null, "", false);
        }

        self.loadVisit(visitInfo, function () {

          if (task.Type == 'DOCUMENT') {
            self.popupHelper.openDocPop(task.formID);
          } else if (task.Type == 'PHONE') {
            self.openPhonecall();
          } else {
            var tt = self.taskHelper.getTypeWithId(task.TypeID);
            if (tt != undefined) {
              if (tt.Description.toLowerCase() == 'xray') {
                self.data.getXrayWithId(task.formID, function (res) {
                  self.popupHelper.openXrayPop(res.ImagePath);
                });
              }

              if (tt.TypeAsString.toLowerCase() == 'board') {
                self.data.loadVisitBoardWithId(task.formID, function (res) {

                  var vDate = self.helper.getISODateToFormat(res.ExamDateTime, "MM/DD/YYYY");
                  var vi = self.data.getVisitInfo(vDate, res.PatientId, res.ProviderId, "", [], 0, res.VisitCodeId, false);

                  self.loadBoard(vi);
                });
              }
            }
          }
        });
      });
    };

    Home.prototype.loadPatientWithMostRecentVisit = function loadPatientWithMostRecentVisit(patientId) {
      var self = this;

      self.loadPatient(patientId, function (res) {

        if (self.patientVisits.length > 0) {
          var vData = null;

          var multiVisits = _.filter(self.patientVisits, function (v) {
            return self.helper.getISODateToFormat(v.ExamDateTime, "MM/DD/YYYY") == self.globals.scheduleDate;
          });

          if (multiVisits.length > 1) {
            vData = _.find(multiVisits, function (v) {
              return v.ProviderID == self.currentProvider.ProviderID;
            });
          } else {
            vData = self.patientVisits[0];
          }

          for (var v = 0; v < self.patientVisits.length; v++) {
            if (self.patientVisits[v].ObjectID == vData.ObjectID) {
              self.patientVisits[v].selected = true;
            } else {
              self.patientVisits[v].selected = false;
            }
          }

          var vDate = self.helper.getISODateToFormat(vData.ExamDateTime, "MM/DD/YYYY");
          var bodyparts = self.data.parseVisitBodyparts(vData.Part);
          var vi = self.data.getVisitInfo(vDate, res.data.PatientID, vData.ProviderID, vData.Description, bodyparts, vData.BoardId, vData.ObjectID, vData.Locked);
          vi.providerName = vData.ProviderName;
          self.loadVisit(vi);
        } else {
          var vi = self.data.getVisitInfo(vDate, patientId);
          self.loadVisit(vi);
        }
      });
    };

    Home.prototype.loadPatientWithDate = function loadPatientWithDate(patientId, date) {
      var self = this;
      self.loadPatient(patientId, function (res) {
        if (self.patientVisits.length > 0) {
          var vData = _.find(self.patientVisits, function (v) {
            return (0, _moment2.default)(v.ExamDateTime).format('MM/DD/YYYY') == date;
          });
          if (vData) {
            var vDate = self.helper.getISODateToFormat(vData.ExamDateTime, "MM/DD/YYYY");
            var bodyparts = self.data.parseVisitBodyparts(vData.Part);
            var vi = self.data.getVisitInfo(vDate, res.data.PatientID, vData.ProviderID, vData.Description, bodyparts, vData.BoardId, vData.ObjectID, vData.Locked);
            self.loadVisit(vi);
          }
        }
      });
    };

    Home.prototype.loadPatientWithDateAndProviderId = function loadPatientWithDateAndProviderId(patientId, date, providerId) {
      var self = this;
      self.loadPatient(patientId, function (res) {
        if (self.patientVisits.length > 0) {
          var vData = _.find(self.patientVisits, function (v) {
            return (0, _moment2.default)(v.ExamDateTime).format('MM/DD/YYYY') == date && v.ProviderID == providerId;
          });
          if (vData) {
            var vDate = self.helper.getISODateToFormat(vData.ExamDateTime, "MM/DD/YYYY");
            var bodyparts = self.data.parseVisitBodyparts(vData.Part);
            var vi = self.data.getVisitInfo(vDate, res.data.PatientID, vData.ProviderID, vData.Description, bodyparts, vData.BoardId, vData.ObjectID, vData.Locked);
            self.loadVisit(vi);
          }
        }
      });
    };

    Home.prototype.createPatient = function createPatient(callback) {

      var self = this;
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;
      var width = windowWidth - 71;
      var left = 71;

      var height = windowHeight;
      var top = 0;

      var options = {
        bodyPadding: 0,
        displayHeader: false
      };

      self.data.getWithUrl('patient', function (newPatient) {

        self.popupHelper.openViewModelPop('./patientDetails', { "disableDemographics": false,
          "scrollHeight": windowHeight - 50,
          "patient": newPatient,
          "displayInPopup": true }, 'New Patient', width, height, top, left, options, function (res) {

          if (res.cancelled) return;

          if (callback) {
            callback(res);
          }
        });
      });
    };

    Home.prototype.displayPatientSearch = function displayPatientSearch() {
      var self = this;
      self.popupHelper.openPatientPop(true, false, function (patientId) {
        if (!patientId.hasOwnProperty('cancelled') && !patientId.createPatient) {
          self.loadPatientWithMostRecentVisit(patientId);
        } else if (patientId.hasOwnProperty('createPatient')) {
          self.createPatient();
        }
      });
    };

    Home.prototype.updateExisitingBlockTypes = function updateExisitingBlockTypes(boardType) {
      var self = this;
      for (var i = 0; i < self.currentBoard.blocks.length; i++) {
        var aBlock = self.currentBoard.blocks[i];
        if (aBlock.blockType === 'hpi') {
          aBlock.childModel.boardType = boardType;
          if (aBlock.childModel.data) {
            aBlock.childModel.data.HpiType = boardType;
          }
        } else if (aBlock.blockType === 'plan') {
          aBlock.childModel.boardType = boardType;
          if (aBlock.childModel.data) {
            for (var p = 0; p < aBlock.childModel.data.length; p++) {
              var aPlan = aBlock.childModel.data[p];
              aPlan.PlanType = boardType;
            }
          }
        } else if (aBlock.blockType === 'exam') {
          aBlock.childModel.boardType = boardType;
          if (aBlock.childModel.data) {
            aBlock.childModel.data.TYPE = boardType;
          }
        }
      }
    };

    Home.prototype.openProcedureSearch = function openProcedureSearch() {

      var self = this;
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.popupHelper.openProcedureSearchPop('VISIT', false, function (pxs) {
        if (pxs != null) {

          for (var i = 0; i < pxs.length; i++) {
            var px = pxs[i];

            px.bodypart = self.currentBoard.visitInfo.bodypart;
            px.bodyside = self.currentBoard.visitInfo.bodyside;


            self.data.saveProcedure(px, self.currentBoard.visitInfo.patientId, self.currentBoard.providerId, self.currentBoard.visitInfo.date, function (res) {

              self.currentBoard.visitInfo.visitCode.Visit_Code_Selected = res.CptCode;

              self.data.updateVisitCode(self.currentBoard.visitInfo.visitCode, function (vcRes) {
                self.currentBoard.visitInfo.visitCode = vcRes;
              });
            });
          }
        }
      });
    };

    Home.prototype.openVisitPopup = function openVisitPopup() {
      var self = this;
      self.popupHelper.openCreateVisitPopup(self.currentBoard.visitInfo, self, function (res) {

        var visitObj = res.visitObject;
        var visitType = visitObj.visitType;
        var bps = visitObj.bodyparts;

        var bodypartsString = self.data.bodypartsToString(bps);

        var visitTypeChanged = false;
        if (self.currentBoard.visitInfo.visitCode.Visit_Type != visitType) {
          visitTypeChanged = true;
        }

        var visitProviderChanged = false;
        var originalVisitCodeProviderId = self.currentBoard.visitInfo.visitCode.ProviderID;
        if (self.currentBoard.visitInfo.visitCode.ProviderID != visitObj.providerId) {
          visitProviderChanged = true;
        }

        self.currentBoard.visitInfo.visitCode.Visit_Type = visitType;

        self.currentBoard.visitInfo.visitCode.VisitBodyParts = bodypartsString;

        self.currentBoard.visitInfo.visitCode.ProviderID = visitObj.providerId;
        self.currentBoard.providerId = visitObj.providerId;
        self.currentBoard.visitInfo.providerName = self.getProviderName(visitObj.providerId);
        self.currentBoard.visitInfo.visitCode.BillingProvider = visitObj.billingProviderId;

        self.data.updateVisitCode(self.currentBoard.visitInfo.visitCode, function (vcRes) {
          self.visitType = visitType;

          self.currentBoard.visitInfo.visitType = visitType;
          self.currentBoard.visitInfo.bodyparts = bps;

          self.currentBoard.visitInfo.isPt = false;
          if (visitType.toLowerCase() == 'pt visit' || visitType.toLowerCase() == 'ot visit') {
            self.currentBoard.visitInfo.isPt = true;
          }

          if (visitTypeChanged) {
            var blockType = 'FOLLOW';
            if (self.currentBoard.visitInfo.isPt) {
              blockType = visitType.toUpperCase();
              blockType = blockType.replace("VISIT", "");
              blockType = blockType.trimEnd();
            }
            self.currentBoard.visitInfo.typeForSave = blockType;
            self.updateExisitingBlockTypes(blockType);
          }

          var visitToUpdate = _.find(self.patientVisits, function (v) {
            return v.ObjectID == self.currentBoard.visitInfo.visitCodeId;
          });
          if (visitToUpdate) {
            visitToUpdate.Description = visitType;
            visitToUpdate.Part = bodypartsString;
            visitToUpdate.ProviderID = visitObj.providerId;
            visitToUpdate.ProviderName = self.getProviderName(visitObj.providerId);
          }

          if (visitProviderChanged) {
            self.data.saveVisitBoard(self.currentBoard, function (res) {
              var obj = {
                'NewProviderID': visitObj.providerId,
                'ExistingProviderID': originalVisitCodeProviderId,
                'ExistingPatientID': self.currentBoard.visitInfo.visitCode.PatientID,
                'ExistingDate': (0, _moment2.default)(self.currentBoard.visitInfo.visitCode.ExamDateTime).format('MM-DD-YYYY')
              };
              self.data.putWithUrlAndData('visit/changeprovider', obj, function (res) {
                self.setBlocksToLocked(self.currentBoard.blocks);

                self.loadVisit(self.currentBoard.visitInfo);
              });
            });
          } else {
            self.loadVisit(self.currentBoard.visitInfo);
          }
        });
      });
    };

    Home.prototype.setBlocksToLocked = function setBlocksToLocked(blocks) {
      for (var b = 0; b < blocks.length; b++) {
        var aBlock = blocks[b];
        aBlock.dontSave = true;
      }
    };

    return Home;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'currentProvider', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'demographicsVisible', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'displayDaysheet', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return false;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, 'examGoForms', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'examGoForms'), _class2.prototype)), _class2)) || _class);
});
define('driver.js/dist/driver.min.css',['__inject_css__','text!driver.js/dist/driver.min.css'],function(i,c){i(c,'_au_css:driver.js/dist/driver.min.css');});
;
define('text!go/home.html',[],function(){return "<template><style>.nav-link-vert{padding-top:.7rem;padding-bottom:.7rem}.dropdown-item.disabled,.dropdown-item:disabled{fill:#adb5bd!important}.prescription.disabled{fill:#adb5bd!important}#toolbar-prescription.disabled{pointer-events:none}#toolbar-prescription.disabled #toolbar-prescription-icon{fill:#adb5bd!important}.goform-menu-disabled{pointer-events:none;color:#adb5bd!important}</style><compose if.bind=\"globals.mobileView\" view=\"./mobile/home-handheld.html\" containerless></compose><div if.bind=\"!globals.mobileView\" ref=\"home\" style=\"position:absolute;top:0;bottom:0;width:100%\"><compose view-model.ref=\"sidebarRef\" view-model=\"./sidebar\" model.bind=\"$this\" containerless></compose><div if.bind=\"adminVisible\" style=\"height:100%;position:absolute;top:0;left:0;right:0;z-index:4000;background-color:#fff\"><compose view-model=\"../administration/admin\" model.bind=\"$this\" containerless></compose></div><div if.bind=\"demographicsVisible\" id=\"demo\" style=\"height:100%;position:absolute;top:0;left:71px;z-index:4000\"><compose view-model=\"./demographics\" model.bind=\"$this\" containerless></compose></div><div if.bind=\"scheduleVisible\" id=\"myschedule\" style=\"height:100%;position:absolute;top:0;left:80px;right:0;z-index:4000\"><compose view-model=\"./schedule\" containerless></compose></div><div if.bind=\"boardPickerVisible\" id=\"myboardpicker\" style=\"height:100%;position:absolute;bottom:0;left:80px;right:0;z-index:3000\"><compose view-model=\"./boardPickerContainer\" model.bind=\"boardPickerModel\" containerless></compose></div><div if.bind=\"visitPickerVisible\" style=\"height:100%;position:absolute;top:0;left:80px;right:0;z-index:3000\"><compose view-model=\"./visitPicker\" model.bind=\"patientVisits\" containerless></compose></div><div if.bind=\"workflowVisible\" style=\"height:100%;position:absolute;top:0;left:80px;right:0;z-index:4000\"><compose view-model=\"./workflow\" model.bind=\"providers\" containerless></compose></div><div id=\"mycontainer\" style=\"height:100%;position:fixed;top:0;left:80px;right:0\"><div if.bind=\"!currentBoard.editing\" ref=\"bluebar\" class=\"row\" style=\"position:relative;top:0;right:0;left:15px;z-index:3000;box-shadow:-1px -4px 5px 9px #00000052\"><div class=\"col-sm p-0\"><compose view-model=\"./blocks/visitInfo\" model.bind=\"currentBoard\" containerless></compose></div></div><div id=\"scrollcontainer\" class=\"container-fluid d-flex flex-column overflow-auto\" style=\"top:55px;position:absolute\" css=\"height: ${scrollContainerHeight}px;\"><div if.bind=\"!currentBoard.editing && !displayDaysheet\" class=\"row\"><div class=\"col-sm p-0\"><div class=\"accordion mt-2 mr-2\" id=\"accordionExample\"><div class=\"card\" style=\"box-shadow:5px 5px 4px rgba(0,0,0,.25);overflow:visible\"><div ref=\"documentTray\" class=\"card-header\" id=\"doctray\" style=\"padding:0 8px 0 8px\" data-toggle=\"collapse\" aria-controls=\"collapseOne\" click.delegate=\"doctrayClick()\"><nav class=\"navbar navbar-expand navbar-light bg-light p-0\"><div class=\"navbar-collapse collapse\" id=\"navbarSupportedContent\"><ul class=\"navbar-nav align-items-center\" style=\"flex:1\"><li class=\"nav-item\"><i click.delegate=\"openVisitPopup()\" class=\"fa ${locked ? 'fa-lock' : 'fa-calendar-o'} fa-2x nav-link-vert text-primary mr-2\" aria-hidden=\"true\"></i></li><li class=\"nav-item\"><div if.bind=\"currentBoard != undefined\" class=\"d-inline-block mr-2\"><div style=\"font-size:1.2em\"><b>${currentBoard.visitInfo.providerName}</b><i if.bind=\"showPatientAlertIcon\" class=\"fa fa-exclamation-triangle text-danger\" aria-hidden=\"true\"></i></div><div style=\"margin-top:-2px\"><span class=\"${is_visit_today ? 'text-primary' : 'text-danger'}\" style=\"padding-right:5px\">${currentBoard.visitInfo.date}</span><span class=\"text-uppercase\" style=\"font-weight:400;color:#000;padding-left:2px;padding-right:2px\">${currentBoard.visitInfo.visitType}</span></div></div></li><li if.bind=\"currentBoard.visitInfo\" class=\"nav-item\"><button type=\"button\" class=\"btn btn-outline-secondary\" click.delegate=\"openProcedureSearch()\"><span if.bind=\"currentBoard.visitInfo.visitCode.Visit_Code_Selected === null\">Code</span> <span if.bind=\"currentBoard.visitInfo.visitCode.Visit_Code_Selected !== null\">${currentBoard.visitInfo.visitCode.Visit_Code_Selected}</span><i class=\"fa fa-search pl-1\"></i></button></li><li if.bind=\"currentBoard.visitInfo.isPt\" class=\"nav-item ml-auto\"><a class=\"nav-link nav-link-vert\" href=\"#\" role=\"button\"><i class=\"fa fa-wheelchair-alt fa-2x text-primary\" click.delegate=\"openPtForPatient()\"></i></a></li><li class=\"nav-item dropdown ${currentBoard.visitInfo.isPt ? '' : 'ml-auto'}\"><a disabled.bind=\"saveQueue.isSaving\" class=\"nav-link nav-link-vert pr-0\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><div class=\"${!saveQueue.isSaving ? ' text-primary' : 'text-secondary'}\" style=\"position:relative;display:inline-block\"><i class=\"fa fa-file-o fa-2x\"></i> <i class=\"fa fa-plus\" style=\"position:absolute;left:6px;top:10px\"></i></div><div if.bind=\"documentCount > 0\" class=\"translate-middle badge rounded-pill bg-danger text-light\" style=\"position:relative;right:5px;top:-14px\"> ${documentCount} </div></a><div class=\"dropdown-menu\" style=\"overflow:scroll;max-height:700px;right:0;left:auto\" aria-labelledby=\"navbarDropdown\"><h6 class=\"dropdown-header\">${currentProvider.ProviderEntity}</h6><a repeat.for=\"p of webdocs.provider\" class=\"dropdown-item\" href=\"#\" click.delegate=\"webdocClick(p)\">${p.Description}</a><div class=\"dropdown-divider\"></div><a repeat.for=\"d of webdocs.default\" class=\"dropdown-item\" href=\"#\" click.delegate=\"webdocClick(d)\">${d.Description}</a></div></li><li class=\"nav-item dropdown\"><a disabled.bind=\"saveQueue.isSaving\" class=\"nav-link nav-link-vert\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-list-alt fa-2x ${!saveQueue.isSaving ? ' text-primary' : 'text-secondary'}\"></i></a><div class=\"dropdown-menu\" style=\"overflow:scroll;max-height:700px;right:0;left:auto;width:250px\" aria-labelledby=\"navbarDropdown\"><div repeat.for=\"f of goForms\" class=\"d-flex align-items-center px-2 py-1 text-truncate\"><div click.delegate=\"openGoForm(f)\"><i class=\"fa fa-list-alt mr-1\"></i> ${f.Description} </div><button if.bind=\"showAdminButton\" type=\"button\" class=\"btn btn-outline-primary ml-auto\" click.delegate=\"openGoFormPreferenceEditor(f)\"><i class=\"fa fa-user\"></i></button></div></div></li><li class=\"nav-item\"><a class=\"btn btn-outline-primary\" href=\"#\" click.delegate=\"toggleBoardLayout($event)\"><i class=\"fa ${currentBoard.blockLayout ? 'fa-th-large' : 'fa-bars'}\" title=\"${currentBoard.blockLayout ? 'Block View' : 'List View'}\"></i></a></li></ul></div></nav></div><div if.bind=\"showDocumentTray\" ref=\"docTray\" id=\"collapseOne\" class=\"collapse show\" aria-labelledby=\"headingOne\" data-parent=\"#accordionExample\"><div if.bind=\"displayDocumentSpinner\" class=\"position: relative;\"><i class=\"fa fa-spinner fa-pulse fa-3x fa-fw\" style=\"width:61px;position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);z-index:5000;color:#d3d3d3\"></i></div><div class=\"card-deck\" style=\"padding-left:25px;padding-bottom:10px;padding-right:10px\"><compose repeat.for=\"d of currentBoard.documents\" view-model=\"./blocks/miniFile\" model.bind=\"d\" containerless></compose></div></div></div></div></div></div><div show.bind=\"!displayDaysheet\" id=\"blockContainer\" class=\"row flex-fill mt-2\"><div class=\"col-sm p-0\"><div class=\"pack-w25\"></div><compose view-model=\"./board\" model.bind=\"currentBoard\" containerless></compose></div></div><assistance-header if.bind=\"globals.showAssistanceHeader\"></assistance-header><floating-chatbot></floating-chatbot><div show.bind=\"displayDaysheet\" id=\"ptcontainer\" class=\"row flex-fill mt-2\" style=\"margin-right:-7px;margin-bottom:10px;box-shadow:5px 5px 4px rgba(0,0,0,.25)\"><div class=\"col-sm p-0\"><compose view-model=\"../ptdaysheet/datagrid\" model.bind=\"daysheetParams\" containerless></compose></div></div></div></div></div></template>";});;
define('go/hpi/hpiIntake',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', '../home', '../../data/go/data', 'lodash', 'aurelia-event-aggregator', 'aurelia-binding', 'moment'], function (exports, _helper, _http, _aureliaFramework, _home, _data, _lodash, _aureliaEventAggregator, _aureliaBinding, _moment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.HpiIntake = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _desc, _value, _class, _descriptor, _dec, _class3, _desc2, _value2, _class4, _descriptor2, _descriptor3;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var hpiObject = function () {
    function hpiObject() {
      _classCallCheck(this, hpiObject);

      this.sections = [];
    }

    hpiObject.prototype.addSection = function addSection(s) {
      var id = this.sections.length + 1;
      s.id = id;
      this.sections.push(s);
    };

    return hpiObject;
  }();

  var Section = function () {
    function Section(description) {
      _classCallCheck(this, Section);

      this.description = description;
      this.detail = "";
      this.groups = [];
      this.selected = false;
      this.id = 0;
      this.groupIndex = 0;
      this.displayFirstGroupOnly = false;
    }

    Section.prototype.addGroup = function addGroup(group) {
      this.groups.push(group);
    };

    Section.prototype.insertGroup = function insertGroup(group, index) {
      this.groups.splice(index, 0, group);
    };

    Section.prototype.deselectGroups = function deselectGroups() {
      for (var i = 0; i < this.groups.length; i++) {
        this.groups[i].selected = false;
        this.groups[i].displayInNavigation = false;
      }
    };

    Section.prototype.select = function select() {
      this.selected = true;
      for (var g = 0; g < this.groups.length; g++) {
        var aGroup = this.groups[g];

        if (!aGroup.suppressNavigation) {
          if (this.displayFirstGroupOnly) {
            if (g == 0) {
              aGroup.displayInNavigation = true;
            } else {
              aGroup.displayInNavigation = false;
            }
          }
          if (!this.displayFirstGroupOnly) {
            aGroup.displayInNavigation = true;
          }
        }

        if (g == this.groupIndex) {
          aGroup.selected = true;
          aGroup.visible = true;
        }
      }
    };

    Section.prototype.selectGroupWithIndex = function selectGroupWithIndex(index) {
      for (var i = 0; i < this.groups.length; i++) {
        if (index == i) {
          this.groups[i].selected = true;
          this.groups[i].visible = true;
          this.groupIndex = index;
        } else {
          this.groups[i].selected = false;
          this.groups[i].visible = false;
        }
      }
    };

    Section.prototype.nextGroup = function nextGroup(displayFirstOnly) {
      var aIndex = this.groupIndex + 1;
      if (aIndex <= this.groups.length - 1) {
        this.groupIndex++;
        for (var g = 0; g < this.groups.length; g++) {

          if (!displayFirstOnly) {
            this.groups[g].displayInNavigation = true;
          } else {
            if (g == 0) {
              this.groups[g].displayInNavigation = true;
            }
          }

          if (g == this.groupIndex) {
            this.groups[g].selected = true;
            this.groups[g].visible = true;
          } else {
            this.groups[g].selected = false;
            this.groups[g].visible = false;
          }
        }
      }
    };

    Section.prototype.previousGroup = function previousGroup(displayFirstOnly) {
      var aIndex = this.groupIndex - 1;
      if (aIndex >= 0) {
        this.groupIndex--;
        for (var g = 0; g < this.groups.length; g++) {

          if (!displayFirstOnly) {
            this.groups[g].displayInNavigation = true;
          } else {
            if (g == 0) {
              this.groups[g].displayInNavigation = true;
            }
          }

          if (g == this.groupIndex) {
            this.groups[g].selected = true;
            this.groups[g].visible = true;
          } else {
            this.groups[g].selected = false;
            this.groups[g].visible = false;
          }
        }
      }
    };

    return Section;
  }();

  var Group = function () {
    function Group(description) {
      _classCallCheck(this, Group);

      this.description = description;
      this.details = "";
      this.items = [];
      this.visible = false;
      this.cols = 1;
      this.selected = false;
      this.displayInNavigation = false;
      this.suppressNavigation = false;
      this.stringBuilder = null;
      this.isAppender = false;
      this.prependingText = "";
      this.postAppendMethod = null;
    }

    Group.prototype.buildString = function buildString(intake) {

      if (this.stringBuilder != null) {
        if (this.items[0].isCalendar || this.description == 'Quality' || this.description == 'Frequency' || this.description == "Pain" || this.description == 'Swelling') {
          return this.stringBuilder(intake);
        } else {
          return this.stringBuilder(this);
        }
      }

      return "";
    };

    Group.prototype.addItem = function addItem(item) {
      this.items.push(item);
    };

    return Group;
  }();

  var item = function item(object) {
    _classCallCheck(this, item);

    this.object = object;
    this.isCheckbox = true;
    this.isCalendar = false;
    this.detail = "";
  };

  var PicklistItem = function PicklistItem(data, options, value, editing) {
    _classCallCheck(this, PicklistItem);

    this.name = data.ColumnFriendlyName;
    this.options = options;
    this.selectedOption = value ? value : null;
    this.data = data;
    this.visible = value ? true : false;
    this.editing = editing ? editing : false;
  };

  var HistoryButton = (_class = function () {
    function HistoryButton(name, data, visible, editing) {
      _classCallCheck(this, HistoryButton);

      _initDefineProp(this, 'selected', _descriptor, this);

      this.name = name;
      this.data = data;
      this.selected = false;
      this.visible = visible == undefined ? false : visible;
      this.editing = editing ? editing : false;
      this.callback = null;
      this.exclusive = false;
      this.exclusiveText = "";
      this.makeLowercase = true;
    }

    HistoryButton.prototype.select = function select(item, intake, section, group) {
      this.selected = this.selected ? false : true;
      if (this.callback != null) {
        this.callback();
      }

      intake.buildHpiText();
    };

    HistoryButton.prototype.selectedChanged = function selectedChanged(newvalue, oldvalue) {
      var v = newvalue;
    };

    return HistoryButton;
  }(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'selected', [_aureliaBinding.observable], {
    enumerable: true,
    initializer: null
  })), _class);
  var HpiIntake = exports.HpiIntake = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home, _aureliaEventAggregator.EventAggregator), _dec(_class3 = (_class4 = function () {
    HpiIntake.prototype.onsetdateChanged = function onsetdateChanged(newvalue, oldvalue) {
      this.buildHpiText();
    };

    function HpiIntake(helper, http, Data, Home, EventAggregator) {
      _classCallCheck(this, HpiIntake);

      _initDefineProp(this, 'onsetdatepicker', _descriptor2, this);

      _initDefineProp(this, 'onsetdate', _descriptor3, this);

      this.hpiObject = new hpiObject();
      this.currentSection = null;
      this.sectionIndex = 0;
      this.nextButtonDescription = 'Next';
      this.hpitext = "";
      this.initialHpiText = "";

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
      this.event = EventAggregator;
    }

    HpiIntake.prototype.activate = function activate(model) {
      var self = this;
      self.parent = model;

      self.initialHpiText = model.hpiText;
      self.hpitext = model.hpiText;

      self.patient = self.parent.home.patient.data;
    };

    HpiIntake.prototype.attached = function attached() {
      var self = this;

      $('ux-dialog-body').css('padding-bottom', 0);

      var totalPopupContent = self.hpiHeader.clientHeight;

      totalPopupContent += 18;

      var tBodyHeight = self.intakebody.clientHeight;
      var footerHeight = self.footer.clientHeight;
      totalPopupContent += tBodyHeight;
      totalPopupContent += footerHeight;

      var popupHeight = $('ux-dialog').height();

      var heightToAdd = popupHeight - totalPopupContent;

      self.bodyHeight = tBodyHeight + heightToAdd;

      self.setupHpiObject();
    };

    HpiIntake.prototype.getCommaAndWithItems = function getCommaAndWithItems(group) {
      var str = "";

      for (var i = 0; i < group.items.length; i++) {
        var itm = group.items[i];
        if (itm.object != undefined && itm.object.selected) {
          if (itm.object.exclusive) {
            str = itm.object.exclusiveText;
            return str;
          }

          var itemName = itm.object.makeLowercase ? itm.object.name.toLowerCase() : itm.object.name;

          str = str.concat(itemName, ", ");
        }
      }

      str = str.trim();
      str = str.substr(0, str.length - 1);

      var lastCommaIndex = str.lastIndexOf(',');
      if (lastCommaIndex > -1) {
        var startStr = str.substr(0, lastCommaIndex);
        var endStr = str.substr(lastCommaIndex + 2, str.length);
        str = startStr + ' and ' + endStr;
      }
      return str;
    };

    HpiIntake.prototype.checkForExclusivityInGroup = function checkForExclusivityInGroup(group) {
      return _.find(group.items, function (i) {
        return i.object.exclusive && i.object.selected;
      }) ? true : false;
    };

    HpiIntake.prototype.buildStringWithGroup = function buildStringWithGroup(group) {
      var str = this.getCommaAndWithItems(group);
      if (str.length > 0) {
        var final = "";
        var isExclusive = this.checkForExclusivityInGroup(group);

        if (isExclusive) {
          return str;
        } else if (group.prependingText.length > 0) {
          final = group.prependingText;
        }

        return final + this.getCommaAndWithItems(group) + ". ";
      }
      return "";
    };

    HpiIntake.prototype.buildHpiText = function buildHpiText() {
      var self = this;
      self.hpitext = "";

      self.hpitext = self.getPatientInfo();

      for (var s = 0; s < self.hpiObject.sections.length; s++) {
        var section = self.hpiObject.sections[s];
        for (var g = 0; g < section.groups.length; g++) {
          var group = section.groups[g];
          var txtString = group.buildString(self);
          if (group.isAppender && txtString.length > 0) {
            self.hpitext = self.hpitext.substr(0, self.hpitext.length - 2) + " ";
          }

          if (group.postAppendMethod != null) {
            var str = group.postAppendMethod(self, txtString);
            if (str.length > 0) {
              self.hpitext = str;
            }
          } else {
            self.hpitext += txtString;
          }
        }
      }

      self.hpitext = self.initialHpiText.trimEnd() + " " + self.hpitext;

      setTimeout(self.updateTextareaScroll.bind(self), 100);
    };

    HpiIntake.prototype.buildHpiText2 = function buildHpiText2() {
      var self = this;
      self.hpitext = "";

      self.hpitext = self.getPatientInfo();

      for (var s = 0; s < self.hpiObject.sections.length; s++) {
        var section = self.hpiObject.sections[s];
        for (var g = 0; g < section.groups.length; g++) {
          var group = section.groups[g];
          var txtString = group.buildString(self);
          if (group.isAppender && txtString.length > 0) {
            self.hpitext = self.hpitext.substr(0, self.hpitext.length - 2) + " ";
          }

          if (group.postAppendMethod != null) {
            var str = group.postAppendMethod(self, txtString);
            if (str.length > 0) {
              self.hpitext = str;
            }
          } else {
            self.hpitext += txtString;
          }
        }
      }
      setTimeout(self.updateTextareaScroll.bind(self), 100);
    };

    HpiIntake.prototype.buildOnsetString = function buildOnsetString(group) {
      if (group.items[0].object.selected == true) {
        return 'The onset was sudden with injury. ';
      } else if (group.items[1].object.selected == true) {
        return 'The onset was gradual without injury. ';
      } else {
        return '';
      }
    };

    HpiIntake.prototype.buildSwellingString = function buildSwellingString(intake) {
      var bpSection = _.find(intake.hpiObject.sections, function (s) {
        return s.description == 'Body Part(s)';
      });
      var bpGroup = bpSection.groups[0];
      var bpStr = intake.getCommaAndWithItems(bpGroup).toLowerCase();

      var finalStr = "";

      if (bpStr.length > 0) {
        finalStr = "The " + bpStr + " ";
      } else {
        finalStr = "The injury ";
      }

      var swellingSec = _.find(intake.hpiObject.sections, function (s) {
        return s.description == 'Swelling';
      });
      var swellGrp = swellingSec.groups[0];
      var swellStr = "";
      for (var i = 0; i < swellGrp.items.length; i++) {
        var itm = swellGrp.items[i];
        if (itm.object != undefined && itm.object.selected) {
          if (itm.object.name == 'No Swelling') {
            swellStr += 'did not swell. ';
            break;
          } else {
            swellStr += "swelled " + itm.object.name.toLowerCase() + ". ";
            break;
          }
        }
      }

      if (swellStr.length > 0) {
        finalStr += swellStr;
        return finalStr;
      }

      return "";
    };

    HpiIntake.prototype.buildSymptomString = function buildSymptomString(intake) {
      var final = ' who presents with complaints of ';
      var painSection = _.find(intake.hpiObject.sections, function (s) {
        return s.description == 'Pain';
      });
      var group = painSection.groups[0];
      var str = intake.getCommaAndWithItems(group).toLowerCase();
      if (str.length > 0) {
        var bpSection = _.find(intake.hpiObject.sections, function (s) {
          return s.description == 'Body Part(s)';
        });
        var bpGroup = bpSection.groups[0];
        var bpStr = intake.getCommaAndWithItems(bpGroup).toLowerCase();
        if (bpStr.length > 0) {
          final += str + " pain in the " + bpStr;
        } else {
          final += str;
        }
        return final;
      } else {
        return '';
      }
    };

    HpiIntake.prototype.symptomsPostAppend = function symptomsPostAppend(intake, textToAdd) {
      var txt = intake.hpitext;

      if (textToAdd.length > 0) {
        var sex = 'female';
        if (intake.patient.Sex.toUpperCase() == 'M' || intake.patient.Sex.toUpperCase() == 'MALE') {
          sex = 'male';
        }
        var indexOfSex = txt.indexOf(sex);
        var firstHalfStr = txt.substr(0, indexOfSex + sex.length);
        var lastHalfStr = txt.substr(indexOfSex + sex.length, txt.length);
        return firstHalfStr + textToAdd + lastHalfStr;
      } else {
        return "";
      }
    };

    HpiIntake.prototype.buildFrequencyString = function buildFrequencyString(intake) {
      var painSection = _.find(intake.hpiObject.sections, function (s) {
        return s.description == 'Pain';
      });
      var freqGroup = _.find(painSection.groups, function (g) {
        return g.description == 'Frequency';
      });

      var str = "";

      for (var i = 0; i < freqGroup.items.length; i++) {
        var itm = freqGroup.items[i];
        if (itm.object != undefined && itm.object.selected) {
          str = str.concat(itm.object.name.toLowerCase(), "ly, ");
        }
      }

      str = str.trim();
      str = str.substr(0, str.length - 1);

      var lastCommaIndex = str.lastIndexOf(',');
      if (lastCommaIndex > -1) {
        var startStr = str.substr(0, lastCommaIndex);
        var endStr = str.substr(lastCommaIndex + 2, str.length);
        str = startStr + ' and ' + endStr;
      }

      if (str.length > 0) {
        var bpSection = _.find(intake.hpiObject.sections, function (s) {
          return s.description == 'Body Part(s)';
        });
        var bpGroup = bpSection.groups[0];
        var bpStr = intake.getCommaAndWithItems(bpGroup).toLowerCase();
        if (bpStr.length > 0) {
          return ' that occurs ' + str + ". ";
        } else {
          return 'The pain occurs ' + str + ". ";
        }
      } else {
        return "";
      }
    };

    HpiIntake.prototype.frequencyPostAppend = function frequencyPostAppend(intake, textToAdd) {
      var txt = intake.hpitext;

      if (textToAdd.length > 0) {
        var bpSection = _.find(intake.hpiObject.sections, function (s) {
          return s.description == 'Body Part(s)';
        });
        var bpGroup = bpSection.groups[0];

        var bpIndex = -1;
        for (var i = 0; i < bpGroup.items.length; i++) {
          var itm = bpGroup.items[i];
          if (itm.object.selected == true) {
            bpIndex = i;
          }
        }
        if (bpIndex > -1) {
          var bodypart = bpGroup.items[bpIndex].object.name.toLowerCase();
          var indexOfBp = txt.indexOf(bodypart);
          var firstHalfStr = txt.substr(0, indexOfBp + bodypart.length);
          var lastHalfStr = txt.substr(indexOfBp + bodypart.length, txt.length);

          textToAdd = textToAdd.substr(0, textToAdd.length - 2);
          return firstHalfStr + textToAdd + lastHalfStr;
        } else {
          return txt + textToAdd;
        }
      } else {
        return "";
      }
    };

    HpiIntake.prototype.buildPrevTreatmentString = function buildPrevTreatmentString(group) {
      var str = "";
      for (var i = 0; i < group.items.length; i++) {
        var itm = group.items[i];
        if (itm.object != undefined && itm.object.selected) {
          if (itm.object.name == 'None') {
            return "The patient has tried no previous treatments. ";
          } else {
            str = str.concat(itm.object.name.toLowerCase(), ", ");
          }
        }
      }

      str = str.trim();
      str = str.substr(0, str.length - 1);

      var lastCommaIndex = str.lastIndexOf(',');
      if (lastCommaIndex > -1) {
        var startStr = str.substr(0, lastCommaIndex);
        var endStr = str.substr(lastCommaIndex + 2, str.length);
        str = startStr + ' and ' + endStr;
      }

      if (str.length > 0) {
        return "The patient has tried " + str + ". ";
      }
      return str;
    };

    HpiIntake.prototype.prevTreatmentResultPostAppend = function prevTreatmentResultPostAppend(intake, textToAdd) {
      var txt = intake.hpitext;
      if (textToAdd.length > 0) {
        var bpSection = _.find(intake.hpiObject.sections, function (s) {
          return s.description == 'Previous Treatments';
        });
        var bpGroup = bpSection.groups[0];

        var tIndex = 0;
        for (var i = 0; i < bpGroup.items.length; i++) {
          var itm = bpGroup.items[i];
          if (itm.object.selected == true) {
            tIndex = i;
          }
        }
        if (tIndex > 0) {
          var treatment = bpGroup.items[tIndex].object.name.toLowerCase();
          var indexOfTreat = txt.indexOf(treatment);
          var firstHalfStr = txt.substr(0, indexOfTreat + treatment.length);
          var lastHalfStr = txt.substr(indexOfTreat + treatment.length, txt.length);

          textToAdd = textToAdd.substr(0, textToAdd.length - 2);
          return firstHalfStr + " with " + textToAdd + lastHalfStr;
        } else {}
      } else {
        return "";
      }
    };

    HpiIntake.prototype.severityPostAppend = function severityPostAppend(intake, textToAdd) {

      var txt = intake.hpitext;

      if (textToAdd.length > 0) {
        var painSection = _.find(intake.hpiObject.sections, function (s) {
          return s.description == 'Pain';
        });
        var painGrp = _.find(painSection.groups, function (s) {
          return s.description == 'Quality';
        });

        var tIndex = -1;
        for (var i = 0; i < painGrp.items.length; i++) {
          var itm = painGrp.items[i];
          if (itm.object.selected == true) {
            tIndex = i;
            break;
          }
        }
        if (tIndex > -1) {
          var quality = painGrp.items[tIndex].object.name.toLowerCase();
          var indexOfQuality = txt.indexOf(quality);
          var firstHalfStr = txt.substr(0, indexOfQuality);
          var lastHalfStr = txt.substr(indexOfQuality, txt.length);

          textToAdd = textToAdd.substr(0, textToAdd.length - 2);
          return firstHalfStr + textToAdd + " " + lastHalfStr;
        } else {
          var final = ' who presents with complaints of ';

          var str = textToAdd.substr(0, textToAdd.length - 2);

          var bpSection = _.find(intake.hpiObject.sections, function (s) {
            return s.description == 'Body Part(s)';
          });
          var bpGroup = bpSection.groups[0];
          var bpStr = intake.getCommaAndWithItems(bpGroup).toLowerCase();
          if (bpStr.length > 0) {
            final += str + " pain in the " + bpStr;
          }

          var sex = 'female';
          if (intake.patient.Sex.toUpperCase() == 'M' || intake.patient.Sex.toUpperCase() == 'MALE') {
            sex = 'male';
          }
          var indexOfSex = txt.indexOf(sex);
          var firstHalfSexStr = txt.substr(0, indexOfSex + sex.length);
          var lastHalfSexStr = txt.substr(indexOfSex + sex.length, txt.length);
          return firstHalfSexStr + final + lastHalfSexStr;
        }
      } else {
        return "";
      }
    };

    HpiIntake.prototype.buildInjuredAtString = function buildInjuredAtString(group) {
      for (var i = 0; i < group.items.length; i++) {
        if (group.items[i].object.selected == true) {
          var str = 'The injury occurred ';
          var _item = group.items[i].object;
          if (_item.name == 'Athletics') {
            str += 'during ' + _item.name.toLowerCase() + '. ';

            if (group.parentSection.groups[3].description != 'Sports') {
              group.parentSection.insertGroup(group.sportsGroup, 3);
              group.parentSection.nextGroup(false);
            }
          } else if (_item.name == 'Motor Vehicle Accident') {
            str += 'in a ' + _item.name.toLowerCase() + '. ';
          } else {
            str += 'at ' + _item.name.toLowerCase() + '. ';
          }
          return str;
        }
      }
      return "";
    };

    HpiIntake.prototype.athleticsPostAppend = function athleticsPostAppend(intake, textToAdd) {
      var txt = intake.hpitext;

      if (textToAdd.length > 0) {
        var athleticsStr = 'athletics';
        var indexOfAthletics = txt.indexOf(athleticsStr);
        var firstHalfStr = txt.substr(0, indexOfAthletics);
        var lastHalfStr = txt.substr(indexOfAthletics + athleticsStr.length, txt.length);

        textToAdd = textToAdd.substr(0, textToAdd.length - 2);
        return firstHalfStr + textToAdd + lastHalfStr;
      } else {
        return "";
      }
    };

    HpiIntake.prototype.buildOnsetDateString = function buildOnsetDateString(o) {
      return o.onsetdate == undefined ? '' : 'which occured on ' + o.onsetdate + '. ';
    };

    HpiIntake.prototype.buildEmptyString = function buildEmptyString() {
      return "";
    };

    HpiIntake.prototype.getPatientInfo = function getPatientInfo() {
      var self = this;

      var dob = self.patient.DOB;
      var age = (0, _moment2.default)().diff(self.helper.getDateWithFormat(dob, "MM-DD-YYYY"), 'years');
      var sex = 'male';
      if (self.patient.Sex.toUpperCase() == 'F' || self.patient.Sex.toUpperCase() == 'FEMALE') {
        sex = 'female';
      }
      return 'The patient is a ' + age + ' year old ' + sex + '. ';
    };

    HpiIntake.prototype.buildSportsGroup = function buildSportsGroup(callback) {
      var self = this;
      var onsetAthleticsGroup = new Group('Sports');
      onsetAthleticsGroup.cols = 2;
      onsetAthleticsGroup.visible = true;
      onsetAthleticsGroup.displayInNavigation = true;
      onsetAthleticsGroup.detail = 'What sport was being played?';
      onsetAthleticsGroup.stringBuilder = self.buildStringWithGroup.bind(self, onsetAthleticsGroup);
      onsetAthleticsGroup.postAppendMethod = self.athleticsPostAppend;
      self.data.getListWithProviderId('HPI', 0, function (res) {
        var sports = _.filter(res, function (s) {
          return s.Description2 == 'Sport';
        });
        for (var i = 0; i < sports.length; i++) {
          var aButton = new HistoryButton(sports[i].Description1, null, true, true);
          onsetAthleticsGroup.addItem(new item(aButton));
        }

        callback(onsetAthleticsGroup);
      });
    };

    HpiIntake.prototype.setupHpiObject = function setupHpiObject() {
      var self = this;

      var bodyPartSection = new Section('Body Part(s)');
      bodyPartSection.detail = 'What Body Part(s) are involved?';

      var bodypartPartGroup = new Group('Body Part(s)');
      bodypartPartGroup.cols = 2;
      bodypartPartGroup.selected = true;
      bodypartPartGroup.visible = true;
      bodypartPartGroup.stringBuilder = self.buildEmptyString;
      bodypartPartGroup.addItem(new item(new HistoryButton('Left Hip', null, true, true)));
      bodypartPartGroup.addItem(new item(new HistoryButton('Right Hip', null, true, true)));

      bodypartPartGroup.addItem(new item(new HistoryButton('Left Knee', null, true, true)));
      bodypartPartGroup.addItem(new item(new HistoryButton('Right Knee', null, true, true)));

      bodypartPartGroup.addItem(new item(new HistoryButton('Left Ankle/Foot', null, true, true)));
      bodypartPartGroup.addItem(new item(new HistoryButton('Right Ankle/Foot', null, true, true)));

      bodypartPartGroup.addItem(new item(new HistoryButton('Left Hand/Wrist', null, true, true)));
      bodypartPartGroup.addItem(new item(new HistoryButton('Right Hand/Wrist', null, true, true)));

      bodypartPartGroup.addItem(new item(new HistoryButton('Left Elbow', null, true, true)));
      bodypartPartGroup.addItem(new item(new HistoryButton('Right Elbow', null, true, true)));

      bodypartPartGroup.addItem(new item(new HistoryButton('Left Shoulder', null, true, true)));
      bodypartPartGroup.addItem(new item(new HistoryButton('Right Shoulder', null, true, true)));

      bodypartPartGroup.addItem(new item(new HistoryButton('Back/Neck', null, true, true)));
      bodyPartSection.addGroup(bodypartPartGroup);

      self.hpiObject.addSection(bodyPartSection);

      self.currentSection = bodyPartSection;
      self.currentSection.selected = true;

      var onsetSection = new Section('Onset');
      onsetSection.detail = 'Was there an Injury?';
      onsetSection.displayFirstGroupOnly = true;
      var onsetGroup = new Group('Injury?');
      onsetGroup.stringBuilder = self.buildOnsetString;
      onsetGroup.cols = 2;
      var onsetYesButton = new HistoryButton('YES', null, true, true);
      onsetYesButton.callback = self.toggleOnsetDateGroup.bind(self, onsetYesButton);
      var onsetNoButton = new HistoryButton('NO', null, true, true);
      onsetNoButton.callback = self.toggleOnsetDateGroup.bind(self, onsetNoButton);
      onsetGroup.addItem(new item(onsetYesButton));
      onsetGroup.addItem(new item(onsetNoButton));
      onsetSection.addGroup(onsetGroup);

      var onsetDateGroup = new Group('When?');
      onsetDateGroup.detail = 'When did the injury Happen?';
      onsetDateGroup.visible = false;
      onsetDateGroup.stringBuilder = self.buildOnsetDateString;
      onsetDateGroup.isAppender = true;
      var calItem = new item();
      calItem.isCheckbox = false;
      calItem.isCalendar = true;
      onsetDateGroup.addItem(calItem);
      onsetSection.addGroup(onsetDateGroup);
      self.hpiObject.addSection(onsetSection);

      var onsetWhereGroup = new Group('Where?');
      onsetWhereGroup.cols = 2;
      onsetWhereGroup.visible = false;
      onsetWhereGroup.detail = 'Where did the injury happen?';
      onsetWhereGroup.stringBuilder = self.buildInjuredAtString;
      var onsetWorkButton = new HistoryButton('Work', null, true, true);
      var onsetHomeButton = new HistoryButton('Home', null, true, true);
      var onsetAthleticsButton = new HistoryButton('Athletics', null, true, true);
      var onsetMvaButton = new HistoryButton('Motor Vehicle Accident', null, true, true);
      onsetWhereGroup.addItem(new item(onsetWorkButton));
      onsetWhereGroup.addItem(new item(onsetHomeButton));
      onsetWhereGroup.addItem(new item(onsetAthleticsButton));
      onsetWhereGroup.addItem(new item(onsetMvaButton));
      onsetSection.addGroup(onsetWhereGroup);

      onsetWhereGroup.parentSection = onsetSection;
      self.buildSportsGroup(function (res) {
        onsetWhereGroup.sportsGroup = res;
      });

      var onsetHowGroup = new Group('How?');
      onsetHowGroup.cols = 2;
      onsetHowGroup.visible = false;
      onsetHowGroup.detail = 'How did the injury happen?';
      onsetHowGroup.prependingText = 'The injury was caused by ';
      onsetHowGroup.stringBuilder = self.buildStringWithGroup.bind(self, onsetHowGroup);
      var onsetHowTwistingButton = new HistoryButton('Twisting Motion', null, true, true);
      var onsetHowRunnningButton = new HistoryButton('Running', null, true, true);
      var onsetHowJumpingButton = new HistoryButton('Jumping', null, true, true);
      var onsetHowDirectButton = new HistoryButton('Direct Blow', null, true, true);
      var onsetHowFallButton = new HistoryButton('Fall', null, true, true);
      var onsetHowFallArmExtendedButton = new HistoryButton('Fall, Arm Extended', null, true, true);
      var onsetHowLiftingOverheadButton = new HistoryButton('Lifting Overhead', null, true, true);
      var onsetHowLiftingWeightButton = new HistoryButton('Lifting Weight', null, true, true);
      var onsetHowBendingButton = new HistoryButton('Bending', null, true, true);
      var onsetHowReachingButton = new HistoryButton('Reaching', null, true, true);
      var onsetHowThrowingButton = new HistoryButton('Throwing', null, true, true);
      onsetHowGroup.addItem(new item(onsetHowTwistingButton));
      onsetHowGroup.addItem(new item(onsetHowRunnningButton));
      onsetHowGroup.addItem(new item(onsetHowJumpingButton));
      onsetHowGroup.addItem(new item(onsetHowDirectButton));
      onsetHowGroup.addItem(new item(onsetHowFallButton));
      onsetHowGroup.addItem(new item(onsetHowFallArmExtendedButton));
      onsetHowGroup.addItem(new item(onsetHowLiftingOverheadButton));
      onsetHowGroup.addItem(new item(onsetHowLiftingWeightButton));
      onsetHowGroup.addItem(new item(onsetHowBendingButton));
      onsetHowGroup.addItem(new item(onsetHowReachingButton));
      onsetHowGroup.addItem(new item(onsetHowThrowingButton));
      onsetSection.addGroup(onsetHowGroup);

      var painQualitySection = new Section('Pain');
      painQualitySection.detail = 'Tell us about your Pain...';
      painQualitySection.displayFirstGroupOnly = false;
      var painQualityGroup = new Group('Quality');
      painQualityGroup.cols = 2;
      painQualityGroup.detail = 'Quality of Pain?';
      painQualityGroup.stringBuilder = self.buildSymptomString;
      painQualityGroup.postAppendMethod = self.symptomsPostAppend;
      var painQualityNone = new HistoryButton('None', null, true, true);
      var painQualitySharp = new HistoryButton('Sharp', null, true, true);
      var painQualityShooting = new HistoryButton('Shooting', null, true, true);
      var painQualityStabbing = new HistoryButton('Stabbing', null, true, true);
      var painQualityThrobbing = new HistoryButton('Throbbing', null, true, true);
      var painQualityElectric = new HistoryButton('Electric', null, true, true);
      var painQualityBuring = new HistoryButton('Burning', null, true, true);
      var painQualityAching = new HistoryButton('Aching', null, true, true);
      var painQualityDeep = new HistoryButton('Deep', null, true, true);
      var painQualityDull = new HistoryButton('Dull', null, true, true);
      painQualityGroup.addItem(new item(painQualityNone));
      painQualityGroup.addItem(new item(painQualitySharp));
      painQualityGroup.addItem(new item(painQualityShooting));
      painQualityGroup.addItem(new item(painQualityStabbing));
      painQualityGroup.addItem(new item(painQualityThrobbing));
      painQualityGroup.addItem(new item(painQualityElectric));
      painQualityGroup.addItem(new item(painQualityBuring));
      painQualityGroup.addItem(new item(painQualityAching));
      painQualityGroup.addItem(new item(painQualityDeep));
      painQualityGroup.addItem(new item(painQualityDull));
      painQualitySection.addGroup(painQualityGroup);
      self.hpiObject.addSection(painQualitySection);

      var painSeverityGroup = new Group('Severity');
      painSeverityGroup.detail = 'Severity of Pain?';
      painSeverityGroup.cols = 1;
      painSeverityGroup.stringBuilder = self.buildStringWithGroup.bind(self, painSeverityGroup);
      painSeverityGroup.postAppendMethod = self.severityPostAppend;
      var painSeverityMild = new HistoryButton('Mild', null, true, true);
      var painSeverityMod = new HistoryButton('Moderate', null, true, true);
      var painSeveritySevere = new HistoryButton('Severe', null, true, true);
      painSeverityGroup.addItem(new item(painSeverityMild));
      painSeverityGroup.addItem(new item(painSeverityMod));
      painSeverityGroup.addItem(new item(painSeveritySevere));
      painQualitySection.addGroup(painSeverityGroup);

      var painFrequencyGroup = new Group('Frequency');
      painFrequencyGroup.detail = 'Frequency of Pain?';
      painFrequencyGroup.cols = 1;
      painFrequencyGroup.stringBuilder = self.buildFrequencyString;
      painFrequencyGroup.postAppendMethod = self.frequencyPostAppend;
      var painFreqConstant = new HistoryButton('Constant', null, true, true);
      var painFreqFrequent = new HistoryButton('Frequent', null, true, true);
      var painFreqOccasional = new HistoryButton('Occasional', null, true, true);
      painFrequencyGroup.addItem(new item(painFreqConstant));
      painFrequencyGroup.addItem(new item(painFreqFrequent));
      painFrequencyGroup.addItem(new item(painFreqOccasional));
      painQualitySection.addGroup(painFrequencyGroup);

      var painBetterGroup = new Group('Makes Better?');
      painBetterGroup.detail = 'What makes pain better?';
      painBetterGroup.cols = 2;
      painBetterGroup.prependingText = "The patient's symptoms are relieved by ";
      painBetterGroup.stringBuilder = self.buildStringWithGroup.bind(self, painBetterGroup);
      var painBetterRest = new HistoryButton('Rest', null, true, true);
      var painBetterActivity = new HistoryButton('Activity', null, true, true);
      var painBetterHeat = new HistoryButton('Heat', null, true, true);
      var painBetterIce = new HistoryButton('Ice', null, true, true);
      var painBetterElevation = new HistoryButton('Elevation', null, true, true);
      var painBetterMeds = new HistoryButton('Medication', null, true, true);
      var painBetterCompression = new HistoryButton('Compression', null, true, true);
      var painBetterNo = new HistoryButton('No Relief', null, true, true);
      painBetterNo.exclusive = true;
      painBetterNo.exclusiveText = "The patient reports no relief from symptoms.";

      painBetterGroup.addItem(new item(painBetterRest));
      painBetterGroup.addItem(new item(painBetterActivity));
      painBetterGroup.addItem(new item(painBetterHeat));
      painBetterGroup.addItem(new item(painBetterIce));
      painBetterGroup.addItem(new item(painBetterElevation));
      painBetterGroup.addItem(new item(painBetterMeds));
      painBetterGroup.addItem(new item(painBetterCompression));
      painBetterGroup.addItem(new item(painBetterNo));
      painQualitySection.addGroup(painBetterGroup);

      var painWorseGroup = new Group('Makes Worse?');
      painWorseGroup.detail = 'What makes pain worse?';
      painWorseGroup.cols = 2;
      painWorseGroup.prependingText = "The patient's symptoms are aggravated by ";
      painWorseGroup.stringBuilder = self.buildStringWithGroup.bind(self, painWorseGroup);
      var painWorseDailyactivities = new HistoryButton('Daily activities', null, true, true);
      var painWorseStairs = new HistoryButton('Stairs', null, true, true);
      var painWorsebending = new HistoryButton('Bending', null, true, true);
      var painWorseUpStairs = new HistoryButton('Going up stairs', null, true, true);
      var painWorseDownStairs = new HistoryButton('Going down stairs', null, true, true);
      var painWorsekneeling = new HistoryButton('Kneeling', null, true, true);
      var painWorsesitting = new HistoryButton('Sitting', null, true, true);
      var painWorsesquatting = new HistoryButton('Squatting', null, true, true);
      var painWorsestanding = new HistoryButton('Standing', null, true, true);
      var painWorsewalking = new HistoryButton('Walking', null, true, true);
      var painWorserunning = new HistoryButton('Running', null, true, true);
      var painWorsethrowing = new HistoryButton('Throwing', null, true, true);
      var painWorselifting = new HistoryButton('Lifting Overhead', null, true, true);
      painWorseGroup.addItem(new item(painWorseDailyactivities));
      painWorseGroup.addItem(new item(painWorseStairs));
      painWorseGroup.addItem(new item(painWorsebending));
      painWorseGroup.addItem(new item(painWorseUpStairs));
      painWorseGroup.addItem(new item(painWorseDownStairs));
      painWorseGroup.addItem(new item(painWorsekneeling));
      painWorseGroup.addItem(new item(painWorsesitting));
      painWorseGroup.addItem(new item(painWorsesquatting));
      painWorseGroup.addItem(new item(painWorsestanding));
      painWorseGroup.addItem(new item(painWorsewalking));
      painWorseGroup.addItem(new item(painWorserunning));
      painWorseGroup.addItem(new item(painWorsethrowing));
      painWorseGroup.addItem(new item(painWorselifting));
      painQualitySection.addGroup(painWorseGroup);

      var symptomsSection = new Section('Symptoms');
      symptomsSection.detail = 'Tell us about your Symptoms...';
      symptomsSection.displayFirstGroupOnly = false;
      var symptomsGroup = new Group('Symptoms');
      symptomsGroup.cols = 2;

      symptomsGroup.suppressNavigation = true;
      symptomsGroup.prependingText = "Patient complains of ";
      symptomsGroup.stringBuilder = self.buildStringWithGroup.bind(self, symptomsGroup);
      var symptomsBruising = new HistoryButton('Bruising', null, true, true);
      var symptomsTingling = new HistoryButton('Tingling', null, true, true);
      var symptomsNumbness = new HistoryButton('Numbness', null, true, true);
      var symptomsPopping = new HistoryButton('Popping', null, true, true);
      var symptomsGrinding = new HistoryButton('Grinding', null, true, true);
      var symptomsNoWeight = new HistoryButton('Can’t Bear weight', null, true, true);
      var symptomsLossMotion = new HistoryButton('Loss of motion', null, true, true);
      symptomsGroup.addItem(new item(symptomsBruising));
      symptomsGroup.addItem(new item(symptomsTingling));
      symptomsGroup.addItem(new item(symptomsNumbness));
      symptomsGroup.addItem(new item(symptomsPopping));
      symptomsGroup.addItem(new item(symptomsGrinding));
      symptomsGroup.addItem(new item(symptomsNoWeight));
      symptomsGroup.addItem(new item(symptomsLossMotion));
      symptomsSection.addGroup(symptomsGroup);
      self.hpiObject.addSection(symptomsSection);

      var swellingSection = new Section('Swelling');
      swellingSection.detail = 'Swelling?';
      swellingSection.displayFirstGroupOnly = false;
      var swellingGroup = new Group('Swelling');
      swellingGroup.cols = 1;

      swellingGroup.suppressNavigation = true;
      swellingGroup.stringBuilder = self.buildSwellingString;
      var swellingNo = new HistoryButton('No Swelling', null, true, true);
      var swellingImmediatly = new HistoryButton('Immediately', null, true, true);
      var swellingWithinHour = new HistoryButton('Within a few hours', null, true, true);
      var swellingNextDay = new HistoryButton('The next day', null, true, true);
      swellingGroup.addItem(new item(swellingNo));
      swellingGroup.addItem(new item(swellingImmediatly));
      swellingGroup.addItem(new item(swellingWithinHour));
      swellingGroup.addItem(new item(swellingNextDay));
      swellingSection.addGroup(swellingGroup);
      self.hpiObject.addSection(swellingSection);

      var prevTreatmentSection = new Section('Previous Treatments');
      prevTreatmentSection.displayFirstGroupOnly = true;
      prevTreatmentSection.detail = 'Previous Treatments?';
      var previousTreatmentGroup = new Group('Previous');
      previousTreatmentGroup.cols = 1;

      previousTreatmentGroup.suppressNavigation = true;
      previousTreatmentGroup.prependingText = "The patient has tried ";
      previousTreatmentGroup.stringBuilder = self.buildPrevTreatmentString.bind(self, previousTreatmentGroup);
      var prevTreatNone = new HistoryButton('None', null, true, true);
      prevTreatNone.callback = self.showPreviousTreatmentResults.bind(self, prevTreatNone);
      var prevTreatPhysTher = new HistoryButton('Physical Therapy', null, true, true);
      prevTreatPhysTher.callback = self.showPreviousTreatmentResults.bind(self, prevTreatPhysTher);
      var prevTreatHomeEx = new HistoryButton('Home Exercise', null, true, true);
      prevTreatHomeEx.callback = self.showPreviousTreatmentResults.bind(self, prevTreatHomeEx);
      var prevTreatInject = new HistoryButton('Injections', null, true, true);
      prevTreatInject.callback = self.showPreviousTreatmentResults.bind(self, prevTreatInject);
      var prevTreatSplint = new HistoryButton('Splinting', null, true, true);
      prevTreatSplint.callback = self.showPreviousTreatmentResults.bind(self, prevTreatSplint);
      var prevTreatTENS = new HistoryButton('TENS', null, true, true);
      prevTreatTENS.callback = self.showPreviousTreatmentResults.bind(self, prevTreatTENS);
      var prevTreatIceHeat = new HistoryButton('Ice/Heat', null, true, true);
      prevTreatIceHeat.callback = self.showPreviousTreatmentResults.bind(self, prevTreatIceHeat);
      previousTreatmentGroup.addItem(new item(prevTreatNone));
      previousTreatmentGroup.addItem(new item(prevTreatPhysTher));
      previousTreatmentGroup.addItem(new item(prevTreatHomeEx));
      previousTreatmentGroup.addItem(new item(prevTreatInject));
      previousTreatmentGroup.addItem(new item(prevTreatSplint));
      previousTreatmentGroup.addItem(new item(prevTreatTENS));
      previousTreatmentGroup.addItem(new item(prevTreatIceHeat));
      prevTreatmentSection.addGroup(previousTreatmentGroup);
      self.hpiObject.addSection(prevTreatmentSection);

      var improvementGroup = new Group('Improvement on Prior Treatments?');
      improvementGroup.cols = 1;
      improvementGroup.visible = false;
      improvementGroup.detail = 'Improvements?';
      improvementGroup.stringBuilder = self.buildStringWithGroup.bind(self, improvementGroup);
      improvementGroup.postAppendMethod = self.prevTreatmentResultPostAppend;
      var improveNoRelief = new HistoryButton('No Relief', null, true, true);
      var improveMildRelief = new HistoryButton('Mild Relief', null, true, true);
      var improveModRelief = new HistoryButton('Moderate Relief', null, true, true);
      var improveSignifRelief = new HistoryButton('Significant Relief', null, true, true);
      improvementGroup.addItem(new item(improveNoRelief));
      improvementGroup.addItem(new item(improveMildRelief));
      improvementGroup.addItem(new item(improveModRelief));
      improvementGroup.addItem(new item(improveSignifRelief));
      prevTreatmentSection.addGroup(improvementGroup);

      var priorStudiesSection = new Section('Prior Studies');
      priorStudiesSection.detail = 'Prior Studies?';

      var proirStudiesGroup = new Group('Prior Studies');
      proirStudiesGroup.cols = 1;

      proirStudiesGroup.suppressNavigation = true;
      proirStudiesGroup.prependingText = "The patient reports prior studies: ";
      proirStudiesGroup.stringBuilder = self.buildStringWithGroup.bind(self, proirStudiesGroup);
      var priorStudiesMri = new HistoryButton('MRI', null, true, true);
      priorStudiesMri.makeLowercase = false;
      var priorStudiesXray = new HistoryButton('XRay', null, true, true);
      priorStudiesXray.makeLowercase = false;
      var priorStudiesCt = new HistoryButton('CT Scan', null, true, true);
      priorStudiesCt.makeLowercase = false;
      var priorStudiesEmg = new HistoryButton('EMG', null, true, true);
      priorStudiesEmg.makeLowercase = false;
      var priorStudiesUltrasound = new HistoryButton('Ultrasound', null, true, true);
      priorStudiesUltrasound.makeLowercase = false;
      var priorStudiesBoneScan = new HistoryButton('Bone Scan', null, true, true);
      priorStudiesBoneScan.makeLowercase = false;
      var priorStudiesBlood = new HistoryButton('Blood Study', null, true, true);
      priorStudiesBlood.makeLowercase = false;
      proirStudiesGroup.addItem(new item(priorStudiesMri));
      proirStudiesGroup.addItem(new item(priorStudiesXray));
      proirStudiesGroup.addItem(new item(priorStudiesCt));
      proirStudiesGroup.addItem(new item(priorStudiesEmg));
      proirStudiesGroup.addItem(new item(priorStudiesUltrasound));
      proirStudiesGroup.addItem(new item(priorStudiesBoneScan));
      proirStudiesGroup.addItem(new item(priorStudiesBlood));
      priorStudiesSection.addGroup(proirStudiesGroup);
      self.hpiObject.addSection(priorStudiesSection);
    };

    HpiIntake.prototype.updateTextareaScroll = function updateTextareaScroll() {
      this.mytextarea.scrollTop = this.mytextarea.scrollHeight;
    };

    HpiIntake.prototype.openCalendar = function openCalendar() {
      this.onsetdatepicker.methods.toggle();
    };

    HpiIntake.prototype.toggleOnsetDateGroup = function toggleOnsetDateGroup(item) {
      var self = this;

      for (var s = 0; s < self.hpiObject.sections.length; s++) {
        var aSection = self.hpiObject.sections[s];
        if (aSection.description == 'Onset') {

          if (item.name == 'YES') {

            aSection.displayFirstGroupOnly = false;

            for (var g = 0; g < aSection.groups.length; g++) {
              var aGroup = aSection.groups[g];

              if (aGroup.description == 'Injury?') {
                var noButton = _.find(aGroup.items, function (i) {
                  return i.object.name == 'NO';
                });
                noButton.object.selected = false;
              }
              if (!aGroup.suppressNavigation) {
                aGroup.displayInNavigation = true;
              }
            }
          } else {

            aSection.displayFirstGroupOnly = true;

            for (var _g = 0; _g < aSection.groups.length; _g++) {
              var _aGroup = aSection.groups[_g];

              if (_aGroup.description == 'Injury?') {
                var _noButton = _.find(_aGroup.items, function (i) {
                  return i.object.name == 'YES';
                });
                _noButton.object.selected = false;
              }

              aSection.groupIndex = aSection.groups.length - 1;

              if (!_aGroup.suppressNavigation) {
                _aGroup.displayInNavigation = false;
              }
            }
          }
        }
      }
    };

    HpiIntake.prototype.showPreviousTreatmentResults = function showPreviousTreatmentResults(item) {
      var self = this;

      for (var s = 0; s < self.hpiObject.sections.length; s++) {
        var aSection = self.hpiObject.sections[s];
        if (aSection.description == 'Previous Treatments') {

          if (item.name == 'None') {
            aSection.groupIndex = aSection.groups.length - 1;
          } else {
            for (var g = 0; g < aSection.groups.length; g++) {
              var aGroup = aSection.groups[g];
              if (!aGroup.suppressNavigation) {
                aGroup.displayInNavigation = true;
              }
            }
          }
        }
      }
    };

    HpiIntake.prototype.previousSection = function previousSection() {
      var currentSection = this.hpiObject.sections[this.sectionIndex];
      if (currentSection.groups.length > 1 && currentSection.groupIndex > 0) {
        currentSection.previousGroup(false);
      } else {
        currentSection.groups[currentSection.groupIndex].visible = false;

        var nextIndex = this.sectionIndex - 1;
        if (nextIndex >= 0) {
          this.sectionIndex--;

          this.nextButtonDescription = 'Next';

          var prevSection = this.hpiObject.sections[this.sectionIndex];
          if (prevSection.description == 'Onset') {
            if (prevSection.displayFirstGroupOnly) {
              prevSection.groupIndex = 0;
            } else {
              prevSection.groupIndex = prevSection.groups.length - 1;
            }
          }

          this.sectionClick(this.hpiObject.sections[this.sectionIndex]);
        }
      }
    };

    HpiIntake.prototype.nextSection = function nextSection() {
      var currentSection = this.hpiObject.sections[this.sectionIndex];
      if (currentSection.groups.length > 1 && currentSection.groupIndex < currentSection.groups.length - 1) {
        currentSection.nextGroup(false);
      } else {
        currentSection.groups[currentSection.groupIndex].visible = false;

        if (this.sectionIndex == this.hpiObject.sections.length - 1) {
          this.doneClick();
          return;
        }

        var nextindex = this.sectionIndex + 1;
        if (nextindex <= this.hpiObject.sections.length - 1) {
          this.sectionIndex++;
          this.sectionClick(this.hpiObject.sections[this.sectionIndex]);

          if (this.sectionIndex == this.hpiObject.sections.length - 1) {
            this.nextButtonDescription = 'Done';
          }
        }
      }
    };

    HpiIntake.prototype.close = function close() {
      var self = this;

      self.doneClick();
    };

    HpiIntake.prototype.doneClick = function doneClick() {
      var self = this;
      self.parent.dialog.close(true, { text: self.hpitext });
    };

    HpiIntake.prototype.groupClick = function groupClick(section, index) {
      section.selectGroupWithIndex(index);
    };

    HpiIntake.prototype.sectionClick = function sectionClick(s) {
      var self = this;
      self.sectionIndex = s.id - 1;
      self.currentSection = s;
      self.selectSection(s);
    };

    HpiIntake.prototype.selectSection = function selectSection(s) {
      var self = this;
      for (var i = 0; i < self.hpiObject.sections.length; i++) {
        var sec = self.hpiObject.sections[i];
        if (s.id == sec.id) {
          sec.select();
        } else {
          sec.selected = false;
          sec.deselectGroups();
        }
      }
    };

    HpiIntake.prototype.setVisibility = function setVisibility(value, object) {
      if (object.visible == true || value != null && value.length > 0) {
        object.visible = true;
      } else {
        object.visible = false;
      }
    };

    return HpiIntake;
  }(), (_descriptor2 = _applyDecoratedDescriptor(_class4.prototype, 'onsetdatepicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class4.prototype, 'onsetdate', [_aureliaBinding.observable], {
    enumerable: true,
    initializer: null
  })), _class4)) || _class3);
});;
define('text!go/hpi/hpiIntake.html',[],function(){return "<template><require from=\"../customElements/myCheckbox\"></require><style>.group-selected{background-color:#c6e1ff}.group-unselected{background-color:#fff}</style><div class=\"p-2 mb-1\" ref=\"hpiHeader\"><h4 style=\"display:inline-block;margin-bottom:0\">Tell us about the history of your illness</h4><i class=\"fa fa-times fa-2x float-right\" style=\"cursor:pointer\" click.delegate=\"close()\"></i><hr></div><div ref=\"intakebody\" class=\"row\" css=\"height:${bodyHeight}px;\" style=\"overflow-y:auto\"><div class=\"col-md-4 pr-0\"><ul class=\"list-group\"><template repeat.for=\"s of hpiObject.sections\"><li class=\"list-group-item ${s.selected ? 'active' : ''}\" aria-current=\"true\" click.delegate=\"sectionClick(s)\">${s.description}</li><li repeat.for=\"g of s.groups\" if.bind=\"g.displayInNavigation\" class=\"list-group-item ${g.selected ? 'group-selected' : ''}\" aria-current=\"true\" click.delegate=\"groupClick(s, $index)\"><div style=\"padding-left:20px\">${g.description}</div></li></template></ul></div><div class=\"col-md-8\"><div class=\"row\"><div class=\"col-md-12\"><textarea id=\"mta\" ref=\"mytextarea\" value.bind=\"hpitext\" name=\"message\" rows=\"5\" cols=\"50\" style=\"position:relative;width:100%;resize:none;overflow-y:scroll\"></textarea></div></div><div class=\"card\"><div class=\"card-header\"><b>${currentSection.detail}</b></div><div class=\"card-body\"><div repeat.for=\"g of currentSection.groups\" class=\"row row-cols-${g.cols} pb-3\" if.bind=\"g.visible\"><div if.bind=\"g.detail.length > 0\" class=\"col-12 px-4 pb-3\"> ${g.detail} </div><div repeat.for=\"i of g.items\" class=\"col\"><my-checkbox if.bind=\"i.isCheckbox\" selected.bind=\"i.object.selected\" value.bind=\"i.object.name\" editing.bind=\"i.object.editing\" click.delegate=\"i.object.select(i.object, $parent.$parent, currentSection, g)\"></my-checkbox><div if.bind=\"i.isCalendar\" class=\"form-row\"><div class=\"input-group col-md-12\"><label class=\"pt-1 pr-2\">${i.detail}</label><abp-datetime-picker icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"onsetdatepicker\" value.bind=\"onsetdate\" options.bind=\"{ format: 'MM/DD/YYYY' }\" placeholder=\"MM/DD/YYYY\"></abp-datetime-picker><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary\" type=\"button\" click.delegate=\"openCalendar()\"><i class=\"fa fa-calendar\"></i></button></div></div></div></div></div></div></div></div></div><div ref=\"footer\" class=\"row\"><div class=\"col-md-12\"><nav class=\"navbar navbar-light bg-light\" style=\"left:0;right:0;bottom:0\"><form class=\"form-inline\" style=\"width:100%;display:inline-block\"><button class=\"btn btn-outline-secondary my-2 my-sm-0\" click.delegate=\"previousSection()\">Previous</button> <button class=\"btn btn-success my-2 my-sm-0 float-right\" click.delegate=\"nextSection()\">${nextButtonDescription}</button></form></nav></div></div></template>";});;
define('go/hpiRowCustomAttribute',['exports', 'aurelia-framework'], function (exports, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.HpiRowCustomAttribute = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _dec2, _class;

  var HpiRowCustomAttribute = exports.HpiRowCustomAttribute = (_dec = (0, _aureliaFramework.customAttribute)('hpirow'), _dec2 = (0, _aureliaFramework.inject)(Element), _dec(_class = _dec2(_class = function () {
    function HpiRowCustomAttribute(element) {
      _classCallCheck(this, HpiRowCustomAttribute);

      this.element = element;
    }

    HpiRowCustomAttribute.prototype.bind = function bind(bindingContext, overridingContext) {
      bindingContext.element = this.element;
      bindingContext.auto_grow(this.element);
    };

    return HpiRowCustomAttribute;
  }()) || _class) || _class);
});;
define('go/index',['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Index = exports.Index = function () {
    function Index() {
      _classCallCheck(this, Index);

      console.log('GO for launch!');
    }

    Index.prototype.configureRouter = function configureRouter(config, router) {
      config.title = 'Phoenix GO';
      config.map([{ route: 'home', name: 'home', moduleId: 'go/home', nav: true, title: 'GO' }, { route: 'signature', name: 'signature', moduleId: 'go/signature', nav: true, title: 'Signature Pad' }]);
      this.router = router;
    };

    return Index;
  }();
});;
define('text!go/index.html',[],function(){return "<template><router-view></router-view></template>";});;
define('go/injectionBuilder',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', './home', '../data/go/data', 'lodash', 'aurelia-event-aggregator', './popupHelper', 'aurelia-binding'], function (exports, _helper, _http, _aureliaFramework, _home, _data, _lodash, _aureliaEventAggregator, _popupHelper, _aureliaBinding) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.InjectionBuilder = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var hpiObject = function () {
    function hpiObject() {
      _classCallCheck(this, hpiObject);

      this.sections = [];
    }

    hpiObject.prototype.addSection = function addSection(s) {
      var id = this.sections.length + 1;
      s.id = id;
      this.sections.push(s);
    };

    hpiObject.prototype.insertSection = function insertSection(s, index) {
      var id = this.sections.length + 1;
      s.id = id;
      this.sections.splice(index, 0, s);
    };

    return hpiObject;
  }();

  var Section = function () {
    function Section(description) {
      _classCallCheck(this, Section);

      this.description = description;
      this.detail = "";
      this.groups = [];
      this.selected = false;
      this.id = 0;
      this.groupIndex = 0;
      this.displayFirstGroupOnly = false;
    }

    Section.prototype.addGroup = function addGroup(group) {
      this.groups.push(group);
    };

    Section.prototype.deselectGroups = function deselectGroups() {
      for (var i = 0; i < this.groups.length; i++) {
        this.groups[i].selected = false;
        this.groups[i].displayInNavigation = false;
      }
    };

    Section.prototype.select = function select() {
      this.selected = true;
      for (var g = 0; g < this.groups.length; g++) {
        var aGroup = this.groups[g];

        if (!aGroup.suppressNavigation) {
          if (this.displayFirstGroupOnly) {
            if (g == 0) {
              aGroup.displayInNavigation = true;
            } else {
              aGroup.displayInNavigation = false;
            }
          }
          if (!this.displayFirstGroupOnly) {
            aGroup.displayInNavigation = true;
          }
        }

        if (g == this.groupIndex) {
          aGroup.selected = true;
          aGroup.visible = true;
        }
      }
    };

    Section.prototype.selectGroupWithIndex = function selectGroupWithIndex(index) {
      for (var i = 0; i < this.groups.length; i++) {
        if (index == i) {
          this.groups[i].selected = true;
          this.groups[i].visible = true;
          this.groupIndex = index;
        } else {
          this.groups[i].selected = false;
          this.groups[i].visible = false;
        }
      }
    };

    Section.prototype.nextGroup = function nextGroup(displayFirstOnly) {
      var aIndex = this.groupIndex + 1;
      if (aIndex <= this.groups.length - 1) {
        this.groupIndex++;
        for (var g = 0; g < this.groups.length; g++) {

          if (!displayFirstOnly) {
            this.groups[g].displayInNavigation = true;
          } else {
            if (g == 0) {
              this.groups[g].displayInNavigation = true;
            }
          }

          if (g == this.groupIndex) {
            this.groups[g].selected = true;
            this.groups[g].visible = true;
          } else {
            this.groups[g].selected = false;
            this.groups[g].visible = false;
          }
        }
      }
    };

    Section.prototype.previousGroup = function previousGroup(displayFirstOnly) {
      var aIndex = this.groupIndex - 1;
      if (aIndex >= 0) {
        this.groupIndex--;
        for (var g = 0; g < this.groups.length; g++) {

          if (!displayFirstOnly) {
            this.groups[g].displayInNavigation = true;
          } else {
            if (g == 0) {
              this.groups[g].displayInNavigation = true;
            }
          }

          if (g == this.groupIndex) {
            this.groups[g].selected = true;
            this.groups[g].visible = true;
          } else {
            this.groups[g].selected = false;
            this.groups[g].visible = false;
          }
        }
      }
    };

    return Section;
  }();

  var Group = function () {
    function Group(description) {
      _classCallCheck(this, Group);

      this.description = description;
      this.details = "";
      this.items = [];
      this.visible = false;
      this.cols = 1;
      this.selected = false;
      this.displayInNavigation = false;
      this.suppressNavigation = false;
      this.stringBuilder = null;
      this.isAppender = false;
      this.prependingText = "";
      this.postAppendMethod = null;
    }

    Group.prototype.buildString = function buildString(form) {

      if (this.stringBuilder != null) {
        return this.stringBuilder(form);
      }

      return "";
    };

    Group.prototype.addItem = function addItem(item) {
      this.items.push(item);
    };

    return Group;
  }();

  var item = function item(object) {
    _classCallCheck(this, item);

    this.object = object;
    this.isCheckbox = true;
    this.isSlider = false;
    this.detail = "";
  };

  var HistoryButton = function () {
    function HistoryButton(name, data, visible, editing) {
      _classCallCheck(this, HistoryButton);

      this.name = name;
      this.data = data;
      this.selected = false;
      this.visible = visible == undefined ? false : visible;
      this.editing = editing ? editing : false;
      this.callback = null;
    }

    HistoryButton.prototype.select = function select(injectionBuilder) {
      this.selected = this.selected ? false : true;
      if (this.callback != null) {
        this.callback();
      }

      injectionBuilder.buildInjectionText();
    };

    return HistoryButton;
  }();

  var InjectionBuilder = exports.InjectionBuilder = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home, _aureliaEventAggregator.EventAggregator, _popupHelper.PopupHelper), _dec(_class = function () {
    function InjectionBuilder(helper, http, Data, Home, EventAggregator, PopupHelper) {
      _classCallCheck(this, InjectionBuilder);

      this.injectObject = new hpiObject();
      this.currentSection = null;
      this.sectionIndex = 0;
      this.injectionText = "";
      this.injectionSiteList = [];
      this.bodyparts = [];
      this.selectedInjectionSites = [];
      this.aspirateValue = 0;
      this.selectedJcode = null;
      this.disableContent = true;
      this.filteredPreferences = [];
      this.injPxCodes = [];

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
      this.event = EventAggregator;
      this.popupHelper = PopupHelper;
    }

    InjectionBuilder.prototype.activate = function activate(model) {
      var self = this;
      self.parent = model;

      self.providerId = self.parent.home.currentProvider.ProviderID;

      self.patient = self.parent.home.patient.data;

      self.loadInjectionProcedureCodes();
    };

    InjectionBuilder.prototype.loadInjectionProcedureCodes = function loadInjectionProcedureCodes() {
      var self = this;
      self.data.getWithUrl('procedures?type=injection', function (res) {
        self.injPxCodes = _.sortBy(res, 'CptKey');
      });
    };

    InjectionBuilder.prototype.preferenceClick = function preferenceClick(pref) {
      var self = this;
      self.injectionText = pref.data.Instruction;
      self.selectedPreference = pref;
    };

    InjectionBuilder.prototype.injectionSelected = function injectionSelected(inj) {
      this.selectedInjectionSite = inj;

      this.disableContent = false;

      for (var i = 0; i < this.selectedInjectionSites.length; i++) {
        if (this.selectedInjectionSites[i].name != inj.name) {
          this.selectedInjectionSites[i].selected = false;
        } else {
          this.selectedInjectionSites[i].selected = true;
        }
      }
    };

    InjectionBuilder.prototype.bodypartClick = function bodypartClick() {
      var self = this;

      var injections = _.filter(self.injectionSiteList, function (i) {
        return i.BodyPart.toUpperCase() == self.selectedBodypart.toUpperCase();
      });
      self.selectedInjectionSites = [];
      for (var i = 0; i < injections.length; i++) {
        self.selectedInjectionSites.push(new HistoryButton(injections[i].Description1, injections[i], true, true));
      }

      self.filterPreferences(self.selectedBodypart);
    };

    InjectionBuilder.prototype.attached = function attached() {
      var self = this;

      $('ux-dialog-body').css('padding-bottom', 0);

      var totalPopupContent = $('ux-dialog-header').height();

      totalPopupContent += 18;

      var tBodyHeight = self.intakebody.clientHeight;
      var footerHeight = self.footer.clientHeight;
      totalPopupContent += tBodyHeight;
      totalPopupContent += footerHeight;
      totalPopupContent += 32;
      var popupHeight = $('ux-dialog').height();

      var heightToAdd = popupHeight - totalPopupContent;

      self.bodyHeight = tBodyHeight + heightToAdd;

      self.preflength = self.bodyHeight - 150;

      self.injectionListHeight = self.bodyHeight - 79;

      self.contentbodyHeight = self.bodyHeight - 16 - 84 - 65 - 47;

      self.bodyparts = self.data.bodyparts;
      self.selectedBodypart = self.parent.home.currentBoard.visitInfo.bodypart;
      self.loadInjectionSites();

      self.setupInjectObject();
    };

    InjectionBuilder.prototype.filterPreferences = function filterPreferences(bodypart) {
      var self = this;

      self.filteredPreferences = _.filter(self.parent.preferences, function (p) {
        return p.bodypart == bodypart;
      });
      self.filteredPreferences = _.sortBy(self.filteredPreferences, function (f) {
        return f.description;
      });
      if (self.filteredPreferences.length > 0) {
        self.selectedPreference = self.filteredPreferences[0];
      }
    };

    InjectionBuilder.prototype.populatePrefObjectFromForm = function populatePrefObjectFromForm(pref, description, callback) {
      var self = this;
      pref.ProviderID = self.providerId;
      pref.Description = description ? description : self.selectedPreference.description;
      pref.Instruction = self.injectionText;

      if (self.selectedJcode) {
        pref.InjectionDesc = self.selectedJcode.Description;
        pref.JCode = self.selectedJcode.CptKey;
      }

      self.getCptCode(function (code) {
        pref.CPTCode = code.code;
        pref.CPTDesc = code.description;

        pref.Part = self.selectedBodypart;

        self.popupHelper.openBodysidePickerPop(function (side) {

          pref.Side = side;

          if (self.selectedInjectionSite) {
            pref.InjectSite = self.selectedInjectionSite.name;
          }

          callback(pref);
        });
      });
    };

    InjectionBuilder.prototype.createNewPrefClick = function createNewPrefClick() {
      var self = this;
      self.parent.popupHelper.openGenericInputPop("Create New Preference", ['Description'], null, false, function (res) {
        var prefName = res.inputs[0];
        self.parent.goData.getWithUrl('injection/pref/new', function (pref) {

          self.populatePrefObjectFromForm(pref, prefName.value, function (aPrefObj) {

            var saveDescription = 'Saving ' + prefName.value + '...';
            var saveDialog = self.parent.helper.createNoty(saveDescription, 3000);
            saveDialog.show();
            self.parent.goData.postWithUrlAndData('injection/pref', JSON.stringify(aPrefObj), function (res) {
              var prefObj = self.parent.goData.getPreferenceObj(res.Description, res, res.Part);
              self.parent.preferences.push(prefObj);
              self.filterPreferences(self.selectedBodypart);
              saveDialog.close();
            });
          });
        });
      });
    };

    InjectionBuilder.prototype.savePreferenceClick = function savePreferenceClick() {
      var self = this;
      if (self.selectedPreference) {
        var updateDescription = 'Update ' + self.selectedPreference.description + '?';
        self.parent.popupHelper.openGenericMessagePop(updateDescription, 'Preference Update', ['OK'], false, function (res) {

          var pref = self.selectedPreference.data;
          self.populatePrefObjectFromForm(pref, null, function (prefObj) {

            var saveDescription = 'Updating ' + self.selectedPreference.description + '...';
            var saveDialog = self.parent.helper.createNoty(saveDescription, 3000);
            saveDialog.show();
            self.parent.goData.putWithUrlAndData('injection/pref', prefObj, function (res) {

              saveDialog.close();
            });
          });
        });
      }
    };

    InjectionBuilder.prototype.jcodeClick = function jcodeClick(procedure) {
      var p = procedure;
    };

    InjectionBuilder.prototype.buildInjectionText = function buildInjectionText() {
      var self = this;

      if (self.selectedInjectionSite == undefined) {
        self.showErrorPopup();
        return;
      }

      self.injectionText = "";
      self.injectionText = 'The ' + self.selectedBodypart.toLowerCase() + ' was cleansed in preparation for procedure. ';

      for (var s = 0; s < self.injectObject.sections.length; s++) {
        var section = self.injectObject.sections[s];
        for (var g = 0; g < section.groups.length; g++) {
          var group = section.groups[g];
          var txtString = group.buildString(self);

          if (group.isAppender && txtString.length > 0) {
            self.injectionText = self.injectionText.substr(0, self.injectionText.length - 2) + " ";
          }

          if (group.postAppendMethod != null) {
            var str = group.postAppendMethod(self, txtString);
            if (str.length > 0) {
              self.injectionText = str;
            }
          } else {
            self.injectionText += txtString;
          }
        }
      }

      setTimeout(self.updateTextareaScroll.bind(self), 100);
    };

    InjectionBuilder.prototype.getGroupWithNames = function getGroupWithNames(section, group) {
      var self = this;
      var aSec = _.find(self.injectObject.sections, function (s) {
        return s.description == section;
      });
      return _.find(aSec.groups, function (g) {
        return g.description == group;
      });
    };

    InjectionBuilder.prototype.getSelectedCheckboxesInGroup = function getSelectedCheckboxesInGroup(group) {
      var chx = [];
      for (var i = 0; i < group.items.length; i++) {
        var itm = group.items[i];
        if (itm.object != undefined && itm.object.selected) {
          chx.push(itm.object);
        }
      }
      return chx;
    };

    InjectionBuilder.prototype.buildQualityGroup = function buildQualityGroup(form) {
      if (form.selectedInjectionSite) {

        var txt = form.aspirateValue + ' CC\'s of ';

        var qualityGroup = form.getGroupWithNames('Aspirant', 'Quality');
        var chkBxs = form.getSelectedCheckboxesInGroup(qualityGroup);

        if (chkBxs.length > 0) {
          var first = chkBxs[0];
          if (first.name == 'Crystals present' || first.name == 'Crystals absent') {
            txt += 'fluid with ' + first.name.toLowerCase();
          } else {
            txt += first.name.toLowerCase() + ' fluid ';
          }

          txt += 'was aspirated from the ' + form.selectedInjectionSite.name.toLowerCase() + ". ";
          return txt;
        } else {
          return "";
        }
      } else {
        form.showErrorPopup();
        return "";
      }
    };

    InjectionBuilder.prototype.buildInjectionGroup = function buildInjectionGroup(form) {
      if (form.selectedInjectionSite) {
        var txt = 'The ' + form.selectedInjectionSite.name + ' was injected with ';
        var injGroup = form.getGroupWithNames('Injection', 'Injection');
        var chkBxs = form.getSelectedCheckboxesInGroup(injGroup);
        if (chkBxs.length > 0) {
          var first = chkBxs[0];
          form.selectedJcode = first.data;
          txt += first.name.toLowerCase() + '. ';
          return txt;
        } else {
          form.selectedJcode = null;
          return "";
        }
      } else {
        form.showErrorPopup();
        return "";
      }
    };

    InjectionBuilder.prototype.buildInstructionGroup = function buildInstructionGroup(form) {
      if (form.selectedInjectionSite) {

        var txt = 'The patient was instructed to ';
        var instGroup = form.getGroupWithNames('Instruct', 'Instruct');
        var instTxt = form.getCommaAndWithItemsData(instGroup);
        if (instTxt.length > 0) {
          return txt + instTxt + ". ";
        }
        return "";
      } else {
        form.showErrorPopup();
        return "";
      }
    };

    InjectionBuilder.prototype.buildSubjectiveGroup = function buildSubjectiveGroup(form) {
      if (form.selectedInjectionSite) {

        var txt = 'The patient reports ';

        var subjGroup = form.getGroupWithNames('Subjective', 'Subjective');
        var subjTxt = form.getCommaAndWithItemsData(subjGroup);
        if (subjTxt.length > 0) {
          return txt + subjTxt + ". ";
        }
        return "";
      } else {
        form.showErrorPopup();
        return "";
      }
    };

    InjectionBuilder.prototype.buildGuidanceGroup = function buildGuidanceGroup(form) {
      if (form.selectedInjectionSite) {
        var txt = 'Performed with ';
        var guideGroup = form.getGroupWithNames('Guidance', 'Guidance');
        var guideTxt = form.getCommaAndWithItemsData(guideGroup);
        if (guideTxt.length > 0) {
          return txt + guideTxt + ". ";
        }
        return "";
      } else {
        form.showErrorPopup();
        return "";
      }
    };

    InjectionBuilder.prototype.getCommaAndWithItemsData = function getCommaAndWithItemsData(group) {
      var str = "";

      for (var i = 0; i < group.items.length; i++) {
        var itm = group.items[i];
        if (itm.object != undefined && itm.object.selected) {
          str = str.concat(itm.object.data, ", ");
        }
      }

      str = str.trim();
      str = str.substr(0, str.length - 1);

      var lastCommaIndex = str.lastIndexOf(',');
      if (lastCommaIndex > -1) {
        var startStr = str.substr(0, lastCommaIndex);
        var endStr = str.substr(lastCommaIndex + 2, str.length);
        str = startStr + ' and ' + endStr;
      }
      return str;
    };

    InjectionBuilder.prototype.getCommaAndWithItems = function getCommaAndWithItems(group) {
      var str = "";

      for (var i = 0; i < group.items.length; i++) {
        var itm = group.items[i];
        if (itm.object != undefined && itm.object.selected) {
          str = str.concat(itm.object.name, ", ");
        }
      }

      str = str.trim();
      str = str.substr(0, str.length - 1);

      var lastCommaIndex = str.lastIndexOf(',');
      if (lastCommaIndex > -1) {
        var startStr = str.substr(0, lastCommaIndex);
        var endStr = str.substr(lastCommaIndex + 2, str.length);
        str = startStr + ' and ' + endStr;
      }
      return str;
    };

    InjectionBuilder.prototype.add = function add() {
      var self = this;
      self.getCptCode(function (code) {

        var inject = {
          cptObject: code,
          jcode: self.selectedJcode,
          text: self.injectionText,
          injectionSite: self.selectedInjectionSite,
          bodypart: self.selectedBodypart
        };
        self.parent.dialog.close(true, inject);
      });
    };

    InjectionBuilder.prototype.setupInjectObject = function setupInjectObject() {
      var self = this;
      var aspirantSection = new Section('Aspirant');
      aspirantSection.detail = "CC's of fluid aspirated...";
      var aspSliderGroup = new Group('Aspirant');
      aspSliderGroup.selected = true;
      aspSliderGroup.visible = true;
      var aspSliderItm = new item(null);
      aspSliderItm.isSlider = true;
      aspSliderItm.isCheckbox = false;
      aspSliderGroup.addItem(aspSliderItm);
      aspirantSection.addGroup(aspSliderGroup);
      self.injectObject.addSection(aspirantSection);

      self.currentSection = aspirantSection;
      self.currentSection.selected = true;

      var qualityGroup = new Group('Quality');
      qualityGroup.selected = true;
      qualityGroup.visible = true;
      qualityGroup.cols = 2;
      qualityGroup.detail = 'Quality';
      qualityGroup.stringBuilder = self.buildQualityGroup;
      qualityGroup.addItem(new item(new HistoryButton('Blood tinged', null, true, true)));
      qualityGroup.addItem(new item(new HistoryButton('Bloody', null, true, true)));
      qualityGroup.addItem(new item(new HistoryButton('Clear', null, true, true)));
      qualityGroup.addItem(new item(new HistoryButton('Cloudy', null, true, true)));
      qualityGroup.addItem(new item(new HistoryButton('Crystals present', null, true, true)));
      qualityGroup.addItem(new item(new HistoryButton('Crystals absent', null, true, true)));
      qualityGroup.addItem(new item(new HistoryButton('Purulent', null, true, true)));
      qualityGroup.addItem(new item(new HistoryButton('Straw colored', null, true, true)));
      qualityGroup.addItem(new item(new HistoryButton('Turbid', null, true, true)));
      aspirantSection.addGroup(qualityGroup);

      var injectSection = new Section('Injection');
      injectSection.detail = "Injection...";
      var injectGroup = new Group('Injection');
      injectGroup.cols = 1;
      injectGroup.stringBuilder = self.buildInjectionGroup;
      self.data.getProceduresWithType('JCODE', function (res) {
        for (var i = 0; i < res.length; i++) {
          var injButton = new HistoryButton(res[i].Description, res[i], true, true);

          injectGroup.addItem(new item(injButton));
        }
        injectSection.addGroup(injectGroup);
        self.injectObject.insertSection(injectSection, 1);
      });

      var instructSection = new Section('Instruct');
      instructSection.detail = "Patient instructions...";
      var instructGroup = new Group('Instruct');
      instructGroup.cols = 2;
      instructGroup.selected = true;
      instructGroup.visible = true;
      instructGroup.stringBuilder = self.buildInstructionGroup;
      instructGroup.addItem(new item(new HistoryButton('R-I-C-E', 'rest, apply ice to the affected area, use a compressive wrap, and elevate the limb', true, true)));
      instructGroup.addItem(new item(new HistoryButton('Elevate limb', 'elevate the limb', true, true)));
      instructGroup.addItem(new item(new HistoryButton('Rest', 'rest', true, true)));
      instructGroup.addItem(new item(new HistoryButton('Compression', 'warm compress', true, true)));
      instructGroup.addItem(new item(new HistoryButton('Use ice', 'use ice', true, true)));
      instructGroup.addItem(new item(new HistoryButton('Tylenol', 'take tylenol as needed for pain', true, true)));
      instructGroup.addItem(new item(new HistoryButton('Stretching', 'stretch', true, true)));
      instructGroup.addItem(new item(new HistoryButton('Exercise', 'exercise', true, true)));
      instructGroup.addItem(new item(new HistoryButton('Default', 'rest, apply ice to the affected area, use a compressive wrap, elevate the limb and take tylenol as needed for pain', true, true)));
      instructSection.addGroup(instructGroup);
      self.injectObject.addSection(instructSection);

      var subjectiveSection = new Section('Subjective');
      subjectiveSection.detail = "Subjective...";
      var subjectiveGroup = new Group('Subjective');
      subjectiveGroup.selected = true;
      subjectiveGroup.visible = true;
      subjectiveGroup.stringBuilder = self.buildSubjectiveGroup;
      subjectiveGroup.addItem(new item(new HistoryButton('Mild improvement', 'mild relief from symptoms', true, true)));
      subjectiveGroup.addItem(new item(new HistoryButton('Marked improvement', 'marked relief from symptoms', true, true)));
      subjectiveGroup.addItem(new item(new HistoryButton('Mildly worse', 'symptoms are mildly worse', true, true)));
      subjectiveGroup.addItem(new item(new HistoryButton('Markedly worse', 'symptoms are markedly worse', true, true)));
      subjectiveSection.addGroup(subjectiveGroup);
      self.injectObject.addSection(subjectiveSection);

      var guidanceSection = new Section('Guidance');
      guidanceSection.detail = "Guidance used...";
      var guidanceGroup = new Group('Guidance');
      guidanceGroup.selected = true;
      guidanceGroup.visible = true;
      guidanceGroup.stringBuilder = self.buildGuidanceGroup;
      guidanceGroup.addItem(new item(new HistoryButton('US 20604, 20606, 20611', 'ultrasonic guidance', true, true)));
      guidanceGroup.addItem(new item(new HistoryButton('Fluoroscopic 77002', 'fluoroscopic guidance', true, true)));
      guidanceGroup.addItem(new item(new HistoryButton('Fluoroscopic 77003', 'fluoroscopic guidance', true, true)));
      guidanceSection.addGroup(guidanceGroup);
      self.injectObject.addSection(guidanceSection);
    };

    InjectionBuilder.prototype.loadInjectionSites = function loadInjectionSites() {
      var self = this;
      self.data.getListWithProviderId("Injection Site", self.providerId, function (res) {
        self.injectionSiteList = res;

        self.bodypartClick(self.selectedBodypart);
      });
    };

    InjectionBuilder.prototype.updateTextareaScroll = function updateTextareaScroll() {
      this.mytextarea.scrollTop = this.mytextarea.scrollHeight;
    };

    InjectionBuilder.prototype.groupClick = function groupClick(section, index) {
      section.selectGroupWithIndex(index);
    };

    InjectionBuilder.prototype.sectionClick = function sectionClick(index, s) {
      var self = this;
      self.sectionIndex = index;
      self.currentSection = s;
      self.selectSection(s);
    };

    InjectionBuilder.prototype.selectSection = function selectSection(s) {
      var self = this;
      for (var i = 0; i < self.injectObject.sections.length; i++) {
        var sec = self.injectObject.sections[i];
        if (s.id == sec.id) {
          sec.select();
        } else {
          sec.selected = false;
          sec.deselectGroups();
        }
      }
    };

    InjectionBuilder.prototype.setVisibility = function setVisibility(value, object) {
      if (object.visible == true || value != null && value.length > 0) {
        object.visible = true;
      } else {
        object.visible = false;
      }
    };

    InjectionBuilder.prototype.showErrorPopup = function showErrorPopup() {
      var self = this;
      var message = 'Please select an injection location to proceed.';
      var header = 'No Injection Location!';
      var options = ['OK'];
      self.popupHelper.openGenericMessagePop(message, header, options, false, function (res) {
        return;
      });
    };

    InjectionBuilder.prototype.checkForSpinePicker = function checkForSpinePicker(bodypart, callback) {
      var self = this;
      var part = bodypart.toUpperCase();

      var finalCode = {
        code: '',
        description: '',
        id: 0
      };

      if (part == "LUMBAR" || part == 'THORACIC' || part == 'CERVICAL') {
        var spineCpts = _.filter(self.injPxCodes, function (px) {
          return px.Body_Part == 'Spine';
        });
        var spineCptItems = [];
        for (var i = 0; i < spineCpts.length; i++) {
          var codeDesc = spineCpts[i].CptKey + ' - ' + spineCpts[i].Description;
          var pItm = self.data.getGenericPicklistItem(codeDesc, spineCpts[i]);
          spineCptItems.push(pItm);
        }
        self.popupHelper.openGenericPicklistPop("CPT Code", 'Please Select Code...', spineCptItems, false, function (cptRes) {
          finalCode.code = cptRes.item.data.CptKey;
          finalCode.description = cptRes.item.data.Description;
          finalCode.id = cptRes.item.data.ProcedureID;

          callback(finalCode);
        });
      } else {
        callback(finalCode);
      }
    };

    InjectionBuilder.prototype.getCptCode = function getCptCode(callback) {
      var self = this;
      if (self.selectedInjectionSite && self.selectedBodypart) {

        var finalCode = null;

        if (self.injPxCodes.length == 0) {
          callback(null);
        }

        var part = self.selectedBodypart.toUpperCase();

        self.checkForSpinePicker(part, function (codeRes) {

          finalCode = codeRes;

          if (codeRes.id == 0) {
            if (self.selectedInjectionSite.data.Description1 == 'AC JOINT LINE') {
              var px = _.find(self.injPxCodes, function (p) {
                return p.CptKey == '20605';
              });
              finalCode.code = px.CptKey;
              finalCode.description = px.Description;
              finalCode.id = px.ProcedureID;
            } else {
              if (part == 'HAND' || part == 'FOOT') {
                var sml = _.find(self.injPxCodes, function (p) {
                  return p.CptKey == '20600';
                });
                finalCode.code = sml.CptKey;
                finalCode.description = sml.Description;
                finalCode.id = sml.ProcedureID;
              } else if (part == 'ANKLE' || part == 'ELBOW' || part == 'WRIST') {
                var med = _.find(self.injPxCodes, function (p) {
                  return p.CptKey == '20605';
                });
                finalCode.code = med.CptKey;
                finalCode.description = med.Description;
                finalCode.id = med.ProcedureID;
              } else if (part == 'SHOULDER' || part == 'KNEE' || part == 'HIP') {
                var maj = _.find(self.injPxCodes, function (p) {
                  return p.CptKey == '20610';
                });
                finalCode.code = maj.CptKey;
                finalCode.description = maj.Description;
                finalCode.id = maj.ProcedureID;
              }
            }
          }

          callback(finalCode);
        });
      } else {
        callback(null);
      }
    };

    return InjectionBuilder;
  }()) || _class);
});;
define('text!go/injectionBuilder.html',[],function(){return "<template><require from=\"./customElements/myCheckbox\"></require><style>.group-selected{background-color:#c6e1ff}.group-unselected{background-color:#fff}</style><div ref=\"intakebody\" class=\"row\" css=\"height:${bodyHeight}px;\" style=\"overflow-y:auto\"><div class=\"col-md-4 pr-0\"><div class=\"card\"><div class=\"card-header\"><select value.bind=\"selectedBodypart\" class=\"form-control\" id=\"exampleFormControlSelect1\" change.delegate=\"bodypartClick()\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"b of bodyparts\" model.bind=\"b\">${b}</option></select></div><ul class=\"list-group list-group-flush\" style=\"overflow-y:auto\" css=\"height:${injectionListHeight}px;\"><li repeat.for=\"i of selectedInjectionSites\" class=\"list-group-item ${i.selected ? 'active' : ''}\" aria-current=\"true\" click.delegate=\"injectionSelected(i)\">${i.name}</li></ul></div></div><div class=\"col-md-8\"><div if.bind=\"disableContent\" style=\"position:absolute;background-color:#ffffffd4;left:0;right:0;bottom:0;top:0;z-index:1000\"></div><div class=\"row\"><div class=\"col-md-12\"><div class=\"d-flex align-items-start\"><div class=\"align-self-center pr-1 ml-auto\"><label class=\"col-form-label pr-2\" for=\"examToggleButton\"><b>Pref</b></label><div class=\"dropdown d-inline-block\"><button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"examToggleButton\" style=\"background-color:#fff;color:#000;border-color:#ced4da\" data-toggle=\"dropdown\" aria-expanded=\"false\"> ${selectedPreference.description} </button><div class=\"dropdown-menu\" style=\"overflow-y:scroll\" css=\"max-height:${preflength}px;\" aria-labelledby=\"dropdownMenuButton\"><a class=\"dropdown-item\" repeat.for=\"p of filteredPreferences\" model.bind=\"p\" click.delegate=\"preferenceClick(p)\" href=\"#\">${p.description}</a></div></div></div><div class=\"btn-group dropleft\"><button type=\"button\" class=\"btn\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"fa fa-ellipsis-h fa-2x text-secondary\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"savePreferenceClick()\"><i class=\"fa fa-male fa-lg text-success pr-2\"></i>Save Pref</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"createNewPrefClick()\"><i class=\"fa fa-male fa-lg text-danger pr-2\"></i>Create New Pref</a></div></div></div></div></div><div class=\"row\"><div class=\"col-md-12\"><textarea id=\"mta\" ref=\"mytextarea\" value.bind=\"injectionText\" name=\"message\" rows=\"3\" cols=\"50\" style=\"position:relative;width:100%;resize:none\"></textarea></div></div><div class=\"card\"><div class=\"card-header\"><ul class=\"nav nav-pills card-header-pills\"><li repeat.for=\"s of injectObject.sections\" click.delegate=\"sectionClick($index, s)\" class=\"nav-item\"><a class=\"nav-link ${s.selected ? 'active' : ''}\" href=\"#\">${s.description}</a></li></ul></div><div class=\"card-body\" css=\"overflow-y: auto; height:${contentbodyHeight}px;\"><h5 class=\"card-title\">${currentSection.detail}</h5><div repeat.for=\"g of currentSection.groups\" class=\"row row-cols-${g.cols} pb-3\" if.bind=\"g.visible\"><div if.bind=\"g.detail.length > 0\" class=\"col-12 px-4 pb-3 card-text\"> ${g.detail} </div><div repeat.for=\"i of g.items\" class=\"col\"><my-checkbox if.bind=\"i.isCheckbox\" selected.bind=\"i.object.selected\" value.bind=\"i.object.name\" editing.bind=\"i.object.editing\" click.delegate=\"i.object.select($parent.$parent)\"></my-checkbox><div if.bind=\"i.isSlider\" class=\"row\"><div class=\"col-md-2\"><div class=\"h4\">${aspirateValue}</div></div><div class=\"col-md-10 pt-2\"><input value.bind=\"aspirateValue\" type=\"range\" min=\"0\" max=\"110\" class=\"form-control-range\" style=\"width:90%\" id=\"formControlRange\"></div></div></div></div></div></div></div></div><div ref=\"footer\" class=\"row\"><div class=\"col-md-12\"><nav class=\"navbar navbar-light bg-light\" style=\"left:0;right:0;bottom:0\"><form class=\"form-inline\" style=\"width:100%;display:inline-block\"><button class=\"btn btn-success my-2 my-sm-0 float-right\" click.delegate=\"add()\">Add</button></form></nav></div></div></template>";});;
define('go/labOrderEdit',["exports", "aurelia-dependency-injection", "aurelia-framework", "../helpers/helper", "../helpers/http", "../data/go/data", "aurelia-dialog"], function (exports, _aureliaDependencyInjection, _aureliaFramework, _helper, _http, _data, _aureliaDialog) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.LabOrderEdit = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var LabOrderEdit = exports.LabOrderEdit = (_dec = (0, _aureliaDependencyInjection.inject)(_helper.helper, _http.http, _data.Data, _aureliaDialog.DialogController), _dec(_class = function () {
    function LabOrderEdit(helper, http, Data, DialogController) {
      _classCallCheck(this, LabOrderEdit);

      this.px = null;
      this.locations = [];

      this.helper = helper;
      this.http = http;
      this.goData = Data;
      this.dialogController = DialogController;
    }

    LabOrderEdit.prototype.activate = function activate(model) {
      var self = this;
      self.px = model;

      self.getLabLocations(function () {

        if (self.px.data.LocationID) {
          self.selectedLocation = _.find(self.locations, function (l) {
            return l.LocationID == self.px.data.LocationID;
          });
        }
      });
    };

    LabOrderEdit.prototype.attached = function attached() {
      var self = this;
      var res = $(self.laborderedit).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");
    };

    LabOrderEdit.prototype.getLabLocations = function getLabLocations(callback) {
      var self = this;
      self.goData.getWithUrl("locations?type=lab", function (res) {
        self.locations = res;
        callback();
      });
    };

    LabOrderEdit.prototype.add = function add() {
      var self = this;

      if (self.selectedLocation) {
        self.px.data.LocationID = self.selectedLocation.LocationID;
      }

      self.dialogController.close(true, self.px);
    };

    return LabOrderEdit;
  }()) || _class);
});;
define('text!go/labOrderEdit.html',[],function(){return "<template><div ref=\"laborderedit\" class=\"card\"><div class=\"card-body\"><form><div class=\"form-row\"><div class=\"form-group col-md-6\"><label>Date Ordered</label><div class=\"form-control\">${px.data.DateCollect}</div></div><div class=\"form-group col-md-6\"><label>Status</label> <select value.bind=\"px.data.OrderStatus\" class=\"form-control\"><option>ACTIVE</option><option>DISCONTINUED</option><option>COMPLETE</option><option>PATIENT_DECLINED</option></select></div></div><div class=\"form-row\"><div class=\"form-group col-md-6\"><label>Lab</label> <input type=\"text\" class=\"form-control\" value.bind=\"px.data.TestOrdered\" aria-describedby=\"usernameError\" placeholder=\"some lab\"></div><div class=\"form-group col-md-6\"><label>Loinc ID</label> <input type=\"text\" class=\"form-control\" value.bind=\"px.data.Code\" aria-describedby=\"usernameError\" placeholder=\"loinc id\"></div></div><div class=\"form-row\"><div class=\"form-group col-md-12\"><label>Location</label> <select value.bind=\"selectedLocation\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"l of locations\" model.bind=\"l\">${l.LocationName}</option></select> <label>Address</label><div class=\"form-control\" innerhtml.bind=\"selectedLocation.Address1\"></div></div></div><div class=\"form-row\"><div class=\"form-group col-md-12\"><label>Result</label> <input type=\"text\" class=\"form-control\" value.bind=\"px.data.OrdResult\" aria-describedby=\"usernameError\" placeholder=\"lab result\"></div></div><div class=\"form-row\"><div class=\"form-group col-md-4\"><label>Range</label> <input type=\"text\" class=\"form-control\" value.bind=\"px.data.RefRange\" aria-describedby=\"usernameError\" placeholder=\"lab range\"></div><div class=\"form-group col-md-4\"><label>Instructions</label> <select value.bind=\"px.data.OrderInstructions\" class=\"form-control\"><option>Fasting</option><option>In AM</option><option>Routine</option><option>STAT</option></select></div><div class=\"form-group col-md-4\"><label>Normal/Abnormal</label> <input type=\"text\" class=\"form-control\" value.bind=\"px.data.NormalAbnormal\" aria-describedby=\"usernameError\" placeholder=\"normal/abnormal\"></div></div><div class=\"form-row\"><div class=\"form-group col-md-12\"><label>Comments</label> <input type=\"text\" class=\"form-control\" value.bind=\"px.data.OrderComment\" aria-describedby=\"usernameError\" placeholder=\"lab comments\"></div></div></form></div><div class=\"card-footer\"><button type=\"button\" class=\"btn btn-primary float-right\" click.delegate=\"add()\">Update</button></div></div></template>";});;
define('go/loadCompleteCustomAttribute',['exports', 'aurelia-framework'], function (exports, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.LoadCompleteCustomAttribute = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _dec2, _class;

  var LoadCompleteCustomAttribute = exports.LoadCompleteCustomAttribute = (_dec = (0, _aureliaFramework.customAttribute)('loadcomplete'), _dec2 = (0, _aureliaFramework.inject)(Element), _dec(_class = _dec2(_class = function () {
    function LoadCompleteCustomAttribute(element) {
      _classCallCheck(this, LoadCompleteCustomAttribute);

      this.element = element;
    }

    LoadCompleteCustomAttribute.prototype.bind = function bind(bindingContext, overridingContext) {
      bindingContext.element = this.element;
      bindingContext.load_complete_callback(this.element);
    };

    return LoadCompleteCustomAttribute;
  }()) || _class) || _class);
});;
define('text!go/mobile/home-handheld.html',[],function(){return "<template><div class=\"container-fluid px-0\"><compose view-model=\"../task/task\" containerless></compose></div><nav class=\"navbar fixed-bottom navbar-expand-lg navbar-light bg-light\"><a class=\"navbar-brand\" href=\"#\"><i class=\"fa fa-clock-o fa-2x\"></i></a> <a class=\"navbar-brand\" href=\"#\"><i class=\"fa fa-comment fa-2x\"></i></a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span class=\"navbar-toggler-icon\"></span></button><div class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\"><div class=\"navbar-nav\"><a class=\"nav-link active\" href=\"#\">Home <span class=\"sr-only\">(current)</span></a> <a class=\"nav-link\" href=\"#\">Features</a> <a class=\"nav-link\" href=\"#\">Pricing</a> <a class=\"nav-link disabled\">Disabled</a></div></div></nav></template>";});;
define('text!go/mobile/schedule-handheld.html',[],function(){return "<template><div class=\"card-header d-flex align-items-center\"><svg width=\"50px\" height=\"100%\" viewBox=\"0 0 4167 4167\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2\"><circle cx=\"2085.32\" cy=\"2085.29\" r=\"2072.92\" style=\"fill:#5cb3bb\"/><path d=\"M2648.2,981.492c-352.948,-16.075 -689.951,81.06 -968.17,204.159c-423.495,187.377 -898.237,540.494 -898.237,540.494c-0,-0 385.105,-38.711 505.985,33.645c406.199,243.138 -847.669,395.233 -847.669,395.233c-0,0 1029.07,297.257 1349.24,404.81c205.911,69.171 337.482,358.493 -280.932,301.023c126.032,112.642 539.295,347.504 1037.12,374.825c621.769,34.122 1150.1,-453.703 1178.42,-1075.76c28.331,-622.06 -453.703,-1150.1 -1075.76,-1178.42Z\" style=\"fill:#a00022\"/><path d=\"M2843.89,2719.09c-117.968,-4.351 -223.977,-33.835 -315.439,-73.299c-113.925,-49.156 -205.279,-113.798 -269.057,-164.641c-121.364,-96.751 -413.739,-377.986 -594.205,-457.087c138.583,-70.399 505.946,-238.042 704.417,-293.622c127.644,-35.745 216.837,-207.974 -161.841,-192.203c80.317,-64.725 339.489,-194.994 643.739,-196.145c379.996,-1.438 686.793,312.312 684.692,692.305c-2.101,379.993 -312.565,698.698 -692.306,684.692Z\" style=\"fill:#fff\"/></svg><abp-datetime-picker class=\"pr-2 ml-auto\" style=\"width:120px\" icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"datepicker\" value.bind=\"scheduleDate\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker><div class=\"form-group mb-0\"><select ref=\"providerpicker\" value.bind=\"home.currentProvider\" class=\"form-control\" id=\"exampleFormControlSelect1\" change.delegate=\"providerSelected()\"><option model.bind=\"null\">Choose...</option><option scheduleprovider repeat.for=\"p of home.providers\" model.bind=\"p\">${p.ProviderEntity}</option></select></div><div class=\"dropdown btn-group\"><div if.bind=\"fullSizeSchedule\" class=\"d-inline-block\" style=\"padding:7px 0 0 8px\">${currentLocation.LocationName}</div><button id=\"btnGroupDrop1\" class=\"btn dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"fa fa-filter\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"btnGroupDrop1\"><a repeat.for=\"l of locations\" class=\"dropdown-item\" href=\"#\" click.delegate=\"getScheduleWithLocation(l)\"><i class=\"fa fa-map-marker\" aria-hidden=\"true\"></i> ${l.LocationName} </a></div></div></div><table ref=\"scheduletable\" class=\"table\" style=\"table-layout:fixed\"><thead style=\"font-size:small;color:grey\"><tr if.bind=\"!fullSizeSchedule\"><th scope=\"col\" style=\"width:7px;padding:0\"></th><th scope=\"col\" style=\"width:20px\"></th><th scope=\"col\" style=\"width:80px\">Time</th><th scope=\"col\" style=\"width:150px\">Name</th><th scope=\"col\" style=\"width:75px\">Type</th></tr><tr if.bind=\"fullSizeSchedule\"><th scope=\"col\" style=\"width:7px;padding:0\"></th><th scope=\"col\" style=\"width:20px\"></th><th scope=\"col\" style=\"width:80px\">Time</th><th scope=\"col\">Name</th><th scope=\"col\">Status</th><th scope=\"col\">Type</th><th scope=\"col\">Reason</th><th scope=\"col\">Room</th><th scope=\"col\">Pod</th><th scope=\"col\">Provider</th></tr></thead><tbody><template repeat.for=\"r of home.schedule\"><tr click.delegate=\"rowClick(r, $event)\" class=\"${r.bgColor} ${r.nearestSchedule ? 'current-item' : ''}\"><td if.bind=\"r.nearestSchedule\" style=\"background-color:#007bff\"></td><td if.bind=\"!r.nearestSchedule\"></td><td css=\"color: ${r.txtColor}\"><i class=\"fa fa-clock-o pr-1\" aria-hidden=\"true\"></i></td><td css=\"color: ${r.txtColor}\" class=\"text-nowrap\">${r.time}</td><td css=\"color: ${r.txtColor}\" class=\"text-nowrap font-weight-bold text-truncate\">${r.name}</td><td if.bind=\"fullSizeSchedule\" class=\"text-nowrap\" style=\"padding:0 12px 0 12px\"><select value.bind=\"r.status\" change.delegate=\"statusSelected(r)\" css=\"color: ${r.txtColor}\" style=\"width:100%;height:48px;border:none;background:0 0\"><option>Choose...</option><option repeat.for=\"s of statusList\" model.bind=\"s\">${s}</option></select></td><td css=\"color: ${r.txtColor}\" class=\"text-nowrap\">${r.type}</td><td if.bind=\"fullSizeSchedule\" css=\"color: ${r.txtColor}\" class=\"p-0\" style=\"vertical-align:middle\"><textarea class=\"form-control\" rows=\"1\" value.bind=\"r.reasonForVisit\" style=\"resize:none;background-color:transparent;border:none\" click.delegate=\"reasonForVisitFocus(r, $event)\"></textarea></td><td if.bind=\"fullSizeSchedule\" class=\"text-nowrap\" style=\"padding:0 12px 0 12px\"><select value.bind=\"r.room\" change.delegate=\"roomSelected(r)\" css=\"color: ${r.txtColor}\" style=\"width:100%;height:48px;border:none;background:0 0\"><option>Choose...</option><option repeat.for=\"s of roomList\" model.bind=\"s.Description1\">${s.Description1}</option></select></td><td if.bind=\"fullSizeSchedule\" class=\"text-nowrap\" style=\"padding:0 12px 0 12px\"><select value.bind=\"r.pod\" change.delegate=\"podSelected(r)\" css=\"color: ${r.txtColor}\" style=\"width:100%;height:48px;border:none;background:0 0\"><option>Choose...</option><option repeat.for=\"s of podList\" model.bind=\"s.Description1\">${s.Description1}</option></select></td><td if.bind=\"fullSizeSchedule\" css=\"color: ${r.txtColor}\" class=\"text-nowrap\"> ${r.providerName} </td></tr></template></tbody></table></template>";});;
define('go/moveFolderView',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'lodash', 'moment', '../data/go/data', './home', './createVisitPopup', 'aurelia-dialog', './popupHelper'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _data, _home, _createVisitPopup, _aureliaDialog, _popupHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MoveFolderView = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var MoveFolderView = exports.MoveFolderView = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home, _aureliaDialog.DialogService, _popupHelper.PopupHelper), _dec(_class = function () {
    function MoveFolderView(helper, http, Data, Home, DialogService, PopupHelper) {
      _classCallCheck(this, MoveFolderView);

      this.folders = [];

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
      this.dialogService = DialogService;
      this.popupHelper = PopupHelper;
    }

    MoveFolderView.prototype.activate = function activate(model) {
      var self = this;
      self.parent = model;
      self.folders = model.rootFolder.folders;
    };

    MoveFolderView.prototype.folderClick = function folderClick(f) {
      var self = this;
      self.parent.dialog.close(true, { folder: f });
    };

    return MoveFolderView;
  }()) || _class);
});;
define('text!go/moveFolderView.html',[],function(){return "<template><div class=\"card\" style=\"height:inherit\"><div class=\"card-header\"><h4 class=\"mr-2 mb-0\" style=\"display:inline-block;vertical-align:middle\"><i class=\"fa fa-folder-o mr-2\"></i>Move to folder...</h4><i class=\"fa fa-close fa-2x float-right\" style=\"vertical-align:middle\" click.delegate=\"cancel()\"></i></div><div class=\"card-body\" style=\"overflow-y:scroll\"><div repeat.for=\"a of folders\"><div class=\"d-flex align-items-center text-primary\" click.delegate=\"$this.folderClick(a)\"><i class=\"fa fa-folder-o fa-2x pr-1\" aria-hidden=\"true\"></i><div class=\"text-capitalize\">${a.name}</div></div><hr class=\"my-2\"><div repeat.for=\"b of a.folders\"><div class=\"d-flex align-items-center text-primary ml-4\" click.delegate=\"$this.folderClick(b)\"><i class=\"fa fa-folder-o fa-2x pr-1\" aria-hidden=\"true\"></i><div class=\"text-capitalize\">${b.name}</div></div><hr class=\"my-2\"><div repeat.for=\"c of b.folders\"><div class=\"d-flex align-items-center text-primary ml-8\" click.delegate=\"$this.folderClick(c)\"><i class=\"fa fa-folder-o fa-2x pr-1\" aria-hidden=\"true\"></i><div class=\"text-capitalize\">${c.name}</div></div><hr class=\"my-2\"><div repeat.for=\"d of c.folders\"><div class=\"d-flex align-items-center text-primary ml-8\" click.delegate=\"$this.folderClick(d)\"><i class=\"fa fa-folder-o fa-2x pr-1\" aria-hidden=\"true\"></i><div class=\"text-capitalize\">${d.name}</div></div><hr class=\"my-2\"></div></div></div></div></div></div></template>";});;
define('go/parentChildPicker',['exports', 'lodash'], function (exports, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ParentChildPicker = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var ParentChildPicker = exports.ParentChildPicker = function () {
    function ParentChildPicker() {
      _classCallCheck(this, ParentChildPicker);

      this.parentChildItem = null;
      this.parentChildItems = [];
      this.currentItem = null;
      this.hasParent = false;
      this.selectedItem = null;
      this.listHeight = 400;
    }

    ParentChildPicker.prototype.activate = function activate(model) {
      this.home = model.home;
      this.parent = model;
      this.parentChildItem = model.parentChildItem;
      this.parentChildItems = model.parentChildItems;
      this.currentItem = model.currentParentChildItem;
    };

    ParentChildPicker.prototype.attached = function attached() {
      var self = this;
      if (self.currentItem == undefined || self.currentItem == null) {
        self.currentItem = self.parentChildItems.length > 0 ? self.parentChildItems[0] : null;
      }
    };

    ParentChildPicker.prototype.itemSelected = function itemSelected(item) {
      var self = this;
      self.parent.dialog.close(true, item);
    };

    ParentChildPicker.prototype.backClick = function backClick() {
      var self = this;

      if (self.selectedItem) {
        self.selectedItem.selected = false;
      }

      if (self.currentItem.parent) {
        self.currentItem = self.currentItem.parent;
      }
      self.hasParent = self.currentItem.parent ? true : false;
    };

    ParentChildPicker.prototype.itemClick = function itemClick(item) {
      var self = this;
      if (item.items.length > 0) {
        self.currentItem = item;
        self.hasParent = self.currentItem.parent ? true : false;
      } else {
        if (self.selectedItem) {
          self.selectedItem.selected = false;
        }
        item.selected = true;
        self.selectedItem = item;
      }
    };

    return ParentChildPicker;
  }();
});;
define('text!go/parentChildPicker.html',[],function(){return "<template><div class=\"form-group mb-0\"><select value.bind=\"currentItem\" class=\"form-control\" id=\"exampleFormControlSelect1\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"p of parentChildItems\" model.bind=\"p\">${p.description}</option></select></div><div with.bind=\"currentItem\" class=\"card\"><div class=\"d-flex card-header align-items-center\" click.delegate=\"backClick()\"><i if.bind=\"hasParent\" class=\"fa fa-angle-left fa-2x mr-2 text-primary\" aria-hidden=\"true\"></i> <strong class=\"text-capitalize\">${description}</strong></div><ul class=\"list-group list-group-flush\" css=\"max-height:${listHeight}px;\" style=\"overflow-y:scroll\"><li repeat.for=\"i of items\" class=\"d-flex list-group-item align-items-center ${i.selected ? 'list-group-item-primary' : ''}\" click.delegate=\"itemClick(i)\"><div class=\"text-capitalize\">${i.description}</div><i if.bind=\"i.items.length > 0\" class=\"fa fa-angle-right fa-2x ml-auto text-primary\" aria-hidden=\"true\"></i> <button if.bind=\"i.items.length == 0\" type=\"button\" class=\"btn btn-primary ml-auto\" click.delegate=\"itemSelected(i)\">Select</button> <i if.bind=\"i.data.Mapped\" class=\"fa fa-map-marker text-danger fa-2x ml-1\" aria-hidden=\"true\"></i></li></ul></div></template>";});;
define('go/patientDetails',['exports', 'aurelia-framework', '../helpers/http', '../helpers/helper', 'lodash', '../data/go/data', 'aurelia-dialog'], function (exports, _aureliaFramework, _http, _helper, _lodash, _data, _aureliaDialog) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PatientDetails = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  var _dec, _dec2, _class, _desc, _value, _class2;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var ListObject = function ListObject(description, data) {
    _classCallCheck(this, ListObject);

    this.description = description;
    this.data = data;
  };

  var PatientDetails = exports.PatientDetails = (_dec = (0, _aureliaFramework.inject)(_http.http, _helper.helper, _data.Data, _aureliaDialog.DialogController), _dec2 = (0, _aureliaFramework.computedFrom)('patient.data.NameLast', 'patient.data.NameFirst'), _dec(_class = (_class2 = function () {
    _createClass(PatientDetails, [{
      key: 'canSave',
      get: function get() {
        if (this.patient.data.NameLast != null && this.patient.data.NameLast.length > 0 && this.patient.data.NameFirst != null && this.patient.data.NameFirst.length > 0) {
          return true;
        } else {
          return false;
        }
      }
    }]);

    function PatientDetails(http, helper, Data, DialogController) {
      _classCallCheck(this, PatientDetails);

      this.displayInPopup = false;
      this.create = false;
      this.patient = null;
      this.sexList = ['M', 'F', 'UNK'];
      this.marriedList = ['Married', 'Single', 'Divorced', 'Separated', 'Widowed'];
      this.stateList = ['AK', 'AL', 'AR', 'AS', 'AZ', 'CA', 'CO', 'CT', 'DC', 'DE', 'FL', 'GA', 'GU', 'HI', 'IA', 'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME', 'MI', 'MN', 'MO', 'MP', 'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY', 'OH', 'OK', 'OR', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UM', 'UT', 'VA', 'VI', 'VT', 'WA', 'WI', 'WV', 'WY'];
      this.providerList = [];
      this.languages = [];
      this.races = [];
      this.ethnicities = [];
      this.sexPrefs = [];
      this.genderIds = [];

      this.http = http;
      this.helper = helper;
      this.data = Data;
      this.dialogController = DialogController;
    }

    PatientDetails.prototype.detached = function detached() {
      this.saveDemographics();
    };

    PatientDetails.prototype.close = function close() {
      this.dialogController.close();
    };

    PatientDetails.prototype.activate = function activate(params) {
      var self = this;

      self.home = params.home;
      self.scrollHeight = params.scrollHeight;
      self.disableDemographics = params.disableDemographics;

      if (params.patient && params.patient.data) {
        var dateSplit = params.patient.data.DOB.split('/');
        var dateYYYYMMDD = dateSplit[2] + "-" + dateSplit[0] + "-" + dateSplit[1];
        params.patient.data.DOB = dateYYYYMMDD;

        self.patient = params.patient;
      } else {
        self.patient = { "data": params.patient };
        self.create = true;
      }

      self.displayInPopup = params.displayInPopup;

      if (self.patient.data && self.patient.data.Json) {
        var json = JSON.parse(self.patient.data.Json);
        if (json.hasOwnProperty('MuDemographics')) {
          self.muDemographics = json.MuDemographics;
        }
      }

      self.loadProviderListAndSelectProviders();

      this.loadSexualPrefGenderIdentityLanguagesRaceEthnicity();
    };

    PatientDetails.prototype.loadProviderListAndSelectProviders = function loadProviderListAndSelectProviders() {
      var self = this;
      var refUrl = 'referring/all';
      self.data.getWithUrl(refUrl, function (res) {
        self.providerList = res;


        self.referringProvider = _.find(self.providerList, function (p) {
          return p.ReferringID == self.patient.data.RefPhysID;
        });
        self.primaryCareProvider = _.find(self.providerList, function (p) {
          return p.ReferringID == self.patient.data.PCPID;
        });
      });
    };

    PatientDetails.prototype.loadSexualPrefGenderIdentityLanguagesRaceEthnicity = function loadSexualPrefGenderIdentityLanguagesRaceEthnicity() {
      var self = this;

      self.data.getLists(['SexPref', 'GenderID'], function (res) {

        var sexes = _.filter(res, function (s) {
          return s.ListType == 'SexPref';
        });
        var genders = _.filter(res, function (s) {
          return s.ListType == 'GenderID';
        });
        for (var i = 0; i < sexes.length; i++) {
          var r = new ListObject(sexes[i].Description1, sexes[i]);
          self.sexPrefs.push(r);
          if (self.muDemographics) {
            if (self.muDemographics.hasOwnProperty('SexualPreference')) {
              if (sexes[i].Description1 == self.muDemographics.SexualPreference) {
                self.selectedSexualPref = r;
              }
            }
          }
        }

        for (var _i = 0; _i < genders.length; _i++) {
          var _r = new ListObject(genders[_i].Description1, genders[_i]);
          self.genderIds.push(_r);
          if (self.muDemographics) {
            if (self.muDemographics.hasOwnProperty('GenderIdentity')) {
              if (self.muDemographics.GenderIdentity.length > 0) {
                if (genders[_i].Description1 == self.muDemographics.GenderIdentity[0]) {
                  self.selectedGenderID = _r;
                }
              }
            }
          }
        }
      });

      self.data.getWithUrl('race', function (res) {

        res = _.uniqBy(res, 'RollUpName');

        for (var i = 0; i < res.length; i++) {

          var r = new ListObject(res[i].RollUpName, res[i]);
          self.races.push(r);
          if (res[i].RollUpID == self.patient.data.RaceRollUpID) {
            self.selectedRace = r;
          }
        }
      });
      self.data.getWithUrl('ethnicity', function (res) {

        res = _.filter(res, function (r) {
          return r.Category == null;
        });
        res = _.orderBy(res, 'Description');

        for (var i = 0; i < res.length; i++) {
          var r = new ListObject(res[i].Description, res[i]);
          self.ethnicities.push(r);
          if (res[i].Code == self.patient.data.EthnicityRollUpID) {
            self.selectedEthnicity = r;
          }
        }
      });

      if (self.home && self.home.currentProvider != null) {
        self.data.getListWithProviderId('Language', self.home.currentProvider.ProviderID, function (res) {
          for (var i = 0; i < res.length; i++) {
            var lang = new ListObject(res[i].Description1, res[i]);
            self.languages.push(lang);

            if (res[i].Description2 == self.patient.data.Language) {
              self.selectedLanguage = lang;
            }
          }
        });
      }
    };

    PatientDetails.prototype.saveDemographics = function saveDemographics() {

      if (this.selectedLanguage) this.patient.data.Language = this.selectedLanguage.data.Description2;
      if (this.selectedRace) {
        this.patient.data.Race = this.selectedRace.data.RaceName;
        this.patient.data.RaceID = this.selectedRace.data.RaceID;
        this.patient.data.RaceRollUpID = this.selectedRace.data.RollUpID;
      }
      if (this.selectedEthnicity) {
        this.patient.data.Ethnicity = this.selectedEthnicity.data.Description;
        this.patient.data.EthnicityID = this.selectedEthnicity.data.Category;
        this.patient.data.EthnicityRollUpID = this.selectedEthnicity.data.Code;
      }
      if (this.selectedGenderID) {
        this.muDemographics['GenderIdentity'] = [this.selectedGenderID.description];
      }
      if (this.selectedSexualPref) {
        this.muDemographics['SexualPreference'] = this.selectedSexualPref.description;
      }
      this.patient.data.Json = JSON.stringify(this.muDemographics);

      if (this.referringProvider) {
        this.patient.data.RefPhysID = this.referringProvider.ReferringID;
      }

      if (this.primaryCareProvider) {
        this.patient.data.PCPID = this.primaryCareProvider.ReferringID;
      }

      var dateSplit = this.patient.data.DOB.split('-');
      var dateMMDDYYYY = dateSplit[1] + "/" + dateSplit[2] + "/" + dateSplit[0];
      this.patient.data.DOB = dateMMDDYYYY;

      var self = this;

      if (!this.create) {
        var saveDialog = self.helper.createNoty("Saving patient", 3000);
        saveDialog.show();
        this.data.updatePatient(this.patient.data, function (res) {
          self.helper.updateNoty(saveDialog, "Patient updated!", "success", 1000);
        });
      } else {
        var _saveDialog = self.helper.createNoty("Creating patient", 3000);
        _saveDialog.show();
        this.data.createPatient(this.patient.data, function (res) {
          self.patient.data = res;
          self.create = false;
          self.helper.updateNoty(_saveDialog, "Patient created!", "success", 1000);
          self.dialogController.close(true, self.patient.data);
        });
      }
    };

    return PatientDetails;
  }(), (_applyDecoratedDescriptor(_class2.prototype, 'canSave', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'canSave'), _class2.prototype)), _class2)) || _class);
});;
define('text!go/patientDetails.html',[],function(){return "<template><h4 if.bind=\"!displayInPopup\">Demographics <button type=\"button\" class=\"btn btn-outline-primary\" click.delegate=\"openCamera()\"><i class=\"fa fa-camera pr-1\" aria-hidden=\"true\"></i>Photo</button> <small class=\"form-text text-muted float-right\">${patient.data.PatientID}</small></h4><div if.bind=\"displayInPopup\" class=\"d-flex align-items-center border-bottom\" style=\"background-color:#f8f9fa;padding:4px\"><h4 class=\"mx-2 mb-0\">Create Patient</h4><button type=\"button\" class=\"btn btn-primary\" disabled.bind=\"!canSave\" click.delegate=\"saveDemographics()\"><i class=\"fa fa-floppy-o mr-1\" aria-hidden=\"true\"></i> Save</button> <i class=\"fa fa-times fa-2x ml-auto mr-2\" aria-hidden=\"true\" click.delegate=\"close()\"></i></div><form style=\"overflow-x:hidden;overflow-y:scroll\" class=\"${displayInPopup ? 'p-4' : ''}\" css=\"height:${scrollHeight}px;\"><div class=\"form-row\"><div class=\"form-group col-md-4\"><small id=\"nameFirstHelp\" class=\"form-text text-muted\">First Name</small> <input type=\"text\" placeholder=\"First\" class=\"form-control ${patient.data.NameFirst.length==0 || patient.data.NameFirst == null ? 'is-invalid' : ''}\" readonly.bind=\"disableDemographics\" value.bind=\"patient.data.NameFirst\" aria-describedby=\"nameFirstHelp\"><div id=\"lastNameError\" class=\"invalid-feedback\">First name required</div></div><div class=\"form-group col-md-4\"><small id=\"nameMiddleHelp\" class=\"form-text text-muted\">Middle Name</small> <input type=\"text\" placeholder=\"Middle\" class=\"form-control\" readonly.bind=\"disableDemographics\" value.bind=\"patient.data.NameMiddle\" aria-describedby=\"nameMiddleHelp\"></div><div class=\"form-group col-md-4\"><small id=\"nameLastHelp\" class=\"form-text text-muted\">Last Name</small> <input type=\"text\" placeholder=\"Last\" class=\"form-control ${patient.data.NameLast.length==0 || patient.data.NameLast == null ? 'is-invalid' : ''}\" readonly.bind=\"disableDemographics\" value.bind=\"patient.data.NameLast\" aria-describedby=\"nameLastHelp\"><div id=\"lastNameError\" class=\"invalid-feedback\">Last name required</div></div></div><div class=\"form-row\"><div class=\"form-group col-md-8\"><small id=\"address1help\" class=\"form-text text-muted\">Address1</small> <input type=\"text\" placeholder=\"Address1\" class=\"form-control\" readonly.bind=\"disableDemographics\" value.bind=\"patient.data.Address1\" aria-describedby=\"address1help\"></div><div class=\"col-md-2\"><small id=\"sexHelp\" class=\"form-text text-muted\">Sex</small> <select value.bind=\"patient.data.Sex\" disabled.bind=\"disableDemographics\" class=\"form-control\" aria-describedby=\"sexHelp\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of sexList\" model.bind=\"s\">${s}</option></select></div></div><div class=\"form-row\"><div class=\"form-group col-md-8\"><small id=\"address2help\" class=\"form-text text-muted\">Address2</small> <input type=\"text\" placeholder=\"Address2\" class=\"form-control\" readonly.bind=\"disableDemographics\" value.bind=\"patient.data.Address2\" aria-describedby=\"address2help\"></div></div><div class=\"form-row\"><div class=\"form-group col-md-4\"><small id=\"addressCityHelp\" class=\"form-text text-muted\">City</small> <input type=\"text\" placeholder=\"City\" class=\"form-control\" readonly.bind=\"disableDemographics\" value.bind=\"patient.data.AddressCity\" aria-describedby=\"addressCityHelp\"></div><div class=\"col-md-2\"><small id=\"addressStateHelp\" class=\"form-text text-muted\">State</small> <select value.bind=\"patient.data.AddressState\" disabled.bind=\"disableDemographics\" class=\"form-control\" aria-describedby=\"addressStateHelp\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of stateList\" model.bind=\"s\">${s}</option></select></div><div class=\"form-group col-md-3\"><small id=\"adressZipHelp\" class=\"form-text text-muted\">Zip</small> <input type=\"text\" placeholder=\"Zip\" class=\"form-control\" readonly.bind=\"disableDemographics\" value.bind=\"patient.data.AddressZip\" aria-describedby=\"adressZipHelp\"></div></div><div class=\"form-row\"><div class=\"form-group col-md-4\"><small id=\"phoneHomeHelp\" class=\"form-text text-muted\">Home Phone</small> <input type=\"text\" placeholder=\"Home Phone\" class=\"form-control\" readonly.bind=\"disableDemographics\" value.bind=\"patient.data.PhoneHome\" aria-describedby=\"phoneHomeHelp\"></div><div class=\"form-group col-md-4\"><small id=\"phoneWorkHelp\" class=\"form-text text-muted\">Work Phone</small> <input type=\"text\" placeholder=\"Work Phone\" class=\"form-control\" readonly.bind=\"disableDemographics\" value.bind=\"patient.data.PhoneWork\" aria-describedby=\"phoneWorkHelp\"></div><div class=\"form-group col-md-4\"><small id=\"phoneCellHelp\" class=\"form-text text-muted\">Cell Phone</small> <input type=\"text\" placeholder=\"Cell Phone\" class=\"form-control\" readonly.bind=\"disableDemographics\" value.bind=\"patient.data.PhoneCell\" aria-describedby=\"phoneCellHelp\"></div></div><div class=\"form-row\"><div class=\"form-group col-md-8\"><small id=\"emailHelp\" class=\"form-text text-muted\">Email</small> <input type=\"text\" placeholder=\"Email Address\" class=\"form-control\" readonly.bind=\"disableDemographics\" value.bind=\"patient.data.Email\" aria-describedby=\"emailHelp\"></div></div><div class=\"form-row\"><div class=\"form-group col-md-4\"><small id=\"DOBHelp\" class=\"form-text text-muted\">DOB</small> <input type=\"date\" placeholder=\"DOB\" class=\"form-control ${patient.data.DOB==0 || patient.data.DOB == null ? 'is-invalid' : ''}\" readonly.bind=\"disableDemographics\" value.bind=\"patient.data.DOB\" aria-describedby=\"DOBHelp\"><div id=\"usernameError\" class=\"invalid-feedback\">DOB is required</div></div><div class=\"form-group col-md-4\"><small id=\"SSNHelp\" class=\"form-text text-muted\">SSN</small> <input type=\"text\" placeholder=\"SSN\" class=\"form-control\" readonly.bind=\"disableDemographics\" value.bind=\"patient.data.SSNumber\" aria-describedby=\"SSNHelp\"></div></div><div class=\"form-row\"><div class=\"form-group col-md-4\"><small id=\"maritalHelp\" class=\"form-text text-muted\">Marital Status</small> <select value.bind=\"patient.data.MaritalStatus\" disabled.bind=\"disableDemographics\" class=\"form-control\" aria-describedby=\"maritalHelp\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of marriedList\" model.bind=\"s\">${s}</option></select></div><div class=\"form-group col-md-4\"><small id=\"spouseFirstHelp\" class=\"form-text text-muted\">Spouse First</small> <input type=\"text\" placeholder=\"Spouse First\" class=\"form-control\" value.bind=\"patient.data.SpouseFirst\" aria-describedby=\"spouseFirstHelp\"></div><div class=\"form-group col-md-4\"><small id=\"spouseLastHelp\" class=\"form-text text-muted\">Spouse Last</small> <input type=\"text\" placeholder=\"Spouse Last\" class=\"form-control\" value.bind=\"patient.data.SpouseLast\" aria-describedby=\"spouseLastHelp\"></div></div><div class=\"form-row\"><div class=\"form-group col-md-12\"><div class=\"card\"><div class=\"card-body pb-0\"><h6 class=\"card-subtitle mb-2 text-muted\">PCP</h6><div class=\"form-row\"><div class=\"form-group col-md-8\"><select value.bind=\"primaryCareProvider\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of providerList\" model.bind=\"s\">${s.ReferringEntity}</option></select></div></div><div if.bind=\"primaryCareProvider\"><div class=\"form-row\"><div class=\"form-group col-md-12\"><small id=\"primAddressHelp\" class=\"form-text text-muted\">Address</small> <input type=\"text\" readonly=\"readonly\" class=\"form-control-plaintext\" value.bind=\"primaryCareProvider.Address1\" aria-describedby=\"primAddressHelp\"></div></div><div class=\"form-row\"><div class=\"form-group col-md-4\"><small id=\"primCityHelp\" class=\"form-text text-muted\">City</small> <input type=\"text\" readonly=\"readonly\" class=\"form-control-plaintext\" value.bind=\"primaryCareProvider.AddressCity\" aria-describedby=\"primCityHelp\"></div><div class=\"form-group col-md-2\"><small id=\"primStateHelp\" class=\"form-text text-muted\">State</small> <input type=\"text\" readonly=\"readonly\" class=\"form-control-plaintext\" value.bind=\"primaryCareProvider.AddressState\" aria-describedby=\"primStateHelp\"></div><div class=\"form-group col-md-3\"><small id=\"primZipHelp\" class=\"form-text text-muted\">Zip</small> <input type=\"text\" readonly=\"readonly\" class=\"form-control-plaintext\" value.bind=\"primaryCareProvider.AddressZip\" aria-describedby=\"primZipHelp\"></div><div class=\"form-group col-md-3\"><small id=\"primPhoneHelp\" class=\"form-text text-muted\">Phone</small> <input type=\"text\" readonly=\"readonly\" class=\"form-control-plaintext\" value.bind=\"primaryCareProvider.Phone\" aria-describedby=\"primPhoneHelp\"></div></div></div></div></div></div></div><div class=\"form-row\"><div class=\"form-group col-md-12\"><div class=\"card\"><div class=\"card-body pb-0\"><h6 class=\"card-subtitle mb-2 text-muted\">Referring</h6><div class=\"form-row\"><div class=\"form-group col-md-8\"><select value.bind=\"referringProvider\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of providerList\" model.bind=\"s\">${s.ReferringEntity}</option></select></div></div><div if.bind=\"referringProvider\"><div class=\"form-row\"><div class=\"form-group col-md-12\"><input type=\"text\" readonly=\"readonly\" class=\"form-control-plaintext\" value.bind=\"referringProvider.Address1\"></div></div><div class=\"form-row\"><div class=\"form-group col-md-4\"><input type=\"text\" readonly=\"readonly\" class=\"form-control-plaintext\" value.bind=\"referringProvider.AddressCity\"></div><div class=\"form-group col-md-2\"><input type=\"text\" readonly=\"readonly\" class=\"form-control-plaintext\" value.bind=\"referringProvider.AddressState\"></div><div class=\"form-group col-md-3\"><input type=\"text\" readonly=\"readonly\" class=\"form-control-plaintext\" value.bind=\"referringProvider.AddressZip\"></div><div class=\"form-group col-md-3\"><input type=\"text\" readonly=\"readonly\" class=\"form-control-plaintext\" value.bind=\"referringProvider.Phone\"></div></div></div></div></div></div></div><div class=\"form-row\"><div class=\"form-group col-md-4\"><small id=\"languageHelp\" class=\"form-text text-muted\">Preferred Language</small> <select value.bind=\"selectedLanguage\" class=\"form-control\" aria-describedby=\"languageHelp\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of languages\" model.bind=\"s\">${s.description}</option></select></div><div class=\"form-group col-md-4\"><small id=\"raceHelp\" class=\"form-text text-muted\">Race</small> <select value.bind=\"selectedRace\" class=\"form-control\" aria-describedby=\"raceHelp\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of races\" model.bind=\"s\">${s.description}</option></select></div><div class=\"form-group col-md-4\"><small id=\"ethnicityHelp\" class=\"form-text text-muted\">Ethnicity</small> <select value.bind=\"selectedEthnicity\" class=\"form-control\" aria-describedby=\"ethnicityHelp\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of ethnicities\" model.bind=\"s\">${s.description}</option></select></div></div><div class=\"form-row\"><div class=\"form-group col-md-4\"><small id=\"sexPrefHelp\" class=\"form-text text-muted\">Sexual Preference</small> <select value.bind=\"selectedSexualPref\" class=\"form-control\" aria-describedby=\"sexPrefHelp\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of sexPrefs\" model.bind=\"s\">${s.description}</option></select></div><div class=\"form-group col-md-4\"><small id=\"genderIdHelp\" class=\"form-text text-muted\">Gender ID</small> <select value.bind=\"selectedGenderID\" class=\"form-control\" aria-describedby=\"genderIdHelp\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of genderIds\" model.bind=\"s\">${s.description}</option></select></div></div></form></template>";});;
define('go/patientHistory/allergiesMeds',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', '../home', '../../data/go/data', 'lodash', 'moment', 'aurelia-event-aggregator'], function (exports, _helper, _http, _aureliaFramework, _home, _data, _lodash, _moment, _aureliaEventAggregator) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AllergiesMeds = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _desc, _value, _class, _descriptor, _dec, _class3;

  var drug = (_class = function () {
    function drug(name, data) {
      _classCallCheck(this, drug);

      _initDefineProp(this, 'selectedReaction', _descriptor, this);

      this.name = name;
      this.data = data;
      this.visible = true;
    }

    drug.prototype.selectedReactionChanged = function selectedReactionChanged(newVal, oldVal) {
      this.data.Reaction = newVal;
    };

    return drug;
  }(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'selectedReaction', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  })), _class);
  var AllergiesMeds = exports.AllergiesMeds = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home, _aureliaEventAggregator.EventAggregator), _dec(_class3 = function () {
    function AllergiesMeds(helper, http, Data, Home, EventAggregator) {
      _classCallCheck(this, AllergiesMeds);

      this.allergySearch = "";
      this.medSearch = "";
      this.allergies = [];
      this.meds = [];
      this.parent = null;
      this.allergySearchResult = [];
      this.medSearchResult = [];
      this.allergyReactionList = ["unknown", "anaphylaxis", "coughing", "diarrhea", "difficulty breathing", "headache", "hives", "itching nose, mouth, throat", "red eyes", "runny nose", "tearing, burning or itching eyes", "skin rashes", "stomach cramps", "swollen eyes", "vomiting", "wheezing"];
      this.searchVisible = false;
      this.saveAlgMed = false;

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
      this.event = EventAggregator;
    }

    AllergiesMeds.prototype.activate = function activate(model) {
      var self = this;
      self.history = model.history;
      self.parent = model;
      self.saveAlgMed = model.saveHx;
    };

    AllergiesMeds.prototype.load = function load() {
      var self = this;

      self.data.getPatientAllergiesMeds(self.parent.demographics.patient.data.PatientID, function (res) {

        var allergies = res.Allergies;
        var meds = res.Medications;

        for (var i = 0; i < allergies.length; i++) {
          var aDrug = allergies[i];
          var nkda = self.checkForNoKnowDrugAllergies(aDrug);
          if (nkda) {
            self.parent.history.allergies.noKnownDrugAllergies.selected = true;
            self.parent.history.allergies.noKnownDrugAllergies.visible = true;
          } else {
            var newDrug = new drug(aDrug.Substance, aDrug);
            newDrug.selectedReaction = aDrug.Reaction;
            self.allergies.push(newDrug);
          }
        }

        for (var _i = 0; _i < meds.length; _i++) {
          var aMed = meds[_i];
          self.meds.push(new drug(aMed.RX_Sig, aMed));
        }
      });
    };

    AllergiesMeds.prototype.attached = function attached() {
      var self = this;

      self.event.subscribe('savePatientHistory', function () {
        self.save();
      });

      self.load();

      $("#demotop").on('click', function (e) {
        if (self.searchVisible && e.target.parentElement.id != 'algpicker' && e.target.parentElement.id != 'medpicker') {
          self.hideSearchResult();
        }
      });
    };

    AllergiesMeds.prototype.detached = function detached() {
      if (this.saveAlgMed == true) {
        this.save();
      }
    };

    AllergiesMeds.prototype.noKnowDrugAllergiesChecked = function noKnowDrugAllergiesChecked(checked) {
      for (var i = 0; i < this.allergies.length; i++) {
        this.deleteAllergy(this.allergies[i]);
      }

      if (checked) {
        var patId = this.parent.demographics.patient.data.PatientID;
        var url = 'drfirst/patient/allergies/nkda?patientId=' + patId;
        this.data.getWithUrl(url, function (res) {});
      }
    };

    AllergiesMeds.prototype.noCurrentMedsChecked = function noCurrentMedsChecked(checked) {
      var chk = checked;
    };

    AllergiesMeds.prototype.checkForNoKnowDrugAllergies = function checkForNoKnowDrugAllergies(allergy) {
      if ((allergy.Substance.toUpperCase() == 'NKDA' || allergy.Substance.toUpperCase() == 'NO KNOWN DRUG ALLERGIES') && (allergy.Status.toUpperCase() == 'A' || allergy.Status.toUpperCase() == 'ACTIVE')) {
        return true;
      } else {
        return false;
      }
    };

    AllergiesMeds.prototype.getNewRx = function getNewRx(patientId, ndc, sig) {
      return {
        'RXPatientID': 0,
        'RX_Description': ndc,
        'RX_Sig': sig,
        'RX_Status': 'E',
        'RX_Date': (0, _moment2.default)().format("MM-DD-YYYY"),
        'PatientID': patientId,
        'ProviderID': null,
        'UserID': "",
        'OD_RX_Drugs': {
          'NDC': ndc
        }
      };
    };

    AllergiesMeds.prototype.getNewAllergy = function getNewAllergy(patientId, substance, ndc) {
      return {
        'AllergyID': 0,
        'Substance': substance,
        'Reaction': "",
        'Description': ndc ? ndc : 'none',
        'Status': 'A',
        'PatientID': patientId,
        'ExamDateTime': (0, _moment2.default)().format("MM-DD-YYYY")
      };
    };

    AllergiesMeds.prototype.save = function save() {
      var self = this;

      var algsToSave = {
        Allergies: []
      };
      var algsToUpdate = {
        Allergies: []
      };

      for (var i = 0; i < self.allergies.length; i++) {
        var alg = self.allergies[i];
        if (alg.data.AllergyID == 0) {
          algsToSave.Allergies.push(alg.data);
        } else {
          algsToUpdate.Allergies.push(alg.data);
        }
      }

      if (algsToSave.Allergies.length > 0) {
        self.data.savePatientAllergies(algsToSave, function (res) {
          for (var r = 0; r < res.length; r++) {
            var algToMatch = res[r];
            for (var m = 0; m < self.allergies.length; m++) {
              var alg = self.allergies[m];
              if (alg.data.Substance == algToMatch.Substance && alg.data.Description == algToMatch.Description) {
                alg.data.AllergyID = algToMatch.AllergyID;
                break;
              }
            }
          }

          var algData = JSON.stringify(res);
          self.data.postWithUrlAndData('drfirst/patient/allergies', algData, function (res) {
            var r = res;
          });
        });
      }
      if (algsToUpdate.Allergies.length > 0) {
        self.data.updatePatientAllergies(algsToUpdate, function (res) {
          var algData = JSON.stringify(res);
          self.data.postWithUrlAndData('drfirst/patient/allergies', algData, function (res) {
            var r = res;
          });
        });
      }

      var medsToSave = {
        Rxs: []
      };
      var medsToUpdate = {
        Rxs: []
      };

      for (var _i2 = 0; _i2 < self.meds.length; _i2++) {
        var m = self.meds[_i2];
        if (m.data.RXPatientID == 0) {
          m.data.OD_RX_Drugs = {};
          medsToSave.Rxs.push(m.data);
        } else {
          m.data.OD_RX_Drugs = { NDC: m.data.RX_Description };
          medsToUpdate.Rxs.push(m.data);
        }
      }

      if (medsToSave.Rxs.length > 0) {
        self.data.savePatientMeds(medsToSave, function (res) {
          for (var r = 0; r < res.length; r++) {
            var rxToMatch = res[r];
            for (var _m = 0; _m < self.meds.length; _m++) {
              var medToMatch = self.meds[_m];
              if (medToMatch.data.RX_Description == rxToMatch.RX_Description && medToMatch.data.RX_Sig == rxToMatch.RX_Sig) {
                medToMatch.data.RXPatientID = rxToMatch.RXPatientID;
                break;
              }
            }
          }
        });
      }
      if (medsToUpdate.Rxs.length > 0) {
        self.data.updatePatientMeds(medsToUpdate, function (res) {});
      }
    };

    AllergiesMeds.prototype.hideSearchResult = function hideSearchResult() {
      this.medSearchResult = [];
      this.allergySearchResult = [];
      this.searchVisible = false;
    };

    AllergiesMeds.prototype.deleteAllergy = function deleteAllergy(a) {
      var self = this;
      for (var i = 0; i < self.allergies.length; i++) {
        if (self.allergies[i].name == a.name) {
          self.allergies[i].data.Status = 'D';
          self.allergies[i].visible = false;
        }
      }
    };

    AllergiesMeds.prototype.allergyResultClick = function allergyResultClick(a) {
      var self = this;
      self.allergySearchResult = [];
      self.allergySearch = null;
      self.searchVisible = false;

      var newAlg = self.getNewAllergy(self.parent.demographics.patient.data.PatientID, a.BN, a.NDC);

      self.allergies.push(new drug(a.BN, newAlg));
    };

    AllergiesMeds.prototype.searchAllergies = function searchAllergies() {
      var self = this;
      self.data.searchDrugs(self.allergySearch, function (res) {
        self.allergySearchResult = _.uniqBy(res, 'BN');
        self.searchVisible = true;
      });
    };

    AllergiesMeds.prototype.deleteMed = function deleteMed(a) {
      var self = this;
      for (var i = 0; i < self.meds.length; i++) {
        if (self.meds[i].name == a.name) {
          self.meds[i].data.RX_Status = 'D';
          self.meds[i].visible = false;
        }
      }
    };

    AllergiesMeds.prototype.medResultClick = function medResultClick(a) {
      var self = this;
      self.medSearchResult = [];
      self.medSearch = null;
      self.searchVisible = false;

      var newMed = self.getNewRx(self.parent.demographics.patient.data.PatientID, a.NDC, a.LN);

      if (self.parent.home.currentBoard.visitInfo) {
        newMed.ProviderID = self.parent.home.currentBoard.visitInfo.providerId;
      } else if (self.parent.home.currentProvider) {
        newMed.ProviderID = self.parent.home.currentProvider.ProviderID;
      }
      newMed.UserID = self.parent.helper._user.UserID;

      self.meds.push(new drug(a.LN, newMed));
    };

    AllergiesMeds.prototype.searchMeds = function searchMeds() {
      var self = this;
      self.data.searchDrugs(self.medSearch, function (res) {
        self.medSearchResult = res;
        self.searchVisible = true;
      });
    };

    return AllergiesMeds;
  }()) || _class3);
});;
define('text!go/patientHistory/allergiesMeds.html',[],function(){return "<template><require from=\"../customElements/myCheckbox\"></require><div class=\"row\"><div class=\"col-md-12\"><div class=\"card mb-2\"><div class=\"card-header py-0\"><div class=\"d-inline-block align-middle py-2 h4 m-1\">Allergies</div><my-checkbox with.bind=\"history.allergies.noKnownDrugAllergies\" if.bind=\"visible\" class=\"d-inline-block m-1 float-right text-primary\" selected.bind=\"selected\" value.bind=\"name\" editing.bind=\"editing\" callback.call=\"noKnowDrugAllergiesChecked(checked)\" click.delegate=\"select()\"></my-checkbox></div><div class=\"card-body\"><div if.bind=\"parent.edit\" class=\"row\"><div class=\"col-md-12\"><div class=\"input-group mb-3\"><input type=\"text\" class=\"form-control\" placeholder=\"Search allergy...\" aria-describedby=\"button-addon2\" style=\"border-radius:.25rem\" keyup.delegate=\"searchAllergies()\" value.bind=\"allergySearch\"><ul id=\"algpicker\" class=\"list-group\" style=\"display:inline-block;position:absolute;z-index:500;top:40px;height:500px;overflow-y:auto\"><li repeat.for=\"r of allergySearchResult\" class=\"list-group-item demo\" click.delegate=\"allergyResultClick(r)\">${r.BN}</li></ul></div></div></div><div repeat.for=\"a of allergies\" if.bind=\"a.visible\" class=\"row\"><div class=\"col-md-4\"><label class=\"col-form-label\">${a.name}</label></div><div class=\"col-md-4\"><label if.bind=\"!parent.edit\" class=\"col-form-label\">${a.data.Reaction}</label><div if.bind=\"parent.edit\" class=\"d-inline-block\" style=\"width:50%\"><select value.bind=\"a.selectedReaction\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"o of allergyReactionList\" model.bind=\"o\">${o}</option></select></div><button if.bind=\"parent.edit\" type=\"button\" class=\"btn btn-danger d-inline-block ml-1\" click.delegate=\"deleteAllergy(a)\">Delete</button></div></div></div></div></div></div><div class=\"row\"><div class=\"col-md-12\"><div class=\"card mb-2\"><div class=\"card-header py-0\"><div class=\"d-inline-block align-middle py-2 h4 m-1\">Medications</div><my-checkbox with.bind=\"history.meds.noCurrentMeds\" if.bind=\"visible\" class=\"d-inline-block m-1 float-right text-primary\" selected.bind=\"selected\" value.bind=\"name\" editing.bind=\"editing\" callback.call=\"noCurrentMedsChecked(checked)\" click.delegate=\"select()\"></my-checkbox></div><div class=\"card-body\"><div if.bind=\"parent.edit\" class=\"row\"><div class=\"col-md-12\"><div class=\"input-group mb-3\"><input type=\"text\" class=\"form-control\" placeholder=\"Search medication...\" aria-describedby=\"button-addon2\" style=\"border-radius:.25rem\" value.bind=\"medSearch\" keyup.delegate=\"searchMeds()\"><ul id=\"medpicker\" class=\"list-group\" style=\"display:inline-block;position:absolute;z-index:500;top:40px;height:500px;overflow-y:auto\"><li repeat.for=\"r of medSearchResult\" class=\"list-group-item\" click.delegate=\"medResultClick(r)\">${r.LN}</li></ul></div></div></div><div repeat.for=\"m of meds\" if.bind=\"m.visible\" class=\"row\"><div class=\"col-md-12\"><label class=\"col-form-label\">${m.name}</label> <button if.bind=\"parent.edit\" type=\"button\" class=\"btn m-1 btn-danger float-right\" click.delegate=\"deleteMed(m)\">Delete</button></div></div></div></div></div></div></template>";});;
define('go/patientHistory/bmiPercentile',['exports', 'lodash'], function (exports, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BmiPercentile = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var BmiPercentile = exports.BmiPercentile = function () {
    function BmiPercentile() {
      _classCallCheck(this, BmiPercentile);

      this.percents = [{
        "Sex": "1",
        "Agemos": "24",
        "L": "-2.01118107",
        "M": "16.57502768",
        "S": "0.080592465",
        "P3": "14.52095333",
        "P5": "14.73731947",
        "P10": "15.09032827",
        "P25": "15.74164233",
        "P50": "16.57502768",
        "P75": "17.55718781",
        "P85": "18.16219473",
        "P90": "18.60948128",
        "P95": "19.33801062",
        "P97": "19.85985812"
      }, {
        "Sex": "1",
        "Agemos": "24.5",
        "L": "-1.982373595",
        "M": "16.54777487",
        "S": "0.080127429",
        "P3": "14.50347667",
        "P5": "14.71929257",
        "P10": "15.07117474",
        "P25": "15.71962876",
        "P50": "16.54777487",
        "P75": "17.52129279",
        "P85": "18.11954923",
        "P90": "18.56110634",
        "P95": "19.27889813",
        "P97": "19.79194014"
      }, {
        "Sex": "1",
        "Agemos": "25.5",
        "L": "-1.924100169",
        "M": "16.49442763",
        "S": "0.079233994",
        "P3": "14.46882381",
        "P5": "14.68360841",
        "P10": "15.03335725",
        "P25": "15.67634464",
        "P50": "16.49442763",
        "P75": "17.45135039",
        "P85": "18.03668013",
        "P90": "18.46729593",
        "P95": "19.16465965",
        "P97": "19.66102345"
      }, {
        "Sex": "1",
        "Agemos": "26.5",
        "L": "-1.86549793",
        "M": "16.44259552",
        "S": "0.078389356",
        "P3": "14.43459737",
        "P5": "14.64843329",
        "P10": "14.99619505",
        "P25": "15.634035",
        "P50": "16.44259552",
        "P75": "17.38383656",
        "P85": "17.95700228",
        "P90": "18.37736191",
        "P95": "19.05567423",
        "P97": "19.5365754"
      }, {
        "Sex": "1",
        "Agemos": "27.5",
        "L": "-1.807261899",
        "M": "16.3922434",
        "S": "0.077593501",
        "P3": "14.40082828",
        "P5": "14.61378626",
        "P10": "14.95969047",
        "P25": "15.5926798",
        "P50": "16.3922434",
        "P75": "17.3187102",
        "P85": "17.88047101",
        "P90": "18.29125345",
        "P95": "18.9518675",
        "P97": "19.41848805"
      }, {
        "Sex": "1",
        "Agemos": "28.5",
        "L": "-1.750118905",
        "M": "16.34333654",
        "S": "0.076846462",
        "P3": "14.36754718",
        "P5": "14.57968578",
        "P10": "14.92384514",
        "P25": "15.55225853",
        "P50": "16.34333654",
        "P75": "17.2559313",
        "P85": "17.80704259",
        "P90": "18.20892041",
        "P95": "18.85316529",
        "P97": "19.30665411"
      }, {
        "Sex": "1",
        "Agemos": "29.5",
        "L": "-1.69481584",
        "M": "16.29584097",
        "S": "0.076148308",
        "P3": "14.33478414",
        "P5": "14.54614966",
        "P10": "14.88866003",
        "P25": "15.51275057",
        "P50": "16.29584097",
        "P75": "17.19546093",
        "P85": "17.73667414",
        "P90": "18.1303131",
        "P95": "18.75949359",
        "P97": "19.20096691"
      }, {
        "Sex": "1",
        "Agemos": "30.5",
        "L": "-1.642106779",
        "M": "16.24972371",
        "S": "0.075499126",
        "P3": "14.30256837",
        "P5": "14.51319492",
        "P10": "14.85413557",
        "P25": "15.47413549",
        "P50": "16.24972371",
        "P75": "17.13726129",
        "P85": "17.66932346",
        "P90": "18.05538214",
        "P95": "18.67077841",
        "P97": "19.10132056"
      }, {
        "Sex": "1",
        "Agemos": "31.5",
        "L": "-1.592744414",
        "M": "16.20495268",
        "S": "0.074898994",
        "P3": "14.27092833",
        "P5": "14.48083795",
        "P10": "14.82027189",
        "P25": "15.43639319",
        "P50": "16.20495268",
        "P75": "17.0812953",
        "P85": "17.6049486",
        "P90": "17.98407812",
        "P95": "18.58694589",
        "P97": "19.00761051"
      }, {
        "Sex": "1",
        "Agemos": "32.5",
        "L": "-1.547442391",
        "M": "16.16149871",
        "S": "0.074347997",
        "P3": "14.23988971",
        "P5": "14.44909329",
        "P10": "14.7870687",
        "P25": "15.39950521",
        "P50": "16.16149871",
        "P75": "17.02752831",
        "P85": "17.54350898",
        "P90": "17.91635198",
        "P95": "18.50792131",
        "P97": "18.91973125"
      }, {
        "Sex": "1",
        "Agemos": "33.5",
        "L": "-1.506902601",
        "M": "16.11933258",
        "S": "0.073846139",
        "P3": "14.2094782",
        "P5": "14.41797561",
        "P10": "14.7545259",
        "P25": "15.36345335",
        "P50": "16.11933258",
        "P75": "16.97592485",
        "P85": "17.48496295",
        "P90": "17.85215384",
        "P95": "18.43363072",
        "P97": "18.83758072"
      }, {
        "Sex": "1",
        "Agemos": "34.5",
        "L": "-1.471770047",
        "M": "16.07842758",
        "S": "0.07339337",
        "P3": "14.17971698",
        "P5": "14.38749811",
        "P10": "14.72264343",
        "P25": "15.32822125",
        "P50": "16.07842758",
        "P75": "16.92645101",
        "P85": "17.42926933",
        "P90": "17.79143359",
        "P95": "18.3639996",
        "P97": "18.76105711"
      }, {
        "Sex": "1",
        "Agemos": "35.5",
        "L": "-1.442628957",
        "M": "16.03875896",
        "S": "0.072989551",
        "P3": "14.15062715",
        "P5": "14.35767293",
        "P10": "14.69142152",
        "P25": "15.2937943",
        "P50": "16.03875896",
        "P75": "16.87907357",
        "P85": "17.37638677",
        "P90": "17.73414053",
        "P95": "18.29895323",
        "P97": "18.69005992"
      }, {
        "Sex": "1",
        "Agemos": "36.5",
        "L": "-1.419991255",
        "M": "16.00030401",
        "S": "0.072634432",
        "P3": "14.12222757",
        "P5": "14.32851119",
        "P10": "14.66086088",
        "P25": "15.26015988",
        "P50": "16.00030401",
        "P75": "16.8337599",
        "P85": "17.32627356",
        "P90": "17.68022325",
        "P95": "18.23841666",
        "P97": "18.62449011"
      }, {
        "Sex": "1",
        "Agemos": "37.5",
        "L": "-1.404277619",
        "M": "15.96304277",
        "S": "0.072327649",
        "P3": "14.09453413",
        "P5": "14.30002256",
        "P10": "14.63096272",
        "P25": "15.22730791",
        "P50": "15.96304277",
        "P75": "16.79047852",
        "P85": "17.27888795",
        "P90": "17.62962965",
        "P95": "18.1823144",
        "P97": "18.5642493"
      }, {
        "Sex": "1",
        "Agemos": "38.5",
        "L": "-1.39586317",
        "M": "15.92695418",
        "S": "0.07206864",
        "P3": "14.06756329",
        "P5": "14.27221761",
        "P10": "14.60172936",
        "P25": "15.1952288",
        "P50": "15.92695418",
        "P75": "16.74919525",
        "P85": "17.23418554",
        "P90": "17.58230587",
        "P95": "18.13057244",
        "P97": "18.50924478"
      }, {
        "Sex": "1",
        "Agemos": "39.5",
        "L": "-1.394935252",
        "M": "15.89202582",
        "S": "0.071856805",
        "P3": "14.04132288",
        "P5": "14.24510202",
        "P10": "14.57316316",
        "P25": "15.16391901",
        "P50": "15.89202582",
        "P75": "16.70988247",
        "P85": "17.19212545",
        "P90": "17.53819888",
        "P95": "18.08311311",
        "P97": "18.45937719"
      }, {
        "Sex": "1",
        "Agemos": "40.5",
        "L": "-1.401671596",
        "M": "15.85824093",
        "S": "0.071691278",
        "P3": "14.0158243",
        "P5": "14.21868433",
        "P10": "14.54526806",
        "P25": "15.13337382",
        "P50": "15.85824093",
        "P75": "16.67250668",
        "P85": "17.15266201",
        "P90": "17.49725289",
        "P95": "18.03986198",
        "P97": "18.41455697"
      }, {
        "Sex": "1",
        "Agemos": "41.5",
        "L": "-1.416100312",
        "M": "15.82558822",
        "S": "0.071571093",
        "P3": "13.99107332",
        "P5": "14.19297011",
        "P10": "14.51804847",
        "P25": "15.10359281",
        "P50": "15.82558822",
        "P75": "16.63703787",
        "P85": "17.11575098",
        "P90": "17.45941207",
        "P95": "18.00074262",
        "P97": "18.37469187"
      }, {
        "Sex": "1",
        "Agemos": "42.5",
        "L": "-1.438164899",
        "M": "15.79405728",
        "S": "0.071495113",
        "P3": "13.96707439",
        "P5": "14.16796472",
        "P10": "14.49150978",
        "P25": "15.07457728",
        "P50": "15.79405728",
        "P75": "16.60344521",
        "P85": "17.08134677",
        "P90": "17.42461935",
        "P95": "17.96567903",
        "P97": "18.33969264"
      }, {
        "Sex": "1",
        "Agemos": "43.5",
        "L": "-1.467669032",
        "M": "15.76364255",
        "S": "0.071462106",
        "P3": "13.94382698",
        "P5": "14.14367089",
        "P10": "14.4656578",
        "P25": "15.04633235",
        "P50": "15.76364255",
        "P75": "16.57170092",
        "P85": "17.04940504",
        "P90": "17.39281759",
        "P95": "17.9345935",
        "P97": "18.30946785"
      }, {
        "Sex": "1",
        "Agemos": "44.5",
        "L": "-1.504376347",
        "M": "15.73433668",
        "S": "0.071470646",
        "P3": "13.9213319",
        "P5": "14.12009269",
        "P10": "14.44049947",
        "P25": "15.01886319",
        "P50": "15.73433668",
        "P75": "16.54177412",
        "P85": "17.0198786",
        "P90": "17.36394785",
        "P95": "17.90741007",
        "P97": "18.28393204"
      }, {
        "Sex": "1",
        "Agemos": "45.5",
        "L": "-1.547942838",
        "M": "15.70613566",
        "S": "0.071519218",
        "P3": "13.8995866",
        "P5": "14.09723246",
        "P10": "14.4160421",
        "P25": "14.99217766",
        "P50": "15.70613566",
        "P75": "16.51363577",
        "P85": "16.99272087",
        "P90": "17.33795095",
        "P95": "17.88405183",
        "P97": "18.26299911"
      }, {
        "Sex": "1",
        "Agemos": "46.5",
        "L": "-1.597896397",
        "M": "15.67904062",
        "S": "0.071606277",
        "P3": "13.87858352",
        "P5": "14.07508966",
        "P10": "14.392293",
        "P25": "14.96628719",
        "P50": "15.67904062",
        "P75": "16.48726082",
        "P85": "16.96788739",
        "P90": "17.31476822",
        "P95": "17.86443983",
        "P97": "18.24657949"
      }, {
        "Sex": "1",
        "Agemos": "47.5",
        "L": "-1.653732283",
        "M": "15.65305192",
        "S": "0.071730167",
        "P3": "13.85831582",
        "P5": "14.05366443",
        "P10": "14.36926",
        "P25": "14.94120325",
        "P50": "15.65305192",
        "P75": "16.46262258",
        "P85": "16.94533215",
        "P90": "17.29433999",
        "P95": "17.84849622",
        "P97": "18.2345875"
      }, {
        "Sex": "1",
        "Agemos": "48.5",
        "L": "-1.714869347",
        "M": "15.62817269",
        "S": "0.071889214",
        "P3": "13.83877404",
        "P5": "14.03295533",
        "P10": "14.34695084",
        "P25": "14.91693911",
        "P50": "15.62817269",
        "P75": "16.43969657",
        "P85": "16.92501028",
        "P90": "17.27660684",
        "P95": "17.8361423",
        "P97": "18.22693633"
      }, {
        "Sex": "1",
        "Agemos": "49.5",
        "L": "-1.780673181",
        "M": "15.604408",
        "S": "0.072081737",
        "P3": "13.81994711",
        "P5": "14.01295984",
        "P10": "14.32537305",
        "P25": "14.89350913",
        "P50": "15.604408",
        "P75": "16.41845985",
        "P85": "16.90687779",
        "P90": "17.26150966",
        "P95": "17.82729891",
        "P97": "18.22353875"
      }, {
        "Sex": "1",
        "Agemos": "50.5",
        "L": "-1.850468473",
        "M": "15.58176458",
        "S": "0.072306081",
        "P3": "13.80182253",
        "P5": "13.99367445",
        "P10": "14.30453377",
        "P25": "14.87092845",
        "P50": "15.58176458",
        "P75": "16.39889119",
        "P85": "16.89089179",
        "P90": "17.24898984",
        "P95": "17.8218865",
        "P97": "18.22430691"
      }, {
        "Sex": "1",
        "Agemos": "51.5",
        "L": "-1.923551865",
        "M": "15.56025067",
        "S": "0.072560637",
        "P3": "13.78438667",
        "P5": "13.97509464",
        "P10": "14.2844396",
        "P25": "14.84921259",
        "P50": "15.56025067",
        "P75": "16.38097113",
        "P85": "16.87701073",
        "P90": "17.23898952",
        "P95": "17.81982523",
        "P97": "18.22915216"
      }, {
        "Sex": "1",
        "Agemos": "52.5",
        "L": "-1.999220429",
        "M": "15.5398746",
        "S": "0.07284384",
        "P3": "13.76762605",
        "P5": "13.95721572",
        "P10": "14.26509665",
        "P25": "14.82837662",
        "P50": "15.5398746",
        "P75": "16.36468088",
        "P85": "16.86519374",
        "P90": "17.23145142",
        "P95": "17.82103559",
        "P97": "18.23798637"
      }, {
        "Sex": "1",
        "Agemos": "53.5",
        "L": "-2.076707178",
        "M": "15.52064993",
        "S": "0.073154324",
        "P3": "13.75152248",
        "P5": "13.94002947",
        "P10": "14.24650943",
        "P25": "14.80843749",
        "P50": "15.52064993",
        "P75": "16.3500079",
        "P85": "16.85540483",
        "P90": "17.22632105",
        "P95": "17.82543578",
        "P97": "18.25071444"
      }, {
        "Sex": "1",
        "Agemos": "54.5",
        "L": "-2.155348017",
        "M": "15.50258427",
        "S": "0.073490667",
        "P3": "13.73606368",
        "P5": "13.92353116",
        "P10": "14.22868271",
        "P25": "14.7894083",
        "P50": "15.50258427",
        "P75": "16.33693462",
        "P85": "16.8476049",
        "P90": "17.22354286",
        "P95": "17.83294744",
        "P97": "18.26724918"
      }, {
        "Sex": "1",
        "Agemos": "55.5",
        "L": "-2.234438552",
        "M": "15.48568973",
        "S": "0.073851672",
        "P3": "13.72123322",
        "P5": "13.90771281",
        "P10": "14.21161954",
        "P25": "14.77130343",
        "P50": "15.48568973",
        "P75": "16.32544946",
        "P85": "16.84175987",
        "P90": "17.22306443",
        "P95": "17.84349028",
        "P97": "18.28749643"
      }, {
        "Sex": "1",
        "Agemos": "56.5",
        "L": "-2.313321723",
        "M": "15.46997718",
        "S": "0.074236235",
        "P3": "13.70701599",
        "P5": "13.89256678",
        "P10": "14.19532216",
        "P25": "14.75413556",
        "P50": "15.46997718",
        "P75": "16.31554106",
        "P85": "16.8378366",
        "P90": "17.22483458",
        "P95": "17.85698505",
        "P97": "18.31136265"
      }, {
        "Sex": "1",
        "Agemos": "57.5",
        "L": "-2.391381273",
        "M": "15.45545692",
        "S": "0.074643374",
        "P3": "13.69339739",
        "P5": "13.87808525",
        "P10": "14.1797919",
        "P25": "14.73791599",
        "P50": "15.45545692",
        "P75": "16.30719914",
        "P85": "16.83580365",
        "P90": "17.22880383",
        "P95": "17.87335318",
        "P97": "18.33875356"
      }, {
        "Sex": "1",
        "Agemos": "58.5",
        "L": "-2.468032491",
        "M": "15.44213961",
        "S": "0.075072264",
        "P3": "13.68036242",
        "P5": "13.86425959",
        "P10": "14.16502885",
        "P25": "14.72265501",
        "P50": "15.44213961",
        "P75": "16.30041561",
        "P85": "16.83563223",
        "P90": "17.23492502",
        "P95": "17.89251642",
        "P97": "18.36957256"
      }, {
        "Sex": "1",
        "Agemos": "59.5",
        "L": "-2.542781541",
        "M": "15.43003207",
        "S": "0.075522104",
        "P3": "13.66789962",
        "P5": "13.85108308",
        "P10": "14.15103287",
        "P25": "14.70836004",
        "P50": "15.43003207",
        "P75": "16.29517994",
        "P85": "16.83729272",
        "P90": "17.24315148",
        "P95": "17.91439894",
        "P97": "18.40372671"
      }, {
        "Sex": "1",
        "Agemos": "60.5",
        "L": "-2.61516595",
        "M": "15.41914163",
        "S": "0.07599225",
        "P3": "13.65599683",
        "P5": "13.83854804",
        "P10": "14.13780261",
        "P25": "14.69503764",
        "P50": "15.41914163",
        "P75": "16.29148397",
        "P85": "16.84075838",
        "P90": "17.25343909",
        "P95": "17.93892524",
        "P97": "18.44112021"
      }, {
        "Sex": "1",
        "Agemos": "61.5",
        "L": "-2.684789516",
        "M": "15.40947356",
        "S": "0.076482128",
        "P3": "13.64464353",
        "P5": "13.82664746",
        "P10": "14.1253362",
        "P25": "14.68269244",
        "P50": "15.40947356",
        "P75": "16.28931904",
        "P85": "16.84600319",
        "P90": "17.26574515",
        "P95": "17.96602144",
        "P97": "18.48165813"
      }, {
        "Sex": "1",
        "Agemos": "62.5",
        "L": "-2.751316949",
        "M": "15.40103139",
        "S": "0.076991232",
        "P3": "13.63383056",
        "P5": "13.81537489",
        "P10": "14.11363117",
        "P25": "14.67132735",
        "P50": "15.40103139",
        "P75": "16.28867619",
        "P85": "16.85300198",
        "P90": "17.28002846",
        "P95": "17.99561523",
        "P97": "18.52524599"
      }, {
        "Sex": "1",
        "Agemos": "63.5",
        "L": "-2.81445945",
        "M": "15.39381785",
        "S": "0.077519149",
        "P3": "13.62354907",
        "P5": "13.8047237",
        "P10": "14.10268433",
        "P25": "14.66094403",
        "P50": "15.39381785",
        "P75": "16.28954723",
        "P85": "16.86173124",
        "P90": "17.29624981",
        "P95": "18.02763543",
        "P97": "18.57178832"
      }, {
        "Sex": "1",
        "Agemos": "64.5",
        "L": "-2.87402476",
        "M": "15.38783094",
        "S": "0.07806539",
        "P3": "13.61379452",
        "P5": "13.79469004",
        "P10": "14.09249299",
        "P25": "14.65154144",
        "P50": "15.38783094",
        "P75": "16.29191982",
        "P85": "16.87216519",
        "P90": "17.31436954",
        "P95": "18.06201396",
        "P97": "18.62119533"
      }, {
        "Sex": "1",
        "Agemos": "65.5",
        "L": "-2.92984048",
        "M": "15.38306945",
        "S": "0.078629592",
        "P3": "13.60456106",
        "P5": "13.78526882",
        "P10": "14.08305345",
        "P25": "14.64311821",
        "P50": "15.38306945",
        "P75": "16.29578396",
        "P85": "16.88428085",
        "P90": "17.33435063",
        "P95": "18.09868317",
        "P97": "18.67337395"
      }, {
        "Sex": "1",
        "Agemos": "66.5",
        "L": "-2.981796828",
        "M": "15.37952958",
        "S": "0.079211369",
        "P3": "13.595845",
        "P5": "13.77645627",
        "P10": "14.0743621",
        "P25": "14.63567131",
        "P50": "15.37952958",
        "P75": "16.30112773",
        "P85": "16.89805459",
        "P90": "17.35615653",
        "P95": "18.13757754",
        "P97": "18.72823379"
      }, {
        "Sex": "1",
        "Agemos": "67.5",
        "L": "-3.029831343",
        "M": "15.37720582",
        "S": "0.079810334",
        "P3": "13.58764387",
        "P5": "13.76824936",
        "P10": "14.06641528",
        "P25": "14.62919656",
        "P50": "15.37720582",
        "P75": "16.30793819",
        "P85": "16.91346275",
        "P90": "17.37975148",
        "P95": "18.17863327",
        "P97": "18.78568583"
      }, {
        "Sex": "1",
        "Agemos": "68.5",
        "L": "-3.073924224",
        "M": "15.37609107",
        "S": "0.080426086",
        "P3": "13.57995642",
        "P5": "13.76064574",
        "P10": "14.05920932",
        "P25": "14.62368881",
        "P50": "15.37609107",
        "P75": "16.31620135",
        "P85": "16.93048153",
        "P90": "17.40510042",
        "P95": "18.22178824",
        "P97": "18.84564261"
      }, {
        "Sex": "1",
        "Agemos": "69.5",
        "L": "-3.114093476",
        "M": "15.37617677",
        "S": "0.081058206",
        "P3": "13.57278245",
        "P5": "13.75364373",
        "P10": "14.05274063",
        "P25": "14.619142",
        "P50": "15.37617677",
        "P75": "16.32590217",
        "P85": "16.94908693",
        "P90": "17.43216882",
        "P95": "18.26698191",
        "P97": "18.90801826"
      }, {
        "Sex": "1",
        "Agemos": "70.5",
        "L": "-3.15039004",
        "M": "15.37745304",
        "S": "0.081706249",
        "P3": "13.56612272",
        "P5": "13.7472423",
        "P10": "14.04700569",
        "P25": "14.61554938",
        "P50": "15.37745304",
        "P75": "16.33702456",
        "P85": "16.96925461",
        "P90": "17.46092258",
        "P95": "18.31415529",
        "P97": "18.97272855"
      }, {
        "Sex": "1",
        "Agemos": "71.5",
        "L": "-3.182893018",
        "M": "15.37990886",
        "S": "0.082369741",
        "P3": "13.55997887",
        "P5": "13.74144099",
        "P10": "14.04200114",
        "P25": "14.6129036",
        "P50": "15.37990886",
        "P75": "16.34955145",
        "P85": "16.99095993",
        "P90": "17.49132795",
        "P95": "18.36325085",
        "P97": "19.03969094"
      }, {
        "Sex": "1",
        "Agemos": "72.5",
        "L": "-3.21170511",
        "M": "15.38353217",
        "S": "0.083048178",
        "P3": "13.55435329",
        "P5": "13.73623987",
        "P10": "14.03772376",
        "P25": "14.61119682",
        "P50": "15.38353217",
        "P75": "16.36346484",
        "P85": "17.01417786",
        "P90": "17.52335144",
        "P95": "18.41421242",
        "P97": "19.10882456"
      }, {
        "Sex": "1",
        "Agemos": "73.5",
        "L": "-3.23694834",
        "M": "15.38831005",
        "S": "0.083741021",
        "P3": "13.54924901",
        "P5": "13.73163946",
        "P10": "14.03417051",
        "P25": "14.61042085",
        "P50": "15.38831005",
        "P75": "16.37874588",
        "P85": "17.03888299",
        "P90": "17.55695978",
        "P95": "18.46698511",
        "P97": "19.18005024"
      }, {
        "Sex": "1",
        "Agemos": "74.5",
        "L": "-3.25876011",
        "M": "15.39422883",
        "S": "0.0844477",
        "P3": "13.54466964",
        "P5": "13.72764072",
        "P10": "14.03133851",
        "P25": "14.61056719",
        "P50": "15.39422883",
        "P75": "16.39537493",
        "P85": "17.06504953",
        "P90": "17.59211982",
        "P95": "18.52151524",
        "P97": "19.25329044"
      }, {
        "Sex": "1",
        "Agemos": "75.5",
        "L": "-3.277281546",
        "M": "15.40127496",
        "S": "0.085167651",
        "P3": "13.54061839",
        "P5": "13.72424433",
        "P10": "14.02922475",
        "P25": "14.61162737",
        "P50": "15.40127496",
        "P75": "16.41333266",
        "P85": "17.09265223",
        "P90": "17.62879914",
        "P95": "18.57774996",
        "P97": "19.32846782"
      }, {
        "Sex": "1",
        "Agemos": "76.5",
        "L": "-3.292683774",
        "M": "15.40943252",
        "S": "0.085900184",
        "P3": "13.53710097",
        "P5": "13.72145289",
        "P10": "14.02782718",
        "P25": "14.61359223",
        "P50": "15.40943252",
        "P75": "16.43259653",
        "P85": "17.12166319",
        "P90": "17.66696377",
        "P95": "18.63563816",
        "P97": "19.4055104"
      }, {
        "Sex": "1",
        "Agemos": "77.5",
        "L": "-3.305124073",
        "M": "15.41868691",
        "S": "0.086644667",
        "P3": "13.53412147",
        "P5": "13.71926775",
        "P10": "14.02714319",
        "P25": "14.61645307",
        "P50": "15.41868691",
        "P75": "16.45314588",
        "P85": "17.15205629",
        "P90": "17.70658129",
        "P95": "18.69512904",
        "P97": "19.48434431"
      }, {
        "Sex": "1",
        "Agemos": "78.5",
        "L": "-3.314768951",
        "M": "15.42902273",
        "S": "0.087400421",
        "P3": "13.53168472",
        "P5": "13.71769094",
        "P10": "14.0271705",
        "P25": "14.62020097",
        "P50": "15.42902273",
        "P75": "16.47495885",
        "P85": "17.18380454",
        "P90": "17.74761885",
        "P95": "18.75617288",
        "P97": "19.56489823"
      }, {
        "Sex": "1",
        "Agemos": "79.5",
        "L": "-3.321785992",
        "M": "15.44042439",
        "S": "0.088166744",
        "P3": "13.52979573",
        "P5": "13.71672458",
        "P10": "14.027907",
        "P25": "14.62482705",
        "P50": "15.44042439",
        "P75": "16.49801329",
        "P85": "17.21688072",
        "P90": "17.7900437",
        "P95": "18.81872078",
        "P97": "19.64710224"
      }, {
        "Sex": "1",
        "Agemos": "80.5",
        "L": "-3.326345795",
        "M": "15.45287581",
        "S": "0.088942897",
        "P3": "13.52845994",
        "P5": "13.71637124",
        "P10": "14.02935081",
        "P25": "14.63032238",
        "P50": "15.45287581",
        "P75": "16.52228624",
        "P85": "17.25125697",
        "P90": "17.83382275",
        "P95": "18.88272474",
        "P97": "19.7308886"
      }, {
        "Sex": "1",
        "Agemos": "81.5",
        "L": "-3.328602731",
        "M": "15.46636218",
        "S": "0.089728202",
        "P3": "13.5276813",
        "P5": "13.71663233",
        "P10": "14.03149952",
        "P25": "14.63667844",
        "P50": "15.46636218",
        "P75": "16.54775649",
        "P85": "17.28690708",
        "P90": "17.87892434",
        "P95": "18.948137",
        "P97": "19.81618799"
      }, {
        "Sex": "1",
        "Agemos": "82.5",
        "L": "-3.328725277",
        "M": "15.48086704",
        "S": "0.090521875",
        "P3": "13.52746565",
        "P5": "13.71751078",
        "P10": "14.03435159",
        "P25": "14.64388639",
        "P50": "15.48086704",
        "P75": "16.57440029",
        "P85": "17.32380254",
        "P90": "17.9253152",
        "P95": "19.01491107",
        "P97": "19.902936"
      }, {
        "Sex": "1",
        "Agemos": "83.5",
        "L": "-3.32687018",
        "M": "15.49637465",
        "S": "0.091323162",
        "P3": "13.52781794",
        "P5": "13.71900887",
        "P10": "14.03790521",
        "P25": "14.65193763",
        "P50": "15.49637465",
        "P75": "16.6021948",
        "P85": "17.3619157",
        "P90": "17.97296286",
        "P95": "19.08300081",
        "P97": "19.99106797"
      }, {
        "Sex": "1",
        "Agemos": "84.5",
        "L": "-3.323188896",
        "M": "15.51286936",
        "S": "0.092131305",
        "P3": "13.52874305",
        "P5": "13.72112886",
        "P10": "14.0421586",
        "P25": "14.66082372",
        "P50": "15.51286936",
        "P75": "16.6311172",
        "P85": "17.40121891",
        "P90": "18.02183493",
        "P95": "19.15236073",
        "P97": "20.08052042"
      }, {
        "Sex": "1",
        "Agemos": "85.5",
        "L": "-3.317827016",
        "M": "15.53033563",
        "S": "0.092945544",
        "P3": "13.53024568",
        "P5": "13.72387293",
        "P10": "14.04710998",
        "P25": "14.67053629",
        "P50": "15.53033563",
        "P75": "16.66114466",
        "P85": "17.44168456",
        "P90": "18.07189919",
        "P95": "19.22294589",
        "P97": "20.17123104"
      }, {
        "Sex": "1",
        "Agemos": "86.5",
        "L": "-3.310923871",
        "M": "15.54875807",
        "S": "0.093765118",
        "P3": "13.53233036",
        "P5": "13.72724315",
        "P10": "14.05275762",
        "P25": "14.68106712",
        "P50": "15.54875807",
        "P75": "16.69225445",
        "P85": "17.48328513",
        "P90": "18.12312353",
        "P95": "19.29471191",
        "P97": "20.2631386"
      }, {
        "Sex": "1",
        "Agemos": "87.5",
        "L": "-3.302612272",
        "M": "15.56812143",
        "S": "0.09458927",
        "P3": "13.53500147",
        "P5": "13.7312415",
        "P10": "14.05909975",
        "P25": "14.69240809",
        "P50": "15.56812143",
        "P75": "16.72442396",
        "P85": "17.52599317",
        "P90": "18.17547605",
        "P95": "19.36761493",
        "P97": "20.35618297"
      }, {
        "Sex": "1",
        "Agemos": "88.5",
        "L": "-3.293018361",
        "M": "15.58841065",
        "S": "0.095417247",
        "P3": "13.53826314",
        "P5": "13.73586983",
        "P10": "14.06613458",
        "P25": "14.7045512",
        "P50": "15.58841065",
        "P75": "16.7576307",
        "P85": "17.56978138",
        "P90": "18.22892501",
        "P95": "19.44161165",
        "P97": "20.45030507"
      }, {
        "Sex": "1",
        "Agemos": "89.5",
        "L": "-3.282260813",
        "M": "15.60961101",
        "S": "0.096248301",
        "P3": "13.54211938",
        "P5": "13.7411299",
        "P10": "14.0738604",
        "P25": "14.71748869",
        "P50": "15.60961101",
        "P75": "16.79185246",
        "P85": "17.61462266",
        "P90": "18.28343882",
        "P95": "19.51665894",
        "P97": "20.54544624"
      }, {
        "Sex": "1",
        "Agemos": "90.5",
        "L": "-3.270454609",
        "M": "15.63170735",
        "S": "0.097081694",
        "P3": "13.54657375",
        "P5": "13.74702309",
        "P10": "14.08227508",
        "P25": "14.73121238",
        "P50": "15.63170735",
        "P75": "16.82706672",
        "P85": "17.66048985",
        "P90": "18.33898626",
        "P95": "19.59271539",
        "P97": "20.64155132"
      }, {
        "Sex": "1",
        "Agemos": "91.5",
        "L": "-3.257703616",
        "M": "15.65468563",
        "S": "0.097916698",
        "P3": "13.55162988",
        "P5": "13.753551",
        "P10": "14.091377",
        "P25": "14.74571498",
        "P50": "15.65468563",
        "P75": "16.86325188",
        "P85": "17.70735632",
        "P90": "18.39553611",
        "P95": "19.6697383",
        "P97": "20.73856241"
      }, {
        "Sex": "1",
        "Agemos": "92.5",
        "L": "-3.244108214",
        "M": "15.67853139",
        "S": "0.098752593",
        "P3": "13.55729098",
        "P5": "13.7607148",
        "P10": "14.10116411",
        "P25": "14.76098876",
        "P50": "15.67853139",
        "P75": "16.90038609",
        "P85": "17.75519541",
        "P90": "18.45305756",
        "P95": "19.74768666",
        "P97": "20.83642509"
      }, {
        "Sex": "1",
        "Agemos": "93.5",
        "L": "-3.229761713",
        "M": "15.70323052",
        "S": "0.099588675",
        "P3": "13.56356006",
        "P5": "13.76851558",
        "P10": "14.1116344",
        "P25": "14.77702622",
        "P50": "15.70323052",
        "P75": "16.9384478",
        "P85": "17.80398077",
        "P90": "18.51151998",
        "P95": "19.82651963",
        "P97": "20.93508525"
      }, {
        "Sex": "1",
        "Agemos": "94.5",
        "L": "-3.214751287",
        "M": "15.72876911",
        "S": "0.100424251",
        "P3": "13.57043987",
        "P5": "13.77695423",
        "P10": "14.12278578",
        "P25": "14.79381994",
        "P50": "15.72876911",
        "P75": "16.97741575",
        "P85": "17.85368626",
        "P90": "18.57089304",
        "P95": "19.90619689",
        "P97": "21.03448975"
      }, {
        "Sex": "1",
        "Agemos": "95.5",
        "L": "-3.199158184",
        "M": "15.75513347",
        "S": "0.101258643",
        "P3": "13.57793291",
        "P5": "13.78603145",
        "P10": "14.13461608",
        "P25": "14.81136258",
        "P50": "15.75513347",
        "P75": "17.01726889",
        "P85": "17.90428602",
        "P90": "18.63114669",
        "P95": "19.98667859",
        "P97": "21.13458634"
      }, {
        "Sex": "1",
        "Agemos": "96.5",
        "L": "-3.18305795",
        "M": "15.78231007",
        "S": "0.102091189",
        "P3": "13.58604144",
        "P5": "13.79574779",
        "P10": "14.14712305",
        "P25": "14.82964685",
        "P50": "15.78231007",
        "P75": "17.05798645",
        "P85": "17.95575444",
        "P90": "18.69225117",
        "P95": "20.06792538",
        "P97": "21.2353237"
      }, {
        "Sex": "1",
        "Agemos": "97.5",
        "L": "-3.166520664",
        "M": "15.8102856",
        "S": "0.102921245",
        "P3": "13.59476742",
        "P5": "13.80610355",
        "P10": "14.16030433",
        "P25": "14.84866554",
        "P50": "15.8102856",
        "P75": "17.09954792",
        "P85": "18.00806622",
        "P90": "18.75417705",
        "P95": "20.1498984",
        "P97": "21.33665138"
      }, {
        "Sex": "1",
        "Agemos": "98.5",
        "L": "-3.1496103",
        "M": "15.83904708",
        "S": "0.103748189",
        "P3": "13.60411246",
        "P5": "13.81709878",
        "P10": "14.17415743",
        "P25": "14.86841153",
        "P50": "15.83904708",
        "P75": "17.14193325",
        "P85": "18.06119653",
        "P90": "18.81689537",
        "P95": "20.23255928",
        "P97": "21.4385195"
      }, {
        "Sex": "1",
        "Agemos": "99.5",
        "L": "-3.132389637",
        "M": "15.86858123",
        "S": "0.104571386",
        "P3": "13.61407844",
        "P5": "13.82873375",
        "P10": "14.18867999",
        "P25": "14.88887764",
        "P50": "15.86858123",
        "P75": "17.18512191",
        "P85": "18.1151201",
        "P90": "18.8803769",
        "P95": "20.31587026",
        "P97": "21.54088032"
      }, {
        "Sex": "1",
        "Agemos": "100.5",
        "L": "-3.114911153",
        "M": "15.89887562",
        "S": "0.105390269",
        "P3": "13.62466611",
        "P5": "13.84100784",
        "P10": "14.20386916",
        "P25": "14.91005687",
        "P50": "15.89887562",
        "P75": "17.22909475",
        "P85": "18.16981303",
        "P90": "18.94459357",
        "P95": "20.39979379",
        "P97": "21.64368493"
      }, {
        "Sex": "1",
        "Agemos": "101.5",
        "L": "-3.097226399",
        "M": "15.92991765",
        "S": "0.106204258",
        "P3": "13.63587653",
        "P5": "13.85392068",
        "P10": "14.21972223",
        "P25": "14.93194218",
        "P50": "15.92991765",
        "P75": "17.2738323",
        "P85": "18.22525119",
        "P90": "19.00951733",
        "P95": "20.48429323",
        "P97": "21.74688677"
      }, {
        "Sex": "1",
        "Agemos": "102.5",
        "L": "-3.079383079",
        "M": "15.96169481",
        "S": "0.107012788",
        "P3": "13.64771054",
        "P5": "13.86747174",
        "P10": "14.23623642",
        "P25": "14.95452659",
        "P50": "15.96169481",
        "P75": "17.31931519",
        "P85": "18.28141055",
        "P90": "19.07512019",
        "P95": "20.56933216",
        "P97": "21.85043987"
      }, {
        "Sex": "1",
        "Agemos": "103.5",
        "L": "-3.061423765",
        "M": "15.99419489",
        "S": "0.107815327",
        "P3": "13.66016853",
        "P5": "13.88166013",
        "P10": "14.25340873",
        "P25": "14.97780313",
        "P50": "15.99419489",
        "P75": "17.36552463",
        "P85": "18.33826774",
        "P90": "19.14137485",
        "P95": "20.6548748",
        "P97": "21.95429887"
      }, {
        "Sex": "1",
        "Agemos": "104.5",
        "L": "-3.043386071",
        "M": "16.02740607",
        "S": "0.108611374",
        "P3": "13.67325038",
        "P5": "13.89648454",
        "P10": "14.27123591",
        "P25": "15.00176488",
        "P50": "16.02740607",
        "P75": "17.4124424",
        "P85": "18.39579999",
        "P90": "19.20825462",
        "P95": "20.74088584",
        "P97": "22.05841878"
      }, {
        "Sex": "1",
        "Agemos": "105.5",
        "L": "-3.025310003",
        "M": "16.0613159",
        "S": "0.109400388",
        "P3": "13.68695684",
        "P5": "13.91194439",
        "P10": "14.28971516",
        "P25": "15.02640489",
        "P50": "16.0613159",
        "P75": "17.46004925",
        "P85": "18.45398355",
        "P90": "19.27573205",
        "P95": "20.82733059",
        "P97": "22.16275742"
      }, {
        "Sex": "1",
        "Agemos": "106.5",
        "L": "-3.007225737",
        "M": "16.09591292",
        "S": "0.110181915",
        "P3": "13.70128712",
        "P5": "13.92803786",
        "P10": "14.30884292",
        "P25": "15.05171626",
        "P50": "16.09591292",
        "P75": "17.50832768",
        "P85": "18.51279647",
        "P90": "19.34378135",
        "P95": "20.9141748",
        "P97": "22.26727123"
      }, {
        "Sex": "1",
        "Agemos": "107.5",
        "L": "-2.989164598",
        "M": "16.13118532",
        "S": "0.110955478",
        "P3": "13.71624103",
        "P5": "13.94476358",
        "P10": "14.32861592",
        "P25": "15.07769209",
        "P50": "16.13118532",
        "P75": "17.55725951",
        "P85": "18.57221621",
        "P90": "19.41237631",
        "P95": "21.00138483",
        "P97": "22.37191887"
      }, {
        "Sex": "1",
        "Agemos": "108.5",
        "L": "-2.971148225",
        "M": "16.16712234",
        "S": "0.111720691",
        "P3": "13.73181676",
        "P5": "13.9621189",
        "P10": "14.3490301",
        "P25": "15.10432556",
        "P50": "16.16712234",
        "P75": "17.60682848",
        "P85": "18.63222223",
        "P90": "19.48149248",
        "P95": "21.08892746",
        "P97": "22.47665729"
      }, {
        "Sex": "1",
        "Agemos": "109.5",
        "L": "-2.953208047",
        "M": "16.20371168",
        "S": "0.112477059",
        "P3": "13.7480147",
        "P5": "13.98010297",
        "P10": "14.37008248",
        "P25": "15.13160968",
        "P50": "16.20371168",
        "P75": "17.65701563",
        "P85": "18.69279128",
        "P90": "19.55110329",
        "P95": "21.17677023",
        "P97": "22.58144893"
      }, {
        "Sex": "1",
        "Agemos": "110.5",
        "L": "-2.935363951",
        "M": "16.24094239",
        "S": "0.1132242",
        "P3": "13.76483325",
        "P5": "13.99871328",
        "P10": "14.39176909",
        "P25": "15.15953759",
        "P50": "16.24094239",
        "P75": "17.70780444",
        "P85": "18.75390266",
        "P90": "19.62118443",
        "P95": "21.26488107",
        "P97": "22.68625363"
      }, {
        "Sex": "1",
        "Agemos": "111.5",
        "L": "-2.917635157",
        "M": "16.27880346",
        "S": "0.113961734",
        "P3": "13.78227084",
        "P5": "14.01794738",
        "P10": "14.41408598",
        "P25": "15.1881024",
        "P50": "16.27880346",
        "P75": "17.75917825",
        "P85": "18.81553565",
        "P90": "19.69171163",
        "P95": "21.3532285",
        "P97": "22.79103265"
      }, {
        "Sex": "1",
        "Agemos": "112.5",
        "L": "-2.900039803",
        "M": "16.31728385",
        "S": "0.114689291",
        "P3": "13.80032593",
        "P5": "14.03780282",
        "P10": "14.43702918",
        "P25": "15.21729722",
        "P50": "16.31728385",
        "P75": "17.81112044",
        "P85": "18.87766958",
        "P90": "19.76266083",
        "P95": "21.44178165",
        "P97": "22.89574847"
      }, {
        "Sex": "1",
        "Agemos": "113.5",
        "L": "-2.882593796",
        "M": "16.35637267",
        "S": "0.115406523",
        "P3": "13.81899666",
        "P5": "14.0582769",
        "P10": "14.46059456",
        "P25": "15.2471151",
        "P50": "16.35637267",
        "P75": "17.86361469",
        "P85": "18.94028419",
        "P90": "19.83400841",
        "P95": "21.53051015",
        "P97": "23.00036429"
      }, {
        "Sex": "1",
        "Agemos": "114.5",
        "L": "-2.865311266",
        "M": "16.39605916",
        "S": "0.116113097",
        "P3": "13.83828098",
        "P5": "14.07936677",
        "P10": "14.48477791",
        "P25": "15.27754914",
        "P50": "16.39605916",
        "P75": "17.91664493",
        "P85": "19.00335954",
        "P90": "19.90573115",
        "P95": "21.61938426",
        "P97": "23.10484416"
      }, {
        "Sex": "1",
        "Agemos": "115.5",
        "L": "-2.848204697",
        "M": "16.43633265",
        "S": "0.116808702",
        "P3": "13.85817663",
        "P5": "14.10106937",
        "P10": "14.50957485",
        "P25": "15.30859238",
        "P50": "16.43633265",
        "P75": "17.97019532",
        "P85": "19.06687603",
        "P90": "19.97780623",
        "P95": "21.70837477",
        "P97": "23.20915296"
      }, {
        "Sex": "1",
        "Agemos": "116.5",
        "L": "-2.831285052",
        "M": "16.47718256",
        "S": "0.117493042",
        "P3": "13.87868113",
        "P5": "14.1233815",
        "P10": "14.53498094",
        "P25": "15.34023785",
        "P50": "16.47718256",
        "P75": "18.02425026",
        "P85": "19.13081436",
        "P90": "20.05021121",
        "P95": "21.79745308",
        "P97": "23.31325641"
      }, {
        "Sex": "1",
        "Agemos": "117.5",
        "L": "-2.81456189",
        "M": "16.51859843",
        "S": "0.11816584",
        "P3": "13.8997918",
        "P5": "14.14629977",
        "P10": "14.56099157",
        "P25": "15.37247856",
        "P50": "16.51859843",
        "P75": "18.0787944",
        "P85": "19.19515554",
        "P90": "20.12292406",
        "P95": "21.88659115",
        "P97": "23.41712109"
      }, {
        "Sex": "1",
        "Agemos": "118.5",
        "L": "-2.79804347",
        "M": "16.56056987",
        "S": "0.118826835",
        "P3": "13.92150576",
        "P5": "14.16982063",
        "P10": "14.58760204",
        "P25": "15.40530752",
        "P50": "16.56056987",
        "P75": "18.13381258",
        "P85": "19.25988094",
        "P90": "20.19592313",
        "P95": "21.97576153",
        "P97": "23.5207144"
      }, {
        "Sex": "1",
        "Agemos": "119.5",
        "L": "-2.781736856",
        "M": "16.60308661",
        "S": "0.119475785",
        "P3": "13.94381995",
        "P5": "14.19394037",
        "P10": "14.61480754",
        "P25": "15.43871766",
        "P50": "16.60308661",
        "P75": "18.1892899",
        "P85": "19.3249722",
        "P90": "20.26918717",
        "P95": "22.06493737",
        "P97": "23.62400462"
      }, {
        "Sex": "1",
        "Agemos": "120.5",
        "L": "-2.765648008",
        "M": "16.64613844",
        "S": "0.120112464",
        "P3": "13.96673109",
        "P5": "14.21865508",
        "P10": "14.64260311",
        "P25": "15.47270195",
        "P50": "16.64613844",
        "P75": "18.24521166",
        "P85": "19.3904113",
        "P90": "20.34269534",
        "P95": "22.15409238",
        "P97": "23.72696086"
      }, {
        "Sex": "1",
        "Agemos": "121.5",
        "L": "-2.749782197",
        "M": "16.68971518",
        "S": "0.120736656",
        "P3": "13.99023581",
        "P5": "14.24396081",
        "P10": "14.67098376",
        "P25": "15.50725326",
        "P50": "16.68971518",
        "P75": "18.3015633",
        "P85": "19.45618042",
        "P90": "20.41642709",
        "P95": "22.24320091",
        "P97": "23.82955322"
      }, {
        "Sex": "1",
        "Agemos": "122.5",
        "L": "-2.734142443",
        "M": "16.73380695",
        "S": "0.121348181",
        "P3": "14.01433021",
        "P5": "14.26985313",
        "P10": "14.6999442",
        "P25": "15.5423645",
        "P50": "16.73380695",
        "P75": "18.35833084",
        "P85": "19.52226247",
        "P90": "20.49036263",
        "P95": "22.33223786",
        "P97": "23.93175206"
      }, {
        "Sex": "1",
        "Agemos": "123.5",
        "L": "-2.718732873",
        "M": "16.77840363",
        "S": "0.121946849",
        "P3": "14.0390107",
        "P5": "14.29632789",
        "P10": "14.72947925",
        "P25": "15.57802849",
        "P50": "16.77840363",
        "P75": "18.41549995",
        "P85": "19.58864006",
        "P90": "20.56448202",
        "P95": "22.42117875",
        "P97": "24.0335295"
      }, {
        "Sex": "1",
        "Agemos": "124.5",
        "L": "-2.703555506",
        "M": "16.82349538",
        "S": "0.122532501",
        "P3": "14.06427317",
        "P5": "14.32338048",
        "P10": "14.75958347",
        "P25": "15.61423805",
        "P50": "16.82349538",
        "P75": "18.4730569",
        "P85": "19.65529649",
        "P90": "20.63876611",
        "P95": "22.5099997",
        "P97": "24.1348579"
      }, {
        "Sex": "1",
        "Agemos": "125.5",
        "L": "-2.688611957",
        "M": "16.86907238",
        "S": "0.123104991",
        "P3": "14.09011344",
        "P5": "14.35100623",
        "P10": "14.79025137",
        "P25": "15.65098595",
        "P50": "16.86907238",
        "P75": "18.53098805",
        "P85": "19.72221531",
        "P90": "20.71319602",
        "P95": "22.59867744",
        "P97": "24.23571063"
      }, {
        "Sex": "1",
        "Agemos": "126.5",
        "L": "-2.673903164",
        "M": "16.91512487",
        "S": "0.123664186",
        "P3": "14.11652711",
        "P5": "14.37920031",
        "P10": "14.8214773",
        "P25": "15.68826493",
        "P50": "16.91512487",
        "P75": "18.58928",
        "P85": "19.78938034",
        "P90": "20.78775327",
        "P95": "22.68718928",
        "P97": "24.33606191"
      }, {
        "Sex": "1",
        "Agemos": "127.5",
        "L": "-2.659429443",
        "M": "16.96164317",
        "S": "0.124209969",
        "P3": "14.14350962",
        "P5": "14.40795771",
        "P10": "14.85325552",
        "P25": "15.72606768",
        "P50": "16.96164317",
        "P75": "18.64791953",
        "P85": "19.85677572",
        "P90": "20.86241981",
        "P95": "22.77551316",
        "P97": "24.43588681"
      }, {
        "Sex": "1",
        "Agemos": "128.5",
        "L": "-2.645190534",
        "M": "17.00861766",
        "S": "0.124742239",
        "P3": "14.17105623",
        "P5": "14.43727329",
        "P10": "14.88558018",
        "P25": "15.76438688",
        "P50": "17.00861766",
        "P75": "18.70689364",
        "P85": "19.92438591",
        "P90": "20.93717795",
        "P95": "22.86362762",
        "P97": "24.53516127"
      }, {
        "Sex": "1",
        "Agemos": "129.5",
        "L": "-2.631185649",
        "M": "17.05603879",
        "S": "0.125260905",
        "P3": "14.19916203",
        "P5": "14.46714175",
        "P10": "14.91844531",
        "P25": "15.80321513",
        "P50": "17.05603879",
        "P75": "18.76618951",
        "P85": "19.99219565",
        "P90": "21.01201043",
        "P95": "22.95151182",
        "P97": "24.63386207"
      }, {
        "Sex": "1",
        "Agemos": "130.5",
        "L": "-2.617413511",
        "M": "17.10389705",
        "S": "0.125765895",
        "P3": "14.22782193",
        "P5": "14.49755765",
        "P10": "14.95184482",
        "P25": "15.84254502",
        "P50": "17.10389705",
        "P75": "18.82579454",
        "P85": "20.06019002",
        "P90": "21.08690037",
        "P95": "23.03914551",
        "P97": "24.73196683"
      }, {
        "Sex": "1",
        "Agemos": "131.5",
        "L": "-2.603872392",
        "M": "17.15218302",
        "S": "0.126257147",
        "P3": "14.25703066",
        "P5": "14.52851537",
        "P10": "14.98577251",
        "P25": "15.8823691",
        "P50": "17.15218302",
        "P75": "18.88569633",
        "P85": "20.12835437",
        "P90": "21.1618313",
        "P95": "23.12650908",
        "P97": "24.82945404"
      }, {
        "Sex": "1",
        "Agemos": "132.5",
        "L": "-2.590560148",
        "M": "17.20088732",
        "S": "0.126734613",
        "P3": "14.28678279",
        "P5": "14.56000917",
        "P10": "15.02022206",
        "P25": "15.92267985",
        "P50": "17.20088732",
        "P75": "18.94588267",
        "P85": "20.19667437",
        "P90": "21.23678716",
        "P95": "23.21358351",
        "P97": "24.92630305"
      }, {
        "Sex": "1",
        "Agemos": "133.5",
        "L": "-2.577474253",
        "M": "17.25000062",
        "S": "0.12719826",
        "P3": "14.31707271",
        "P5": "14.59203313",
        "P10": "15.05518706",
        "P25": "15.96346973",
        "P50": "17.25000062",
        "P75": "19.00634155",
        "P85": "20.265136",
        "P90": "21.31175226",
        "P95": "23.30035043",
        "P97": "25.02249405"
      }, {
        "Sex": "1",
        "Agemos": "134.5",
        "L": "-2.564611831",
        "M": "17.29951367",
        "S": "0.127648067",
        "P3": "14.34789463",
        "P5": "14.62458122",
        "P10": "15.09066095",
        "P25": "16.00473115",
        "P50": "17.29951367",
        "P75": "19.06706116",
        "P85": "20.33372554",
        "P90": "21.38671134",
        "P95": "23.38679204",
        "P97": "25.11800807"
      }, {
        "Sex": "1",
        "Agemos": "135.5",
        "L": "-2.551969684",
        "M": "17.34941726",
        "S": "0.128084023",
        "P3": "14.37924262",
        "P5": "14.65764722",
        "P10": "15.1266371",
        "P25": "16.04645648",
        "P50": "17.34941726",
        "P75": "19.12802987",
        "P85": "20.40242956",
        "P90": "21.46164953",
        "P95": "23.4728912",
        "P97": "25.21282703"
      }, {
        "Sex": "1",
        "Agemos": "136.5",
        "L": "-2.539539972",
        "M": "17.39970308",
        "S": "0.128506192",
        "P3": "14.41110933",
        "P5": "14.69122381",
        "P10": "15.16310811",
        "P25": "16.08863812",
        "P50": "17.39970308",
        "P75": "19.18923776",
        "P85": "20.4712365",
        "P90": "21.53655365",
        "P95": "23.55863129",
        "P97": "25.3069313"
      }, {
        "Sex": "1",
        "Agemos": "137.5",
        "L": "-2.527325681",
        "M": "17.45036072",
        "S": "0.128914497",
        "P3": "14.44349038",
        "P5": "14.72530601",
        "P10": "15.20006805",
        "P25": "16.13126821",
        "P50": "17.45036072",
        "P75": "19.25067129",
        "P85": "20.54013114",
        "P90": "21.61140764",
        "P95": "23.64399652",
        "P97": "25.40030815"
      }, {
        "Sex": "1",
        "Agemos": "138.5",
        "L": "-2.515320235",
        "M": "17.50138161",
        "S": "0.129309001",
        "P3": "14.47637861",
        "P5": "14.75988661",
        "P10": "15.23750958",
        "P25": "16.17433905",
        "P50": "17.50138161",
        "P75": "19.31232029",
        "P85": "20.60910189",
        "P90": "21.6861986",
        "P95": "23.72897155",
        "P97": "25.49294066"
      }, {
        "Sex": "1",
        "Agemos": "139.5",
        "L": "-2.503519447",
        "M": "17.55275674",
        "S": "0.129689741",
        "P3": "14.50976741",
        "P5": "14.79495883",
        "P10": "15.27542561",
        "P25": "16.21784281",
        "P50": "17.55275674",
        "P75": "19.37417388",
        "P85": "20.6781365",
        "P90": "21.76091323",
        "P95": "23.81354171",
        "P97": "25.58481418"
      }, {
        "Sex": "1",
        "Agemos": "140.5",
        "L": "-2.491918934",
        "M": "17.60447714",
        "S": "0.130056765",
        "P3": "14.54365005",
        "P5": "14.83051578",
        "P10": "15.31380892",
        "P25": "16.26177162",
        "P50": "17.60447714",
        "P75": "19.43622137",
        "P85": "20.74722303",
        "P90": "21.83553865",
        "P95": "23.89769296",
        "P97": "25.67591492"
      }, {
        "Sex": "1",
        "Agemos": "141.5",
        "L": "-2.480514136",
        "M": "17.6565339",
        "S": "0.130410133",
        "P3": "14.57801961",
        "P5": "14.86655039",
        "P10": "15.3526522",
        "P25": "16.30611758",
        "P50": "17.6565339",
        "P75": "19.49845226",
        "P85": "20.81634983",
        "P90": "21.91006237",
        "P95": "23.98141187",
        "P97": "25.76622996"
      }, {
        "Sex": "1",
        "Agemos": "142.5",
        "L": "-2.469300331",
        "M": "17.70891811",
        "S": "0.130749913",
        "P3": "14.61286903",
        "P5": "14.90305549",
        "P10": "15.39194804",
        "P25": "16.35087272",
        "P50": "17.70891811",
        "P75": "19.5608562",
        "P85": "20.88550554",
        "P90": "21.98447229",
        "P95": "24.06468566",
        "P97": "25.85574725"
      }, {
        "Sex": "1",
        "Agemos": "143.5",
        "L": "-2.458272656",
        "M": "17.76162094",
        "S": "0.131076187",
        "P3": "14.6481911",
        "P5": "14.94002374",
        "P10": "15.43168891",
        "P25": "16.39602903",
        "P50": "17.76162094",
        "P75": "19.62342306",
        "P85": "20.95467909",
        "P90": "22.05875672",
        "P95": "24.14750216",
        "P97": "25.94445561"
      }, {
        "Sex": "1",
        "Agemos": "144.5",
        "L": "-2.447426113",
        "M": "17.81463359",
        "S": "0.131389042",
        "P3": "14.68397844",
        "P5": "14.97744768",
        "P10": "15.47186716",
        "P25": "16.44157847",
        "P50": "17.81463359",
        "P75": "19.68614286",
        "P85": "21.02385969",
        "P90": "22.13290433",
        "P95": "24.22984982",
        "P97": "26.0323447"
      }, {
        "Sex": "1",
        "Agemos": "145.5",
        "L": "-2.436755595",
        "M": "17.86794729",
        "S": "0.131688579",
        "P3": "14.72022354",
        "P5": "15.01531973",
        "P10": "15.51247506",
        "P25": "16.48751291",
        "P50": "17.86794729",
        "P75": "19.74900579",
        "P85": "21.09303687",
        "P90": "22.20690421",
        "P95": "24.31171774",
        "P97": "26.11940509"
      }, {
        "Sex": "1",
        "Agemos": "146.5",
        "L": "-2.426255887",
        "M": "17.92155332",
        "S": "0.131974905",
        "P3": "14.75691872",
        "P5": "15.05363215",
        "P10": "15.55350476",
        "P25": "16.53382421",
        "P50": "17.92155332",
        "P75": "19.81200224",
        "P85": "21.1622004",
        "P90": "22.28074585",
        "P95": "24.39309562",
        "P97": "26.20562819"
      }, {
        "Sex": "1",
        "Agemos": "147.5",
        "L": "-2.415921689",
        "M": "17.97544299",
        "S": "0.132248138",
        "P3": "14.79405616",
        "P5": "15.09237707",
        "P10": "15.5949483",
        "P25": "16.58050415",
        "P50": "17.97544299",
        "P75": "19.87512275",
        "P85": "21.23134038",
        "P90": "22.35441912",
        "P95": "24.47397382",
        "P97": "26.2910063"
      }, {
        "Sex": "1",
        "Agemos": "148.5",
        "L": "-2.405747619",
        "M": "18.02960765",
        "S": "0.132508403",
        "P3": "14.83162791",
        "P5": "15.13154651",
        "P10": "15.63679762",
        "P25": "16.62754449",
        "P50": "18.02960765",
        "P75": "19.93835804",
        "P85": "21.30044717",
        "P90": "22.42791427",
        "P95": "24.55434332",
        "P97": "26.37553258"
      }, {
        "Sex": "1",
        "Agemos": "149.5",
        "L": "-2.395728233",
        "M": "18.08403868",
        "S": "0.132755834",
        "P3": "14.86962583",
        "P5": "15.17113234",
        "P10": "15.67904455",
        "P25": "16.67493692",
        "P50": "18.08403868",
        "P75": "20.001699",
        "P85": "21.36951141",
        "P90": "22.50122197",
        "P95": "24.63419572",
        "P97": "26.45920106"
      }, {
        "Sex": "1",
        "Agemos": "150.5",
        "L": "-2.385858029",
        "M": "18.1387275",
        "S": "0.132990575",
        "P3": "14.90804168",
        "P5": "15.2111263",
        "P10": "15.72168083",
        "P25": "16.72267307",
        "P50": "18.1387275",
        "P75": "20.06513669",
        "P85": "21.43852405",
        "P90": "22.57433325",
        "P95": "24.71352325",
        "P97": "26.54200665"
      }, {
        "Sex": "1",
        "Agemos": "151.5",
        "L": "-2.376131459",
        "M": "18.19366555",
        "S": "0.133212776",
        "P3": "14.94686707",
        "P5": "15.25152001",
        "P10": "15.76469808",
        "P25": "16.77074454",
        "P50": "18.19366555",
        "P75": "20.12866232",
        "P85": "21.5074763",
        "P90": "22.64723955",
        "P95": "24.79231881",
        "P97": "26.62394515"
      }, {
        "Sex": "1",
        "Agemos": "152.5",
        "L": "-2.366542942",
        "M": "18.24884431",
        "S": "0.133422595",
        "P3": "14.98609343",
        "P5": "15.29230496",
        "P10": "15.80808782",
        "P25": "16.81914286",
        "P50": "18.24884431",
        "P75": "20.1922673",
        "P85": "21.57635964",
        "P90": "22.7199327",
        "P95": "24.87057587",
        "P97": "26.7050132"
      }, {
        "Sex": "1",
        "Agemos": "153.5",
        "L": "-2.357086871",
        "M": "18.3042553",
        "S": "0.133620197",
        "P3": "15.0257121",
        "P5": "15.33347251",
        "P10": "15.85184148",
        "P25": "16.86785954",
        "P50": "18.3042553",
        "P75": "20.25594317",
        "P85": "21.64516586",
        "P90": "22.79240491",
        "P95": "24.9482886",
        "P97": "26.78520835"
      }, {
        "Sex": "1",
        "Agemos": "154.5",
        "L": "-2.347757625",
        "M": "18.35989003",
        "S": "0.133805756",
        "P3": "15.06571426",
        "P5": "15.37501389",
        "P10": "15.89595038",
        "P25": "16.91688599",
        "P50": "18.35989003",
        "P75": "20.31968165",
        "P85": "21.71388701",
        "P90": "22.86464879",
        "P95": "25.02545175",
        "P97": "26.86452902"
      }, {
        "Sex": "1",
        "Agemos": "155.5",
        "L": "-2.338549576",
        "M": "18.41574009",
        "S": "0.133979452",
        "P3": "15.10609095",
        "P5": "15.41692023",
        "P10": "15.94040572",
        "P25": "16.96621361",
        "P50": "18.41574009",
        "P75": "20.38347461",
        "P85": "21.78251541",
        "P90": "22.93665733",
        "P95": "25.10206075",
        "P97": "26.94297451"
      }, {
        "Sex": "1",
        "Agemos": "156.5",
        "L": "-2.3294571",
        "M": "18.47179706",
        "S": "0.13414147",
        "P3": "15.14683307",
        "P5": "15.4591825",
        "P10": "15.98519864",
        "P25": "17.01583373",
        "P50": "18.47179706",
        "P75": "20.44731409",
        "P85": "21.85104367",
        "P90": "23.0084239",
        "P95": "25.17811163",
        "P97": "27.02054498"
      }, {
        "Sex": "1",
        "Agemos": "157.5",
        "L": "-2.320474586",
        "M": "18.52805255",
        "S": "0.134292005",
        "P3": "15.1879314",
        "P5": "15.50179159",
        "P10": "16.03032014",
        "P25": "17.06573761",
        "P50": "18.52805255",
        "P75": "20.51119228",
        "P85": "21.91946467",
        "P90": "23.07994228",
        "P95": "25.25360108",
        "P97": "27.09724149"
      }, {
        "Sex": "1",
        "Agemos": "158.5",
        "L": "-2.311596446",
        "M": "18.5844982",
        "S": "0.134431256",
        "P3": "15.22937658",
        "P5": "15.54473823",
        "P10": "16.07576115",
        "P25": "17.11591649",
        "P50": "18.5844982",
        "P75": "20.57510153",
        "P85": "21.98777156",
        "P90": "23.15120662",
        "P95": "25.32852641",
        "P97": "27.173066"
      }, {
        "Sex": "1",
        "Agemos": "159.5",
        "L": "-2.302817124",
        "M": "18.64112567",
        "S": "0.134559427",
        "P3": "15.27115913",
        "P5": "15.58801305",
        "P10": "16.12151248",
        "P25": "17.16636153",
        "P50": "18.64112567",
        "P75": "20.63903434",
        "P85": "22.05595776",
        "P90": "23.22221145",
        "P95": "25.4028856",
        "P97": "27.24802132"
      }, {
        "Sex": "1",
        "Agemos": "160.5",
        "L": "-2.294131107",
        "M": "18.69792663",
        "S": "0.134676731",
        "P3": "15.31326943",
        "P5": "15.63160658",
        "P10": "16.16756484",
        "P25": "17.21706384",
        "P50": "18.69792663",
        "P75": "20.70298336",
        "P85": "22.12401698",
        "P90": "23.2929517",
        "P95": "25.47667722",
        "P97": "27.32211115"
      }, {
        "Sex": "1",
        "Agemos": "161.5",
        "L": "-2.285532933",
        "M": "18.75489278",
        "S": "0.134783385",
        "P3": "15.35569774",
        "P5": "15.67550919",
        "P10": "16.21390888",
        "P25": "17.26801449",
        "P50": "18.75489278",
        "P75": "20.76694139",
        "P85": "22.19194317",
        "P90": "23.36342268",
        "P95": "25.54990054",
        "P97": "27.39534011"
      }, {
        "Sex": "1",
        "Agemos": "162.5",
        "L": "-2.277017201",
        "M": "18.81201584",
        "S": "0.134879611",
        "P3": "15.39843418",
        "P5": "15.71971118",
        "P10": "16.2605351",
        "P25": "17.31920447",
        "P50": "18.81201584",
        "P75": "20.83090139",
        "P85": "22.25973057",
        "P90": "23.43362008",
        "P95": "25.62255542",
        "P97": "27.46771366"
      }, {
        "Sex": "1",
        "Agemos": "163.5",
        "L": "-2.268578584",
        "M": "18.86928753",
        "S": "0.134965637",
        "P3": "15.44146877",
        "P5": "15.7642027",
        "P10": "16.30743394",
        "P25": "17.37062472",
        "P50": "18.86928753",
        "P75": "20.89485646",
        "P85": "22.32737368",
        "P90": "23.50353999",
        "P95": "25.6946424",
        "P97": "27.53923819"
      }, {
        "Sex": "1",
        "Agemos": "164.5",
        "L": "-2.260211837",
        "M": "18.92669959",
        "S": "0.135041695",
        "P3": "15.48479139",
        "P5": "15.80897382",
        "P10": "16.35459573",
        "P25": "17.42226614",
        "P50": "18.92669959",
        "P75": "20.95879983",
        "P85": "22.39486727",
        "P90": "23.57317887",
        "P95": "25.76616263",
        "P97": "27.60992094"
      }, {
        "Sex": "1",
        "Agemos": "165.5",
        "L": "-2.251911809",
        "M": "18.98424378",
        "S": "0.135108024",
        "P3": "15.52839182",
        "P5": "15.85401448",
        "P10": "16.40201071",
        "P25": "17.47411956",
        "P50": "18.98424378",
        "P75": "21.02272489",
        "P85": "22.46220636",
        "P90": "23.64253356",
        "P95": "25.83711794",
        "P97": "27.67977007"
      }, {
        "Sex": "1",
        "Agemos": "166.5",
        "L": "-2.243673453",
        "M": "19.04191185",
        "S": "0.135164867",
        "P3": "15.57225971",
        "P5": "15.89931451",
        "P10": "16.44966902",
        "P25": "17.52617573",
        "P50": "19.04191185",
        "P75": "21.08662518",
        "P85": "22.52938625",
        "P90": "23.71160129",
        "P95": "25.90751079",
        "P97": "27.74879463"
      }, {
        "Sex": "1",
        "Agemos": "167.5",
        "L": "-2.235491842",
        "M": "19.09969557",
        "S": "0.135212469",
        "P3": "15.6163846",
        "P5": "15.94486363",
        "P10": "16.49756071",
        "P25": "17.57842539",
        "P50": "19.09969557",
        "P75": "21.15049434",
        "P85": "22.5964025",
        "P90": "23.78037969",
        "P95": "25.97734428",
        "P97": "27.81700453"
      }, {
        "Sex": "1",
        "Agemos": "168.5",
        "L": "-2.227362173",
        "M": "19.15758672",
        "S": "0.135251083",
        "P3": "15.66075591",
        "P5": "15.99065148",
        "P10": "16.54567574",
        "P25": "17.63085916",
        "P50": "19.15758672",
        "P75": "21.21432619",
        "P85": "22.66325092",
        "P90": "23.84886673",
        "P95": "26.04662217",
        "P97": "27.88441062"
      }, {
        "Sex": "1",
        "Agemos": "169.5",
        "L": "-2.21927979",
        "M": "19.21557707",
        "S": "0.135280963",
        "P3": "15.70536296",
        "P5": "16.03666757",
        "P10": "16.59400398",
        "P25": "17.68346764",
        "P50": "19.21557707",
        "P75": "21.27811465",
        "P85": "22.7299276",
        "P90": "23.91706081",
        "P95": "26.11534887",
        "P97": "27.95102462"
      }, {
        "Sex": "1",
        "Agemos": "170.5",
        "L": "-2.211240187",
        "M": "19.27365839",
        "S": "0.135302371",
        "P3": "15.75019496",
        "P5": "16.0829013",
        "P10": "16.64253518",
        "P25": "17.73624136",
        "P50": "19.27365839",
        "P75": "21.34185379",
        "P85": "22.79642886",
        "P90": "23.98496068",
        "P95": "26.18352944",
        "P97": "28.01685913"
      }, {
        "Sex": "1",
        "Agemos": "171.5",
        "L": "-2.203239029",
        "M": "19.33182247",
        "S": "0.135315568",
        "P3": "15.79524102",
        "P5": "16.129342",
        "P10": "16.69125904",
        "P25": "17.78917078",
        "P50": "19.33182247",
        "P75": "21.40553781",
        "P85": "22.86275131",
        "P90": "24.05256549",
        "P95": "26.25116959",
        "P97": "28.08192768"
      }, {
        "Sex": "1",
        "Agemos": "172.5",
        "L": "-2.195272161",
        "M": "19.39006106",
        "S": "0.135320824",
        "P3": "15.84049013",
        "P5": "16.17597888",
        "P10": "16.74016514",
        "P25": "17.84224628",
        "P50": "19.39006106",
        "P75": "21.46916104",
        "P85": "22.92889179",
        "P90": "24.11987476",
        "P95": "26.31827569",
        "P97": "28.14624467"
      }, {
        "Sex": "1",
        "Agemos": "173.5",
        "L": "-2.187335625",
        "M": "19.44836594",
        "S": "0.135318407",
        "P3": "15.8859312",
        "P5": "16.22280106",
        "P10": "16.78924297",
        "P25": "17.8954582",
        "P50": "19.44836594",
        "P75": "21.53271791",
        "P85": "22.99484741",
        "P90": "24.18688841",
        "P95": "26.38485476",
        "P97": "28.20982542"
      }, {
        "Sex": "1",
        "Agemos": "174.5",
        "L": "-2.179425674",
        "M": "19.50672885",
        "S": "0.135308594",
        "P3": "15.93155303",
        "P5": "16.26979755",
        "P10": "16.83848195",
        "P25": "17.9487968",
        "P50": "19.50672885",
        "P75": "21.596203",
        "P85": "23.06061552",
        "P90": "24.25360674",
        "P95": "26.45091448",
        "P97": "28.27268613"
      }, {
        "Sex": "1",
        "Agemos": "175.5",
        "L": "-2.171538789",
        "M": "19.56514153",
        "S": "0.135291662",
        "P3": "15.97734432",
        "P5": "16.31695728",
        "P10": "16.8878714",
        "P25": "18.00225228",
        "P50": "19.56514153",
        "P75": "21.659611",
        "P85": "23.12619375",
        "P90": "24.3200304",
        "P95": "26.51646321",
        "P97": "28.33484391"
      }, {
        "Sex": "1",
        "Agemos": "176.5",
        "L": "-2.163671689",
        "M": "19.62359571",
        "S": "0.135267891",
        "P3": "16.02329371",
        "P5": "16.3642691",
        "P10": "16.93740054",
        "P25": "18.05581474",
        "P50": "19.62359571",
        "P75": "21.72293673",
        "P85": "23.19157996",
        "P90": "24.38616048",
        "P95": "26.58150994",
        "P97": "28.39631678"
      }, {
        "Sex": "1",
        "Agemos": "177.5",
        "L": "-2.155821357",
        "M": "19.6820831",
        "S": "0.135237567",
        "P3": "16.0693897",
        "P5": "16.41172173",
        "P10": "16.98705851",
        "P25": "18.10947424",
        "P50": "19.6820831",
        "P75": "21.78617511",
        "P85": "23.25677226",
        "P90": "24.4519984",
        "P95": "26.64606434",
        "P97": "28.45712363"
      }, {
        "Sex": "1",
        "Agemos": "178.5",
        "L": "-2.147985046",
        "M": "19.74059538",
        "S": "0.135200976",
        "P3": "16.11562074",
        "P5": "16.45930384",
        "P10": "17.03683437",
        "P25": "18.16322076",
        "P50": "19.74059538",
        "P75": "21.84932117",
        "P85": "23.32176902",
        "P90": "24.517546",
        "P95": "26.71013675",
        "P97": "28.51728428"
      }, {
        "Sex": "1",
        "Agemos": "179.5",
        "L": "-2.140160305",
        "M": "19.7991242",
        "S": "0.135158409",
        "P3": "16.1619752",
        "P5": "16.50700399",
        "P10": "17.08671707",
        "P25": "18.21704418",
        "P50": "19.7991242",
        "P75": "21.91237008",
        "P85": "23.38656886",
        "P90": "24.5828055",
        "P95": "26.77373817",
        "P97": "28.57681946"
      }, {
        "Sex": "1",
        "Agemos": "180.5",
        "L": "-2.132344989",
        "M": "19.85766121",
        "S": "0.135110159",
        "P3": "16.20844134",
        "P5": "16.55481067",
        "P10": "17.13669551",
        "P25": "18.27093434",
        "P50": "19.85766121",
        "P75": "21.97531708",
        "P85": "23.45117065",
        "P90": "24.64777949",
        "P95": "26.83688026",
        "P97": "28.63575076"
      }, {
        "Sex": "1",
        "Agemos": "181.5",
        "L": "-2.124537282",
        "M": "19.916198",
        "S": "0.135056522",
        "P3": "16.25500735",
        "P5": "16.60271228",
        "P10": "17.18675845",
        "P25": "18.32488097",
        "P50": "19.916198",
        "P75": "22.03815755",
        "P85": "23.5155735",
        "P90": "24.71247097",
        "P95": "26.89957537",
        "P97": "28.69410072"
      }, {
        "Sex": "1",
        "Agemos": "182.5",
        "L": "-2.116735712",
        "M": "19.97472615",
        "S": "0.134997797",
        "P3": "16.30166137",
        "P5": "16.65069714",
        "P10": "17.23689462",
        "P25": "18.37887373",
        "P50": "19.97472615",
        "P75": "22.10088696",
        "P85": "23.57977678",
        "P90": "24.77688329",
        "P95": "26.96183652",
        "P97": "28.75189275"
      }, {
        "Sex": "1",
        "Agemos": "183.5",
        "L": "-2.108939167",
        "M": "20.03323719",
        "S": "0.134934285",
        "P3": "16.34839144",
        "P5": "16.69875348",
        "P10": "17.28709261",
        "P25": "18.4329022",
        "P50": "20.03323719",
        "P75": "22.16350089",
        "P85": "23.6437801",
        "P90": "24.84102024",
        "P95": "27.02367739",
        "P97": "28.80915118"
      }, {
        "Sex": "1",
        "Agemos": "184.5",
        "L": "-2.10114692",
        "M": "20.09172262",
        "S": "0.134866291",
        "P3": "16.39518554",
        "P5": "16.74686947",
        "P10": "17.33734097",
        "P25": "18.48695587",
        "P50": "20.09172262",
        "P75": "22.22599501",
        "P85": "23.70758332",
        "P90": "24.90488595",
        "P95": "27.08511234",
        "P97": "28.86590125"
      }, {
        "Sex": "1",
        "Agemos": "185.5",
        "L": "-2.093358637",
        "M": "20.15017387",
        "S": "0.134794121",
        "P3": "16.44203157",
        "P5": "16.79503318",
        "P10": "17.38762812",
        "P25": "18.54102414",
        "P50": "20.15017387",
        "P75": "22.2883651",
        "P85": "23.77118654",
        "P90": "24.96848498",
        "P95": "27.14615643",
        "P97": "28.92216908"
      }, {
        "Sex": "1",
        "Agemos": "186.5",
        "L": "-2.085574403",
        "M": "20.20858236",
        "S": "0.134718085",
        "P3": "16.4889174",
        "P5": "16.84323264",
        "P10": "17.43794242",
        "P25": "18.59509632",
        "P50": "20.20858236",
        "P75": "22.35060703",
        "P85": "23.83459013",
        "P90": "25.03182226",
        "P95": "27.20682538",
        "P97": "28.97798172"
      }, {
        "Sex": "1",
        "Agemos": "187.5",
        "L": "-2.077794735",
        "M": "20.26693944",
        "S": "0.134638494",
        "P3": "16.53583079",
        "P5": "16.89145577",
        "P10": "17.48827215",
        "P25": "18.64916164",
        "P50": "20.26693944",
        "P75": "22.41271676",
        "P85": "23.89779468",
        "P90": "25.09490311",
        "P95": "27.2671356",
        "P97": "29.03336709"
      }, {
        "Sex": "1",
        "Agemos": "188.5",
        "L": "-2.070020599",
        "M": "20.32523642",
        "S": "0.134555663",
        "P3": "16.58275947",
        "P5": "16.93969043",
        "P10": "17.53860547",
        "P25": "18.70320922",
        "P50": "20.32523642",
        "P75": "22.47469037",
        "P85": "23.96080104",
        "P90": "25.15773327",
        "P95": "27.32710417",
        "P97": "29.08835404"
      }, {
        "Sex": "1",
        "Agemos": "189.5",
        "L": "-2.062253431",
        "M": "20.38346455",
        "S": "0.13446991",
        "P3": "16.62969112",
        "P5": "16.98792443",
        "P10": "17.58893048",
        "P25": "18.7572281",
        "P50": "20.38346455",
        "P75": "22.53652401",
        "P85": "24.02361032",
        "P90": "25.22031884",
        "P95": "27.38674888",
        "P97": "29.14297232"
      }, {
        "Sex": "1",
        "Agemos": "190.5",
        "L": "-2.054495145",
        "M": "20.44161501",
        "S": "0.134381553",
        "P3": "16.67661334",
        "P5": "17.03614547",
        "P10": "17.63923518",
        "P25": "18.8112072",
        "P50": "20.44161501",
        "P75": "22.59821392",
        "P85": "24.08622386",
        "P90": "25.28266636",
        "P95": "27.4460882",
        "P97": "29.19725256"
      }, {
        "Sex": "1",
        "Agemos": "191.5",
        "L": "-2.046748156",
        "M": "20.49967894",
        "S": "0.134290916",
        "P3": "16.72351369",
        "P5": "17.08434122",
        "P10": "17.68950749",
        "P25": "18.86513537",
        "P50": "20.49967894",
        "P75": "22.65975645",
        "P85": "24.14864327",
        "P90": "25.34478272",
        "P95": "27.50514126",
        "P97": "29.25122631"
      }, {
        "Sex": "1",
        "Agemos": "192.5",
        "L": "-2.039015385",
        "M": "20.5576474",
        "S": "0.134198323",
        "P3": "16.77037969",
        "P5": "17.13249925",
        "P10": "17.73973524",
        "P25": "18.91900132",
        "P50": "20.5576474",
        "P75": "22.72114803",
        "P85": "24.21087038",
        "P90": "25.40667527",
        "P95": "27.56392793",
        "P97": "29.30492601"
      }, {
        "Sex": "1",
        "Agemos": "193.5",
        "L": "-2.031300282",
        "M": "20.6155114",
        "S": "0.134104101",
        "P3": "16.81719878",
        "P5": "17.18060709",
        "P10": "17.78990616",
        "P25": "18.97279368",
        "P50": "20.6155114",
        "P75": "22.78238517",
        "P85": "24.2729073",
        "P90": "25.46835171",
        "P95": "27.62246873",
        "P97": "29.35838499"
      }, {
        "Sex": "1",
        "Agemos": "194.5",
        "L": "-2.023606828",
        "M": "20.67326189",
        "S": "0.134008581",
        "P3": "16.86395838",
        "P5": "17.22865219",
        "P10": "17.8400079",
        "P25": "19.02650098",
        "P50": "20.67326189",
        "P75": "22.84346448",
        "P85": "24.33475639",
        "P90": "25.52982017",
        "P95": "27.68078489",
        "P97": "29.41163748"
      }, {
        "Sex": "1",
        "Agemos": "195.5",
        "L": "-2.015942013",
        "M": "20.73088905",
        "S": "0.133912066",
        "P3": "16.91064668",
        "P5": "17.27662259",
        "P10": "17.89002837",
        "P25": "19.08011149",
        "P50": "20.73088905",
        "P75": "22.90438167",
        "P85": "24.39641931",
        "P90": "25.59108848",
        "P95": "27.73889854",
        "P97": "29.46472007"
      }, {
        "Sex": "1",
        "Agemos": "196.5",
        "L": "-2.008305745",
        "M": "20.7883851",
        "S": "0.133814954",
        "P3": "16.95724926",
        "P5": "17.32450423",
        "P10": "17.93995429",
        "P25": "19.13361379",
        "P50": "20.7883851",
        "P75": "22.96513563",
        "P85": "24.4579009",
        "P90": "25.65216707",
        "P95": "27.79683185",
        "P97": "29.51766572"
      }, {
        "Sex": "1",
        "Agemos": "197.5",
        "L": "-2.000706389",
        "M": "20.84574003",
        "S": "0.133717552",
        "P3": "17.0037543",
        "P5": "17.37228509",
        "P10": "17.98977343",
        "P25": "19.18699593",
        "P50": "20.84574003",
        "P75": "23.02572213",
        "P85": "24.51920324",
        "P90": "25.71306451",
        "P95": "27.85460837",
        "P97": "29.57051295"
      }, {
        "Sex": "1",
        "Agemos": "198.5",
        "L": "-1.993150137",
        "M": "20.90294449",
        "S": "0.1336202",
        "P3": "17.05014902",
        "P5": "17.41995236",
        "P10": "18.03947307",
        "P25": "19.24024598",
        "P50": "20.90294449",
        "P75": "23.08613815",
        "P85": "24.58032971",
        "P90": "25.77379055",
        "P95": "27.91225209",
        "P97": "29.62329955"
      }, {
        "Sex": "1",
        "Agemos": "199.5",
        "L": "-1.985643741",
        "M": "20.95998909",
        "S": "0.133523244",
        "P3": "17.09642062",
        "P5": "17.46749315",
        "P10": "18.0890404",
        "P25": "19.29335192",
        "P50": "20.95998909",
        "P75": "23.14638076",
        "P85": "24.64128395",
        "P90": "25.83435539",
        "P95": "27.96978771",
        "P97": "29.67606419"
      }, {
        "Sex": "1",
        "Agemos": "200.5",
        "L": "-1.97819451",
        "M": "21.01686433",
        "S": "0.133427032",
        "P3": "17.1425562",
        "P5": "17.51489451",
        "P10": "18.1384625",
        "P25": "19.34630158",
        "P50": "21.01686433",
        "P75": "23.20644712",
        "P85": "24.70206989",
        "P90": "25.89476963",
        "P95": "28.02724061",
        "P97": "29.72884644"
      }, {
        "Sex": "1",
        "Agemos": "201.5",
        "L": "-1.970810308",
        "M": "21.07356067",
        "S": "0.133331914",
        "P3": "17.18854287",
        "P5": "17.56214342",
        "P10": "18.18772638",
        "P25": "19.39908272",
        "P50": "21.07356067",
        "P75": "23.26633451",
        "P85": "24.76269168",
        "P90": "25.95504426",
        "P95": "28.08463689",
        "P97": "29.78168674"
      }, {
        "Sex": "1",
        "Agemos": "202.5",
        "L": "-1.96349954",
        "M": "21.1300685",
        "S": "0.133238245",
        "P3": "17.23436764",
        "P5": "17.60922679",
        "P10": "18.23681892",
        "P25": "19.45168294",
        "P50": "21.1300685",
        "P75": "23.3260403",
        "P85": "24.82315378",
        "P90": "26.01519074",
        "P95": "28.1420033",
        "P97": "29.83462638"
      }, {
        "Sex": "1",
        "Agemos": "203.5",
        "L": "-1.956271141",
        "M": "21.18637813",
        "S": "0.133146383",
        "P3": "17.2800175",
        "P5": "17.65613146",
        "P10": "18.28572693",
        "P25": "19.50408975",
        "P50": "21.18637813",
        "P75": "23.38556196",
        "P85": "24.88346091",
        "P90": "26.07522093",
        "P95": "28.19936732",
        "P97": "29.88770757"
      }, {
        "Sex": "1",
        "Agemos": "204.5",
        "L": "-1.949134561",
        "M": "21.24247982",
        "S": "0.13305669",
        "P3": "17.32547937",
        "P5": "17.70284417",
        "P10": "18.3344371",
        "P25": "19.55629056",
        "P50": "21.24247982",
        "P75": "23.44489706",
        "P85": "24.94361805",
        "P90": "26.13514709",
        "P95": "28.25675709",
        "P97": "29.94097335"
      }, {
        "Sex": "1",
        "Agemos": "205.5",
        "L": "-1.942099744",
        "M": "21.29836376",
        "S": "0.132969531",
        "P3": "17.37074012",
        "P5": "17.74935161",
        "P10": "18.38293604",
        "P25": "19.60827264",
        "P50": "21.29836376",
        "P75": "23.50404332",
        "P85": "25.00363048",
        "P90": "26.19498193",
        "P95": "28.31420146",
        "P97": "29.99446764"
      }, {
        "Sex": "1",
        "Agemos": "206.5",
        "L": "-1.935177101",
        "M": "21.35402009",
        "S": "0.132885274",
        "P3": "17.41578654",
        "P5": "17.79564039",
        "P10": "18.43121023",
        "P25": "19.66002316",
        "P50": "21.35402009",
        "P75": "23.56299853",
        "P85": "25.06350375",
        "P90": "26.2547386",
        "P95": "28.37172995",
        "P97": "30.04823522"
      }, {
        "Sex": "1",
        "Agemos": "207.5",
        "L": "-1.92837748",
        "M": "21.40943891",
        "S": "0.132804292",
        "P3": "17.46060537",
        "P5": "17.84169701",
        "P10": "18.47924607",
        "P25": "19.71152919",
        "P50": "21.40943891",
        "P75": "23.62176064",
        "P85": "25.1232437",
        "P90": "26.31443063",
        "P95": "28.42937274",
        "P97": "30.10232173"
      }, {
        "Sex": "1",
        "Agemos": "208.5",
        "L": "-1.921712136",
        "M": "21.46461026",
        "S": "0.132726962",
        "P3": "17.50518327",
        "P5": "17.8875079",
        "P10": "18.52702984",
        "P25": "19.76277767",
        "P50": "21.46461026",
        "P75": "23.68032771",
        "P85": "25.18285645",
        "P90": "26.37407203",
        "P95": "28.48716074",
        "P97": "30.15677367"
      }, {
        "Sex": "1",
        "Agemos": "209.5",
        "L": "-1.915192685",
        "M": "21.51952414",
        "S": "0.132653664",
        "P3": "17.54950683",
        "P5": "17.9330594",
        "P10": "18.57454772",
        "P25": "19.81375546",
        "P50": "21.51952414",
        "P75": "23.73869794",
        "P85": "25.24234842",
        "P90": "26.4336772",
        "P95": "28.54512548",
        "P97": "30.21163837"
      }, {
        "Sex": "1",
        "Agemos": "210.5",
        "L": "-1.908831065",
        "M": "21.57417053",
        "S": "0.132584784",
        "P3": "17.59356252",
        "P5": "17.97833773",
        "P10": "18.62178578",
        "P25": "19.8644493",
        "P50": "21.57417053",
        "P75": "23.79686967",
        "P85": "25.30172632",
        "P90": "26.49326098",
        "P95": "28.60329919",
        "P97": "30.26696403"
      }, {
        "Sex": "1",
        "Agemos": "211.5",
        "L": "-1.902639482",
        "M": "21.62853937",
        "S": "0.132520711",
        "P3": "17.63733676",
        "P5": "18.02332903",
        "P10": "18.66872998",
        "P25": "19.91484586",
        "P50": "21.62853937",
        "P75": "23.85484139",
        "P85": "25.36099716",
        "P90": "26.55283865",
        "P95": "28.66171476",
        "P97": "30.32279966"
      }, {
        "Sex": "1",
        "Agemos": "212.5",
        "L": "-1.896630358",
        "M": "21.68262062",
        "S": "0.132461838",
        "P3": "17.68081585",
        "P5": "18.06801933",
        "P10": "18.71536617",
        "P25": "19.96493169",
        "P50": "21.68262062",
        "P75": "23.91261174",
        "P85": "25.42016826",
        "P90": "26.6124259",
        "P95": "28.72040572",
        "P97": "30.37919514"
      }, {
        "Sex": "1",
        "Agemos": "213.5",
        "L": "-1.890816268",
        "M": "21.73640419",
        "S": "0.132408563",
        "P3": "17.72398595",
        "P5": "18.11239453",
        "P10": "18.76168008",
        "P25": "20.01469327",
        "P50": "21.73640419",
        "P75": "23.97017953",
        "P85": "25.47924723",
        "P90": "26.67203887",
        "P95": "28.77940629",
        "P97": "30.43620115"
      }, {
        "Sex": "1",
        "Agemos": "214.5",
        "L": "-1.885209876",
        "M": "21.78988003",
        "S": "0.132361289",
        "P3": "17.76683315",
        "P5": "18.15644042",
        "P10": "18.80765734",
        "P25": "20.06411699",
        "P50": "21.78988003",
        "P75": "24.02754374",
        "P85": "25.538242",
        "P90": "26.73169411",
        "P95": "28.8387513",
        "P97": "30.49386923"
      }, {
        "Sex": "1",
        "Agemos": "215.5",
        "L": "-1.879823505",
        "M": "21.84303819",
        "S": "0.132320427",
        "P3": "17.80934323",
        "P5": "18.20014256",
        "P10": "18.8532834",
        "P25": "20.11318921",
        "P50": "21.84303819",
        "P75": "24.08470367",
        "P85": "25.59716095",
        "P90": "26.79140871",
        "P95": "28.89847621",
        "P97": "30.55225152"
      }, {
        "Sex": "1",
        "Agemos": "216.5",
        "L": "-1.874670324",
        "M": "21.8958685",
        "S": "0.132286382",
        "P3": "17.85150219",
        "P5": "18.24348662",
        "P10": "18.89854373",
        "P25": "20.16189615",
        "P50": "21.8958685",
        "P75": "24.14165845",
        "P85": "25.65601244",
        "P90": "26.85119991",
        "P95": "28.9586172",
        "P97": "30.61140148"
      }, {
        "Sex": "1",
        "Agemos": "217.5",
        "L": "-1.869760299",
        "M": "21.94836168",
        "S": "0.1322596",
        "P3": "17.89329472",
        "P5": "18.28645727",
        "P10": "18.94342321",
        "P25": "20.21022414",
        "P50": "21.94836168",
        "P75": "24.19840866",
        "P85": "25.71480629",
        "P90": "26.91108626",
        "P95": "29.0192108",
        "P97": "30.67137176"
      }, {
        "Sex": "1",
        "Agemos": "218.5",
        "L": "-1.865113245",
        "M": "22.00050569",
        "S": "0.132240418",
        "P3": "17.93470899",
        "P5": "18.32904183",
        "P10": "18.98790813",
        "P25": "20.25815885",
        "P50": "22.00050569",
        "P75": "24.25495098",
        "P85": "25.77354888",
        "P90": "26.97108394",
        "P95": "29.08029503",
        "P97": "30.73222122"
      }, {
        "Sex": "1",
        "Agemos": "219.5",
        "L": "-1.860734944",
        "M": "22.05229242",
        "S": "0.13222933",
        "P3": "17.97572809",
        "P5": "18.37122369",
        "P10": "19.03198262",
        "P25": "20.3056868",
        "P50": "22.05229242",
        "P75": "24.31128792",
        "P85": "25.83225207",
        "P90": "27.03121333",
        "P95": "29.14190734",
        "P97": "30.79400211"
      }, {
        "Sex": "1",
        "Agemos": "220.5",
        "L": "-1.85663384",
        "M": "22.10371305",
        "S": "0.132226801",
        "P3": "18.01633608",
        "P5": "18.41298696",
        "P10": "19.07563119",
        "P25": "20.35279433",
        "P50": "22.10371305",
        "P75": "24.36742097",
        "P85": "25.89092687",
        "P90": "27.09149434",
        "P95": "29.20408599",
        "P97": "30.85676906"
      }, {
        "Sex": "1",
        "Agemos": "221.5",
        "L": "-1.852827186",
        "M": "22.15475603",
        "S": "0.132233201",
        "P3": "18.05651989",
        "P5": "18.45431794",
        "P10": "19.11883943",
        "P25": "20.39946695",
        "P50": "22.15475603",
        "P75": "24.42334799",
        "P85": "25.94958116",
        "P90": "27.15194482",
        "P95": "29.26687079",
        "P97": "30.92058278"
      }, {
        "Sex": "1",
        "Agemos": "222.5",
        "L": "-1.849323204",
        "M": "22.20541249",
        "S": "0.132248993",
        "P3": "18.09626344",
        "P5": "18.49520062",
        "P10": "19.16159172",
        "P25": "20.44569089",
        "P50": "22.20541249",
        "P75": "24.47907063",
        "P85": "26.00822631",
        "P90": "27.21258528",
        "P95": "29.33030127",
        "P97": "30.9855"
      }, {
        "Sex": "1",
        "Agemos": "223.5",
        "L": "-1.846131607",
        "M": "22.255673",
        "S": "0.132274625",
        "P3": "18.13555112",
        "P5": "18.53561932",
        "P10": "19.2038726",
        "P25": "20.49145219",
        "P50": "22.255673",
        "P75": "24.53458985",
        "P85": "26.06687321",
        "P90": "27.27343608",
        "P95": "29.39441777",
        "P97": "31.05157949"
      }, {
        "Sex": "1",
        "Agemos": "224.5",
        "L": "-1.843261294",
        "M": "22.30552831",
        "S": "0.132310549",
        "P3": "18.17436706",
        "P5": "18.57555819",
        "P10": "19.24566649",
        "P25": "20.53673687",
        "P50": "22.30552831",
        "P75": "24.58990692",
        "P85": "26.1255331",
        "P90": "27.33451796",
        "P95": "29.45926122",
        "P97": "31.1188808"
      }, {
        "Sex": "1",
        "Agemos": "225.5",
        "L": "-1.840720248",
        "M": "22.3549693",
        "S": "0.132357221",
        "P3": "18.21269512",
        "P5": "18.61500111",
        "P10": "19.28695764",
        "P25": "20.581531",
        "P50": "22.3549693",
        "P75": "24.64502338",
        "P85": "26.18421759",
        "P90": "27.39585208",
        "P95": "29.52487306",
        "P97": "31.18746427"
      }, {
        "Sex": "1",
        "Agemos": "226.5",
        "L": "-1.83851544",
        "M": "22.40398706",
        "S": "0.132415103",
        "P3": "18.25051886",
        "P5": "18.65393178",
        "P10": "19.32773023",
        "P25": "20.62582066",
        "P50": "22.40398706",
        "P75": "24.69994107",
        "P85": "26.24293861",
        "P90": "27.45746001",
        "P95": "29.59129532",
        "P97": "31.25739102"
      }, {
        "Sex": "1",
        "Agemos": "227.5",
        "L": "-1.83665586",
        "M": "22.45257182",
        "S": "0.132484631",
        "P3": "18.28782254",
        "P5": "18.69233437",
        "P10": "19.36796858",
        "P25": "20.66959159",
        "P50": "22.45257182",
        "P75": "24.75466075",
        "P85": "26.30170723",
        "P90": "27.51936283",
        "P95": "29.65857091",
        "P97": "31.32872478"
      }, {
        "Sex": "1",
        "Agemos": "228.5",
        "L": "-1.835138046",
        "M": "22.50071778",
        "S": "0.132566359",
        "P3": "18.3245866",
        "P5": "18.73019025",
        "P10": "19.40765581",
        "P25": "20.71283095",
        "P50": "22.50071778",
        "P75": "24.80918852",
        "P85": "26.36053932",
        "P90": "27.58158516",
        "P95": "29.72674204",
        "P97": "31.40152344"
      }, {
        "Sex": "1",
        "Agemos": "229.5",
        "L": "-1.833972004",
        "M": "22.54841437",
        "S": "0.132660699",
        "P3": "18.36079565",
        "P5": "18.7674838",
        "P10": "19.44677624",
        "P25": "20.75552409",
        "P50": "22.54841437",
        "P75": "24.86352415",
        "P85": "26.41944523",
        "P90": "27.64414785",
        "P95": "29.79585303",
        "P97": "31.47585441"
      }, {
        "Sex": "1",
        "Agemos": "230.5",
        "L": "-1.833157751",
        "M": "22.59565422",
        "S": "0.132768153",
        "P3": "18.39643137",
        "P5": "18.80419732",
        "P10": "19.48531336",
        "P25": "20.79765756",
        "P50": "22.59565422",
        "P75": "24.91767166",
        "P85": "26.47843912",
        "P90": "27.70707459",
        "P95": "29.86594782",
        "P97": "31.55178078"
      }, {
        "Sex": "1",
        "Agemos": "231.5",
        "L": "-1.83269562",
        "M": "22.64242956",
        "S": "0.132889211",
        "P3": "18.43147564",
        "P5": "18.84031318",
        "P10": "19.52325062",
        "P25": "20.83921773",
        "P50": "22.64242956",
        "P75": "24.97163459",
        "P85": "26.53753478",
        "P90": "27.77038891",
        "P95": "29.93707103",
        "P97": "31.62936748"
      }, {
        "Sex": "1",
        "Agemos": "232.5",
        "L": "-1.832584342",
        "M": "22.68873292",
        "S": "0.133024368",
        "P3": "18.46590991",
        "P5": "18.87581348",
        "P10": "19.56057136",
        "P25": "20.88019106",
        "P50": "22.68873292",
        "P75": "25.02541685",
        "P85": "26.59674639",
        "P90": "27.83411475",
        "P95": "30.00926778",
        "P97": "31.7086802"
      }, {
        "Sex": "1",
        "Agemos": "233.5",
        "L": "-1.832820974",
        "M": "22.73455713",
        "S": "0.133174129",
        "P3": "18.49971524",
        "P5": "18.91067999",
        "P10": "19.59725875",
        "P25": "20.9205641",
        "P50": "22.73455713",
        "P75": "25.07902274",
        "P85": "26.65608851",
        "P90": "27.89827645",
        "P95": "30.08258369",
        "P97": "31.78978539"
      }, {
        "Sex": "1",
        "Agemos": "234.5",
        "L": "-1.833400825",
        "M": "22.7798953",
        "S": "0.133338999",
        "P3": "18.53287228",
        "P5": "18.9448942",
        "P10": "19.63329582",
        "P25": "20.96032349",
        "P50": "22.7798953",
        "P75": "25.13245693",
        "P85": "26.71557609",
        "P90": "27.96289869",
        "P95": "30.15706484",
        "P97": "31.87275025"
      }, {
        "Sex": "1",
        "Agemos": "235.5",
        "L": "-1.834317405",
        "M": "22.82474087",
        "S": "0.133519496",
        "P3": "18.56536124",
        "P5": "18.97843726",
        "P10": "19.66866547",
        "P25": "20.99945599",
        "P50": "22.82474087",
        "P75": "25.18572453",
        "P85": "26.77522448",
        "P90": "28.0280066",
        "P95": "30.23275779",
        "P97": "31.95764272"
      }, {
        "Sex": "1",
        "Agemos": "236.5",
        "L": "-1.83555752",
        "M": "22.86908912",
        "S": "0.133716192",
        "P3": "18.59716016",
        "P5": "19.0112887",
        "P10": "19.70334974",
        "P25": "21.03794885",
        "P50": "22.86908912",
        "P75": "25.23883315",
        "P85": "26.83505132",
        "P90": "28.09362697",
        "P95": "30.30970901",
        "P97": "32.04452853"
      }, {
        "Sex": "1",
        "Agemos": "237.5",
        "L": "-1.837119466",
        "M": "22.91293151",
        "S": "0.133929525",
        "P3": "18.62825142",
        "P5": "19.04343134",
        "P10": "19.7373324",
        "P25": "21.07578835",
        "P50": "22.91293151",
        "P75": "25.29178502",
        "P85": "26.89506944",
        "P90": "28.15978336",
        "P95": "30.387967",
        "P97": "32.13348232"
      }, {
        "Sex": "1",
        "Agemos": "238.5",
        "L": "-1.838987063",
        "M": "22.95626373",
        "S": "0.134160073",
        "P3": "18.65861245",
        "P5": "19.07484425",
        "P10": "19.7705953",
        "P25": "21.11296191",
        "P50": "22.95626373",
        "P75": "25.34458825",
        "P85": "26.95529697",
        "P90": "28.22650313",
        "P95": "30.46757924",
        "P97": "32.22457182"
      }, {
        "Sex": "1",
        "Agemos": "239.5",
        "L": "-1.841146139",
        "M": "22.99908062",
        "S": "0.134408381",
        "P3": "18.68822161",
        "P5": "19.10550722",
        "P10": "19.80312068",
        "P25": "21.14945673",
        "P50": "22.99908062",
        "P75": "25.39724967",
        "P85": "27.01575092",
        "P90": "28.29381294",
        "P95": "30.54859414",
        "P97": "32.31786791"
      }, {
        "Sex": "1",
        "Agemos": "240",
        "L": "-1.84233016",
        "M": "23.02029424",
        "S": "0.134539365",
        "P3": "18.70273741",
        "P5": "19.12055111",
        "P10": "19.81910123",
        "P25": "21.16744563",
        "P50": "23.02029424",
        "P75": "25.4235294",
        "P85": "27.04606818",
        "P90": "28.32769753",
        "P95": "30.58964285",
        "P97": "32.36536586"
      }, {
        "Sex": "1",
        "Agemos": "240.5",
        "L": "-1.843580575",
        "M": "23.04137734",
        "S": "0.134675001",
        "P3": "18.71705679",
        "P5": "19.13539969",
        "P10": "19.83489061",
        "P25": "21.18526014",
        "P50": "23.04137734",
        "P75": "25.44977657",
        "P85": "27.07644874",
        "P90": "28.3617399",
        "P95": "30.63106054",
        "P97": "32.41344218"
      }, {
        "Sex": "2",
        "Agemos": "24",
        "L": "-0.98660853",
        "M": "16.42339664",
        "S": "0.085451785",
        "P3": "14.1473467",
        "P5": "14.39787089",
        "P10": "14.80134054",
        "P25": "15.52807587",
        "P50": "16.42339664",
        "P75": "17.42745659",
        "P85": "18.01820579",
        "P90": "18.44139317",
        "P95": "19.10623522",
        "P97": "19.56410958"
      }, {
        "Sex": "2",
        "Agemos": "24.5",
        "L": "-1.024496827",
        "M": "16.38804056",
        "S": "0.085025838",
        "P3": "14.13226271",
        "P5": "14.3801866",
        "P10": "14.77964811",
        "P25": "15.49975639",
        "P50": "16.38804056",
        "P75": "17.38581552",
        "P85": "17.97371413",
        "P90": "18.39526372",
        "P95": "19.05823845",
        "P97": "19.51534333"
      }, {
        "Sex": "2",
        "Agemos": "25.5",
        "L": "-1.102698353",
        "M": "16.3189719",
        "S": "0.084214052",
        "P3": "14.10240814",
        "P5": "14.34527262",
        "P10": "14.73694628",
        "P25": "15.44421901",
        "P50": "16.3189719",
        "P75": "17.30484811",
        "P85": "17.88748812",
        "P90": "18.30610782",
        "P95": "18.9659499",
        "P97": "19.42197989"
      }, {
        "Sex": "2",
        "Agemos": "26.5",
        "L": "-1.18396635",
        "M": "16.25207985",
        "S": "0.083455124",
        "P3": "14.07297394",
        "P5": "14.31096806",
        "P10": "14.6951581",
        "P25": "15.39014846",
        "P50": "16.25207985",
        "P75": "17.2269319",
        "P85": "17.80489051",
        "P90": "18.22103253",
        "P95": "18.87853388",
        "P97": "19.33410382"
      }, {
        "Sex": "2",
        "Agemos": "27.5",
        "L": "-1.268071036",
        "M": "16.18734669",
        "S": "0.082748284",
        "P3": "14.04396337",
        "P5": "14.27727686",
        "P10": "14.65428696",
        "P25": "15.33754218",
        "P50": "16.18734669",
        "P75": "17.15202498",
        "P85": "17.72586396",
        "P90": "18.13997016",
        "P95": "18.79590999",
        "P97": "19.25163039"
      }, {
        "Sex": "2",
        "Agemos": "28.5",
        "L": "-1.354751525",
        "M": "16.12475448",
        "S": "0.082092737",
        "P3": "14.01538008",
        "P5": "14.24420303",
        "P10": "14.61433601",
        "P25": "15.28639717",
        "P50": "16.12475448",
        "P75": "17.08008556",
        "P85": "17.65035137",
        "P90": "18.06285334",
        "P95": "18.71799839",
        "P97": "19.17447582"
      }, {
        "Sex": "2",
        "Agemos": "29.5",
        "L": "-1.443689692",
        "M": "16.06428762",
        "S": "0.081487717",
        "P3": "13.98722569",
        "P5": "14.21174909",
        "P10": "14.57530775",
        "P25": "15.23671134",
        "P50": "16.06428762",
        "P75": "17.01107457",
        "P85": "17.57829774",
        "P90": "17.98961595",
        "P95": "18.64471845",
        "P97": "19.10255392"
      }, {
        "Sex": "2",
        "Agemos": "30.5",
        "L": "-1.53454192",
        "M": "16.00593001",
        "S": "0.080932448",
        "P3": "13.95950246",
        "P5": "14.17991775",
        "P10": "14.53720437",
        "P25": "15.18848189",
        "P50": "16.00593001",
        "P75": "16.94495296",
        "P85": "17.50964839",
        "P90": "17.92019231",
        "P95": "18.5759903",
        "P97": "19.03577948"
      }, {
        "Sex": "2",
        "Agemos": "31.5",
        "L": "-1.626928093",
        "M": "15.94966631",
        "S": "0.080426175",
        "P3": "13.93221207",
        "P5": "14.14871111",
        "P10": "14.50002752",
        "P25": "15.14170598",
        "P50": "15.94966631",
        "P75": "16.88168308",
        "P85": "17.44434994",
        "P90": "17.85451773",
        "P95": "18.51173402",
        "P97": "18.97406651"
      }, {
        "Sex": "2",
        "Agemos": "32.5",
        "L": "-1.720434829",
        "M": "15.89548197",
        "S": "0.079968176",
        "P3": "13.90535562",
        "P5": "14.11813062",
        "P10": "14.46377827",
        "P25": "15.09638064",
        "P50": "15.89548197",
        "P75": "16.82122877",
        "P85": "17.38235043",
        "P90": "17.79252859",
        "P95": "18.45186978",
        "P97": "18.91732801"
      }, {
        "Sex": "2",
        "Agemos": "33.5",
        "L": "-1.814635262",
        "M": "15.84336179",
        "S": "0.079557735",
        "P3": "13.87893492",
        "P5": "14.08817793",
        "P10": "14.42845728",
        "P25": "15.05250203",
        "P50": "15.84336179",
        "P75": "16.763554",
        "P85": "17.32359846",
        "P90": "17.73416201",
        "P95": "18.39631848",
        "P97": "18.86547771"
      }, {
        "Sex": "2",
        "Agemos": "34.5",
        "L": "-1.909076262",
        "M": "15.79329146",
        "S": "0.079194187",
        "P3": "13.852951",
        "P5": "14.0588539",
        "P10": "14.39406456",
        "P25": "15.01006617",
        "P50": "15.79329146",
        "P75": "16.70862449",
        "P85": "17.26804436",
        "P90": "17.67935646",
        "P95": "18.34500099",
        "P97": "18.81842784"
      }, {
        "Sex": "2",
        "Agemos": "35.5",
        "L": "-2.003296102",
        "M": "15.7452564",
        "S": "0.078876895",
        "P3": "13.82740517",
        "P5": "14.03015932",
        "P10": "14.36059959",
        "P25": "14.96906838",
        "P50": "15.7452564",
        "P75": "16.65640663",
        "P85": "17.21563951",
        "P90": "17.62805146",
        "P95": "18.29783876",
        "P97": "18.7760905"
      }, {
        "Sex": "2",
        "Agemos": "36.5",
        "L": "-2.096828937",
        "M": "15.69924188",
        "S": "0.078605255",
        "P3": "13.80229888",
        "P5": "14.00209476",
        "P10": "14.32806133",
        "P25": "14.92950329",
        "P50": "15.69924188",
        "P75": "16.60686761",
        "P85": "17.16633643",
        "P90": "17.5801877",
        "P95": "18.25475381",
        "P97": "18.73837743"
      }, {
        "Sex": "2",
        "Agemos": "37.5",
        "L": "-2.189211877",
        "M": "15.65523282",
        "S": "0.078378696",
        "P3": "13.77763382",
        "P5": "13.97466073",
        "P10": "14.29644823",
        "P25": "14.89136478",
        "P50": "15.65523282",
        "P75": "16.55997523",
        "P85": "17.12008872",
        "P90": "17.53570705",
        "P95": "18.21566879",
        "P97": "18.70520011"
      }, {
        "Sex": "2",
        "Agemos": "38.5",
        "L": "-2.279991982",
        "M": "15.61321371",
        "S": "0.078196674",
        "P3": "13.75341201",
        "P5": "13.94785767",
        "P10": "14.26575827",
        "P25": "14.85464591",
        "P50": "15.61321371",
        "P75": "16.51569783",
        "P85": "17.07685104",
        "P90": "17.49455256",
        "P95": "18.18050711",
        "P97": "18.67646985"
      }, {
        "Sex": "2",
        "Agemos": "39.5",
        "L": "-2.368732949",
        "M": "15.57316843",
        "S": "0.078058667",
        "P3": "13.72963586",
        "P5": "13.92168608",
        "P10": "14.23598902",
        "P25": "14.81933896",
        "P50": "15.57316843",
        "P75": "16.4740041",
        "P85": "17.03657894",
        "P90": "17.45666842",
        "P95": "18.14919304",
        "P97": "18.65209796"
      }, {
        "Sex": "2",
        "Agemos": "40.5",
        "L": "-2.455021314",
        "M": "15.53508019",
        "S": "0.077964169",
        "P3": "13.70630824",
        "P5": "13.89614655",
        "P10": "14.20713766",
        "P25": "14.78543535",
        "P50": "15.53508019",
        "P75": "16.43486298",
        "P85": "16.99922885",
        "P90": "17.42199993",
        "P95": "18.12165176",
        "P97": "18.63199585"
      }, {
        "Sex": "2",
        "Agemos": "41.5",
        "L": "-2.538471972",
        "M": "15.49893145",
        "S": "0.077912684",
        "P3": "13.68343254",
        "P5": "13.87123981",
        "P10": "14.17920105",
        "P25": "14.75292568",
        "P50": "15.49893145",
        "P75": "16.39824347",
        "P85": "16.96475788",
        "P90": "17.39049347",
        "P95": "18.09780945",
        "P97": "18.61607518"
      }, {
        "Sex": "2",
        "Agemos": "42.5",
        "L": "-2.618732901",
        "M": "15.46470384",
        "S": "0.077903716",
        "P3": "13.66101266",
        "P5": "13.84696678",
        "P10": "14.15217581",
        "P25": "14.72179977",
        "P50": "15.46470384",
        "P75": "16.36411453",
        "P85": "16.93312378",
        "P90": "17.36209639",
        "P95": "18.07759336",
        "P97": "18.60424802"
      }, {
        "Sex": "2",
        "Agemos": "43.5",
        "L": "-2.695488973",
        "M": "15.43237817",
        "S": "0.077936763",
        "P3": "13.63905306",
        "P5": "13.82332865",
        "P10": "14.12605833",
        "P25": "14.69204668",
        "P50": "15.43237817",
        "P75": "16.33244497",
        "P85": "16.90428477",
        "P90": "17.33675699",
        "P95": "18.06093184",
        "P97": "18.59642696"
      }, {
        "Sex": "2",
        "Agemos": "44.5",
        "L": "-2.768464816",
        "M": "15.40193436",
        "S": "0.078011309",
        "P3": "13.61755872",
        "P5": "13.80032682",
        "P10": "14.10084485",
        "P25": "14.6636548",
        "P50": "15.40193436",
        "P75": "16.30320336",
        "P85": "16.87819947",
        "P90": "17.31442438",
        "P95": "18.04775438",
        "P97": "18.59252526"
      }, {
        "Sex": "2",
        "Agemos": "45.5",
        "L": "-2.837426693",
        "M": "15.37335154",
        "S": "0.078126817",
        "P3": "13.59653518",
        "P5": "13.77796299",
        "P10": "14.07653151",
        "P25": "14.63661186",
        "P50": "15.37335154",
        "P75": "16.27635793",
        "P85": "16.85482681",
        "P90": "17.29504843",
        "P95": "18.03799161",
        "P97": "18.59245694"
      }, {
        "Sex": "2",
        "Agemos": "46.5",
        "L": "-2.902178205",
        "M": "15.34660842",
        "S": "0.078282739",
        "P3": "13.57598804",
        "P5": "13.75623885",
        "P10": "14.05311425",
        "P25": "14.61090523",
        "P50": "15.34660842",
        "P75": "16.25187703",
        "P85": "16.83412628",
        "P90": "17.27857995",
        "P95": "18.03157513",
        "P97": "18.59613624"
      }, {
        "Sex": "2",
        "Agemos": "47.5",
        "L": "-2.962580386",
        "M": "15.32168181",
        "S": "0.078478449",
        "P3": "13.55592455",
        "P5": "13.73515717",
        "P10": "14.03058936",
        "P25": "14.58652134",
        "P50": "15.32168181",
        "P75": "16.22972719",
        "P85": "16.81605638",
        "P90": "17.2649696",
        "P95": "18.02843822",
        "P97": "18.6034803"
      }, {
        "Sex": "2",
        "Agemos": "48.5",
        "L": "-3.018521987",
        "M": "15.29854897",
        "S": "0.078713325",
        "P3": "13.53635124",
        "P5": "13.71472021",
        "P10": "14.00895279",
        "P25": "14.56344665",
        "P50": "15.29854897",
        "P75": "16.20987583",
        "P85": "16.80057671",
        "P90": "17.25416922",
        "P95": "18.02851473",
        "P97": "18.61440545"
      }, {
        "Sex": "2",
        "Agemos": "49.5",
        "L": "-3.069936555",
        "M": "15.27718618",
        "S": "0.078986694",
        "P3": "13.51727537",
        "P5": "13.6949307",
        "P10": "13.98820066",
        "P25": "14.54166718",
        "P50": "15.27718618",
        "P75": "16.19228952",
        "P85": "16.78764654",
        "P90": "17.24613088",
        "P95": "18.03173977",
        "P97": "18.62882971"
      }, {
        "Sex": "2",
        "Agemos": "50.5",
        "L": "-3.116795864",
        "M": "15.2575692",
        "S": "0.079297841",
        "P3": "13.49870449",
        "P5": "13.67579162",
        "P10": "13.96832912",
        "P25": "14.52116867",
        "P50": "15.2575692",
        "P75": "16.17693441",
        "P85": "16.77722512",
        "P90": "17.24080701",
        "P95": "18.03804946",
        "P97": "18.64667225"
      }, {
        "Sex": "2",
        "Agemos": "51.5",
        "L": "-3.159107331",
        "M": "15.23967338",
        "S": "0.079646006",
        "P3": "13.48064637",
        "P5": "13.65730608",
        "P10": "13.94933441",
        "P25": "14.50193674",
        "P50": "15.23967338",
        "P75": "16.16377626",
        "P85": "16.76927159",
        "P90": "17.23815034",
        "P95": "18.04738091",
        "P97": "18.66785338"
      }, {
        "Sex": "2",
        "Agemos": "52.5",
        "L": "-3.196911083",
        "M": "15.22347371",
        "S": "0.080030389",
        "P3": "13.46310899",
        "P5": "13.63947739",
        "P10": "13.93121283",
        "P25": "14.48395686",
        "P50": "15.22347371",
        "P75": "16.15278049",
        "P85": "16.76374505",
        "P90": "17.23811389",
        "P95": "18.05967216",
        "P97": "18.6922946"
      }, {
        "Sex": "2",
        "Agemos": "53.5",
        "L": "-3.230276759",
        "M": "15.20894491",
        "S": "0.080450145",
        "P3": "13.44610041",
        "P5": "13.62230894",
        "P10": "13.91396079",
        "P25": "14.46721445",
        "P50": "15.20894491",
        "P75": "16.14391221",
        "P85": "16.76060449",
        "P90": "17.24065086",
        "P95": "18.0748621",
        "P97": "18.71991859"
      }, {
        "Sex": "2",
        "Agemos": "54.5",
        "L": "-3.259300182",
        "M": "15.19606152",
        "S": "0.080904391",
        "P3": "13.42962877",
        "P5": "13.60580421",
        "P10": "13.89757474",
        "P25": "14.45169495",
        "P50": "15.19606152",
        "P75": "16.13713628",
        "P85": "16.75980884",
        "P90": "17.24571467",
        "P95": "18.09289045",
        "P97": "18.75064919"
      }, {
        "Sex": "2",
        "Agemos": "55.5",
        "L": "-3.284099963",
        "M": "15.18479799",
        "S": "0.081392203",
        "P3": "13.41370222",
        "P5": "13.58996673",
        "P10": "13.88205123",
        "P25": "14.4373838",
        "P50": "15.18479799",
        "P75": "16.13241736",
        "P85": "16.76131695",
        "P90": "17.25325891",
        "P95": "18.11369768",
        "P97": "18.78441142"
      }, {
        "Sex": "2",
        "Agemos": "56.5",
        "L": "-3.30481415",
        "M": "15.17512871",
        "S": "0.081912623",
        "P3": "13.39832882",
        "P5": "13.57480002",
        "P10": "13.8673869",
        "P25": "14.42426656",
        "P50": "15.17512871",
        "P75": "16.12971996",
        "P85": "16.76508763",
        "P90": "17.2632373",
        "P95": "18.13722499",
        "P97": "18.82113141"
      }, {
        "Sex": "2",
        "Agemos": "57.5",
        "L": "-3.321596954",
        "M": "15.16702811",
        "S": "0.082464661",
        "P3": "13.38351658",
        "P5": "13.56030761",
        "P10": "13.8535784",
        "P25": "14.41232886",
        "P50": "15.16702811",
        "P75": "16.12900854",
        "P85": "16.77107966",
        "P90": "17.27560372",
        "P95": "18.16341422",
        "P97": "18.86073644"
      }, {
        "Sex": "2",
        "Agemos": "58.5",
        "L": "-3.334615646",
        "M": "15.16047068",
        "S": "0.083047295",
        "P3": "13.36927334",
        "P5": "13.54649295",
        "P10": "13.84062247",
        "P25": "14.40155647",
        "P50": "15.16047068",
        "P75": "16.13024748",
        "P85": "16.77925184",
        "P90": "17.29031217",
        "P95": "18.19220786",
        "P97": "18.90315485"
      }, {
        "Sex": "2",
        "Agemos": "59.5",
        "L": "-3.344047622",
        "M": "15.15543107",
        "S": "0.083659478",
        "P3": "13.35560679",
        "P5": "13.53335941",
        "P10": "13.82851587",
        "P25": "14.39193532",
        "P50": "15.15543107",
        "P75": "16.13340121",
        "P85": "16.78956298",
        "P90": "17.30731682",
        "P95": "18.22354893",
        "P97": "18.94831604"
      }, {
        "Sex": "2",
        "Agemos": "60.5",
        "L": "-3.35007771",
        "M": "15.15188405",
        "S": "0.084300139",
        "P3": "13.34252439",
        "P5": "13.52091027",
        "P10": "13.81725538",
        "P25": "14.38345148",
        "P50": "15.15188405",
        "P75": "16.13843423",
        "P85": "16.80197195",
        "P90": "17.32657196",
        "P95": "18.25738105",
        "P97": "18.99615046"
      }, {
        "Sex": "2",
        "Agemos": "61.5",
        "L": "-3.352893805",
        "M": "15.14980479",
        "S": "0.0849682",
        "P3": "13.33003322",
        "P5": "13.50914853",
        "P10": "13.80683773",
        "P25": "14.37609125",
        "P50": "15.14980479",
        "P75": "16.14531133",
        "P85": "16.81643792",
        "P90": "17.34803218",
        "P95": "18.29364826",
        "P97": "19.04658918"
      }, {
        "Sex": "2",
        "Agemos": "62.5",
        "L": "-3.352691376",
        "M": "15.14916825",
        "S": "0.085662539",
        "P3": "13.31814053",
        "P5": "13.4980774",
        "P10": "13.79725982",
        "P25": "14.36984096",
        "P50": "15.14916825",
        "P75": "16.15399692",
        "P85": "16.83291965",
        "P90": "17.37165187",
        "P95": "18.33229525",
        "P97": "19.09956514"
      }, {
        "Sex": "2",
        "Agemos": "63.5",
        "L": "-3.34966438",
        "M": "15.14994984",
        "S": "0.086382035",
        "P3": "13.3068531",
        "P5": "13.48769977",
        "P10": "13.78851848",
        "P25": "14.3646872",
        "P50": "15.14994984",
        "P75": "16.16445581",
        "P85": "16.85137625",
        "P90": "17.39738575",
        "P95": "18.37326713",
        "P97": "19.15501183"
      }, {
        "Sex": "2",
        "Agemos": "64.5",
        "L": "-3.343998803",
        "M": "15.15212585",
        "S": "0.087125591",
        "P3": "13.29617673",
        "P5": "13.47801782",
        "P10": "13.78061022",
        "P25": "14.3606169",
        "P50": "15.15212585",
        "P75": "16.17665394",
        "P85": "16.87176785",
        "P90": "17.42518932",
        "P95": "18.41650918",
        "P97": "19.21286229"
      }, {
        "Sex": "2",
        "Agemos": "65.5",
        "L": "-3.335889574",
        "M": "15.15567186",
        "S": "0.087892047",
        "P3": "13.28611805",
        "P5": "13.4690344",
        "P10": "13.77353197",
        "P25": "14.35761687",
        "P50": "15.15567186",
        "P75": "16.19055603",
        "P85": "16.89405345",
        "P90": "17.45501735",
        "P95": "18.46196754",
        "P97": "19.27305261"
      }, {
        "Sex": "2",
        "Agemos": "66.5",
        "L": "-3.325522491",
        "M": "15.16056419",
        "S": "0.088680264",
        "P3": "13.27668282",
        "P5": "13.46075175",
        "P10": "13.76728041",
        "P25": "14.35567422",
        "P50": "15.16056419",
        "P75": "16.20612774",
        "P85": "16.91819285",
        "P90": "17.48682523",
        "P95": "18.50958858",
        "P97": "19.33551875"
      }, {
        "Sex": "2",
        "Agemos": "67.5",
        "L": "-3.31307846",
        "M": "15.16677947",
        "S": "0.089489106",
        "P3": "13.26787651",
        "P5": "13.45317191",
        "P10": "13.76185216",
        "P25": "14.35477623",
        "P50": "15.16677947",
        "P75": "16.22333502",
        "P85": "16.94414613",
        "P90": "17.52056863",
        "P95": "18.55931907",
        "P97": "19.40019747"
      }, {
        "Sex": "2",
        "Agemos": "68.5",
        "L": "-3.298732648",
        "M": "15.17429464",
        "S": "0.090317434",
        "P3": "13.25970423",
        "P5": "13.44629667",
        "P10": "13.75724378",
        "P25": "14.35491035",
        "P50": "15.17429464",
        "P75": "16.24214414",
        "P85": "16.97187362",
        "P90": "17.55620345",
        "P95": "18.6111062",
        "P97": "19.46702632"
      }, {
        "Sex": "2",
        "Agemos": "69.5",
        "L": "-3.282653831",
        "M": "15.18308694",
        "S": "0.091164117",
        "P3": "13.25217076",
        "P5": "13.44012761",
        "P10": "13.75345175",
        "P25": "14.35606415",
        "P50": "15.18308694",
        "P75": "16.26252167",
        "P85": "17.00133593",
        "P90": "17.5936859",
        "P95": "18.6648976",
        "P97": "19.53594365"
      }, {
        "Sex": "2",
        "Agemos": "70.5",
        "L": "-3.265003896",
        "M": "15.1931339",
        "S": "0.092028028",
        "P3": "13.24528055",
        "P5": "13.43466608",
        "P10": "13.75047248",
        "P25": "14.35822537",
        "P50": "15.1931339",
        "P75": "16.28443453",
        "P85": "17.03249399",
        "P90": "17.63297244",
        "P95": "18.72064127",
        "P97": "19.60688859"
      }, {
        "Sex": "2",
        "Agemos": "71.5",
        "L": "-3.245937506",
        "M": "15.20441335",
        "S": "0.092908048",
        "P3": "13.23903773",
        "P5": "13.42991321",
        "P10": "13.74830229",
        "P25": "14.36138186",
        "P50": "15.20441335",
        "P75": "16.30784995",
        "P85": "17.065309",
        "P90": "17.67401984",
        "P95": "18.77828567",
        "P97": "19.67980103"
      }, {
        "Sex": "2",
        "Agemos": "72.5",
        "L": "-3.225606516",
        "M": "15.21690296",
        "S": "0.093803033",
        "P3": "13.23344678",
        "P5": "13.42587042",
        "P10": "13.74693776",
        "P25": "14.36552155",
        "P50": "15.21690296",
        "P75": "16.33273474",
        "P85": "17.09974172",
        "P90": "17.7167845",
        "P95": "18.83777954",
        "P97": "19.75462234"
      }, {
        "Sex": "2",
        "Agemos": "73.5",
        "L": "-3.204146115",
        "M": "15.2305815",
        "S": "0.094711916",
        "P3": "13.22851054",
        "P5": "13.42253788",
        "P10": "13.74637473",
        "P25": "14.37063258",
        "P50": "15.2305815",
        "P75": "16.35905747",
        "P85": "17.13575468",
        "P90": "17.7612244",
        "P95": "18.89907229",
        "P97": "19.83129333"
      }, {
        "Sex": "2",
        "Agemos": "74.5",
        "L": "-3.181690237",
        "M": "15.24542745",
        "S": "0.095633595",
        "P3": "13.22423251",
        "P5": "13.41991629",
        "P10": "13.74660941",
        "P25": "14.37670312",
        "P50": "15.24542745",
        "P75": "16.38678602",
        "P85": "17.17330968",
        "P90": "17.80729692",
        "P95": "18.96211354",
        "P97": "19.90975644"
      }, {
        "Sex": "2",
        "Agemos": "75.5",
        "L": "-3.158363475",
        "M": "15.26141966",
        "S": "0.096566992",
        "P3": "13.22061564",
        "P5": "13.41800595",
        "P10": "13.74763782",
        "P25": "14.38372148",
        "P50": "15.26141966",
        "P75": "16.41588887",
        "P85": "17.21236911",
        "P90": "17.85496",
        "P95": "19.02685341",
        "P97": "19.9899546"
      }, {
        "Sex": "2",
        "Agemos": "76.5",
        "L": "-3.134282833",
        "M": "15.27853728",
        "S": "0.097511046",
        "P3": "13.21766256",
        "P5": "13.41680692",
        "P10": "13.74945586",
        "P25": "14.39167606",
        "P50": "15.27853728",
        "P75": "16.44633482",
        "P85": "17.25289572",
        "P90": "17.90417191",
        "P95": "19.09324243",
        "P97": "20.07183146"
      }, {
        "Sex": "2",
        "Agemos": "77.5",
        "L": "-3.109557879",
        "M": "15.29675967",
        "S": "0.09846471",
        "P3": "13.21537563",
        "P5": "13.41631905",
        "P10": "13.75205934",
        "P25": "14.40055533",
        "P50": "15.29675967",
        "P75": "16.478093",
        "P85": "17.29485256",
        "P90": "17.95489128",
        "P95": "19.16123158",
        "P97": "20.15533137"
      }, {
        "Sex": "2",
        "Agemos": "78.5",
        "L": "-3.084290931",
        "M": "15.31606644",
        "S": "0.099426955",
        "P3": "13.2137569",
        "P5": "13.41654198",
        "P10": "13.75544399",
        "P25": "14.41034784",
        "P50": "15.31606644",
        "P75": "16.51113288",
        "P85": "17.33820304",
        "P90": "18.00707707",
        "P95": "19.23077228",
        "P97": "20.24039941"
      }, {
        "Sex": "2",
        "Agemos": "79.5",
        "L": "-3.058577292",
        "M": "15.33643745",
        "S": "0.100396769",
        "P3": "13.21280815",
        "P5": "13.41747514",
        "P10": "13.7596054",
        "P25": "14.42104223",
        "P50": "15.33643745",
        "P75": "16.54542424",
        "P85": "17.38291092",
        "P90": "18.06068861",
        "P95": "19.30181639",
        "P97": "20.32698132"
      }, {
        "Sex": "2",
        "Agemos": "80.5",
        "L": "-3.032505499",
        "M": "15.35785274",
        "S": "0.101373159",
        "P3": "13.21253087",
        "P5": "13.41911775",
        "P10": "13.76453911",
        "P25": "14.43262719",
        "P50": "15.35785274",
        "P75": "16.58093719",
        "P85": "17.42894029",
        "P90": "18.11568557",
        "P95": "19.37431624",
        "P97": "20.41502357"
      }, {
        "Sex": "2",
        "Agemos": "81.5",
        "L": "-3.0061576",
        "M": "15.38029261",
        "S": "0.10235515",
        "P3": "13.2129263",
        "P5": "13.42146884",
        "P10": "13.7702405",
        "P25": "14.44509148",
        "P50": "15.38029261",
        "P75": "16.61764214",
        "P85": "17.4762556",
        "P90": "18.17202801",
        "P95": "19.44822461",
        "P97": "20.5044733"
      }, {
        "Sex": "2",
        "Agemos": "82.5",
        "L": "-2.979609448",
        "M": "15.40373754",
        "S": "0.103341788",
        "P3": "13.21399541",
        "P5": "13.42452722",
        "P10": "13.77670491",
        "P25": "14.4584239",
        "P50": "15.40373754",
        "P75": "16.65550982",
        "P85": "17.52482162",
        "P90": "18.22967635",
        "P95": "19.52349477",
        "P97": "20.59527834"
      }, {
        "Sex": "2",
        "Agemos": "83.5",
        "L": "-2.952930993",
        "M": "15.42816819",
        "S": "0.104332139",
        "P3": "13.2157389",
        "P5": "13.42829152",
        "P10": "13.78392751",
        "P25": "14.4726133",
        "P50": "15.42816819",
        "P75": "16.69451128",
        "P85": "17.57460349",
        "P90": "18.28859138",
        "P95": "19.60008044",
        "P97": "20.68738721"
      }, {
        "Sex": "2",
        "Agemos": "84.5",
        "L": "-2.926186592",
        "M": "15.45356545",
        "S": "0.105325289",
        "P3": "13.21815723",
        "P5": "13.43276016",
        "P10": "13.79190343",
        "P25": "14.48764859",
        "P50": "15.45356545",
        "P75": "16.73461785",
        "P85": "17.6255667",
        "P90": "18.34873428",
        "P95": "19.67793583",
        "P97": "20.7807491"
      }, {
        "Sex": "2",
        "Agemos": "85.5",
        "L": "-2.899435307",
        "M": "15.47991037",
        "S": "0.106320346",
        "P3": "13.22125062",
        "P5": "13.43793139",
        "P10": "13.80062765",
        "P25": "14.50351871",
        "P50": "15.47991037",
        "P75": "16.77580119",
        "P85": "17.67767708",
        "P90": "18.4100666",
        "P95": "19.75701564",
        "P97": "20.8753139"
      }, {
        "Sex": "2",
        "Agemos": "86.5",
        "L": "-2.872731211",
        "M": "15.50718419",
        "S": "0.10731644",
        "P3": "13.22501902",
        "P5": "13.44380325",
        "P10": "13.81009508",
        "P25": "14.52021262",
        "P50": "15.50718419",
        "P75": "16.81803321",
        "P85": "17.7309008",
        "P90": "18.47255029",
        "P95": "19.83727506",
        "P97": "20.97103216"
      }, {
        "Sex": "2",
        "Agemos": "87.5",
        "L": "-2.846123683",
        "M": "15.53536829",
        "S": "0.108312721",
        "P3": "13.22946217",
        "P5": "13.45037362",
        "P10": "13.82030049",
        "P25": "14.53771933",
        "P50": "15.53536829",
        "P75": "16.86128616",
        "P85": "17.78520438",
        "P90": "18.53614768",
        "P95": "19.91866977",
        "P97": "21.06785511"
      }, {
        "Sex": "2",
        "Agemos": "88.5",
        "L": "-2.819657704",
        "M": "15.56444426",
        "S": "0.109308364",
        "P3": "13.23457958",
        "P5": "13.45764018",
        "P10": "13.83123858",
        "P25": "14.55602787",
        "P50": "15.56444426",
        "P75": "16.90553254",
        "P85": "17.8405547",
        "P90": "18.60082149",
        "P95": "20.00115598",
        "P97": "21.16573466"
      }, {
        "Sex": "2",
        "Agemos": "89.5",
        "L": "-2.793374145",
        "M": "15.5943938",
        "S": "0.110302563",
        "P3": "13.24037052",
        "P5": "13.46560044",
        "P10": "13.84290393",
        "P25": "14.57512728",
        "P50": "15.5943938",
        "P75": "16.95074515",
        "P85": "17.89691898",
        "P90": "18.66653485",
        "P95": "20.08469037",
        "P97": "21.2646234"
      }, {
        "Sex": "2",
        "Agemos": "90.5",
        "L": "-2.767310047",
        "M": "15.6251988",
        "S": "0.111294537",
        "P3": "13.24683405",
        "P5": "13.47425174",
        "P10": "13.85529103",
        "P25": "14.59500664",
        "P50": "15.6251988",
        "P75": "16.99689705",
        "P85": "17.95426475",
        "P90": "18.73325124",
        "P95": "20.16923016",
        "P97": "21.3644746"
      }, {
        "Sex": "2",
        "Agemos": "91.5",
        "L": "-2.741498897",
        "M": "15.65684126",
        "S": "0.112283526",
        "P3": "13.25396902",
        "P5": "13.48359125",
        "P10": "13.86839426",
        "P25": "14.61565502",
        "P50": "15.65684126",
        "P75": "17.04396158",
        "P85": "18.01255992",
        "P90": "18.80093458",
        "P95": "20.25473307",
        "P97": "21.46524221"
      }, {
        "Sex": "2",
        "Agemos": "92.5",
        "L": "-2.715970894",
        "M": "15.68930333",
        "S": "0.113268793",
        "P3": "13.26177409",
        "P5": "13.49361598",
        "P10": "13.8822079",
        "P25": "14.63706153",
        "P50": "15.68930333",
        "P75": "17.09191233",
        "P85": "18.07177271",
        "P90": "18.86954915",
        "P95": "20.34115737",
        "P97": "21.56688088"
      }, {
        "Sex": "2",
        "Agemos": "93.5",
        "L": "-2.690753197",
        "M": "15.7225673",
        "S": "0.114249622",
        "P3": "13.27024769",
        "P5": "13.50432278",
        "P10": "13.89672614",
        "P25": "14.65921526",
        "P50": "15.7225673",
        "P75": "17.14072316",
        "P85": "18.13187166",
        "P90": "18.93905963",
        "P95": "20.42846182",
        "P97": "21.66934595"
      }, {
        "Sex": "2",
        "Agemos": "94.5",
        "L": "-2.665870146",
        "M": "15.75661555",
        "S": "0.115225321",
        "P3": "13.27938808",
        "P5": "13.51570835",
        "P10": "13.91194308",
        "P25": "14.68210532",
        "P50": "15.75661555",
        "P75": "17.19036814",
        "P85": "18.19282565",
        "P90": "19.00943108",
        "P95": "20.51660573",
        "P97": "21.77259347"
      }, {
        "Sex": "2",
        "Agemos": "95.5",
        "L": "-2.641343436",
        "M": "15.79143062",
        "S": "0.116195218",
        "P3": "13.28919334",
        "P5": "13.52776922",
        "P10": "13.9278527",
        "P25": "14.70572083",
        "P50": "15.79143062",
        "P75": "17.24082164",
        "P85": "18.25460388",
        "P90": "19.08062897",
        "P95": "20.60554896",
        "P97": "21.87658015"
      }, {
        "Sex": "2",
        "Agemos": "96.5",
        "L": "-2.617192204",
        "M": "15.82699517",
        "S": "0.117158667",
        "P3": "13.2996613",
        "P5": "13.54050176",
        "P10": "13.9444489",
        "P25": "14.7300509",
        "P50": "15.82699517",
        "P75": "17.29205828",
        "P85": "18.31717594",
        "P90": "19.15261918",
        "P95": "20.69525186",
        "P97": "21.98126336"
      }, {
        "Sex": "2",
        "Agemos": "97.5",
        "L": "-2.593430614",
        "M": "15.86329241",
        "S": "0.118115073",
        "P3": "13.31078904",
        "P5": "13.55390172",
        "P10": "13.96172519",
        "P25": "14.75508471",
        "P50": "15.86329241",
        "P75": "17.34405364",
        "P85": "18.38051241",
        "P90": "19.22536854",
        "P95": "20.78567525",
        "P97": "22.08660008"
      }, {
        "Sex": "2",
        "Agemos": "98.5",
        "L": "-2.570076037",
        "M": "15.90030484",
        "S": "0.119063807",
        "P3": "13.32257456",
        "P5": "13.56796556",
        "P10": "13.97967549",
        "P25": "14.78081132",
        "P50": "15.90030484",
        "P75": "17.39678222",
        "P85": "18.44458291",
        "P90": "19.29884326",
        "P95": "20.87678068",
        "P97": "22.19254999"
      }, {
        "Sex": "2",
        "Agemos": "99.5",
        "L": "-2.547141473",
        "M": "15.93801545",
        "S": "0.12000429",
        "P3": "13.33501512",
        "P5": "13.58268918",
        "P10": "13.99829338",
        "P25": "14.80721981",
        "P50": "15.93801545",
        "P75": "17.45021936",
        "P85": "18.50935798",
        "P90": "19.3730104",
        "P95": "20.96853014",
        "P97": "22.29907253"
      }, {
        "Sex": "2",
        "Agemos": "100.5",
        "L": "-2.524635245",
        "M": "15.97640787",
        "S": "0.120935994",
        "P3": "13.34810726",
        "P5": "13.59806788",
        "P10": "14.01757212",
        "P25": "14.83429943",
        "P50": "15.97640787",
        "P75": "17.50434149",
        "P85": "18.57480931",
        "P90": "19.44783809",
        "P95": "21.06088607",
        "P97": "22.4061266"
      }, {
        "Sex": "2",
        "Agemos": "101.5",
        "L": "-2.502569666",
        "M": "16.01546483",
        "S": "0.121858355",
        "P3": "13.36184843",
        "P5": "13.61409768",
        "P10": "14.0375053",
        "P25": "14.86203913",
        "P50": "16.01546483",
        "P75": "17.55912371",
        "P85": "18.6409074",
        "P90": "19.52329364",
        "P95": "21.15381165",
        "P97": "22.51367407"
      }, {
        "Sex": "2",
        "Agemos": "102.5",
        "L": "-2.48095189",
        "M": "16.05516984",
        "S": "0.12277087",
        "P3": "13.37623516",
        "P5": "13.63077388",
        "P10": "14.05808613",
        "P25": "14.89042805",
        "P50": "16.05516984",
        "P75": "17.61454239",
        "P85": "18.70762408",
        "P90": "19.59934557",
        "P95": "21.24727049",
        "P97": "22.62167597"
      }, {
        "Sex": "2",
        "Agemos": "103.5",
        "L": "-2.459785573",
        "M": "16.09550688",
        "S": "0.123673085",
        "P3": "13.39126329",
        "P5": "13.6480912",
        "P10": "14.07930747",
        "P25": "14.91945533",
        "P50": "16.09550688",
        "P75": "17.67057478",
        "P85": "18.77493214",
        "P90": "19.67596331",
        "P95": "21.34122666",
        "P97": "22.73009308"
      }, {
        "Sex": "2",
        "Agemos": "104.5",
        "L": "-2.439080117",
        "M": "16.13645881",
        "S": "0.124564484",
        "P3": "13.40693007",
        "P5": "13.6660455",
        "P10": "14.1011628",
        "P25": "14.94910996",
        "P50": "16.13645881",
        "P75": "17.72719638",
        "P85": "18.84280276",
        "P90": "19.75311515",
        "P95": "21.43564505",
        "P97": "22.8388898"
      }, {
        "Sex": "2",
        "Agemos": "105.5",
        "L": "-2.418838304",
        "M": "16.17800955",
        "S": "0.125444639",
        "P3": "13.42323134",
        "P5": "13.68463148",
        "P10": "14.12364494",
        "P25": "14.97938101",
        "P50": "16.17800955",
        "P75": "17.78438449",
        "P85": "18.91120897",
        "P90": "19.830771",
        "P95": "21.5304909",
        "P97": "22.94802887"
      }, {
        "Sex": "2",
        "Agemos": "106.5",
        "L": "-2.399063683",
        "M": "16.22014281",
        "S": "0.126313121",
        "P3": "13.44016315",
        "P5": "13.70384401",
        "P10": "14.1467468",
        "P25": "15.01025752",
        "P50": "16.22014281",
        "P75": "17.84211614",
        "P85": "18.98012366",
        "P90": "19.90890079",
        "P95": "21.62573005",
        "P97": "23.05747448"
      }, {
        "Sex": "2",
        "Agemos": "107.5",
        "L": "-2.379756861",
        "M": "16.26284277",
        "S": "0.127169545",
        "P3": "13.45772088",
        "P5": "13.72367745",
        "P10": "14.17046092",
        "P25": "15.04172856",
        "P50": "16.26284277",
        "P75": "17.9003692",
        "P85": "19.04952063",
        "P90": "19.98747533",
        "P95": "21.72132885",
        "P97": "23.16719057"
      }, {
        "Sex": "2",
        "Agemos": "108.5",
        "L": "-2.360920527",
        "M": "16.30609316",
        "S": "0.128013515",
        "P3": "13.47590046",
        "P5": "13.74412656",
        "P10": "14.19478013",
        "P25": "15.0737831",
        "P50": "16.30609316",
        "P75": "17.95912092",
        "P85": "19.11937316",
        "P90": "20.06646519",
        "P95": "21.8172543",
        "P97": "23.27714304"
      }, {
        "Sex": "2",
        "Agemos": "109.5",
        "L": "-2.342557728",
        "M": "16.34987759",
        "S": "0.128844639",
        "P3": "13.49469797",
        "P5": "13.7651862",
        "P10": "14.21969726",
        "P25": "15.10641007",
        "P50": "16.34987759",
        "P75": "18.01834843",
        "P85": "19.18965453",
        "P90": "20.14584104",
        "P95": "21.91347402",
        "P97": "23.38729906"
      }, {
        "Sex": "2",
        "Agemos": "110.5",
        "L": "-2.324663326",
        "M": "16.39418118",
        "S": "0.129662637",
        "P3": "13.51410735",
        "P5": "13.78684956",
        "P10": "14.24520415",
        "P25": "15.13959859",
        "P50": "16.39418118",
        "P75": "18.07803138",
        "P85": "19.26034062",
        "P90": "20.22557581",
        "P95": "22.00995586",
        "P97": "23.49762289"
      }, {
        "Sex": "2",
        "Agemos": "111.5",
        "L": "-2.307240716",
        "M": "16.43898741",
        "S": "0.130467138",
        "P3": "13.53412476",
        "P5": "13.80911155",
        "P10": "14.27129365",
        "P25": "15.17333749",
        "P50": "16.43898741",
        "P75": "18.13814687",
        "P85": "19.33140487",
        "P90": "20.30564061",
        "P95": "22.10666864",
        "P97": "23.60808381"
      }, {
        "Sex": "2",
        "Agemos": "112.5",
        "L": "-2.290287663",
        "M": "16.48428082",
        "S": "0.131257852",
        "P3": "13.55474487",
        "P5": "13.83196589",
        "P10": "14.29795787",
        "P25": "15.20761574",
        "P50": "16.48428082",
        "P75": "18.19867379",
        "P85": "19.4028226",
        "P90": "20.38600821",
        "P95": "22.20358151",
        "P97": "23.71864933"
      }, {
        "Sex": "2",
        "Agemos": "113.5",
        "L": "-2.273803847",
        "M": "16.53004554",
        "S": "0.132034479",
        "P3": "13.5759628",
        "P5": "13.85540667",
        "P10": "14.32518913",
        "P25": "15.24242219",
        "P50": "16.53004554",
        "P75": "18.25959047",
        "P85": "19.47456869",
        "P90": "20.46665117",
        "P95": "22.30066429",
        "P97": "23.82928884"
      }, {
        "Sex": "2",
        "Agemos": "114.5",
        "L": "-2.257782149",
        "M": "16.57626713",
        "S": "0.132796819",
        "P3": "13.59777181",
        "P5": "13.87942647",
        "P10": "14.35297886",
        "P25": "15.27774591",
        "P50": "16.57626713",
        "P75": "18.32087764",
        "P85": "19.54662051",
        "P90": "20.5475442",
        "P95": "22.39788709",
        "P97": "23.9399692"
      }, {
        "Sex": "2",
        "Agemos": "115.5",
        "L": "-2.242227723",
        "M": "16.62292864",
        "S": "0.133544525",
        "P3": "13.62016849",
        "P5": "13.90402053",
        "P10": "14.38132004",
        "P25": "15.31357557",
        "P50": "16.62292864",
        "P75": "18.38251202",
        "P85": "19.6189515",
        "P90": "20.628659",
        "P95": "22.49522108",
        "P97": "24.05066418"
      }, {
        "Sex": "2",
        "Agemos": "116.5",
        "L": "-2.227132805",
        "M": "16.67001572",
        "S": "0.134277436",
        "P3": "13.64314567",
        "P5": "13.92918106",
        "P10": "14.4102038",
        "P25": "15.34990008",
        "P50": "16.67001572",
        "P75": "18.44447472",
        "P85": "19.69153965",
        "P90": "20.70997108",
        "P95": "22.59263755",
        "P97": "24.16134214"
      }, {
        "Sex": "2",
        "Agemos": "117.5",
        "L": "-2.212495585",
        "M": "16.71751288",
        "S": "0.134995324",
        "P3": "13.66669786",
        "P5": "13.95490163",
        "P10": "14.43962209",
        "P25": "15.38670828",
        "P50": "16.71751288",
        "P75": "18.50674506",
        "P85": "19.7643612",
        "P90": "20.79145469",
        "P95": "22.69010855",
        "P97": "24.27197506"
      }, {
        "Sex": "2",
        "Agemos": "118.5",
        "L": "-2.19831275",
        "M": "16.76540496",
        "S": "0.135697996",
        "P3": "13.69081905",
        "P5": "13.98117536",
        "P10": "14.46956659",
        "P25": "15.42398894",
        "P50": "16.76540496",
        "P75": "18.56930296",
        "P85": "19.83739314",
        "P90": "20.87308482",
        "P95": "22.78760665",
        "P97": "24.38253502"
      }, {
        "Sex": "2",
        "Agemos": "119.5",
        "L": "-2.184580762",
        "M": "16.81367689",
        "S": "0.136385276",
        "P3": "13.71550304",
        "P5": "14.00799522",
        "P10": "14.50002883",
        "P25": "15.46173083",
        "P50": "16.81367689",
        "P75": "18.63212859",
        "P85": "19.91061278",
        "P90": "20.9548369",
        "P95": "22.88510501",
        "P97": "24.49299479"
      }, {
        "Sex": "2",
        "Agemos": "120.5",
        "L": "-2.171295888",
        "M": "16.86231366",
        "S": "0.137057004",
        "P3": "13.7407435",
        "P5": "14.03535405",
        "P10": "14.5310003",
        "P25": "15.49992271",
        "P50": "16.86231366",
        "P75": "18.69520235",
        "P85": "19.98399779",
        "P90": "21.03668675",
        "P95": "22.98257733",
        "P97": "24.60332779"
      }, {
        "Sex": "2",
        "Agemos": "121.5",
        "L": "-2.158454232",
        "M": "16.91130036",
        "S": "0.137713039",
        "P3": "13.7665339",
        "P5": "14.06324456",
        "P10": "14.56247234",
        "P25": "15.53855329",
        "P50": "16.91130036",
        "P75": "18.75850486",
        "P85": "20.05752615",
        "P90": "21.11861063",
        "P95": "23.07999788",
        "P97": "24.7135081"
      }, {
        "Sex": "2",
        "Agemos": "122.5",
        "L": "-2.146051754",
        "M": "16.96062216",
        "S": "0.138353254",
        "P3": "13.79286758",
        "P5": "14.0916593",
        "P10": "14.59443621",
        "P25": "15.57761127",
        "P50": "16.96062216",
        "P75": "18.82201698",
        "P85": "20.13117619",
        "P90": "21.20058521",
        "P95": "23.17734149",
        "P97": "24.8235105"
      }, {
        "Sex": "2",
        "Agemos": "123.5",
        "L": "-2.134084303",
        "M": "17.0102643",
        "S": "0.138977537",
        "P3": "13.81973772",
        "P5": "14.12059071",
        "P10": "14.62688307",
        "P25": "15.61708531",
        "P50": "17.0102643",
        "P75": "18.8857198",
        "P85": "20.20492657",
        "P90": "21.28258757",
        "P95": "23.27458358",
        "P97": "24.93331042"
      }, {
        "Sex": "2",
        "Agemos": "124.5",
        "L": "-2.122547629",
        "M": "17.06021213",
        "S": "0.139585795",
        "P3": "13.84713731",
        "P5": "14.15003106",
        "P10": "14.65980398",
        "P25": "15.65696405",
        "P50": "17.06021213",
        "P75": "18.94959465",
        "P85": "20.27875629",
        "P90": "21.36459523",
        "P95": "23.3717001",
        "P97": "25.04288396"
      }, {
        "Sex": "2",
        "Agemos": "125.5",
        "L": "-2.111437411",
        "M": "17.11045106",
        "S": "0.140177947",
        "P3": "13.87505922",
        "P5": "14.17997251",
        "P10": "14.69318989",
        "P25": "15.69723611",
        "P50": "17.11045106",
        "P75": "19.01362305",
        "P85": "20.35264468",
        "P90": "21.44658611",
        "P95": "23.46866758",
        "P97": "25.1522079"
      }, {
        "Sex": "2",
        "Agemos": "126.5",
        "L": "-2.100749266",
        "M": "17.16096656",
        "S": "0.140753927",
        "P3": "13.90349614",
        "P5": "14.21040706",
        "P10": "14.72703166",
        "P25": "15.73789008",
        "P50": "17.16096656",
        "P75": "19.07778681",
        "P85": "20.42657139",
        "P90": "21.52853856",
        "P95": "23.56546313",
        "P97": "25.26125968"
      }, {
        "Sex": "2",
        "Agemos": "127.5",
        "L": "-2.090478774",
        "M": "17.21174424",
        "S": "0.141313686",
        "P3": "13.9324406",
        "P5": "14.2413266",
        "P10": "14.76132003",
        "P25": "15.77891452",
        "P50": "17.21174424",
        "P75": "19.14206792",
        "P85": "20.50051644",
        "P90": "21.61043134",
        "P95": "23.6620644",
        "P97": "25.37001743"
      }, {
        "Sex": "2",
        "Agemos": "128.5",
        "L": "-2.080621484",
        "M": "17.26276973",
        "S": "0.141857186",
        "P3": "13.96188497",
        "P5": "14.27272286",
        "P10": "14.79604567",
        "P25": "15.82029796",
        "P50": "17.26276973",
        "P75": "19.20644863",
        "P85": "20.57446015",
        "P90": "21.69224364",
        "P95": "23.7584496",
        "P97": "25.47845992"
      }, {
        "Sex": "2",
        "Agemos": "129.5",
        "L": "-2.071172932",
        "M": "17.31402878",
        "S": "0.142384404",
        "P3": "13.99182148",
        "P5": "14.30458743",
        "P10": "14.83119912",
        "P25": "15.86202891",
        "P50": "17.31402878",
        "P75": "19.2709114",
        "P85": "20.64838321",
        "P90": "21.77395506",
        "P95": "23.85459754",
        "P97": "25.58656661"
      }, {
        "Sex": "2",
        "Agemos": "130.5",
        "L": "-2.062128649",
        "M": "17.3655072",
        "S": "0.142895332",
        "P3": "14.02224218",
        "P5": "14.33691178",
        "P10": "14.86677084",
        "P25": "15.90409584",
        "P50": "17.3655072",
        "P75": "19.33543894",
        "P85": "20.72226661",
        "P90": "21.85554562",
        "P95": "23.95048756",
        "P97": "25.69431763"
      }, {
        "Sex": "2",
        "Agemos": "131.5",
        "L": "-2.053484173",
        "M": "17.4171909",
        "S": "0.143389972",
        "P3": "14.05313898",
        "P5": "14.36968723",
        "P10": "14.90275116",
        "P25": "15.94648722",
        "P50": "17.4171909",
        "P75": "19.40001418",
        "P85": "20.79609169",
        "P90": "21.93699575",
        "P95": "24.04609957",
        "P97": "25.80169379"
      }, {
        "Sex": "2",
        "Agemos": "132.5",
        "L": "-2.045235058",
        "M": "17.46906585",
        "S": "0.143868341",
        "P3": "14.0845036",
        "P5": "14.40290497",
        "P10": "14.93913036",
        "P25": "15.98919146",
        "P50": "17.46906585",
        "P75": "19.46462028",
        "P85": "20.86984014",
        "P90": "22.01828633",
        "P95": "24.14141407",
        "P97": "25.90867656"
      }, {
        "Sex": "2",
        "Agemos": "133.5",
        "L": "-2.03737688",
        "M": "17.52111811",
        "S": "0.144330469",
        "P3": "14.11632765",
        "P5": "14.43655605",
        "P10": "14.97589856",
        "P25": "16.03219696",
        "P50": "17.52111811",
        "P75": "19.52924064",
        "P85": "20.94349396",
        "P90": "22.09939861",
        "P95": "24.23641208",
        "P97": "26.01524807"
      }, {
        "Sex": "2",
        "Agemos": "134.5",
        "L": "-2.029906684",
        "M": "17.57333347",
        "S": "0.144776372",
        "P3": "14.14860307",
        "P5": "14.47063181",
        "P10": "15.01304607",
        "P25": "16.07549205",
        "P50": "17.57333347",
        "P75": "19.59385826",
        "P85": "21.01703489",
        "P90": "22.18031382",
        "P95": "24.33107526",
        "P97": "26.12139201"
      }, {
        "Sex": "2",
        "Agemos": "135.5",
        "L": "-2.022817914",
        "M": "17.62569869",
        "S": "0.145206138",
        "P3": "14.18132032",
        "P5": "14.50512237",
        "P10": "15.05056245",
        "P25": "16.11906513",
        "P50": "17.62569869",
        "P75": "19.65845792",
        "P85": "21.09044653",
        "P90": "22.26101479",
        "P95": "24.4253857",
        "P97": "26.22709056"
      }, {
        "Sex": "2",
        "Agemos": "136.5",
        "L": "-2.016107084",
        "M": "17.67819987",
        "S": "0.145619819",
        "P3": "14.21447084",
        "P5": "14.54001862",
        "P10": "15.08843769",
        "P25": "16.1629045",
        "P50": "17.67819987",
        "P75": "19.72302336",
        "P85": "21.16371155",
        "P90": "22.34148377",
        "P95": "24.51932616",
        "P97": "26.33232837"
      }, {
        "Sex": "2",
        "Agemos": "137.5",
        "L": "-2.009769905",
        "M": "17.7308234",
        "S": "0.146017491",
        "P3": "14.24804556",
        "P5": "14.57531107",
        "P10": "15.12666154",
        "P25": "16.20699844",
        "P50": "17.7308234",
        "P75": "19.78753889",
        "P85": "21.2368133",
        "P90": "22.42170373",
        "P95": "24.61287993",
        "P97": "26.43709027"
      }, {
        "Sex": "2",
        "Agemos": "138.5",
        "L": "-2.003802134",
        "M": "17.78355575",
        "S": "0.146399239",
        "P3": "14.28203528",
        "P5": "14.61099007",
        "P10": "15.16522362",
        "P25": "16.25133521",
        "P50": "17.78355575",
        "P75": "19.85198907",
        "P85": "21.30973548",
        "P90": "22.50165801",
        "P95": "24.70603086",
        "P97": "26.54136175"
      }, {
        "Sex": "2",
        "Agemos": "139.5",
        "L": "-1.998199572",
        "M": "17.83638347",
        "S": "0.146765161",
        "P3": "14.31643062",
        "P5": "14.64704584",
        "P10": "15.20411349",
        "P25": "16.29590305",
        "P50": "17.83638347",
        "P75": "19.91635869",
        "P85": "21.38246211",
        "P90": "22.58133043",
        "P95": "24.79876336",
        "P97": "26.64512897"
      }, {
        "Sex": "2",
        "Agemos": "140.5",
        "L": "-1.992958064",
        "M": "17.88929321",
        "S": "0.147115364",
        "P3": "14.35122206",
        "P5": "14.68346846",
        "P10": "15.24332057",
        "P25": "16.34069017",
        "P50": "17.88929321",
        "P75": "19.98063276",
        "P85": "21.45497756",
        "P90": "22.66070517",
        "P95": "24.89106241",
        "P97": "26.74837878"
      }, {
        "Sex": "2",
        "Agemos": "141.5",
        "L": "-1.988073505",
        "M": "17.94227168",
        "S": "0.147449967",
        "P3": "14.3863999",
        "P5": "14.72024789",
        "P10": "15.28283421",
        "P25": "16.38568475",
        "P50": "17.94227168",
        "P75": "20.04479655",
        "P85": "21.52726655",
        "P90": "22.73976686",
        "P95": "24.98291353",
        "P97": "26.85109867"
      }, {
        "Sex": "2",
        "Agemos": "142.5",
        "L": "-1.983541835",
        "M": "17.9953057",
        "S": "0.147769097",
        "P3": "14.42195429",
        "P5": "14.75737391",
        "P10": "15.32264362",
        "P25": "16.43087493",
        "P50": "17.9953057",
        "P75": "20.10883554",
        "P85": "21.5993141",
        "P90": "22.81850056",
        "P95": "25.07430281",
        "P97": "26.95327681"
      }, {
        "Sex": "2",
        "Agemos": "143.5",
        "L": "-1.979359041",
        "M": "18.04838216",
        "S": "0.148072891",
        "P3": "14.45787522",
        "P5": "14.7948362",
        "P10": "15.36273794",
        "P25": "16.47624886",
        "P50": "18.04838216",
        "P75": "20.17273546",
        "P85": "21.6711056",
        "P90": "22.89689172",
        "P95": "25.16521691",
        "P97": "27.05490205"
      }, {
        "Sex": "2",
        "Agemos": "144.5",
        "L": "-1.975521156",
        "M": "18.10148804",
        "S": "0.148361495",
        "P3": "14.4941525",
        "P5": "14.83262428",
        "P10": "15.40310619",
        "P25": "16.52179463",
        "P50": "18.10148804",
        "P75": "20.23648228",
        "P85": "21.74262677",
        "P90": "22.97492622",
        "P95": "25.25564304",
        "P97": "27.15596389"
      }, {
        "Sex": "2",
        "Agemos": "145.5",
        "L": "-1.972024258",
        "M": "18.15461039",
        "S": "0.148635067",
        "P3": "14.53077581",
        "P5": "14.87072753",
        "P10": "15.44373731",
        "P25": "16.56750033",
        "P50": "18.15461039",
        "P75": "20.30006219",
        "P85": "21.81386368",
        "P90": "23.05259037",
        "P95": "25.34556897",
        "P97": "27.25645252"
      }, {
        "Sex": "2",
        "Agemos": "146.5",
        "L": "-1.968864465",
        "M": "18.20773639",
        "S": "0.148893769",
        "P3": "14.56773463",
        "P5": "14.90913518",
        "P10": "15.4846201",
        "P25": "16.61335399",
        "P50": "18.20773639",
        "P75": "20.36346164",
        "P85": "21.88480271",
        "P90": "23.12987089",
        "P95": "25.43498301",
        "P97": "27.35635878"
      }, {
        "Sex": "2",
        "Agemos": "147.5",
        "L": "-1.966037938",
        "M": "18.26085325",
        "S": "0.149137776",
        "P3": "14.6050183",
        "P5": "14.94783635",
        "P10": "15.52574328",
        "P25": "16.65934366",
        "P50": "18.26085325",
        "P75": "20.42666729",
        "P85": "21.95543061",
        "P90": "23.20675491",
        "P95": "25.52387405",
        "P97": "27.45567419"
      }, {
        "Sex": "2",
        "Agemos": "148.5",
        "L": "-1.963540872",
        "M": "18.31394832",
        "S": "0.14936727",
        "P3": "14.64261599",
        "P5": "14.98681999",
        "P10": "15.56709547",
        "P25": "16.70545732",
        "P50": "18.31394832",
        "P75": "20.48966607",
        "P85": "22.02573445",
        "P90": "23.28322999",
        "P95": "25.61223153",
        "P97": "27.55439092"
      }, {
        "Sex": "2",
        "Agemos": "149.5",
        "L": "-1.961369499",
        "M": "18.36700902",
        "S": "0.149582439",
        "P3": "14.68051671",
        "P5": "15.0260749",
        "P10": "15.60866519",
        "P25": "16.75168297",
        "P50": "18.36700902",
        "P75": "20.55244514",
        "P85": "22.09570166",
        "P90": "23.35928412",
        "P95": "25.70004544",
        "P97": "27.65250183"
      }, {
        "Sex": "2",
        "Agemos": "150.5",
        "L": "-1.959520079",
        "M": "18.42002284",
        "S": "0.149783482",
        "P3": "14.7187093",
        "P5": "15.06558978",
        "P10": "15.65044083",
        "P25": "16.79800855",
        "P50": "18.42002284",
        "P75": "20.61499187",
        "P85": "22.16531999",
        "P90": "23.43490568",
        "P95": "25.78730634",
        "P97": "27.75000043"
      }, {
        "Sex": "2",
        "Agemos": "151.5",
        "L": "-1.9579889",
        "M": "18.47297739",
        "S": "0.149970604",
        "P3": "14.75718241",
        "P5": "15.10535314",
        "P10": "15.6924107",
        "P25": "16.844422",
        "P50": "18.47297739",
        "P75": "20.67729392",
        "P85": "22.23457754",
        "P90": "23.51008349",
        "P95": "25.87400532",
        "P97": "27.8468809"
      }, {
        "Sex": "2",
        "Agemos": "152.5",
        "L": "-1.956772271",
        "M": "18.52586035",
        "S": "0.15014402",
        "P3": "14.79592458",
        "P5": "15.14535337",
        "P10": "15.734563",
        "P25": "16.89091121",
        "P50": "18.52586035",
        "P75": "20.73933915",
        "P85": "22.30346276",
        "P90": "23.58480678",
        "P95": "25.96013405",
        "P97": "27.9431381"
      }, {
        "Sex": "2",
        "Agemos": "153.5",
        "L": "-1.95586652",
        "M": "18.57865951",
        "S": "0.15030395",
        "P3": "14.83492412",
        "P5": "15.18557871",
        "P10": "15.77688582",
        "P25": "16.93746408",
        "P50": "18.57865951",
        "P75": "20.80111569",
        "P85": "22.37196443",
        "P90": "23.65906521",
        "P95": "26.04568474",
        "P97": "28.03876753"
      }, {
        "Sex": "2",
        "Agemos": "154.5",
        "L": "-1.955267984",
        "M": "18.63136275",
        "S": "0.150450621",
        "P3": "14.87416922",
        "P5": "15.22601726",
        "P10": "15.81936717",
        "P25": "16.98406846",
        "P50": "18.63136275",
        "P75": "20.86261191",
        "P85": "22.44007167",
        "P90": "23.73284885",
        "P95": "26.13065016",
        "P97": "28.13376538"
      }, {
        "Sex": "2",
        "Agemos": "155.5",
        "L": "-1.954973011",
        "M": "18.68395801",
        "S": "0.15058427",
        "P3": "14.91364786",
        "P5": "15.26665697",
        "P10": "15.86199492",
        "P25": "17.0307122",
        "P50": "18.68395801",
        "P75": "20.9238164",
        "P85": "22.50777397",
        "P90": "23.80614819",
        "P95": "26.21502362",
        "P97": "28.22812848"
      }, {
        "Sex": "2",
        "Agemos": "156.5",
        "L": "-1.954977947",
        "M": "18.73643338",
        "S": "0.150705138",
        "P3": "14.95334789",
        "P5": "15.30748565",
        "P10": "15.90475685",
        "P25": "17.07738309",
        "P50": "18.73643338",
        "P75": "20.98471803",
        "P85": "22.57506113",
        "P90": "23.87895414",
        "P95": "26.298799",
        "P97": "28.32185435"
      }, {
        "Sex": "2",
        "Agemos": "157.5",
        "L": "-1.955279136",
        "M": "18.788777",
        "S": "0.150813475",
        "P3": "14.99325696",
        "P5": "15.34849095",
        "P10": "15.94764066",
        "P25": "17.12406895",
        "P50": "18.788777",
        "P75": "21.04530589",
        "P85": "22.6419233",
        "P90": "23.95125804",
        "P95": "26.38197072",
        "P97": "28.41494115"
      }, {
        "Sex": "2",
        "Agemos": "158.5",
        "L": "-1.955872909",
        "M": "18.84097713",
        "S": "0.150909535",
        "P3": "15.03336257",
        "P5": "15.38966039",
        "P10": "15.9906339",
        "P25": "17.17075754",
        "P50": "18.84097713",
        "P75": "21.10556932",
        "P85": "22.70835101",
        "P90": "24.02305164",
        "P95": "26.46453376",
        "P97": "28.50738772"
      }, {
        "Sex": "2",
        "Agemos": "159.5",
        "L": "-1.956755579",
        "M": "18.89302212",
        "S": "0.150993582",
        "P3": "15.07365202",
        "P5": "15.43098133",
        "P10": "16.03372404",
        "P25": "17.21743662",
        "P50": "18.89302212",
        "P75": "21.16549792",
        "P85": "22.77433508",
        "P90": "24.0943271",
        "P95": "26.54648363",
        "P97": "28.59919355"
      }, {
        "Sex": "2",
        "Agemos": "160.5",
        "L": "-1.957923436",
        "M": "18.94490041",
        "S": "0.151065883",
        "P3": "15.11411246",
        "P5": "15.47244099",
        "P10": "16.07689846",
        "P25": "17.2640939",
        "P50": "18.94490041",
        "P75": "21.22508152",
        "P85": "22.83986672",
        "P90": "24.16507702",
        "P95": "26.62781643",
        "P97": "28.69035881"
      }, {
        "Sex": "2",
        "Agemos": "161.5",
        "L": "-1.959372737",
        "M": "18.99660055",
        "S": "0.151126714",
        "P3": "15.15473086",
        "P5": "15.51402643",
        "P10": "16.1201444",
        "P25": "17.31071712",
        "P50": "18.99660055",
        "P75": "21.28431023",
        "P85": "22.90493747",
        "P90": "24.23529442",
        "P95": "26.70852876",
        "P97": "28.7808843"
      }, {
        "Sex": "2",
        "Agemos": "162.5",
        "L": "-1.9610997",
        "M": "19.04811118",
        "S": "0.151176355",
        "P3": "15.19549401",
        "P5": "15.55572457",
        "P10": "16.16344901",
        "P25": "17.35729394",
        "P50": "19.04811118",
        "P75": "21.34317438",
        "P85": "22.96953922",
        "P90": "24.30497273",
        "P95": "26.78861781",
        "P97": "28.8707715"
      }, {
        "Sex": "2",
        "Agemos": "163.5",
        "L": "-1.963100496",
        "M": "19.09942105",
        "S": "0.151215094",
        "P3": "15.23638853",
        "P5": "15.59752218",
        "P10": "16.20679934",
        "P25": "17.40381205",
        "P50": "19.09942105",
        "P75": "21.40166456",
        "P85": "23.03366421",
        "P90": "24.37410579",
        "P95": "26.8680813",
        "P97": "28.96002256"
      }, {
        "Sex": "2",
        "Agemos": "164.5",
        "L": "-1.96537124",
        "M": "19.15051899",
        "S": "0.151243223",
        "P3": "15.27740086",
        "P5": "15.63940588",
        "P10": "16.25018232",
        "P25": "17.45025909",
        "P50": "19.15051899",
        "P75": "21.45977162",
        "P85": "23.09730502",
        "P90": "24.4426879",
        "P95": "26.94691749",
        "P97": "29.04864025"
      }, {
        "Sex": "2",
        "Agemos": "165.5",
        "L": "-1.967907983",
        "M": "19.20139397",
        "S": "0.151261042",
        "P3": "15.31851726",
        "P5": "15.68136213",
        "P10": "16.2935848",
        "P25": "17.4966227",
        "P50": "19.20139397",
        "P75": "21.51748666",
        "P85": "23.16045458",
        "P90": "24.51071375",
        "P95": "27.02512521",
        "P97": "29.13662805"
      }, {
        "Sex": "2",
        "Agemos": "166.5",
        "L": "-1.970706706",
        "M": "19.25203503",
        "S": "0.151268855",
        "P3": "15.35972381",
        "P5": "15.72337724",
        "P10": "16.33699348",
        "P25": "17.54289048",
        "P50": "19.25203503",
        "P75": "21.57480102",
        "P85": "23.2231062",
        "P90": "24.57817846",
        "P95": "27.10270382",
        "P97": "29.22399004"
      }, {
        "Sex": "2",
        "Agemos": "167.5",
        "L": "-1.973763307",
        "M": "19.30243131",
        "S": "0.151266974",
        "P3": "15.40100642",
        "P5": "15.76543738",
        "P10": "16.38039498",
        "P25": "17.58905003",
        "P50": "19.30243131",
        "P75": "21.63170632",
        "P85": "23.28525349",
        "P90": "24.64507758",
        "P95": "27.17965324",
        "P97": "29.31073101"
      }, {
        "Sex": "2",
        "Agemos": "168.5",
        "L": "-1.977073595",
        "M": "19.35257209",
        "S": "0.151255713",
        "P3": "15.44235082",
        "P5": "15.80752854",
        "P10": "16.42377582",
        "P25": "17.63508894",
        "P50": "19.35257209",
        "P75": "21.68819441",
        "P85": "23.34689045",
        "P90": "24.71140708",
        "P95": "27.25597392",
        "P97": "29.39685635"
      }, {
        "Sex": "2",
        "Agemos": "169.5",
        "L": "-1.980633277",
        "M": "19.40244671",
        "S": "0.151235395",
        "P3": "15.48374254",
        "P5": "15.84963659",
        "P10": "16.46712239",
        "P25": "17.68099474",
        "P50": "19.40244671",
        "P75": "21.74425743",
        "P85": "23.40801143",
        "P90": "24.77716335",
        "P95": "27.33166687",
        "P97": "29.48237214"
      }, {
        "Sex": "2",
        "Agemos": "170.5",
        "L": "-1.984437954",
        "M": "19.45204465",
        "S": "0.151206347",
        "P3": "15.52516693",
        "P5": "15.89174721",
        "P10": "16.51042098",
        "P25": "17.72675499",
        "P50": "19.45204465",
        "P75": "21.79988774",
        "P85": "23.46861112",
        "P90": "24.8423432",
        "P95": "27.40673363",
        "P97": "29.56728511"
      }, {
        "Sex": "2",
        "Agemos": "171.5",
        "L": "-1.988483106",
        "M": "19.50135548",
        "S": "0.151168902",
        "P3": "15.56660919",
        "P5": "15.93384595",
        "P10": "16.55365778",
        "P25": "17.7723572",
        "P50": "19.50135548",
        "P75": "21.855078",
        "P85": "23.52868458",
        "P90": "24.90694389",
        "P95": "27.4811763",
        "P97": "29.65160263"
      }, {
        "Sex": "2",
        "Agemos": "172.5",
        "L": "-1.992764085",
        "M": "19.55036888",
        "S": "0.151123398",
        "P3": "15.60805429",
        "P5": "15.97591819",
        "P10": "16.59681886",
        "P25": "17.81778887",
        "P50": "19.55036888",
        "P75": "21.90982109",
        "P85": "23.5882272",
        "P90": "24.97096308",
        "P95": "27.55499753",
        "P97": "29.73533271"
      }, {
        "Sex": "2",
        "Agemos": "173.5",
        "L": "-1.997276103",
        "M": "19.59907464",
        "S": "0.15107018",
        "P3": "15.64948704",
        "P5": "16.01794916",
        "P10": "16.63989017",
        "P25": "17.86303751",
        "P50": "19.59907464",
        "P75": "21.96411019",
        "P85": "23.64723476",
        "P90": "25.03439887",
        "P95": "27.62820049",
        "P97": "29.81848403"
      }, {
        "Sex": "2",
        "Agemos": "174.5",
        "L": "-2.002014224",
        "M": "19.64746266",
        "S": "0.151009595",
        "P3": "15.69089206",
        "P5": "16.05992392",
        "P10": "16.68285759",
        "P25": "17.90809056",
        "P50": "19.64746266",
        "P75": "22.01793871",
        "P85": "23.70570337",
        "P90": "25.09724977",
        "P95": "27.70078892",
        "P97": "29.90106591"
      }, {
        "Sex": "2",
        "Agemos": "175.5",
        "L": "-2.00697335",
        "M": "19.69552294",
        "S": "0.150942",
        "P3": "15.73225378",
        "P5": "16.10182739",
        "P10": "16.72570683",
        "P25": "17.95293549",
        "P50": "19.69552294",
        "P75": "22.07130033",
        "P85": "23.76362952",
        "P90": "25.15951476",
        "P95": "27.77276709",
        "P97": "29.9830883"
      }, {
        "Sex": "2",
        "Agemos": "176.5",
        "L": "-2.012148213",
        "M": "19.7432456",
        "S": "0.150867753",
        "P3": "15.77355644",
        "P5": "16.14364432",
        "P10": "16.76842355",
        "P25": "17.99755974",
        "P50": "19.7432456",
        "P75": "22.12418902",
        "P85": "23.82101004",
        "P90": "25.22119319",
        "P95": "27.84413981",
        "P97": "30.06456182"
      }, {
        "Sex": "2",
        "Agemos": "177.5",
        "L": "-2.017533363",
        "M": "19.79062086",
        "S": "0.150787221",
        "P3": "15.8147841",
        "P5": "16.1853593",
        "P10": "16.81099326",
        "P25": "18.04195071",
        "P50": "19.79062086",
        "P75": "22.17659899",
        "P85": "23.87784214",
        "P90": "25.28228489",
        "P95": "27.91491246",
        "P97": "30.14549772"
      }, {
        "Sex": "2",
        "Agemos": "178.5",
        "L": "-2.023123159",
        "M": "19.83763907",
        "S": "0.150700774",
        "P3": "15.85592062",
        "P5": "16.22695676",
        "P10": "16.85340136",
        "P25": "18.08609581",
        "P50": "19.83763907",
        "P75": "22.22852472",
        "P85": "23.93412338",
        "P90": "25.3427901",
        "P95": "27.98509093",
        "P97": "30.22590789"
      }, {
        "Sex": "2",
        "Agemos": "179.5",
        "L": "-2.028911755",
        "M": "19.88429066",
        "S": "0.150608788",
        "P3": "15.89694967",
        "P5": "16.26842096",
        "P10": "16.89563315",
        "P25": "18.12998242",
        "P50": "19.88429066",
        "P75": "22.27996095",
        "P85": "23.98985168",
        "P90": "25.40270949",
        "P95": "28.05468167",
        "P97": "30.30580486"
      }, {
        "Sex": "2",
        "Agemos": "180.5",
        "L": "-2.034893091",
        "M": "19.9305662",
        "S": "0.150511645",
        "P3": "15.93785473",
        "P5": "16.30973602",
        "P10": "16.93767383",
        "P25": "18.17359792",
        "P50": "19.9305662",
        "P75": "22.33090272",
        "P85": "24.04502533",
        "P90": "25.46204417",
        "P95": "28.12369169",
        "P97": "30.3852018"
      }, {
        "Sex": "2",
        "Agemos": "181.5",
        "L": "-2.041060881",
        "M": "19.97645636",
        "S": "0.150409731",
        "P3": "15.97861909",
        "P5": "16.35088587",
        "P10": "16.97950845",
        "P25": "18.21692964",
        "P50": "19.97645636",
        "P75": "22.3813453",
        "P85": "24.09964299",
        "P90": "25.52079568",
        "P95": "28.19212851",
        "P97": "30.46411251"
      }, {
        "Sex": "2",
        "Agemos": "182.5",
        "L": "-2.047408604",
        "M": "20.02195192",
        "S": "0.15030344",
        "P3": "16.01922586",
        "P5": "16.3918543",
        "P10": "17.02112198",
        "P25": "18.25996492",
        "P50": "20.02195192",
        "P75": "22.43128425",
        "P85": "24.15370368",
        "P90": "25.578966",
        "P95": "28.26000023",
        "P97": "30.54255145"
      }, {
        "Sex": "2",
        "Agemos": "183.5",
        "L": "-2.05392949",
        "M": "20.06704377",
        "S": "0.150193169",
        "P3": "16.05965792",
        "P5": "16.43262492",
        "P10": "17.06249925",
        "P25": "18.30269107",
        "P50": "20.06704377",
        "P75": "22.4807154",
        "P85": "24.20720678",
        "P90": "25.63655753",
        "P95": "28.32731547",
        "P97": "30.62053368"
      }, {
        "Sex": "2",
        "Agemos": "184.5",
        "L": "-2.060616513",
        "M": "20.11172291",
        "S": "0.150079322",
        "P3": "16.09989799",
        "P5": "16.47318119",
        "P10": "17.10362501",
        "P25": "18.34509539",
        "P50": "20.11172291",
        "P75": "22.52963484",
        "P85": "24.26015204",
        "P90": "25.69357313",
        "P95": "28.3940834",
        "P97": "30.69807493"
      }, {
        "Sex": "2",
        "Agemos": "185.5",
        "L": "-2.067462375",
        "M": "20.15598047",
        "S": "0.149962308",
        "P3": "16.13992859",
        "P5": "16.5135064",
        "P10": "17.14448385",
        "P25": "18.38716515",
        "P50": "20.15598047",
        "P75": "22.57803895",
        "P85": "24.3125396",
        "P90": "25.75001608",
        "P95": "28.46031375",
        "P97": "30.77519152"
      }, {
        "Sex": "2",
        "Agemos": "186.5",
        "L": "-2.074459502",
        "M": "20.19980767",
        "S": "0.14984254",
        "P3": "16.17973203",
        "P5": "16.55358366",
        "P10": "17.18506029",
        "P25": "18.42888762",
        "P50": "20.19980767",
        "P75": "22.62592435",
        "P85": "24.36436993",
        "P90": "25.80589011",
        "P95": "28.52601678",
        "P97": "30.85190042"
      }, {
        "Sex": "2",
        "Agemos": "187.5",
        "L": "-2.081600029",
        "M": "20.24319586",
        "S": "0.149720441",
        "P3": "16.21929043",
        "P5": "16.59339594",
        "P10": "17.22533871",
        "P25": "18.47025003",
        "P50": "20.24319586",
        "P75": "22.67328797",
        "P85": "24.41564391",
        "P90": "25.86119939",
        "P95": "28.59120331",
        "P97": "30.92821925"
      }, {
        "Sex": "2",
        "Agemos": "188.5",
        "L": "-2.088875793",
        "M": "20.28613648",
        "S": "0.149596434",
        "P3": "16.25858573",
        "P5": "16.63292602",
        "P10": "17.26530336",
        "P25": "18.5112396",
        "P50": "20.28613648",
        "P75": "22.72012699",
        "P85": "24.46636278",
        "P90": "25.91594853",
        "P95": "28.6558847",
        "P97": "31.00416621"
      }, {
        "Sex": "2",
        "Agemos": "189.5",
        "L": "-2.096278323",
        "M": "20.32862109",
        "S": "0.149470953",
        "P3": "16.29759966",
        "P5": "16.67215653",
        "P10": "17.30493841",
        "P25": "18.55184353",
        "P50": "20.32862109",
        "P75": "22.76643886",
        "P85": "24.51652812",
        "P90": "25.97014258",
        "P95": "28.72007286",
        "P97": "31.07976017"
      }, {
        "Sex": "2",
        "Agemos": "190.5",
        "L": "-2.103798828",
        "M": "20.37064138",
        "S": "0.149344433",
        "P3": "16.33631375",
        "P5": "16.71106993",
        "P10": "17.34422789",
        "P25": "18.592049",
        "P50": "20.37064138",
        "P75": "22.81222132",
        "P85": "24.56614194",
        "P90": "26.02378703",
        "P95": "28.78378025",
        "P97": "31.15502058"
      }, {
        "Sex": "2",
        "Agemos": "191.5",
        "L": "-2.111428194",
        "M": "20.41218911",
        "S": "0.149217319",
        "P3": "16.37470935",
        "P5": "16.74964852",
        "P10": "17.38315572",
        "P25": "18.63184317",
        "P50": "20.41218911",
        "P75": "22.85747235",
        "P85": "24.61520657",
        "P90": "26.07688783",
        "P95": "28.84701989",
        "P97": "31.22996756"
      }, {
        "Sex": "2",
        "Agemos": "192.5",
        "L": "-2.119156972",
        "M": "20.45325617",
        "S": "0.14909006",
        "P3": "16.4127676",
        "P5": "16.78787442",
        "P10": "17.4217057",
        "P25": "18.67121316",
        "P50": "20.45325617",
        "P75": "22.90219024",
        "P85": "24.66372475",
        "P90": "26.12945136",
        "P95": "28.90980533",
        "P97": "31.30462183"
      }, {
        "Sex": "2",
        "Agemos": "193.5",
        "L": "-2.126975375",
        "M": "20.49383457",
        "S": "0.14896311",
        "P3": "16.45046946",
        "P5": "16.82572959",
        "P10": "17.4598615",
        "P25": "18.7101461",
        "P50": "20.49383457",
        "P75": "22.94637354",
        "P85": "24.71169957",
        "P90": "26.18148447",
        "P95": "28.97215071",
        "P97": "31.37900471"
      }, {
        "Sex": "2",
        "Agemos": "194.5",
        "L": "-2.134873266",
        "M": "20.5339164",
        "S": "0.148836931",
        "P3": "16.48779567",
        "P5": "16.86319583",
        "P10": "17.49760671",
        "P25": "18.74862906",
        "P50": "20.5339164",
        "P75": "22.99002104",
        "P85": "24.75913451",
        "P90": "26.23299442",
        "P95": "29.03407069",
        "P97": "31.45313817"
      }, {
        "Sex": "2",
        "Agemos": "195.5",
        "L": "-2.142840157",
        "M": "20.57349387",
        "S": "0.148711989",
        "P3": "16.52472682",
        "P5": "16.90025476",
        "P10": "17.53492476",
        "P25": "18.78664912",
        "P50": "20.57349387",
        "P75": "23.03313184",
        "P85": "24.80603342",
        "P90": "26.28398896",
        "P95": "29.0955805",
        "P97": "31.5270448"
      }, {
        "Sex": "2",
        "Agemos": "196.5",
        "L": "-2.150865204",
        "M": "20.61255929",
        "S": "0.148588757",
        "P3": "16.56124326",
        "P5": "16.93688787",
        "P10": "17.57179899",
        "P25": "18.82419331",
        "P50": "20.61255929",
        "P75": "23.07570528",
        "P85": "24.85240053",
        "P90": "26.33447627",
        "P95": "29.15669594",
        "P97": "31.6007478"
      }, {
        "Sex": "2",
        "Agemos": "197.5",
        "L": "-2.158937201",
        "M": "20.65110506",
        "S": "0.148467715",
        "P3": "16.59732518",
        "P5": "16.97307644",
        "P10": "17.60821261",
        "P25": "18.86124863",
        "P50": "20.65110506",
        "P75": "23.11774099",
        "P85": "24.89824041",
        "P90": "26.38446498",
        "P95": "29.21743336",
        "P97": "31.67427098"
      }, {
        "Sex": "2",
        "Agemos": "198.5",
        "L": "-2.167044578",
        "M": "20.6891237",
        "S": "0.148349348",
        "P3": "16.63295257",
        "P5": "17.00880162",
        "P10": "17.64414872",
        "P25": "18.89780209",
        "P50": "20.6891237",
        "P75": "23.15923885",
        "P85": "24.94355805",
        "P90": "26.43396418",
        "P95": "29.27780966",
        "P97": "31.74763877"
      }, {
        "Sex": "2",
        "Agemos": "199.5",
        "L": "-2.175176987",
        "M": "20.72660728",
        "S": "0.14823412",
        "P3": "16.6681059",
        "P5": "17.04404492",
        "P10": "17.67959061",
        "P25": "18.93384056",
        "P50": "20.72660728",
        "P75": "23.2001981",
        "P85": "24.98835785",
        "P90": "26.48298259",
        "P95": "29.33784232",
        "P97": "31.8208776"
      }, {
        "Sex": "2",
        "Agemos": "200.5",
        "L": "-2.183317362",
        "M": "20.76355011",
        "S": "0.148122614",
        "P3": "16.70276277",
        "P5": "17.07878553",
        "P10": "17.71452019",
        "P25": "18.96935117",
        "P50": "20.76355011",
        "P75": "23.24062188",
        "P85": "25.03264836",
        "P90": "26.53153263",
        "P95": "29.39754939",
        "P97": "31.89400908"
      }, {
        "Sex": "2",
        "Agemos": "201.5",
        "L": "-2.191457792",
        "M": "20.79994337",
        "S": "0.148015249",
        "P3": "16.73690461",
        "P5": "17.11300574",
        "P10": "17.74892115",
        "P25": "19.00432062",
        "P50": "20.79994337",
        "P75": "23.28050814",
        "P85": "25.07643282",
        "P90": "26.57962232",
        "P95": "29.45694948",
        "P97": "31.96706354"
      }, {
        "Sex": "2",
        "Agemos": "202.5",
        "L": "-2.199583649",
        "M": "20.83578051",
        "S": "0.147912564",
        "P3": "16.77050999",
        "P5": "17.14668547",
        "P10": "17.78277581",
        "P25": "19.03873583",
        "P50": "20.83578051",
        "P75": "23.31985872",
        "P85": "25.11971866",
        "P90": "26.62726338",
        "P95": "29.51606178",
        "P97": "32.04006655"
      }, {
        "Sex": "2",
        "Agemos": "203.5",
        "L": "-2.207681525",
        "M": "20.87105449",
        "S": "0.147815078",
        "P3": "16.80355796",
        "P5": "17.17980508",
        "P10": "17.81606667",
        "P25": "19.07258364",
        "P50": "20.87105449",
        "P75": "23.35867482",
        "P85": "25.16251271",
        "P90": "26.67446717",
        "P95": "29.57490604",
        "P97": "32.11304561"
      }, {
        "Sex": "2",
        "Agemos": "204.5",
        "L": "-2.215737645",
        "M": "20.90575839",
        "S": "0.147723315",
        "P3": "16.83602739",
        "P5": "17.21234472",
        "P10": "17.8487761",
        "P25": "19.10585083",
        "P50": "20.90575839",
        "P75": "23.39695789",
        "P85": "25.20482218",
        "P90": "26.7212455",
        "P95": "29.63350259",
        "P97": "32.18602887"
      }, {
        "Sex": "2",
        "Agemos": "205.5",
        "L": "-2.223739902",
        "M": "20.93988477",
        "S": "0.147637768",
        "P3": "16.86789789",
        "P5": "17.24428517",
        "P10": "17.88088689",
        "P25": "19.13852417",
        "P50": "20.93988477",
        "P75": "23.43470854",
        "P85": "25.24665348",
        "P90": "26.76760965",
        "P95": "29.69187236",
        "P97": "32.25904682"
      }, {
        "Sex": "2",
        "Agemos": "206.5",
        "L": "-2.231667995",
        "M": "20.97342858",
        "S": "0.147559083",
        "P3": "16.89914528",
        "P5": "17.27560407",
        "P10": "17.91237975",
        "P25": "19.1705904",
        "P50": "20.97342858",
        "P75": "23.4719319",
        "P85": "25.28801794",
        "P90": "26.81357526",
        "P95": "29.75003682",
        "P97": "32.33212376"
      }, {
        "Sex": "2",
        "Agemos": "207.5",
        "L": "-2.239511942",
        "M": "21.00638171",
        "S": "0.147487716",
        "P3": "16.92975012",
        "P5": "17.30628297",
        "P10": "17.9432379",
        "P25": "19.20203617",
        "P50": "21.00638171",
        "P75": "23.50862756",
        "P85": "25.32892108",
        "P90": "26.85915312",
        "P95": "29.80801808",
        "P97": "32.40529387"
      }, {
        "Sex": "2",
        "Agemos": "208.5",
        "L": "-2.247257081",
        "M": "21.0387374",
        "S": "0.14742421",
        "P3": "16.95969079",
        "P5": "17.33630159",
        "P10": "17.97344339",
        "P25": "19.23284815",
        "P50": "21.0387374",
        "P75": "23.54479768",
        "P85": "25.3693713",
        "P90": "26.90435663",
        "P95": "29.8658388",
        "P97": "32.47858818"
      }, {
        "Sex": "2",
        "Agemos": "209.5",
        "L": "-2.254885145",
        "M": "21.07048996",
        "S": "0.147369174",
        "P3": "16.98894397",
        "P5": "17.36563825",
        "P10": "18.00297732",
        "P25": "19.26301292",
        "P50": "21.07048996",
        "P75": "23.58044651",
        "P85": "25.40937929",
        "P90": "26.94920132",
        "P95": "29.92352223",
        "P97": "32.55203545"
      }, {
        "Sex": "2",
        "Agemos": "210.5",
        "L": "-2.26238209",
        "M": "21.10163241",
        "S": "0.147323144",
        "P3": "17.01748828",
        "P5": "17.39427286",
        "P10": "18.03182181",
        "P25": "19.29251705",
        "P50": "21.10163241",
        "P75": "23.61557603",
        "P85": "25.44895346",
        "P90": "26.9937009",
        "P95": "29.98109225",
        "P97": "32.62566902"
      }, {
        "Sex": "2",
        "Agemos": "211.5",
        "L": "-2.269731517",
        "M": "21.13215845",
        "S": "0.147286698",
        "P3": "17.0453012",
        "P5": "17.42218439",
        "P10": "18.05995835",
        "P25": "19.32134706",
        "P50": "21.13215845",
        "P75": "23.65018962",
        "P85": "25.48810377",
        "P90": "27.03787056",
        "P95": "30.03857329",
        "P97": "32.69952105"
      }, {
        "Sex": "2",
        "Agemos": "212.5",
        "L": "-2.276917229",
        "M": "21.16206171",
        "S": "0.147260415",
        "P3": "17.07236026",
        "P5": "17.44935184",
        "P10": "18.08736842",
        "P25": "19.34948942",
        "P50": "21.16206171",
        "P75": "23.68429059",
        "P85": "25.52684029",
        "P90": "27.08172575",
        "P95": "30.09599042",
        "P97": "32.77362474"
      }, {
        "Sex": "2",
        "Agemos": "213.5",
        "L": "-2.283925442",
        "M": "21.1913351",
        "S": "0.147244828",
        "P3": "17.09864412",
        "P5": "17.47575509",
        "P10": "18.11403409",
        "P25": "19.37693055",
        "P50": "21.1913351",
        "P75": "23.71788103",
        "P85": "25.56517184",
        "P90": "27.12528094",
        "P95": "30.15336926",
        "P97": "32.84801632"
      }, {
        "Sex": "2",
        "Agemos": "214.5",
        "L": "-2.290731442",
        "M": "21.21997472",
        "S": "0.147240683",
        "P3": "17.12412619",
        "P5": "17.50136974",
        "P10": "18.13993458",
        "P25": "19.4036568",
        "P50": "21.21997472",
        "P75": "23.75096919",
        "P85": "25.603114",
        "P90": "27.16855668",
        "P95": "30.21073618",
        "P97": "32.92272296"
      }, {
        "Sex": "2",
        "Agemos": "215.5",
        "L": "-2.29732427",
        "M": "21.24797262",
        "S": "0.147248467",
        "P3": "17.14878634",
        "P5": "17.52617667",
        "P10": "18.16505254",
        "P25": "19.4296545",
        "P50": "21.24797262",
        "P75": "23.78355579",
        "P85": "25.64067435",
        "P90": "27.21156668",
        "P95": "30.26811799",
        "P97": "32.9977851"
      }, {
        "Sex": "2",
        "Agemos": "216.5",
        "L": "-2.303687802",
        "M": "21.27532239",
        "S": "0.14726877",
        "P3": "17.17260194",
        "P5": "17.55015468",
        "P10": "18.18936927",
        "P25": "19.45490996",
        "P50": "21.27532239",
        "P75": "23.81564452",
        "P85": "25.67786376",
        "P90": "27.25432769",
        "P95": "30.32554216",
        "P97": "33.07323931"
      }, {
        "Sex": "2",
        "Agemos": "217.5",
        "L": "-2.309799971",
        "M": "21.30201933",
        "S": "0.147302299",
        "P3": "17.19554744",
        "P5": "17.57328018",
        "P10": "18.21286444",
        "P25": "19.47940934",
        "P50": "21.30201933",
        "P75": "23.84724252",
        "P85": "25.714697",
        "P90": "27.29685999",
        "P95": "30.38303689",
        "P97": "33.14911749"
      }, {
        "Sex": "2",
        "Agemos": "218.5",
        "L": "-2.315651874",
        "M": "21.32805489",
        "S": "0.147349514",
        "P3": "17.21760352",
        "P5": "17.59553468",
        "P10": "18.23552108",
        "P25": "19.50313889",
        "P50": "21.32805489",
        "P75": "23.8783497",
        "P85": "25.75118107",
        "P90": "27.33917721",
        "P95": "30.44063073",
        "P97": "33.22546443"
      }, {
        "Sex": "2",
        "Agemos": "219.5",
        "L": "-2.32121731",
        "M": "21.35342563",
        "S": "0.147411215",
        "P3": "17.23874246",
        "P5": "17.61689275",
        "P10": "18.25731763",
        "P25": "19.52608462",
        "P50": "21.35342563",
        "P75": "23.90897582",
        "P85": "25.7873338",
        "P90": "27.38130268",
        "P95": "30.49835324",
        "P97": "33.30230965"
      }, {
        "Sex": "2",
        "Agemos": "220.5",
        "L": "-2.326481911",
        "M": "21.37812462",
        "S": "0.147487979",
        "P3": "17.25894211",
        "P5": "17.63733356",
        "P10": "18.27823552",
        "P25": "19.54823263",
        "P50": "21.37812462",
        "P75": "23.93912415",
        "P85": "25.82316611",
        "P90": "27.42325378",
        "P95": "30.55623433",
        "P97": "33.37969431"
      }, {
        "Sex": "2",
        "Agemos": "221.5",
        "L": "-2.331428139",
        "M": "21.40214589",
        "S": "0.147580453",
        "P3": "17.2781787",
        "P5": "17.6568349",
        "P10": "18.29825524",
        "P25": "19.5695689",
        "P50": "21.40214589",
        "P75": "23.96879993",
        "P85": "25.85869115",
        "P90": "27.46505002",
        "P95": "30.61430463",
        "P97": "33.45765732"
      }, {
        "Sex": "2",
        "Agemos": "222.5",
        "L": "-2.336038473",
        "M": "21.42548351",
        "S": "0.147689289",
        "P3": "17.29642829",
        "P5": "17.67537444",
        "P10": "18.31735722",
        "P25": "19.59007937",
        "P50": "21.42548351",
        "P75": "23.99800858",
        "P85": "25.89392241",
        "P90": "27.50671138",
        "P95": "30.67259539",
        "P97": "33.53623826"
      }, {
        "Sex": "2",
        "Agemos": "223.5",
        "L": "-2.34029545",
        "M": "21.44813156",
        "S": "0.14781515",
        "P3": "17.31366688",
        "P5": "17.69292976",
        "P10": "18.33552175",
        "P25": "19.60974989",
        "P50": "21.44813156",
        "P75": "24.02675569",
        "P85": "25.92887369",
        "P90": "27.54825824",
        "P95": "30.73113849",
        "P97": "33.61547736"
      }, {
        "Sex": "2",
        "Agemos": "224.5",
        "L": "-2.344181703",
        "M": "21.47008412",
        "S": "0.147958706",
        "P3": "17.32987032",
        "P5": "17.70947829",
        "P10": "18.35272903",
        "P25": "19.62856629",
        "P50": "21.47008412",
        "P75": "24.05504702",
        "P85": "25.96355908",
        "P90": "27.58971144",
        "P95": "30.78996648",
        "P97": "33.69541553"
      }, {
        "Sex": "2",
        "Agemos": "225.5",
        "L": "-2.34768",
        "M": "21.49133529",
        "S": "0.148120633",
        "P3": "17.34501435",
        "P5": "17.72499741",
        "P10": "18.36895919",
        "P25": "19.64651429",
        "P50": "21.49133529",
        "P75": "24.08288851",
        "P85": "25.99799301",
        "P90": "27.63109226",
        "P95": "30.84911253",
        "P97": "33.77609435"
      }, {
        "Sex": "2",
        "Agemos": "226.5",
        "L": "-2.350773286",
        "M": "21.51187918",
        "S": "0.148301619",
        "P3": "17.35907462",
        "P5": "17.73946435",
        "P10": "18.38419225",
        "P25": "19.66357958",
        "P50": "21.51187918",
        "P75": "24.11028624",
        "P85": "26.03219019",
        "P90": "27.67242239",
        "P95": "30.90861047",
        "P97": "33.8575561"
      }, {
        "Sex": "2",
        "Agemos": "227.5",
        "L": "-2.353444725",
        "M": "21.53170989",
        "S": "0.148502355",
        "P3": "17.37202667",
        "P5": "17.75285625",
        "P10": "18.39840811",
        "P25": "19.67974776",
        "P50": "21.53170989",
        "P75": "24.13724646",
        "P85": "26.06616563",
        "P90": "27.71372396",
        "P95": "30.96849476",
        "P97": "33.93984372"
      }, {
        "Sex": "2",
        "Agemos": "228.5",
        "L": "-2.355677743",
        "M": "21.55082155",
        "S": "0.148723546",
        "P3": "17.38384594",
        "P5": "17.76515018",
        "P10": "18.41158663",
        "P25": "19.69500438",
        "P50": "21.55082155",
        "P75": "24.16377555",
        "P85": "26.09993465",
        "P90": "27.75501954",
        "P95": "31.02880054",
        "P97": "34.02300086"
      }, {
        "Sex": "2",
        "Agemos": "229.5",
        "L": "-2.35745607",
        "M": "21.56920824",
        "S": "0.148965902",
        "P3": "17.39450778",
        "P5": "17.77632308",
        "P10": "18.42370753",
        "P25": "19.70933491",
        "P50": "21.56920824",
        "P75": "24.18988006",
        "P85": "26.13351285",
        "P90": "27.7963321",
        "P95": "31.08956357",
        "P97": "34.10707184"
      }, {
        "Sex": "2",
        "Agemos": "230.5",
        "L": "-2.358763788",
        "M": "21.58686406",
        "S": "0.149230142",
        "P3": "17.40398745",
        "P5": "17.78635182",
        "P10": "18.43475047",
        "P25": "19.72272474",
        "P50": "21.58686406",
        "P75": "24.21556667",
        "P85": "26.16691611",
        "P90": "27.83768505",
        "P95": "31.1508203",
        "P97": "34.1921017"
      }, {
        "Sex": "2",
        "Agemos": "231.5",
        "L": "-2.359585369",
        "M": "21.60378309",
        "S": "0.149516994",
        "P3": "17.41226013",
        "P5": "17.79521318",
        "P10": "18.44469501",
        "P25": "19.73515921",
        "P50": "21.60378309",
        "P75": "24.24084219",
        "P85": "26.20016061",
        "P90": "27.87910223",
        "P95": "31.21260782",
        "P97": "34.27813617"
      }, {
        "Sex": "2",
        "Agemos": "232.5",
        "L": "-2.359905726",
        "M": "21.61995939",
        "S": "0.149827195",
        "P3": "17.41930091",
        "P5": "17.80288385",
        "P10": "18.45352064",
        "P25": "19.74662357",
        "P50": "21.61995939",
        "P75": "24.26571357",
        "P85": "26.23326279",
        "P90": "27.92060786",
        "P95": "31.27496389",
        "P97": "34.3652217"
      }, {
        "Sex": "2",
        "Agemos": "233.5",
        "L": "-2.359710258",
        "M": "21.635387",
        "S": "0.150161492",
        "P3": "17.42508482",
        "P5": "17.80934044",
        "P10": "18.46120675",
        "P25": "19.757103",
        "P50": "21.635387",
        "P75": "24.29018788",
        "P85": "26.26623937",
        "P90": "27.9622266",
        "P95": "31.33792691",
        "P97": "34.45340544"
      }, {
        "Sex": "2",
        "Agemos": "234.5",
        "L": "-2.358980464",
        "M": "21.65006126",
        "S": "0.150520734",
        "P3": "17.42958448",
        "P5": "17.81455755",
        "P10": "18.46773133",
        "P25": "19.76658246",
        "P50": "21.65006126",
        "P75": "24.31427499",
        "P85": "26.29911039",
        "P90": "28.00398629",
        "P95": "31.40153631",
        "P97": "34.54273066"
      }, {
        "Sex": "2",
        "Agemos": "235.5",
        "L": "-2.357714508",
        "M": "21.6639727",
        "S": "0.150905439",
        "P3": "17.43278087",
        "P5": "17.81851675",
        "P10": "18.47307706",
        "P25": "19.77504736",
        "P50": "21.6639727",
        "P75": "24.33797514",
        "P85": "26.33188509",
        "P90": "28.04590512",
        "P95": "31.46583097",
        "P97": "34.6332581"
      }, {
        "Sex": "2",
        "Agemos": "236.5",
        "L": "-2.355892424",
        "M": "21.67711736",
        "S": "0.151316531",
        "P3": "17.43464513",
        "P5": "17.82119134",
        "P10": "18.47722102",
        "P25": "19.78248242",
        "P50": "21.67711736",
        "P75": "24.3613",
        "P85": "26.36458581",
        "P90": "28.08801335",
        "P95": "31.53085181",
        "P97": "34.72502979"
      }, {
        "Sex": "2",
        "Agemos": "237.5",
        "L": "-2.353501353",
        "M": "21.68948935",
        "S": "0.151754808",
        "P3": "17.43515168",
        "P5": "17.82255737",
        "P10": "18.48014209",
        "P25": "19.78887249",
        "P50": "21.68948935",
        "P75": "24.3842575",
        "P85": "26.39723077",
        "P90": "28.13033767",
        "P95": "31.59663995",
        "P97": "34.81809511"
      }, {
        "Sex": "2",
        "Agemos": "238.5",
        "L": "-2.350528726",
        "M": "21.70108288",
        "S": "0.152221086",
        "P3": "17.43427465",
        "P5": "17.8225906",
        "P10": "18.48181892",
        "P25": "19.79420232",
        "P50": "21.70108288",
        "P75": "24.40685591",
        "P85": "26.42983873",
        "P90": "28.17290543",
        "P95": "31.66323724",
        "P97": "34.91250374"
      }, {
        "Sex": "2",
        "Agemos": "239.5",
        "L": "-2.346962247",
        "M": "21.71189225",
        "S": "0.152716206",
        "P3": "17.43198786",
        "P5": "17.82126653",
        "P10": "18.48222995",
        "P25": "19.79845655",
        "P50": "21.71189225",
        "P75": "24.42910393",
        "P85": "26.4624291",
        "P90": "28.21574476",
        "P95": "31.73068625",
        "P97": "35.00830552"
      }, {
        "Sex": "2",
        "Agemos": "240",
        "L": "-2.34495843",
        "M": "21.71699934",
        "S": "0.152974718",
        "P3": "17.43031075",
        "P5": "17.82009046",
        "P10": "18.48195582",
        "P25": "19.80017572",
        "P50": "21.71699934",
        "P75": "24.44009565",
        "P85": "26.47871966",
        "P90": "28.23727135",
        "P95": "31.76474311",
        "P97": "35.05675093"
      }, {
        "Sex": "2",
        "Agemos": "240.5",
        "L": "-2.342796948",
        "M": "21.72190973",
        "S": "0.153240872",
        "P3": "17.42826863",
        "P5": "17.81856356",
        "P10": "18.48135557",
        "P25": "19.80161999",
        "P50": "21.72190973",
        "P75": "24.45100622",
        "P85": "26.49501679",
        "P90": "28.25887983",
        "P95": "31.79902964",
        "P97": "35.10555822"
      }];
    }

    BmiPercentile.prototype.getWithSexAgeAndBmi = function getWithSexAgeAndBmi(sex, age, bmi) {

      var tSex = sex.toLowerCase() == 'male' || sex.toLowerCase() == 'm' ? 1 : 2;
      var months = age * 12;
      months += 0.5;
      var pctObj = _.find(this.percents, function (p) {
        return p.Sex == tSex && p.Agemos == months;
      });
      var percentages = [];
      var keys = Object.keys(pctObj);
      var values = Object.values(pctObj);
      for (var k = 0; k < keys.length; k++) {
        if (keys[k].substr(0, 1) == 'P') {
          var percent = keys[k].substr(1, keys[k].length - 1);
          percentages.push({ 'percent': percent, 'value': values[k] });
        }
      }

      percentages = _.orderBy(percentages, 'value');

      var currentPercent = percentages[0];

      for (var p = 0; p < percentages.length; p++) {
        if (bmi >= percentages[p].value) {
          currentPercent = percentages[p];
        }
      }
      return currentPercent.percent;
    };

    return BmiPercentile;
  }();
});;
define('go/patientHistory/healthReview',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', '../home', '../../data/go/data', 'lodash'], function (exports, _helper, _http, _aureliaFramework, _home, _data, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.HealthReview = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var HealthReview = exports.HealthReview = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home), _dec(_class = function () {
    function HealthReview(helper, http, Data, Home) {
      _classCallCheck(this, HealthReview);

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
    }

    HealthReview.prototype.activate = function activate(model) {
      var self = this;
      self.history = model.history;
    };

    return HealthReview;
  }()) || _class);
});;
define('text!go/patientHistory/healthReview.html',[],function(){return "<template><require from=\"../customElements/myCheckbox\"></require><div class=\"col-md-12\"><div repeat.for=\"h of history.ros\" class=\"card mb-2\"><div class=\"card-header py-0\"><div class=\"d-inline-block align-middle py-2 h4 m-1\">${h.category}</div><my-checkbox repeat.for=\"d of h.data\" if.bind=\"d.visible && $index == 0\" class=\"d-inline-block m-1 float-right text-primary\" selected.bind=\"d.selected\" value.bind=\"d.name\" editing.bind=\"d.editing\" click.delegate=\"d.select()\"></my-checkbox></div><div if.bind=\"h.displayBody\" class=\"card-body\"><div class=\"row row-cols-2\"><div repeat.for=\"d of h.data\" if.bind=\"d.visible && $index > 0\" class=\"col\"><my-checkbox selected.bind=\"d.selected\" value.bind=\"d.name\" editing.bind=\"d.editing\" click.delegate=\"d.select()\"></my-checkbox></div></div></div></div></div></template>";});;
define('go/patientHistory/patientAlert',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', '../home', '../../data/go/data', 'lodash', 'aurelia-event-aggregator', 'moment'], function (exports, _helper, _http, _aureliaFramework, _home, _data, _lodash, _aureliaEventAggregator, _moment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PatientHistory = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var PatientHistory = exports.PatientHistory = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home, _aureliaEventAggregator.EventAggregator), _dec(_class = function () {
    function PatientHistory(helper, http, Data, Home, EventAggregator) {
      _classCallCheck(this, PatientHistory);

      this.alert = null;
      this.alertText = null;

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
      this.event = EventAggregator;
    }

    PatientHistory.prototype.activate = function activate(model) {
      this.patientId = model.patient.data.PatientID;
      this.loadPatientAlert(this.patientId);
    };

    PatientHistory.prototype.detached = function detached() {
      this.savePatientAlert();
    };

    PatientHistory.prototype.loadPatientAlert = function loadPatientAlert(patientId) {
      var self = this;
      var url = 'visitalert?patientId=' + patientId;
      self.data.getWithUrl(url, function (alert) {
        self.alert = alert;
        self.alertText = self.alert.PatientAlert;
      });
    };

    PatientHistory.prototype.savePatientAlert = function savePatientAlert() {
      var self = this;
      if (self.alert) {
        self.alert.PatientAlert = self.alertText;
        self.data.putWithUrlAndData('visitcomment', self.alert, function (res) {
          self.alert = res;
        });
      } else {
        var newUrl = 'visitcomment';
        self.data.getWithUrl(newUrl, function (newAlert) {
          newAlert.ExamDateTime = (0, _moment2.default)().format('MM/DD/YYYY');
          newAlert.PatientID = self.patientId;
          newAlert.ProviderID = 0;
          newAlert.Type = 'ALERT';
          newAlert.PatientAlert = self.alertText;

          self.data.postWithUrlAndData('visitcomment', JSON.stringify(newAlert), function (res) {
            self.alert = res;
          });
        });
      }
    };

    return PatientHistory;
  }()) || _class);
});;
define('text!go/patientHistory/patientAlert.html',[],function(){return "<template><div id=\"patHxForm\" style=\"overflow-y:scroll\" css=\"height:${windowHeight}px;\"><div class=\"card mb-2\"><div class=\"card-header py-0\"><div class=\"d-inline-block align-middle py-2 h4 m-1\">Patient Alert</div></div><div class=\"card-body\"><div class=\"row\"><div class=\"col\"><textarea value.bind=\"alertText\" name=\"message\" rows=\"10\" cols=\"50\" style=\"position:relative;width:100%;height:100%;resize:none\" placeholder=\"Patient Alert...\"></textarea></div></div></div></div></div></template>";});;
define('go/patientHistory/patientHistory',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', '../home', '../../data/go/data', 'lodash', 'aurelia-event-aggregator', 'moment'], function (exports, _helper, _http, _aureliaFramework, _home, _data, _lodash, _aureliaEventAggregator, _moment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PatientHistory = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var PicklistItem = function PicklistItem(data, options, value, editing) {
    _classCallCheck(this, PicklistItem);

    this.name = data.ColumnFriendlyName;
    this.options = options ? options : [];
    this.selectedOption = value ? value : null;
    this.data = data;
    this.visible = value ? true : false;
    this.editing = editing ? editing : false;
  };

  var HistoryButton = function () {
    function HistoryButton(name, data, visible, editing) {
      _classCallCheck(this, HistoryButton);

      this.name = name;
      this.data = data;
      this.selected = false;
      this.visible = visible == undefined ? false : visible;
      this.editing = editing ? editing : false;
      this.callback;
      this.parent;
    }

    HistoryButton.prototype.select = function select() {
      this.selected = this.selected ? false : true;
      if (this.callback) {
        this.callback(this);
      }
    };

    return HistoryButton;
  }();

  var InputItem = function InputItem(name, value, data, editing, visible) {
    _classCallCheck(this, InputItem);

    this.name = name;
    this.data = data;
    this.value = value;
    this.editing = editing ? editing : false;
    this.visible = visible == undefined ? false : visible;
  };

  var PatientHistory = exports.PatientHistory = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home, _aureliaEventAggregator.EventAggregator), _dec(_class = function () {
    function PatientHistory(helper, http, Data, Home, EventAggregator) {
      _classCallCheck(this, PatientHistory);

      this.history = {};
      this.displayPatHx = true;
      this.displayFamHx = false;
      this.displaySocHx = false;
      this.displayMeds = false;
      this.displayRos = false;
      this.displayVitals = false;
      this.windowHeight = 0;
      this.isFemale = false;
      this.otherDiseaseList = [];
      this.otherOrthoList = [];
      this.otherDiseaseInput = null;
      this.otherOrthoInput = null;
      this.otherFatherInput = null;
      this.otherMotherInput = null;
      this.otherSiblingInput = null;
      this.patientHxShowDocumented = true;
      this.socialHxShowDocumented = true;
      this.rosShowDocumented = true;
      this.edit = false;
      this.socHxData = null;
      this.vitalData = [];
      this.saveObject = null;
      this.saveHx = false;
      this.hasSaved = false;
      this.famhxReviewed = false;
      this.phxReviewed = false;
      this.socHxReviewed = false;
      this.rosReviewed = false;
      this.updateFatherOther = false;
      this.updateMotherOther = false;
      this.updateSiblingOther = false;

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
      this.event = EventAggregator;
    }

    PatientHistory.prototype.getNewHistoryButton = function getNewHistoryButton(name, data, visible, editing) {
      return new HistoryButton(name, data, visible, editing);
    };

    PatientHistory.prototype.activate = function activate(model) {
      var self = this;
      self.demographics = model;

      self.saveHx = true;

      if (self.home.currentBoard != null && self.home.currentBoard.patientId != null) {
        self.date = self.home.currentBoard.visitInfo.date;
      } else {
        self.date = (0, _moment2.default)().format("MM-DD-YYYY");
      }

      var patient = self.demographics.patient;
      self.isFemale = patient.Sex == 'F' ? true : false;

      self.data.getListWithProviderId('Other Diseases', 0, function (res) {
        self.otherDiseaseList = new PicklistItem({ 'ColumnFriendlyName': 'OtherDiseaseHx' }, res, null);
      });

      self.data.getList('Ortho Surgery', function (res) {
        var unique = _.uniqBy(res, function (s) {
          return s.Description1;
        });

        self.otherOrthoList = new PicklistItem({ 'ColumnFriendlyName': 'OtherOrtSurg' }, unique, null);
      });

      self.setupReportingColumnInfo(function (hx) {
        self.loadPatientHistory(self.demographics.patient.data.PatientID, hx);
      });

      self.event.subscribe('savePatientHistory', function () {
        self.saveHistory();
        self.demographics.home.demographicsVisible = false;
        self.demographics.home.demographicsNeedsSave = false;
      });
    };

    PatientHistory.prototype.attached = function attached() {
      this.windowHeight = window.innerHeight - 74;
    };

    PatientHistory.prototype.detached = function detached() {
      this.saveHistory();
    };

    PatientHistory.prototype.loadPatientHistory = function loadPatientHistory(patientId, hxObject) {
      var self = this;

      self.data.getPatientHistoryWithPatientIdAndDate(patientId, self.date, function (res) {

        if (res.PatientHistory == null && res.SocialHistory == null && res.FamilyHistory == null && res.ReviewOfSystems == null) {
          self.data.getNewPatientHistory(function (newHx) {
            var userId = self.helper._user.UserID;
            var patId = self.demographics.patient.data.PatientID;

            var proId = 0;
            if (self.home.currentBoard.visitInfo != null) {
              proId = self.home.currentBoard.visitInfo.providerId;
            } else if (self.home.currentProvider != null) {
              proId = self.home.currentProvider.ProviderID;
            }

            var vDate = self.date;

            newHx.PatientHistory.UserID = userId;
            newHx.PatientHistory.PatientID = patId;
            newHx.PatientHistory.ExamDateTime = vDate;
            newHx.PatientHistory.ProviderID = proId;

            newHx.FamilyHistory.UserID = userId;
            newHx.FamilyHistory.PatientID = patId;
            newHx.FamilyHistory.ExamDateTime = vDate;
            newHx.FamilyHistory.ProviderID = proId;

            newHx.SocialHistory.UserID = userId;
            newHx.SocialHistory.PatientID = patId;
            newHx.SocialHistory.ExamDateTime = vDate;
            newHx.SocialHistory.ProviderID = proId;

            newHx.ReviewOfSystems.UserID = userId;
            newHx.ReviewOfSystems.PatientID = patId;
            newHx.ReviewOfSystems.ExamDateTime = vDate;
            newHx.ReviewOfSystems.ProviderID = proId;

            self.populateHistoryObject(newHx, hxObject);

            self.toggleEdit();
          });
        } else {
          self.populateHistoryObject(res, hxObject);
        }
      });

      var vitalUrl = 'vitalsigns/patients/' + patientId + '/all';
      self.data.getWithUrl(vitalUrl, function (res) {
        self.vitalData = res;
      });
    };

    PatientHistory.prototype.populateHistoryObject = function populateHistoryObject(PatientHistoryResults, hxObject) {

      var self = this;

      var res = PatientHistoryResults;

      self.saveObject = res;

      var pxArray = Object.entries(res.PatientHistory);
      var hxs = _.filter(pxArray, function (d) {
        return d[0].toUpperCase().startsWith('DX') && d[1] == true;
      });
      var sgs = _.filter(pxArray, function (d) {
        return d[0].toUpperCase().startsWith('SG') && d[1] == true;
      });

      var _loop = function _loop(i) {
        var found = _.find(hxObject.pathx.hx, function (h) {
          return h.data.ColumnName == hxs[i][0];
        });
        found.visible = true;
        found.selected = true;
      };

      for (var i = 0; i < hxs.length; i++) {
        _loop(i);
      }

      var _loop2 = function _loop2(i) {
        var found = _.find(hxObject.pathx.surgs, function (h) {
          return h.data.ColumnName == sgs[i][0];
        });
        found.visible = true;
        found.selected = true;
      };

      for (var i = 0; i < sgs.length; i++) {
        _loop2(i);
      }

      self.history.pathx.noMedHistory.visible = res.PatientHistory.No_Signif_Med_Hx;
      self.history.pathx.noSurgHistory.visible = res.PatientHistory.No_Signif_Surg_Hx;

      self.history.pathx.otherDiseaseHx = [];
      self.history.pathx.otherOrthoSurg = [];

      if (res.PatientHistory.OtherOrtSurg != null && res.PatientHistory.OtherOrtSurg.length > 0) {
        var otherOrthoSplit = res.PatientHistory.OtherOrtSurg.trim();
        self.history.pathx.otherOrthoSurg = otherOrthoSplit.split(',');
      }

      if (res.PatientHistory.OtherDiseaseHx != null && res.PatientHistory.OtherDiseaseHx.length > 0) {
        var otherDiseaseSplit = res.PatientHistory.OtherDiseaseHx.trim();
        self.history.pathx.otherDiseaseHx = otherDiseaseSplit.split(',');
      }

      var famhxArray = Object.entries(res.FamilyHistory);
      var filteredFammHx = _.filter(famhxArray, function (f) {
        return f[0].toUpperCase().startsWith('FDX') && f[1] != null;
      });
      var father = _.filter(filteredFammHx, function (f) {
        return f[0].toUpperCase().includes('FATHER') && f[1] == true;
      });
      var mother = _.filter(filteredFammHx, function (f) {
        return f[0].toUpperCase().includes('MOTHER') && f[1] == true;
      });
      var sibling = _.filter(filteredFammHx, function (f) {
        return f[0].toUpperCase().includes('SIBLING') && f[1] == true;
      });

      var _loop3 = function _loop3(i) {
        if (father[i][1] == null) return 'continue';
        var found = _.find(hxObject.famhx.fatherHx, function (h) {
          return h.data.ColumnName == father[i][0];
        });
        found.visible = true;
        found.selected = true;
      };

      for (var i = 0; i < father.length; i++) {
        var _ret3 = _loop3(i);

        if (_ret3 === 'continue') continue;
      }

      var _loop4 = function _loop4(i) {
        if (mother[i][1] == null) return 'continue';
        var found = _.find(hxObject.famhx.motherHx, function (h) {
          return h.data.ColumnName == mother[i][0];
        });
        found.visible = true;
        found.selected = true;
      };

      for (var i = 0; i < mother.length; i++) {
        var _ret4 = _loop4(i);

        if (_ret4 === 'continue') continue;
      }

      var _loop5 = function _loop5(i) {
        if (sibling[i][1] == null) return 'continue';
        var found = _.find(hxObject.famhx.siblingHx, function (h) {
          return h.data.ColumnName == sibling[i][0];
        });
        found.visible = true;
        found.selected = true;
      };

      for (var i = 0; i < sibling.length; i++) {
        var _ret5 = _loop5(i);

        if (_ret5 === 'continue') continue;
      }

      self.history.famhx.fatherNoHx.visible = res.FamilyHistory.FatherNoSigHist;
      self.history.famhx.motherNoHx.visible = res.FamilyHistory.MotherNoSigHist;
      self.history.famhx.siblingNoHx.visible = res.FamilyHistory.SiblingNoSigHist;

      self.history.famhx.fatherHx.other = [];
      self.history.famhx.motherHx.other = [];
      self.history.famhx.siblingHx.other = [];

      if (res.FamilyHistory.DiseaseSumFather != null && res.FamilyHistory.DiseaseSumFather.length > 0) {
        var disFatherSplit = res.FamilyHistory.DiseaseSumFather.trim();
        self.history.famhx.fatherHx.other = disFatherSplit.split(',');
      }
      if (res.FamilyHistory.DiseaseSumMother != null && res.FamilyHistory.DiseaseSumMother.length > 0) {
        var disMotherSplit = res.FamilyHistory.DiseaseSumMother.trim();
        self.history.famhx.motherHx.other = disMotherSplit.split(',');
      }
      if (res.FamilyHistory.DiseaseSumSiblingF != null && res.FamilyHistory.DiseaseSumSiblingF.length > 0) {
        var disSiblingSplit = res.FamilyHistory.DiseaseSumSiblingF.trim();
        self.history.famhx.siblingHx.other = disSiblingSplit.split(',');
      }

      self.history.sochx.hand_dom_L.selected = res.SocialHistory.hand_dom_L != null ? res.SocialHistory.hand_dom_L : false;
      self.history.sochx.hand_dom_L.visible = self.history.sochx.hand_dom_L.selected;
      self.history.sochx.hand_dom_R.selected = res.SocialHistory.hand_dom_R != null ? res.SocialHistory.hand_dom_R : false;
      self.history.sochx.hand_dom_R.visible = self.history.sochx.hand_dom_R.selected;
      self.history.sochx.All_Sub_Neg.selected = res.SocialHistory.All_Sub_Neg != null ? res.SocialHistory.All_Sub_Neg : false;
      self.history.sochx.All_Sub_Neg.visible = self.history.sochx.All_Sub_Neg.selected;
      if (self.isFemale) {
        self.history.sochx.pregnant.selected = res.SocialHistory.pregnant != null ? res.SocialHistory.pregnant : false;
        self.history.sochx.pregnant.visible = res.SocialHistory.pregnant;
      } else {
        self.history.sochx.pregnant.visible = false;
      }

      self.socHxData = res.SocialHistory;

      var rosArray = Object.entries(res.ReviewOfSystems);

      var _loop6 = function _loop6(r) {
        var rosColumnItem = rosArray[r];
        for (var i = 0; i < hxObject.ros.length; i++) {
          var rosCategory = hxObject.ros[i];
          for (var c = 0; c < rosCategory.data.length; c++) {
            var found = _.find(rosCategory.data, function (b) {
              return rosColumnItem[0] == b.data.ColumnName && rosColumnItem[1] == true;
            });
            if (found) {
              found.visible = true;
              found.selected = true;
              if (found.name.toUpperCase() == 'NEGATIVE') {}
            }
          }
        }
      };

      for (var r = 0; r < rosArray.length; r++) {
        _loop6(r);
      }
    };

    PatientHistory.prototype.buildHxDetailsString = function buildHxDetailsString(detailsStr, item) {
      if (detailsStr == null) {
        detailsStr = "Patient reports history of ";
      }
      return detailsStr += item.name.toLowerCase() + ", ";
    };

    PatientHistory.prototype.buildFamilyHxDetailsString = function buildFamilyHxDetailsString(detailsStr, familyMember, item) {
      if (detailsStr == null) {
        detailsStr = familyMember + ' reports history of ';
      }
      return detailsStr += item.name.toLowerCase() + ", ";
    };

    PatientHistory.prototype.completeHxDetailsString = function completeHxDetailsString(detailsStr) {
      var index = detailsStr.lastIndexOf(", ");
      var strMinusLastComma = detailsStr.slice(0, index);
      index = strMinusLastComma.lastIndexOf(", ");
      var finalStr = strMinusLastComma.slice(0, index);
      var indexCommaSpace = index + 2;
      var finalItem = strMinusLastComma.slice(indexCommaSpace, strMinusLastComma.length);

      return finalStr + " and " + finalItem + ".";
    };

    PatientHistory.prototype.saveHistory = function saveHistory() {
      var self = this;
      if (self.saveHx == true && !self.hasSaved) {

        console.log("PAT HX SAVED");

        var so = self.saveObject;
        self.hasSaved = true;

        var hxNoteDetails = null;
        var surgNoteDetails = null;
        var fatherHxDetails = null;
        var motherHxDetails = null;
        var siblingHxDetails = null;
        var socHxDetails = null;

        for (var i = 0; i < self.history.pathx.hx.length; i++) {
          var hxCol = self.history.pathx.hx[i];
          self.saveObject.PatientHistory[hxCol.data.ColumnName] = hxCol.selected;
          if (hxCol.selected) {
            hxNoteDetails = self.buildHxDetailsString(hxNoteDetails, hxCol);
          }
        }
        if (hxNoteDetails != null) {
          hxNoteDetails = self.completeHxDetailsString(hxNoteDetails);
          self.saveObject.PatientHistory.hX_NoteTextBox = hxNoteDetails;
        }

        for (var _i = 0; _i < self.history.pathx.surgs.length; _i++) {
          var surgCol = self.history.pathx.surgs[_i];
          self.saveObject.PatientHistory[surgCol.data.ColumnName] = surgCol.selected;
          if (surgCol.selected) {
            surgNoteDetails = self.buildHxDetailsString(surgNoteDetails, surgCol);
          }
        }
        if (surgNoteDetails != null) {
          surgNoteDetails += self.history.pathx.otherOrthoSurg.toString();
          surgNoteDetails = self.addCommaAndToConcatString(surgNoteDetails);
          self.saveObject.PatientHistory.surg_Hist_NoteTextBox = surgNoteDetails + ".";
        }

        self.saveObject.PatientHistory.No_Signif_Med_Hx = self.history.pathx.noMedHistory.selected;
        self.saveObject.PatientHistory.No_Signif_Surg_Hx = self.history.pathx.noSurgHistory.selected;

        self.saveObject.PatientHistory.OtherOrtSurg = self.history.pathx.otherOrthoSurg.toString();
        self.saveObject.PatientHistory.OtherDiseaseHx = self.history.pathx.otherDiseaseHx.toString();

        var lastPeriodIndex = self.saveObject.PatientHistory.hX_NoteTextBox.lastIndexOf(".");
        if (lastPeriodIndex == self.saveObject.PatientHistory.hX_NoteTextBox.length - 1) {
          self.saveObject.PatientHistory.hX_NoteTextBox = self.saveObject.PatientHistory.hX_NoteTextBox.substring(0, self.saveObject.PatientHistory.hX_NoteTextBox.length - 1);
        }
        self.saveObject.PatientHistory.hX_NoteTextBox += ", " + self.saveObject.PatientHistory.OtherDiseaseHx.toLowerCase();
        self.saveObject.PatientHistory.hX_NoteTextBox = self.addCommaAndToConcatString(self.saveObject.PatientHistory.hX_NoteTextBox) + ".";

        for (var _i2 = 0; _i2 < self.history.famhx.fatherHx.length; _i2++) {
          var _hxCol = self.history.famhx.fatherHx[_i2];
          self.saveObject.FamilyHistory[_hxCol.data.ColumnName] = _hxCol.selected;
          if (_hxCol.selected) {
            fatherHxDetails = self.buildFamilyHxDetailsString(fatherHxDetails, "Father", _hxCol);
          }
        }
        for (var _i3 = 0; _i3 < self.history.famhx.motherHx.length; _i3++) {
          var _hxCol2 = self.history.famhx.motherHx[_i3];
          self.saveObject.FamilyHistory[_hxCol2.data.ColumnName] = _hxCol2.selected;
          if (_hxCol2.selected) {
            motherHxDetails = self.buildFamilyHxDetailsString(motherHxDetails, "Mother", _hxCol2);
          }
        }
        for (var _i4 = 0; _i4 < self.history.famhx.siblingHx.length; _i4++) {
          var _hxCol3 = self.history.famhx.siblingHx[_i4];
          self.saveObject.FamilyHistory[_hxCol3.data.ColumnName] = _hxCol3.selected;
          if (_hxCol3.selected) {
            siblingHxDetails = self.buildFamilyHxDetailsString(siblingHxDetails, "Sibling", _hxCol3);
          }
        }
        if (fatherHxDetails != null) {
          fatherHxDetails = self.completeHxDetailsString(fatherHxDetails);
          self.saveObject.FamilyHistory.FatherHistTxt = fatherHxDetails;
        }
        if (motherHxDetails != null) {
          motherHxDetails = self.completeHxDetailsString(motherHxDetails);
          self.saveObject.FamilyHistory.MotherHistTxt = motherHxDetails;
        }
        if (siblingHxDetails != null) {
          siblingHxDetails = self.completeHxDetailsString(siblingHxDetails);
          self.saveObject.FamilyHistory.SiblingHistTxt = siblingHxDetails;
        }
        self.saveObject.FamilyHistory.FatherNoSigHist = self.history.famhx.fatherNoHx.selected;
        self.saveObject.FamilyHistory.MotherNoSigHist = self.history.famhx.motherNoHx.selected;
        self.saveObject.FamilyHistory.SiblingNoSigHist = self.history.famhx.siblingNoHx.selected;

        if (self.updateFatherOther || self.history.famhx.fatherHx.other && self.history.famhx.fatherHx.other.length > 0) {
          self.saveObject.FamilyHistory.DiseaseSumFather = self.history.famhx.fatherHx.other.toString();
        }
        if (self.updateMotherOther || self.history.famhx.motherHx.other && self.history.famhx.motherHx.other.length > 0) {
          self.saveObject.FamilyHistory.DiseaseSumMother = self.history.famhx.motherHx.other.toString();
        }
        if (self.updateSiblingOther || self.history.famhx.siblingHx.other && self.history.famhx.siblingHx.other.length > 0) {
          self.saveObject.FamilyHistory.DiseaseSumSiblingF = self.history.famhx.siblingHx.other.toString();
        }

        var rosResultsForConcatenation = [];
        for (var _i5 = 0; _i5 < self.history.ros.length; _i5++) {
          var item = self.history.ros[_i5];
          for (var r = 0; r < item.data.length; r++) {
            var d = item.data[r];
            self.saveObject.ReviewOfSystems[d.data.ColumnName] = d.selected;
            if (d.selected) {
              var toConcat = {
                "name": d.name.toLowerCase(),
                "system": item.category
              };
              rosResultsForConcatenation.push(toConcat);
            }
          }
        }

        var rosConcatObj = self.concatenateRosSystems(rosResultsForConcatenation);
        self.saveObject.ReviewOfSystems.ROSConstText = rosConcatObj.const;
        self.saveObject.ReviewOfSystems.ROSEyesText = rosConcatObj.eyes;
        self.saveObject.ReviewOfSystems.ROSENMTText = rosConcatObj.enmt;
        self.saveObject.ReviewOfSystems.ROSCardioText = rosConcatObj.cardio;
        self.saveObject.ReviewOfSystems.ROSResText = rosConcatObj.resp;
        self.saveObject.ReviewOfSystems.ROSGasText = rosConcatObj.gastro;
        self.saveObject.ReviewOfSystems.ROSGenText = rosConcatObj.genito;
        self.saveObject.ReviewOfSystems.ROSMuscText = rosConcatObj.musc;
        self.saveObject.ReviewOfSystems.ROSNeuroText = rosConcatObj.neuro;
        self.saveObject.ReviewOfSystems.ROSPsychText = rosConcatObj.psych;
        self.saveObject.ReviewOfSystems.ROSEndoText = rosConcatObj.endo;
        self.saveObject.ReviewOfSystems.ROSHemaText = rosConcatObj.hemato;
        self.saveObject.ReviewOfSystems.ROSImmuText = rosConcatObj.immune;
        self.saveObject.ReviewOfSystems.ROSSkinText = rosConcatObj.skin;

        var socHxArray = Object.entries(self.history.sochx);
        for (var _i6 = 0; _i6 < socHxArray.length; _i6++) {
          var _item = socHxArray[_i6];
          var key = _item[0];
          var data = _item[1].data;
          var obj = _item[1];
          if (obj.hasOwnProperty('selected')) {
            self.saveObject.SocialHistory[key] = obj.selected;
          } else {
            if (obj.selectedOption != null) {
              self.saveObject.SocialHistory[key] = obj.selectedOption;
            }
          }
        }

        for (var s = 0; s < self.history.sochx.substances.length; s++) {
          var sub = self.history.sochx.substances[s];

          if (sub.substanceType == 'Caffeine') {
            self.saveObject.SocialHistory['caffine_Y'] = true;
            self.saveObject.SocialHistory['caffine_N'] = false;
            self.saveObject.SocialHistory['Caffeine_Type'] = sub.selectedValue;
          } else if (sub.substanceType == 'Illicit Drugs') {
            self.saveObject.SocialHistory['drug_Y'] = true;
            self.saveObject.SocialHistory['drug_N'] = false;
            self.saveObject.SocialHistory['drug_type'] = sub.selectedValue;
          } else if (sub.substanceType == 'Tobacco') {
            self.saveObject.SocialHistory['tobacco_Y'] = true;
            self.saveObject.SocialHistory['tobacco_N'] = false;
            self.saveObject.SocialHistory['tobacco_type'] = sub.selectedValue;
          } else if (sub.substanceType == 'Alcohol') {
            self.saveObject.SocialHistory['alcohol_Y'] = true;
            self.saveObject.SocialHistory['alcohol_N'] = false;
            self.saveObject.SocialHistory['Alcohol_Type'] = sub.selectedValue;
          }
          self.populateSubstanceObjectWithFrequency(self.saveObject.SocialHistory, sub.substanceType, sub.selectedUsageOption);
        }

        socHxDetails = self.buildSocHxString(self.saveObject.SocialHistory);
        self.saveObject.SocialHistory.soc_hx = socHxDetails;

        var dialog = self.helper.createNoty("Saving History...", 1000);
        dialog.show();

        var todayDate = (0, _moment2.default)(self.date).format('MM/DD/YYYY');
        var socDate = (0, _moment2.default)(self.saveObject.SocialHistory.ExamDateTime).format('MM/DD/YYYY');
        var pxDate = (0, _moment2.default)(self.saveObject.PatientHistory.ExamDateTime).format('MM/DD/YYYY');
        var fxDate = (0, _moment2.default)(self.saveObject.FamilyHistory.ExamDateTime).format('MM/DD/YYYY');
        var rosDate = (0, _moment2.default)(self.saveObject.ReviewOfSystems.ExamDateTime).format('MM/DD/YYYY');

        if (todayDate != socDate || todayDate != pxDate || todayDate != fxDate || todayDate != rosDate) {
          self.saveObject.SocialHistory.HistoryID = 0;
          self.saveObject.PatientHistory.HistoryID = 0;
          self.saveObject.FamilyHistory.HistoryID = 0;
          self.saveObject.ReviewOfSystems.HistoryID = 0;
          self.saveObject.SocialHistory.ExamDateTime = todayDate;
          self.saveObject.PatientHistory.ExamDateTime = todayDate;
          self.saveObject.FamilyHistory.ExamDateTime = todayDate;
          self.saveObject.ReviewOfSystems.ExamDateTime = todayDate;
        }

        self.saveObject.SocialHistory.Date_Reviewed = todayDate;
        self.saveObject.PatientHistory.Date_review = todayDate;
        self.saveObject.FamilyHistory.PFHX_Reviewed = todayDate;
        self.saveObject.ReviewOfSystems.Date_Reviewed = todayDate;

        self.saveObject.SocialHistory.IsComplete = true;
        self.saveObject.PatientHistory.IsComplete = true;
        self.saveObject.FamilyHistory.IsComplete = true;
        self.saveObject.ReviewOfSystems.IsComplete = true;

        if (self.saveObject.SocialHistory.HistoryID == 0 && self.saveObject.PatientHistory.HistoryID == 0 && self.saveObject.FamilyHistory.HistoryID == 0 && self.saveObject.ReviewOfSystems.HistoryID == 0) {
          self.data.createPatientHistory(self.saveObject, function (res) {
            dialog.close();

            if (res != false) {
              self.saveObject.SocialHistory.HistoryID == res.SocialHistory.HistoryID;
              self.saveObject.PatientHistory.HistoryID == res.PatientHistory.HistoryID;
              self.saveObject.FamilyHistory.HistoryID == res.FamilyHistory.HistoryID;
              self.saveObject.ReviewOfSystems.HistoryID == res.ReviewOfSystems.HistoryID;
            }

            self.hasSaved = false;
          });
        } else {
          self.data.updatePatientHistory(self.saveObject, function (res) {
            dialog.close();

            self.hasSaved = false;
          });
        }
      } else {
        self.hasSaved = false;
      }
    };

    PatientHistory.prototype.concatenateRosSystems = function concatenateRosSystems(rosConcatResultsArray) {
      var self = this;

      var cardChanged = false;
      var constChanged = false;
      var emntChanged = false;
      var endoChanged = false;
      var eyesChanged = false;
      var gastroChanged = false;
      var genitoChanged = false;
      var hematoChanged = false;
      var immuneChanged = false;
      var muscChanged = false;
      var neuroChanged = false;
      var psychChanged = false;
      var respChanged = false;
      var skinChanged = false;

      var rosImmuneDetails = "No skin rashes, or allergies to food or medication";
      var rosConstDetails = "No fever, fatigue, weakness or sudden weight change";
      var rosEyesDetails = "Normal visual acuity, no blurred vision or excessive tearing";
      var rosEnmtDetails = "Normal auditory acuity, no nasal discharge or difficulty swallowing";
      var rosCardioDetails = "No chest pains or palpatations or high blood pressure";
      var rosResDetails = "No shortness of breath or cough";
      var rosGastroDetails = "No abdominal pain, heartburn, hepatitis or bleeding";
      var rosGenitoDetails = "No dysuria or hmaturia";
      var rosMusculoDetails = "No generalized joint pain, stiffness, weakness or muscle pain";
      var rosNeuroDetails = "No headache, dizziness or memory loss";
      var rosPsychDetails = "No mood change, depression or nervousness";
      var rosEndoDetails = "No thyroid enlargement, sweating or excessive thirst";
      var rosHematDetails = "No bruising, swollen glands or anemia";
      var rosSkinDetails = "No rashes or jaundice";

      for (var i = 0; i < rosConcatResultsArray.length; i++) {
        var ros = rosConcatResultsArray[i];

        if (ros.name != "negative") {
          switch (ros.system) {
            case "Cardiovascular":
              if (!cardChanged) {
                rosCardioDetails = "";
              }
              rosCardioDetails += ros.name + ", ";
              cardChanged = true;
              break;
            case "Constitutional":
              if (!constChanged) {
                rosConstDetails = "";
              }
              rosConstDetails += ros.name + ", ";
              constChanged = true;
              break;
            case "EMNT":
              if (!emntChanged) {
                rosEnmtDetails = "";
              }
              rosEnmtDetails += ros.name + ", ";
              emntChanged = true;
              break;
            case "Endocrine":
              if (!endoChanged) {
                rosEndoDetails = "";
              }
              rosEndoDetails += ros.name + ", ";
              endoChanged = true;
              break;
            case "Eyes":
              if (!eyesChanged) {
                rosEyesDetails = "";
              }
              rosEyesDetails += ros.name + ", ";
              eyesChanged = true;
              break;
            case "Gastrointestinal":
              if (!gastroChanged) {
                rosGastroDetails = "";
              }
              rosGastroDetails += ros.name + ", ";
              gastroChanged = true;
              break;
            case "Genitourinary":
              if (!genitoChanged) {
                rosGenitoDetails = "";
              }
              rosGenitoDetails += ros.name + ", ";
              genitoChanged = true;
              break;
            case "Hematolymphatic":
              if (!hematoChanged) {
                rosHematDetails = "";
              }
              rosHematDetails += ros.name + ", ";
              hematoChanged = true;
              break;
            case "Immunologic":
              if (!immuneChanged) {
                rosImmuneDetails = "";
              }
              rosImmuneDetails += ros.name + ", ";
              immuneChanged = true;
              break;
            case "Musculoskeletal":
              if (!muscChanged) {
                rosMusculoDetails = "";
              }
              rosMusculoDetails += ros.name + ", ";
              muscChanged = true;
              break;
            case "Neurologic":
              if (!neuroChanged) {
                rosNeuroDetails = "";
              }
              rosNeuroDetails += ros.name + ", ";
              neuroChanged = true;
              break;
            case "Psychiatric":
              if (!psychChanged) {
                rosPsychDetails = "";
              }
              rosPsychDetails += ros.name + ", ";
              psychChanged = true;
              break;
            case "Respiratory":
              if (!respChanged) {
                rosResDetails = "";
              }
              rosResDetails += ros.name + ", ";
              respChanged = true;
              break;
            case "Skin":
              if (!skinChanged) {
                rosSkinDetails = "";
              }
              rosSkinDetails += ros.name + ", ";
              skinChanged = true;
              break;
          }
        }
      }

      var patientReports = "Patient reports history of ";
      if (cardChanged) {
        rosCardioDetails = self.addCommaAndToConcatString(rosCardioDetails);
        rosCardioDetails = patientReports + rosCardioDetails + ".";
      }
      if (constChanged) {
        rosConstDetails = self.addCommaAndToConcatString(rosConstDetails);
        rosConstDetails = patientReports + rosConstDetails + ".";
      }
      if (emntChanged) {
        rosEnmtDetails = self.addCommaAndToConcatString(rosEnmtDetails);
        rosEnmtDetails = patientReports + rosEnmtDetails + ".";
      }
      if (endoChanged) {
        rosEndoDetails = self.addCommaAndToConcatString(rosEndoDetails);
        rosEndoDetails = patientReports + rosEndoDetails + ".";
      }
      if (eyesChanged) {
        rosEyesDetails = self.addCommaAndToConcatString(rosEyesDetails);
        rosEyesDetails = patientReports + rosEyesDetails + ".";
      }
      if (gastroChanged) {
        rosGastroDetails = self.addCommaAndToConcatString(rosGastroDetails);
        rosGastroDetails = patientReports + rosGastroDetails + ".";
      }
      if (genitoChanged) {
        rosGenitoDetails = self.addCommaAndToConcatString(rosGenitoDetails);
        rosGenitoDetails = patientReports + rosGenitoDetails + ".";
      }
      if (hematoChanged) {
        rosHematDetails = self.addCommaAndToConcatString(rosHematDetails);
        rosHematDetails = patientReports + rosHematDetails + ".";
      }
      if (immuneChanged) {
        rosImmuneDetails = self.addCommaAndToConcatString(rosImmuneDetails);
        rosImmuneDetails = patientReports + rosImmuneDetails + ".";
      }
      if (muscChanged) {
        rosMusculoDetails = self.addCommaAndToConcatString(rosMusculoDetails);
        rosMusculoDetails = patientReports + rosMusculoDetails + ".";
      }
      if (neuroChanged) {
        rosNeuroDetails = self.addCommaAndToConcatString(rosNeuroDetails);
        rosNeuroDetails = patientReports + rosNeuroDetails + ".";
      }
      if (psychChanged) {
        rosPsychDetails = self.addCommaAndToConcatString(rosPsychDetails);
        rosPsychDetails = patientReports + rosPsychDetails + ".";
      }
      if (respChanged) {
        rosResDetails = self.addCommaAndToConcatString(rosResDetails);
        rosResDetails = patientReports + rosResDetails + ".";
      }
      if (skinChanged) {
        rosSkinDetails = self.addCommaAndToConcatString(rosSkinDetails);
        rosSkinDetails = patientReports + rosSkinDetails + ".";
      }

      return {
        skin: rosSkinDetails,
        resp: rosResDetails,
        psych: rosPsychDetails,
        neuro: rosNeuroDetails,
        musc: rosMusculoDetails,
        immune: rosImmuneDetails,
        hemato: rosHematDetails,
        genito: rosGenitoDetails,
        gastro: rosGastroDetails,
        eyes: rosEyesDetails,
        endo: rosEndoDetails,
        enmt: rosEnmtDetails,
        const: rosConstDetails,
        cardio: rosCardioDetails
      };
    };

    PatientHistory.prototype.addCommaAndToConcatString = function addCommaAndToConcatString(concatString) {
      concatString = concatString.trimEnd();
      var split = concatString.split(",");
      var split = _.filter(split, function (s) {
        return s.length > 0;
      });

      if (split.length > -1) {
        var uses = "";
        for (var i = 0; i < split.length; i++) {

          if (split[i].length == 0) {
            continue;
          }
          var insert = i + 1 == split.length - 1 ? " and " : ", ";
          if (split.length == 1) {
            uses += split[i].trim();
          } else {
            uses += split[i].trim() + insert;
          }
        }
        concatString = uses.trim();
        if (split.length > 1) {
          concatString = concatString.substring(0, concatString.length - 1);
        }
      }
      return concatString;
    };

    PatientHistory.prototype.buildSocHxString = function buildSocHxString(tSOC) {
      var socialhistory = "";

      if (tSOC != null) {
        if (tSOC.hand_dom_R) {
          socialhistory += " Patient is right handed.";
        }
        if (tSOC.hand_dom_L) {
          socialhistory += " Patient is left handed.";
        }
        if (tSOC.Appearance != null) {
          socialhistory += " " + tSOC.Appearance + " ";
        }

        if (tSOC.education != null && tSOC.education.length > 0) {
          socialhistory += " Patient educational level is " + tSOC.education + ".";
        }

        if (tSOC.exercise_freq != null && tSOC.exercise_val != null) {
          socialhistory += " Patient exercises by " + tSOC.exercise_val.toLowerCase();
          socialhistory += " " + tSOC.exercise_freq.toLowerCase() + ".";
        }

        if (tSOC.retired) {
          socialhistory += " Patient is retired.";
        }

        var patientUses = "";

        var patientDenies = "";

        if (tSOC.alcohol_Y) {
          if (tSOC.Alcohol_Type != null && tSOC.Alcohol_Type.length > 2) patientUses += tSOC.Alcohol_Type + "," + " ";else if (tSOC.Alcohol_Type != null && tSOC.Alcohol_Type.length < 2) {
            patientUses += "alcohol, ";
          }
        }

        if (tSOC.alcohol_N) {
          patientDenies += "alcohol, ";
        }

        if (tSOC.caffine_Y) {
          if (tSOC.Caffeine_Type != null && tSOC.Caffeine_Type.length > 2) patientUses += tSOC.Caffeine_Type + ", ";else if (tSOC.Caffeine_Type != null && tSOC.Caffeine_Type.length < 2) {
            patientUses += "caffeine, ";
          }
        }

        if (tSOC.caffine_N) {
          patientDenies += "caffeine, ";
        }

        if (tSOC.drug_Y) {
          if (tSOC.drug_type != null && tSOC.drug_type.length > 2) patientUses += tSOC.drug_type + ", ";else if (tSOC.drug_type != null && tSOC.drug_type.length < 2) {
            patientUses += "illicit drugs, ";
          }
        }
        if (tSOC.drug_N) {
          patientDenies += "illicit drugs, ";
        }

        if (tSOC.tobacco_Y) {
          if (tSOC.tobacco_type != null && tSOC.tobacco_type.length > 2) patientUses += tSOC.tobacco_type + ", ";else if (tSOC.tobacco_type != null && tSOC.tobacco_type.length < 2) {
            patientUses += "tobacco, ";
          }
        }
        if (tSOC.tobacco_Form) {
          patientUses += "former tobacco use, ";
        }

        if (tSOC.tobacco_N) {
          patientDenies += "tobacco, ";
        }

        if (patientUses != null && patientUses != "") {
          patientUses = this.addCommaAndToConcatString(patientUses);


          socialhistory += patientUses + ".";
        }
        if (patientDenies.length > 0) {
          patientDenies = patientDenies.trim();

          patientDenies = patientDenies.substring(0, patientDenies.length - 1);
          var lastComma = patientDenies.lastIndexOf(',');
          if (lastComma > -1) {
            patientDenies = this.insertStringIntoUpdateStringAtIndex(patientDenies, " or", lastComma);
          }
          socialhistory += " Patient does not use " + patientDenies + ".";
        }
      }

      return socialhistory.trim();
    };

    PatientHistory.prototype.insertStringIntoUpdateStringAtIndex = function insertStringIntoUpdateStringAtIndex(string, updateString, index) {
      return string.slice(0, index) + ('' + updateString) + string.slice(index + 1);
    };

    PatientHistory.prototype.removeFromStringWithStartIndexAndLength = function removeFromStringWithStartIndexAndLength(string, index, length) {
      return string.slice(0, index) + string.substring(index + length);
    };

    PatientHistory.prototype.checkForTrailingComma = function checkForTrailingComma(string) {
      var comma = string.substring(string.length - 1, string.length);
      if (comma == ',') {
        return true;
      } else {
        return false;
      }
    };

    PatientHistory.prototype.noMedicalHistoryChecked = function noMedicalHistoryChecked(checked) {
      if (!checked) return;
      for (var i = 0; i < this.history.pathx.hx.length; i++) {
        this.history.pathx.hx[i].selected = false;
      }
    };

    PatientHistory.prototype.noSurgicalHistoryChecked = function noSurgicalHistoryChecked(checked) {
      if (!checked) return;
      for (var i = 0; i < this.history.pathx.surgs.length; i++) {
        this.history.pathx.surgs[i].selected = false;
      }
    };

    PatientHistory.prototype.noFatherHistoryChecked = function noFatherHistoryChecked(checked) {};

    PatientHistory.prototype.noMotherHistoryChecked = function noMotherHistoryChecked(checked) {};

    PatientHistory.prototype.noSiblingHistoryChecked = function noSiblingHistoryChecked(checked) {};

    PatientHistory.prototype.populateSubstanceObjectWithFrequency = function populateSubstanceObjectWithFrequency(sochx, substanceType, usage) {
      if (usage == 'Never') {
        if (substanceType == 'Caffeine') {
          sochx['caff_never'] = true;
          sochx['caff_occ'] = false;
          sochx['caff_daily'] = false;
        } else if (substanceType == 'Illicit Drugs') {
          sochx['drug_never'] = true;
          sochx['drug_occ'] = false;
          sochx['drug_daily'] = false;
        } else if (substanceType == 'Tobacco') {
          sochx['tob_never'] = true;
          sochx['tob_occ'] = false;
          sochx['tob_daily'] = false;
        } else if (substanceType == 'Alcohol') {
          sochx['alc_never'] = true;
          sochx['alc_occ'] = false;
          sochx['alc_daily'] = false;
        }
      } else if (usage == 'Occasionally') {
        if (substanceType == 'Caffeine') {
          sochx['caff_never'] = false;
          sochx['caff_occ'] = true;
          sochx['caff_daily'] = false;
        } else if (substanceType == 'Illicit Drugs') {
          sochx['drug_never'] = false;
          sochx['drug_occ'] = true;
          sochx['drug_daily'] = false;
        } else if (substanceType == 'Tobacco') {
          sochx['tob_never'] = false;
          sochx['tob_occ'] = true;
          sochx['tob_daily'] = false;
        } else if (substanceType == 'Alcohol') {
          sochx['alc_never'] = false;
          sochx['alc_occ'] = true;
          sochx['alc_daily'] = false;
        }
      } else if (usage == 'Daily') {
        if (substanceType == 'Caffeine') {
          sochx['caff_never'] = false;
          sochx['caff_occ'] = false;
          sochx['caff_daily'] = true;
        } else if (substanceType == 'Illicit Drugs') {
          sochx['drug_never'] = false;
          sochx['drug_occ'] = false;
          sochx['drug_daily'] = true;
        } else if (substanceType == 'Tobacco') {
          sochx['tob_never'] = false;
          sochx['tob_occ'] = false;
          sochx['tob_daily'] = true;
        } else if (substanceType == 'Alcohol') {
          sochx['alc_never'] = false;
          sochx['alc_occ'] = false;
          sochx['alc_daily'] = true;
        }
      } else if (usage == 'Former') {
        if (substanceType == 'Tobacco') {
          sochx['tobacco_Form'] = true;
        }
      }
    };

    PatientHistory.prototype.toggleEdit = function toggleEdit() {
      var self = this;
      self.edit = self.edit ? false : true;

      if (self.edit == true) {
        self.saveHx = true;
        self.demographics.home.demographicsNeedsSave = true;
      }

      if (!self.edit) {
        for (var i = 0; i < this.history.pathx.surgs.length; i++) {
          if (this.history.pathx.surgs[i].selected == true) {
            this.history.pathx.surgs[i].visible = true;
          } else {
            this.history.pathx.surgs[i].visible = false;
          }
          this.history.pathx.surgs[i].editing = self.edit;
        }
        for (var _i7 = 0; _i7 < this.history.pathx.hx.length; _i7++) {
          if (this.history.pathx.hx[_i7].selected == true) {
            this.history.pathx.hx[_i7].visible = true;
          } else {
            this.history.pathx.hx[_i7].visible = false;
          }
          this.history.pathx.hx[_i7].editing = self.edit;
        }

        for (var _i8 = 0; _i8 < this.history.famhx.fatherHx.length; _i8++) {
          if (this.history.famhx.fatherHx[_i8].selected == true) {
            this.history.famhx.fatherHx[_i8].visible = true;
          } else {
            this.history.famhx.fatherHx[_i8].visible = false;
          }
          this.history.famhx.fatherHx[_i8].editing = self.edit;
        }
        for (var _i9 = 0; _i9 < this.history.famhx.motherHx.length; _i9++) {
          if (this.history.famhx.motherHx[_i9].selected == true) {
            this.history.famhx.motherHx[_i9].visible = true;
          } else {
            this.history.famhx.motherHx[_i9].visible = false;
          }
          this.history.famhx.motherHx[_i9].editing = self.edit;
        }
        for (var _i10 = 0; _i10 < this.history.famhx.siblingHx.length; _i10++) {
          if (this.history.famhx.siblingHx[_i10].selected == true) {
            this.history.famhx.siblingHx[_i10].visible = true;
          } else {
            this.history.famhx.siblingHx[_i10].visible = false;
          }
          this.history.famhx.siblingHx[_i10].editing = self.edit;
        }
      } else {
        for (var _i11 = 0; _i11 < this.history.pathx.surgs.length; _i11++) {
          this.history.pathx.surgs[_i11].visible = true;
          this.history.pathx.surgs[_i11].editing = self.edit;
        }
        for (var _i12 = 0; _i12 < this.history.pathx.hx.length; _i12++) {
          this.history.pathx.hx[_i12].visible = true;
          this.history.pathx.hx[_i12].editing = self.edit;
        }
        for (var _i13 = 0; _i13 < this.history.famhx.fatherHx.length; _i13++) {
          this.history.famhx.fatherHx[_i13].visible = true;
          this.history.famhx.fatherHx[_i13].editing = self.edit;
        }
        for (var _i14 = 0; _i14 < this.history.famhx.motherHx.length; _i14++) {
          this.history.famhx.motherHx[_i14].visible = true;
          this.history.famhx.motherHx[_i14].editing = self.edit;
        }
        for (var _i15 = 0; _i15 < this.history.famhx.siblingHx.length; _i15++) {
          this.history.famhx.siblingHx[_i15].visible = true;
          this.history.famhx.siblingHx[_i15].editing = self.edit;
        }
      }
      this.history.pathx.noMedHistory.editing = self.edit;
      this.history.pathx.noSurgHistory.editing = self.edit;
      this.history.pathx.noMedHistory.visible = self.edit ? true : this.history.pathx.noMedHistory.selected;
      this.history.pathx.noSurgHistory.visible = self.edit ? true : this.history.pathx.noSurgHistory.selected;

      this.history.famhx.fatherNoHx.editing = self.edit;
      this.history.famhx.motherNoHx.editing = self.edit;
      this.history.famhx.siblingNoHx.editing = self.edit;
      this.history.famhx.fatherNoHx.visible = self.edit ? true : this.history.famhx.fatherNoHx.selected;
      this.history.famhx.motherNoHx.visible = self.edit ? true : this.history.famhx.motherNoHx.selected;
      this.history.famhx.siblingNoHx.visible = self.edit ? true : this.history.famhx.siblingNoHx.selected;

      var sochxArray = Object.entries(this.history.sochx);
      for (var s = 0; s < sochxArray.length; s++) {
        var key = sochxArray[s][0];
        var obj = sochxArray[s][1];
        if (obj.hasOwnProperty('selected')) {
          if (!self.edit) {
            this.history.sochx[key].visible = obj.selected ? true : false;
          } else {
            this.history.sochx[key].visible = true;
          }
        } else {
          var hasValue = false;
          if (obj.selectedOption != null && obj.selectedOption.length > 0) {
            hasValue = true;
          }
          this.history.sochx[key].visible = !self.edit ? hasValue ? true : false : true;
        }
        this.history.sochx[key].editing = self.edit;
      }

      if (!self.edit) {
        for (var _i16 = 0; _i16 < this.history.ros.length; _i16++) {
          var rosCategory = this.history.ros[_i16];
          for (var c = 0; c < rosCategory.data.length; c++) {
            if (rosCategory.data[c].selected == true) {
              rosCategory.data[c].visible = true;
            } else {
              rosCategory.data[c].visible = false;
            }
            rosCategory.data[c].editing = self.edit;
          }
        }
      } else {
        for (var _i17 = 0; _i17 < this.history.ros.length; _i17++) {
          var _rosCategory = this.history.ros[_i17];
          for (var _c = 0; _c < _rosCategory.data.length; _c++) {
            _rosCategory.data[_c].visible = true;
            _rosCategory.data[_c].editing = self.edit;
          }
        }
      }

      this.history.allergies.noKnownDrugAllergies.editing = self.edit;
      if (!self.edit) {
        this.history.allergies.noKnownDrugAllergies.visible = this.history.allergies.noKnownDrugAllergies.selected;
      } else {
        this.history.allergies.noKnownDrugAllergies.visible = true;
      }

      this.history.meds.noCurrentMeds.editing = self.edit;
      if (!self.edit) {
        this.history.meds.noCurrentMeds.visible = this.history.meds.noCurrentMeds.selected;
      } else {
        this.history.meds.noCurrentMeds.visible = true;
      }

      self.event.publish('historyEdit', self.edit);
    };

    PatientHistory.prototype.toggleFullscreen = function toggleFullscreen() {
      this.demographics.toggleFullscreen();
    };

    PatientHistory.prototype.createSocHxObj = function createSocHxObj(data) {

      var self = this;

      var sochx = {};

      for (var i = 0; i < data.length; i++) {
        var d = data[i];
        if (d.ColumnName == 'All_Sub_Neg' || d.ColumnName == 'hand_dom_R' || d.ColumnName == 'hand_dom_L' || d.ColumnName == 'pregnant') {
          sochx[d.ColumnName] = new HistoryButton(d.ColumnFriendlyName, d, true, false);

          if (d.ColumnName == 'All_Sub_Neg') {
            sochx[d.ColumnName].callback = self.allSubNegClick;
            sochx[d.ColumnName].parent = self;
          }
        } else {
          sochx[d.ColumnName] = new PicklistItem(d);
        }
      }

      sochx.substances = [];

      return sochx;
    };

    PatientHistory.prototype.rosItemClick = function rosItemClick(val) {
      var self = this;

      if (!val.selected) return;

      var foundItem = null;
      var foundList = [];

      for (var i = 0; i < self.parent.history.ros.length; i++) {
        var category = self.parent.history.ros[i].data;

        foundItem = _.find(category, function (c) {
          return c.data.ColumnName == val.data.ColumnName;
        });
        if (foundItem) {
          foundList = category;
          break;
        }
      }

      if (foundList.length > 0) {
        for (var _i18 = 0; _i18 < foundList.length; _i18++) {
          if (foundList[_i18].name.toLowerCase().includes('neg')) {
            foundList[_i18].selected = false;
            break;
          }
        }
      }
    };

    PatientHistory.prototype.rosNegativeClick = function rosNegativeClick(val) {
      var self = this;

      if (!val.selected) return;

      var foundItem = null;
      var foundList = [];

      for (var i = 0; i < self.parent.history.ros.length; i++) {
        var category = self.parent.history.ros[i].data;

        foundItem = _.find(category, function (c) {
          return c.data.ColumnName == val.data.ColumnName;
        });
        if (foundItem) {
          foundList = category;
          break;
        }
      }

      if (foundList.length > 0) {
        for (var _i19 = 0; _i19 < foundList.length; _i19++) {
          if (foundList[_i19].name != val.name) {
            foundList[_i19].selected = false;
          }
        }
      }
    };

    PatientHistory.prototype.allSubNegClick = function allSubNegClick(val) {
      var self = this;

      if (!val.selected) return;

      self.parent.history.sochx.substances = [];
      self.parent.saveObject.SocialHistory.All_Sub_Neg = 1;

      self.parent.saveObject.SocialHistory.alcohol_N = 1;
      self.parent.saveObject.SocialHistory.alcohol_Y = 0;
      self.parent.saveObject.SocialHistory.caffine_N = 1;
      self.parent.saveObject.SocialHistory.caffine_Y = 0;
      self.parent.saveObject.SocialHistory.drug_N = 1;
      self.parent.saveObject.SocialHistory.drug_Y = 0;
      self.parent.saveObject.SocialHistory.tobacco_Form = 0;
      self.parent.saveObject.SocialHistory.tobacco_N = 1;
      self.parent.saveObject.SocialHistory.tobacco_Y = 0;

      self.parent.saveObject.SocialHistory.tobacco_type = '';
      self.parent.saveObject.SocialHistory.alcohol_amount = '';
      self.parent.saveObject.SocialHistory.caffeine_amount = '';
      self.parent.saveObject.SocialHistory.drug_type = '';
      self.parent.saveObject.SocialHistory.Alcohol_Type = '';
      self.parent.saveObject.SocialHistory.Caffeine_Type = '';
      self.parent.saveObject.SocialHistory.Tobacco_Amount = '';

      self.parent.saveObject.SocialHistory.alc_never = 0;
      self.parent.saveObject.SocialHistory.alc_occ = 0;
      self.parent.saveObject.SocialHistory.alc_daily = 0;
      self.parent.saveObject.SocialHistory.tob_never = 0;
      self.parent.saveObject.SocialHistory.tob_occ = 0;
      self.parent.saveObject.SocialHistory.tob_daily = 0;
      self.parent.saveObject.SocialHistory.caff_never = 0;
      self.parent.saveObject.SocialHistory.caff_occ = 0;
      self.parent.saveObject.SocialHistory.caff_daily = 0;
      self.parent.saveObject.SocialHistory.drug_never = 0;
      self.parent.saveObject.SocialHistory.drug_occ = 0;
      self.parent.saveObject.SocialHistory.drug_daily = 0;

      self.parent.saveObject.SocialHistory.tob_unknown = 0;
      self.parent.saveObject.SocialHistory.tob_light = 0;
      self.parent.saveObject.SocialHistory.tob_heavy = 0;
    };

    PatientHistory.prototype.checkWorkflowHistory = function checkWorkflowHistory() {
      var self = this;

      if (self.displayPatHx) {
        self.phxReviewed = true;
      } else if (self.displaySocHx) {
        self.socHxReviewed = true;
      } else if (self.displayFamHx) {
        self.famhxReviewed = true;
      } else if (self.displayRos) {
        self.rosReviewed = true;
      }

      if (self.famhxReviewed && self.phxReviewed && self.socHxReviewed && self.rosReviewed) {
        self.saveHx = true;
        self.saveObject.SocialHistory.IsComplete = true;
        self.saveObject.PatientHistory.IsComplete = true;
        self.saveObject.FamilyHistory.IsComplete = true;
        self.saveObject.ReviewOfSystems.IsComplete = true;
        self.saveHistory();
      }
    };

    PatientHistory.prototype.toggleTab = function toggleTab(tab) {
      if (tab == "PATIENTHX") {
        this.displayPatHx = true;
        this.displayFamHx = false;
        this.displaySocHx = false;
        this.displayMeds = false;
        this.displayRos = false;
        this.displayVitals = false;
      } else if (tab == "SOCIALHX") {
        this.displayPatHx = false;
        this.displayFamHx = false;
        this.displaySocHx = true;
        this.displayMeds = false;
        this.displayRos = false;
        this.displayVitals = false;
      } else if (tab == "FAMILYHX") {
        this.displayPatHx = false;
        this.displayFamHx = true;
        this.displaySocHx = false;
        this.displayMeds = false;
        this.displayRos = false;
        this.displayVitals = false;
      } else if (tab == "MEDS") {
        this.displayPatHx = false;
        this.displayFamHx = false;
        this.displaySocHx = false;
        this.displayMeds = true;
        this.displayRos = false;
        this.displayVitals = false;
      } else if (tab == "ROS") {
        this.displayPatHx = false;
        this.displayFamHx = false;
        this.displaySocHx = false;
        this.displayMeds = false;
        this.displayRos = true;
        this.displayVitals = false;
      } else if (tab == "VITALS") {
        this.displayPatHx = false;
        this.displayFamHx = false;
        this.displaySocHx = false;
        this.displayMeds = false;
        this.displayRos = false;
        this.displayVitals = true;
      }
    };

    PatientHistory.prototype.setupReportingColumnInfo = function setupReportingColumnInfo(callback) {
      var self = this;

      self.history.pathx = {};
      self.history.famhx = {};
      self.history.sochx = {};
      self.history.ros = [];
      self.history.vitals = {};
      self.history.allergies = {};
      self.history.meds = {};

      self.history.allergies.noKnownDrugAllergies = new HistoryButton("No Known Drug Allergies", true);
      self.history.meds.noCurrentMeds = new HistoryButton("No Current Meds", true);

      self.data.getReportingColumnInfoWithCategory("Patient Hx", function (res) {
        var dx = _.filter(res, function (d) {
          return d.ColumnName.toUpperCase().startsWith('DX');
        });
        var surg = _.filter(res, function (d) {
          return d.ColumnName.toUpperCase().startsWith('SG');
        });
        self.history.pathx.surgs = [];
        self.history.pathx.hx = [];

        var noMedHx = _.find(res, function (d) {
          return d.ColumnName == 'No_Signif_Med_Hx';
        });
        var noSurgHx = _.find(res, function (d) {
          return d.ColumnName == 'No_Signif_Surg_Hx';
        });

        self.history.pathx.noMedHistory = new HistoryButton(noMedHx.ColumnFriendlyName, noMedHx, true);
        self.history.pathx.noSurgHistory = new HistoryButton(noSurgHx.ColumnFriendlyName, noSurgHx, true);

        for (var i = 0; i < dx.length; i++) {
          self.history.pathx.hx.push(new HistoryButton(dx[i].ColumnFriendlyName, dx[i]));
        }
        for (var _i20 = 0; _i20 < surg.length; _i20++) {
          self.history.pathx.surgs.push(new HistoryButton(surg[_i20].ColumnFriendlyName, surg[_i20]));
        }

        self.data.getReportingColumnInfoWithCategory("Patient Family Hx", function (res) {
          var filtered = _.filter(res, function (d) {
            return d.ColumnName.toUpperCase().startsWith('FDX');
          });

          var father = _.filter(filtered, function (f) {
            return f.ColumnName.toUpperCase().includes('FATHER');
          });
          var mother = _.filter(filtered, function (f) {
            return f.ColumnName.toUpperCase().includes('MOTHER');
          });
          var sibling = _.filter(filtered, function (f) {
            return f.ColumnName.toUpperCase().includes('SIBLING');
          });

          self.history.famhx.fatherHx = [];
          self.history.famhx.motherHx = [];
          self.history.famhx.siblingHx = [];

          var noFatherHx = _.find(res, function (d) {
            return d.ColumnName == 'FatherNoSigHist';
          });
          self.history.famhx.fatherNoHx = new HistoryButton(noFatherHx.ColumnFriendlyName, noFatherHx, true);

          var noMotherHx = _.find(res, function (d) {
            return d.ColumnName == 'MotherNoSigHist';
          });
          self.history.famhx.motherNoHx = new HistoryButton(noMotherHx.ColumnFriendlyName, noMotherHx, true);

          var noSiblingHx = _.find(res, function (d) {
            return d.ColumnName == 'SiblingNoSigHist';
          });
          self.history.famhx.siblingNoHx = new HistoryButton(noSiblingHx.ColumnFriendlyName, noSiblingHx, true);

          for (var _i21 = 0; _i21 < father.length; _i21++) {
            self.history.famhx.fatherHx.push(new HistoryButton(father[_i21].ColumnFriendlyName, father[_i21]));
          }
          for (var _i22 = 0; _i22 < mother.length; _i22++) {
            self.history.famhx.motherHx.push(new HistoryButton(mother[_i22].ColumnFriendlyName, mother[_i22]));
          }
          for (var _i23 = 0; _i23 < sibling.length; _i23++) {
            self.history.famhx.siblingHx.push(new HistoryButton(sibling[_i23].ColumnFriendlyName, sibling[_i23]));
          }

          self.data.getReportingColumnInfoWithCategory("Soc History", function (res) {
            self.history.sochx = self.createSocHxObj(res);

            self.data.getReportingColumnInfoWithCategory("Review of Systems", function (res) {
              var prefixes = ['card', 'con', 'emnt', 'endo', 'eyes', 'gast', 'genito', 'hemato', 'immun', 'musc', 'neuro', 'psych', 'resp', 'skin'];

              var _loop7 = function _loop7(_i24) {
                var rosObj = {};
                rosObj.data = [];
                rosObj.displayBody = true;
                rosObj.category = self.getRosCategoryFromPrefix(prefixes[_i24]);
                var r = _.filter(res, function (d) {
                  if (prefixes[_i24] == 'hemato') {
                    return d.ColumnName.toLowerCase().startsWith(prefixes[_i24]) || d.ColumnName.toLowerCase().startsWith('hema');
                  } else {
                    return d.ColumnName.toLowerCase().startsWith(prefixes[_i24]);
                  }
                });

                for (var _i25 = 0; _i25 < r.length; _i25++) {

                  var hBtn = new HistoryButton(r[_i25].ColumnFriendlyName, r[_i25]);

                  if (r[_i25].ColumnName.toLowerCase().includes('neg')) {
                    hBtn.callback = self.rosNegativeClick;
                    hBtn.parent = self;
                    rosObj.data.splice(0, 0, hBtn);
                  } else {
                    hBtn.callback = self.rosItemClick;
                    hBtn.parent = self;
                    rosObj.data.push(hBtn);
                  }
                }
                self.history.ros.push(rosObj);
              };

              for (var _i24 = 0; _i24 < prefixes.length; _i24++) {
                _loop7(_i24);
              }

              self.data.getReportingColumnInfoWithCategory("Vital Sign", function (res) {

                for (var v = 0; v < res.length; v++) {
                  var vi = res[v];
                  self.history.vitals[vi.ColumnName] = new InputItem(vi.ColumnFriendlyName, null, vi);
                }

                callback(self.history);
              });
            });
          });
        });
      });
    };

    PatientHistory.prototype.getRosCategoryFromPrefix = function getRosCategoryFromPrefix(prefix) {
      if (prefix == 'card') {
        return 'Cardiovascular';
      }
      if (prefix == 'con') {
        return 'Constitutional';
      }
      if (prefix == 'emnt') {
        return 'EMNT';
      }
      if (prefix == 'endo') {
        return 'Endocrine';
      }
      if (prefix == 'eyes') {
        return 'Eyes';
      }
      if (prefix == 'gast') {
        return 'Gastrointestinal';
      }
      if (prefix == 'genito') {
        return 'Genitourinary';
      }
      if (prefix == 'hemato') {
        return 'Hematolymphatic';
      }
      if (prefix == 'immun') {
        return 'Immunologic';
      }
      if (prefix == 'musc') {
        return 'Musculoskeletal';
      }
      if (prefix == 'neuro') {
        return 'Neurologic';
      }
      if (prefix == 'psych') {
        return 'Psychiatric';
      }
      if (prefix == 'resp') {
        return 'Respiratory';
      }
      if (prefix == 'skin') {
        return 'Skin';
      }
    };

    PatientHistory.prototype.otherDiseaseDeleteClick = function otherDiseaseDeleteClick(d) {
      var self = this;
      self.saveHx = true;
      self.hasSaved = false;
      self.demographics.home.demographicsNeedsSave = true;
      for (var i = 0; i < self.history.pathx.otherDiseaseHx.length; i++) {
        if (d == self.history.pathx.otherDiseaseHx[i]) {
          self.history.pathx.otherDiseaseHx.splice(i, 1);
        }
      }
    };

    PatientHistory.prototype.otherDiseaseAddClick = function otherDiseaseAddClick() {
      var self = this;
      if (self.otherDiseaseInput != null) {
        var found = _.find(self.history.pathx.otherDiseaseHx, function (o) {
          return o.toUpperCase() == self.otherDiseaseInput.toUpperCase();
        });
        if (found) return;
        self.history.pathx.otherDiseaseHx.push(self.otherDiseaseInput);
      } else if (self.otherDiseaseList.selectedOption != null) {
        var _found = _.find(self.history.pathx.otherDiseaseHx, function (o) {
          return o.toUpperCase() == self.otherDiseaseList.selectedOption.Description1.toUpperCase();
        });
        if (_found) return;
        self.history.pathx.otherDiseaseHx.push(self.otherDiseaseList.selectedOption.Description1);
      }
    };

    PatientHistory.prototype.otherOrthoDeleteClick = function otherOrthoDeleteClick(d) {
      var self = this;
      self.demographics.home.demographicsNeedsSave = true;
      for (var i = 0; i < self.history.pathx.otherOrthoSurg.length; i++) {
        if (d == self.history.pathx.otherOrthoSurg[i]) {
          self.history.pathx.otherOrthoSurg.splice(i, 1);
        }
      }
    };

    PatientHistory.prototype.otherOrthoAddClick = function otherOrthoAddClick() {
      var self = this;
      if (self.otherOrthoInput != null) {
        var found = _.find(self.history.pathx.otherOrthoSurg, function (o) {
          return o.toUpperCase() == self.otherOrthoInput.toUpperCase();
        });
        if (found) return;
        self.history.pathx.otherOrthoSurg.push(self.otherOrthoInput);
      } else if (self.otherOrthoList.selectedOption != null) {
        var _found2 = _.find(self.history.pathx.otherOrthoSurg, function (o) {
          return o.toUpperCase() == self.otherOrthoList.selectedOption.Description1.toUpperCase();
        });
        if (_found2) return;
        self.history.pathx.otherOrthoSurg.push(self.otherOrthoList.selectedOption.Description1);
      }
    };

    PatientHistory.prototype.familyOtherAddClick = function familyOtherAddClick(member) {
      var self = this;
      if (member == 'father') {
        if (self.otherFatherInput != null) {
          var found = _.find(self.history.famhx.fatherHx.other, function (o) {
            return o.toUpperCase() == self.otherFatherInput.toUpperCase();
          });
          if (found) return;
          self.history.famhx.fatherHx.other.push(self.otherFatherInput);
        }
      }
      if (member == 'mother') {
        if (self.otherMotherInput != null) {
          var _found3 = _.find(self.history.famhx.motherHx.other, function (o) {
            return o.toUpperCase() == self.otherMotherInput.toUpperCase();
          });
          if (_found3) return;
          self.history.famhx.motherHx.other.push(self.otherMotherInput);
        }
      }
      if (member == 'sibling') {
        if (self.otherSiblingInput != null) {
          var _found4 = _.find(self.history.famhx.siblingHx.other, function (o) {
            return o.toUpperCase() == self.otherSiblingInput.toUpperCase();
          });
          if (_found4) return;
          self.history.famhx.siblingHx.other.push(self.otherSiblingInput);
        }
      }
    };

    PatientHistory.prototype.otherFamilyDeleteClick = function otherFamilyDeleteClick(member, d) {
      var self = this;
      self.saveHx = true;
      self.hasSaved = false;
      self.demographics.home.demographicsNeedsSave = true;

      if (member == 'father') {
        for (var i = 0; i < self.history.famhx.fatherHx.other.length; i++) {
          if (d == self.history.famhx.fatherHx.other[i]) {
            self.history.famhx.fatherHx.other.splice(i, 1);
            self.updateFatherOther = true;
          }
        }
      }
      if (member == 'mother') {
        for (var _i26 = 0; _i26 < self.history.famhx.motherHx.other.length; _i26++) {
          if (d == self.history.famhx.motherHx.other[_i26]) {
            self.history.famhx.motherHx.other.splice(_i26, 1);
            self.updateMotherOther = true;
          }
        }
      }
      if (member == 'sibling') {
        for (var _i27 = 0; _i27 < self.history.famhx.siblingHx.other.length; _i27++) {
          if (d == self.history.famhx.siblingHx.other[_i27]) {
            self.history.famhx.siblingHx.other.splice(_i27, 1);
            self.updateSiblingOther = true;
          }
        }
      }
    };

    return PatientHistory;
  }()) || _class);
});;
define('text!go/patientHistory/patientHistory.html',[],function(){return "<template><require from=\"../customElements/myCheckbox\"></require><div ref=\"tabs\" class=\"row mb-1\"><div class=\"col-md-12\"><ul class=\"nav nav-pills\"><li class=\"nav-item\"><a class=\"nav-link ${displayPatHx ? 'active' : ''}\" href=\"#\" click.delegate=\"toggleTab('PATIENTHX')\">Patient</a></li><li class=\"nav-item\"><a class=\"nav-link ${displayFamHx ? 'active' : ''}\" href=\"#\" click.delegate=\"toggleTab('FAMILYHX')\">Family</a></li><li class=\"nav-item\"><a class=\"nav-link ${displaySocHx ? 'active' : ''}\" href=\"#\" click.delegate=\"toggleTab('SOCIALHX')\">Social</a></li><li class=\"nav-item\"><a class=\"nav-link ${displayMeds ? 'active' : ''}\" href=\"#\" click.delegate=\"toggleTab('MEDS')\">Allergies/Meds</a></li><li class=\"nav-item\"><a class=\"nav-link ${displayRos ? 'active' : ''}\" href=\"#\" click.delegate=\"toggleTab('ROS')\">Health Review</a></li><li class=\"nav-item\"><a class=\"nav-link ${displayVitals ? 'active' : ''}\" href=\"#\" click.delegate=\"toggleTab('VITALS')\">Vitals</a></li><li class=\"nav-item\"><i class=\"fa fa-pencil-square-o fa-2x ml-2 float-right\" aria-hidden=\"true\" click.delegate=\"toggleEdit()\" css=\"color: ${ edit ? '#0d6efd' : '#9e9e9e'}\"></i></li></ul></div></div><div id=\"patHxForm\" style=\"overflow-y:scroll\" css=\"height:${windowHeight}px;\"><div if.bind=\"displayPatHx\" class=\"card mb-2\"><div class=\"card-header py-0\"><div class=\"d-inline-block align-middle py-2 h4 m-1\">Medical History</div><my-checkbox with.bind=\"history.pathx.noMedHistory\" if.bind=\"visible\" class=\"d-inline-block m-1 float-right text-primary\" selected.bind=\"selected\" value.bind=\"name\" editing.bind=\"editing\" callback.call=\"noMedicalHistoryChecked(checked)\" click.delegate=\"select()\"></my-checkbox></div><div class=\"card-body\"><div class=\"row row-cols-2\"><div repeat.for=\"h of history.pathx.hx\" if.bind=\"h.visible\" class=\"col\"><my-checkbox selected.bind=\"h.selected\" value.bind=\"h.name\" editing.bind=\"h.editing\" click.delegate=\"h.select()\"></my-checkbox></div></div><div class=\"row my-2\" if.bind=\"history.pathx.otherDiseaseHx.length > 0 || edit\" style=\"background-color:#f7f7f7;margin-left:-20px;margin-right:-20px;border-left:none;border-right:none;border-top:1px solid #d8d8d8;border-bottom:1px solid #d8d8d8\"><label class=\"col-md-12 col-form-label\">Other Disease</label></div><div class=\"row\" if.bind=\"edit\"><div class=\"col-md-12\"><div><select value.bind=\"otherDiseaseList.selectedOption\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"o of otherDiseaseList.options\" model.bind=\"o\">${o.Description1}</option></select></div><div class=\"p-1\">- or -</div><input value.bind=\"otherDiseaseInput\" type=\"text\" class=\"form-control d-inline\" placeholder=\"Enter Disease\"><div class=\"mt-1\"><button type=\"button\" class=\"btn btn-outline-secondary\" click.delegate=\"otherDiseaseAddClick()\">Add</button></div></div></div><div class=\"row\" repeat.for=\"d of history.pathx.otherDiseaseHx\"><div class=\"col-md-12\"><label class=\"col-form-label\">${d}</label> <button if.bind=\"edit\" type=\"button\" class=\"btn m-1 btn-danger float-right\" click.delegate=\"otherDiseaseDeleteClick(d)\">Delete</button></div></div></div></div><div if.bind=\"displayPatHx\" class=\"card mb-2\"><div class=\"card-header py-0\"><div class=\"d-inline-block align-middle py-2 h4 m-1\">Ortho History</div><my-checkbox with.bind=\"history.pathx.noSurgHistory\" if.bind=\"visible\" class=\"d-inline-block m-1 float-right\" selected.bind=\"selected\" value.bind=\"name\" editing.bind=\"editing\" callback.call=\"noSurgicalHistoryChecked(checked)\" click.delegate=\"select()\"></my-checkbox></div><div class=\"card-body\"><div class=\"row row-cols-2\"><div repeat.for=\"h of history.pathx.surgs\" if.bind=\"h.visible\" class=\"col\"><my-checkbox selected.bind=\"h.selected\" value.bind=\"h.name\" editing.bind=\"h.editing\" click.delegate=\"h.select()\"></my-checkbox></div></div><div class=\"row my-2\" if.bind=\"history.pathx.otherOrthoSurg.length > 0 || edit\" style=\"background-color:#f7f7f7;margin-left:-20px;margin-right:-20px;border-left:none;border-right:none;border-top:1px solid #d8d8d8;border-bottom:1px solid #d8d8d8\"><label class=\"col-md-12 col-form-label\">Other Surgery</label></div><div class=\"row\" if.bind=\"edit\"><div class=\"col-md-12\"><div><select value.bind=\"otherOrthoList.selectedOption\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"o of otherOrthoList.options\" model.bind=\"o\">${o.Description1}</option></select></div><div class=\"p-1\">- or -</div><input value.bind=\"otherOrthoInput\" type=\"text\" class=\"form-control d-inline\" placeholder=\"Enter Disease\"><div class=\"mt-1\"><button type=\"button\" class=\"btn btn-outline-secondary\" click.delegate=\"otherOrthoAddClick()\">Add</button></div></div></div><div class=\"row\" repeat.for=\"d of history.pathx.otherOrthoSurg\"><div class=\"col-md-12\"><label class=\"col-form-label\">${d}</label> <button if.bind=\"edit\" type=\"button\" class=\"btn m-1 btn-danger float-right\" click.delegate=\"otherOrthoDeleteClick(d)\">Delete</button></div></div></div></div><div if.bind=\"displayFamHx\" class=\"card mb-2\"><div class=\"card-header py-0\"><div class=\"d-inline-block align-middle py-2 h4 m-1\">Father</div><my-checkbox with.bind=\"history.famhx.fatherNoHx\" if.bind=\"visible\" class=\"d-inline-block m-1 float-right\" selected.bind=\"selected\" value.bind=\"name\" editing.bind=\"editing\" callback.call=\"noFatherHistoryChecked(checked)\" click.delegate=\"select()\"></my-checkbox></div><div class=\"card-body\"><div class=\"row row-cols-2\"><div repeat.for=\"h of history.famhx.fatherHx\" if.bind=\"h.visible\" class=\"col\"><my-checkbox selected.bind=\"h.selected\" value.bind=\"h.name\" editing.bind=\"h.editing\" click.delegate=\"h.select()\"></my-checkbox></div></div><div class=\"row my-2\" if.bind=\"history.famhx.fatherHx.other.length > 0 || edit\" style=\"background-color:#f7f7f7;margin-left:-20px;margin-right:-20px;border-left:none;border-right:none;border-top:1px solid #d8d8d8;border-bottom:1px solid #d8d8d8\"><label class=\"col-md-12 col-form-label\">Other</label></div><div class=\"row\" if.bind=\"edit\"><div class=\"col-md-12\"><input value.bind=\"otherFatherInput\" type=\"text\" class=\"form-control d-inline\" placeholder=\"Enter Disease\"><div class=\"mt-1\"><button type=\"button\" class=\"btn btn-outline-secondary\" click.delegate=\"familyOtherAddClick('father')\">Add</button></div></div></div><div class=\"row\" repeat.for=\"d of history.famhx.fatherHx.other\"><div class=\"col-md-12\"><label class=\"col-form-label\">${d}</label> <button type=\"button\" class=\"btn m-1 btn-danger float-right\" click.delegate=\"otherFamilyDeleteClick('father',d)\">Delete</button></div></div></div></div><div if.bind=\"displayFamHx\" class=\"card mb-2\"><div class=\"card-header py-0\"><div class=\"d-inline-block align-middle py-2 h4 m-1\">Mother</div><my-checkbox with.bind=\"history.famhx.motherNoHx\" if.bind=\"visible\" class=\"d-inline-block m-1 float-right\" selected.bind=\"selected\" value.bind=\"name\" editing.bind=\"editing\" callback.call=\"noMotherHistoryChecked(checked)\" click.delegate=\"select()\"></my-checkbox></div><div class=\"card-body\"><div class=\"row row-cols-2\"><div repeat.for=\"h of history.famhx.motherHx\" if.bind=\"h.visible\" class=\"col\"><my-checkbox selected.bind=\"h.selected\" value.bind=\"h.name\" editing.bind=\"h.editing\" click.delegate=\"h.select()\"></my-checkbox></div></div><div class=\"row my-2\" if.bind=\"history.famhx.motherHx.other.length > 0 || edit\" style=\"background-color:#f7f7f7;margin-left:-20px;margin-right:-20px;border-left:none;border-right:none;border-top:1px solid #d8d8d8;border-bottom:1px solid #d8d8d8\"><label class=\"col-md-12 col-form-label\">Other</label></div><div class=\"row\" if.bind=\"edit\"><div class=\"col-md-12\"><input value.bind=\"otherMotherInput\" type=\"text\" class=\"form-control d-inline\" placeholder=\"Enter Disease\"><div class=\"mt-1\"><button type=\"button\" class=\"btn btn-outline-secondary\" click.delegate=\"familyOtherAddClick('mother')\">Add</button></div></div></div><div class=\"row\" repeat.for=\"d of history.famhx.motherHx.other\"><div class=\"col-md-12\"><label class=\"col-form-label\">${d}</label> <button type=\"button\" class=\"btn m-1 btn-danger float-right\" click.delegate=\"otherFamilyDeleteClick('mother',d)\">Delete</button></div></div></div></div><div if.bind=\"displayFamHx\" class=\"card mb-2\"><div class=\"card-header py-0\"><div class=\"d-inline-block align-middle py-2 h4 m-1\">Sibling</div><my-checkbox with.bind=\"history.famhx.siblingNoHx\" if.bind=\"visible\" class=\"d-inline-block m-1 float-right\" selected.bind=\"selected\" value.bind=\"name\" editing.bind=\"editing\" callback.call=\"noSiblingHistoryChecked(checked)\" click.delegate=\"select()\"></my-checkbox></div><div class=\"card-body\"><div class=\"row row-cols-2\"><div repeat.for=\"h of history.famhx.siblingHx\" if.bind=\"h.visible\" class=\"col\"><my-checkbox selected.bind=\"h.selected\" value.bind=\"h.name\" editing.bind=\"h.editing\" click.delegate=\"h.select()\"></my-checkbox></div></div><div class=\"row my-2\" if.bind=\"history.famhx.siblingHx.other.length > 0 || edit\" style=\"background-color:#f7f7f7;margin-left:-20px;margin-right:-20px;border-left:none;border-right:none;border-top:1px solid #d8d8d8;border-bottom:1px solid #d8d8d8\"><label class=\"col-md-12 col-form-label\">Other</label></div><div class=\"row\" if.bind=\"edit\"><div class=\"col-md-12\"><input value.bind=\"otherSiblingInput\" type=\"text\" class=\"form-control d-inline\" placeholder=\"Enter Disease\"><div class=\"mt-1\"><button type=\"button\" class=\"btn btn-outline-secondary\" click.delegate=\"familyOtherAddClick('sibling')\">Add</button></div></div></div><div class=\"row\" repeat.for=\"d of history.famhx.siblingHx.other\"><div class=\"col-md-12\"><label class=\"col-form-label\">${d}</label> <button type=\"button\" class=\"btn m-1 btn-danger float-right\" click.delegate=\"otherFamilyDeleteClick('sibling',d)\">Delete</button></div></div></div></div><div if.bind=\"displaySocHx\" class=\"row\"><compose view-model=\"./socialHistory\" model.bind=\"$this\" containerless></compose></div><compose if.bind=\"displayMeds\" view-model=\"./allergiesMeds\" model.bind=\"$this\" containerless></compose><div if.bind=\"displayRos\" class=\"row\"><compose view-model=\"./healthReview\" model.bind=\"$this\" containerless></compose></div><div if.bind=\"displayVitals\" class=\"row\"><compose view-model=\"./vitalSigns\" model.bind=\"$this\" containerless></compose></div></div></template>";});;
define('go/patientHistory/socialHistory',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', '../home', '../../data/go/data', 'lodash', 'aurelia-event-aggregator'], function (exports, _helper, _http, _aureliaFramework, _home, _data, _lodash, _aureliaEventAggregator) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SocialHistory = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Substance = function () {
    function Substance(type, value) {
      _classCallCheck(this, Substance);

      this.typeOptions = this.getTypeOptions(type);
      this.usageOptions = this.getUsageOptions(type);
      this.selectedUsageOption = null;
      this.selectedValue = value ? value : this.typeOptions[0];
      this.substanceType = type;
    }

    Substance.prototype.getUsageOptions = function getUsageOptions(name) {
      if (name == 'Substances') {
        return [];
      }
      if (name == 'Tobacco') {
        return ['Never', 'Occasionally', 'Daily', 'Former'];
      } else {
        return ['Never', 'Occasionally', 'Daily'];
      }
    };

    Substance.prototype.getTypeOptions = function getTypeOptions(type) {
      if (type == 'Caffeine') {
        return ["Coffee", "Soft Drink", "Tea", "Chocolate"];
      };

      if (type == 'Illicit Drugs') {
        return ["Marijuana", "Cocaine", "PCP", "LSD", "Heroin", "Crack", "Crystal Meth", "Ecstasy", "Opium"];
      };

      if (type == 'Tobacco') {
        return ["Cigarettes", "Cigars", "Pipe", "Snuff", "Dip", "Vaping"];
      };

      if (type == 'Alcohol') {
        return ["Beer", "Wine", "Liquor"];
      };
    };

    return Substance;
  }();

  var PicklistItem = function PicklistItem(data, options, value, editing) {
    _classCallCheck(this, PicklistItem);

    this.name = data.ColumnFriendlyName;
    this.options = options;
    this.selectedOption = value ? value : null;
    this.data = data;
    this.visible = value ? true : false;
    this.editing = editing ? editing : false;
  };

  var SocialHistory = exports.SocialHistory = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home, _aureliaEventAggregator.EventAggregator), _dec(_class = function () {
    function SocialHistory(helper, http, Data, Home, EventAggregator) {
      _classCallCheck(this, SocialHistory);

      this.socHxData = null;
      this.selectedSubstance = 'Substances';
      this.substanceList = ['Tobacco', 'Alcohol', 'Caffeine', 'Illicit Drugs'];
      this.appearanceList = ["The patient appears to be well nourished, oriented x3 with normal mood and affect.", "The patient appears to be well nourished and in good health.", "The patient appears to be in good health, with normal cognition.", "The patient appears to be in good health, with poor cognition.", "The patient appears to be well nourished but in poor health.", "The patient appears to be in poor health and with poor cognition.", "The patient appears older than stated age."];
      this.dietList = ['Normal', 'High Protein', 'Low Carb', 'ADA Diet', 'Vegan'];
      this.activityLevelList = ['High', 'Moderate', 'Low'];
      this.exerciseFrequencyList = ['daily', '3 x week', '1 x week', '1 x month', 'none'];
      this.exerciseTypeList = ["Weights", "Running", "Jogging", "Walking", "Aerobics", "Sports", "Yoga", "Pilates", "Other"];
      this.hobbiesList = ["Animal Training", "Auto Mechanics ", "Baseball/Softball ", "Basketball", "Bicycling", "Boating", "Bowling", "Camping", "Crafts ", "Computer related", "Cooking", "Entertaining", "Exercise ", "Football", "Gardening", "Golf", "Hiking", "Hockey", "Hunting/Fishing", "Music", "Racket Sports", "Running", "Swimming ", "Team Sports", "Traveling", "Water Sports", "Weight Training", "Winter Sports", "Woodworking"];
      this.caffeineList = ["Coffee", "Soft Drink", "Tea", "Chocolate"];
      this.drugList = ["Marijuana", "Cocaine", "PCP", "LSD", "Heroin", "Crack", "Crystal Meth", "Ecstasy", "Opium"];
      this.tobbaccoList = ["Cigarettes", "Cigars", "Pipe", "Snuff", "Dip", "Vaping"];
      this.alcoholList = ["Beer", "Wine", "Liquor"];
      this.occupationList = ['Accounting', 'Admin & Clerical', 'Arts/Media', 'Athlete', 'Automotive', 'Banking & Financing', 'Business Owner', 'Construction', 'Consultant', 'Customer Service', 'Design', 'Education', 'Engineering', 'Entertainer', 'Executive', 'Food Service', 'General Business', 'General Labor', 'Health Care', 'Hospitality', 'Human Resources', 'Information Technology', 'Legal', 'Management', 'Manufacturing', 'Physician', 'Retail', 'Sales & Marketing', 'Science & Biotech', 'Other'];

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
      this.event = EventAggregator;
    }

    SocialHistory.prototype.activate = function activate(model) {
      var self = this;
      self.history = model.history;
      self.socHxData = model.socHxData;
      self.parent = model;

      self.populateSocHxObjectWithData(self.history.sochx, model.socHxData);

      self.event.subscribe("historyEdit", function (editing) {
        self.setEditing(editing);
      });
    };

    SocialHistory.prototype.detached = function detached() {
      var self = this;
      self.updateDataObject();
    };

    SocialHistory.prototype.setVisibility = function setVisibility(value, object) {
      if (object.visible == true || value != null && value.length > 0) {
        object.visible = true;
      } else {
        object.visible = false;
      }
    };

    SocialHistory.prototype.updateDataObject = function updateDataObject() {
      var self = this;
      self.socHxData.Appearance = self.history.sochx.Appearance.selectedOption;
      self.socHxData.activity_level = self.history.sochx.activity_level.selectedOption;
      self.socHxData.exercise_freq = self.history.sochx.exercise_freq.selectedOption;
      self.socHxData.exercise_val = self.history.sochx.exercise_val.selectedOption;
      self.socHxData.hobbies = self.history.sochx.hobbies.selectedOption;
      self.socHxData.dietHx = self.history.sochx.dietHx.selectedOption;
      self.socHxData.education = self.history.sochx.education.selectedOption;
      self.socHxData.occupation = self.history.sochx.occupation.selectedOption;
      self.socHxData.Employer = self.history.sochx.Employer.selectedOption;
    };

    SocialHistory.prototype.populateSocHxObjectWithData = function populateSocHxObjectWithData(sochx, data) {
      var self = this;

      if (data == null) return;

      sochx.Appearance.selectedOption = data.Appearance;
      sochx.Appearance.options = self.appearanceList;
      this.setVisibility(data.Appearance, sochx.Appearance);

      sochx.activity_level.selectedOption = data.activity_level;
      sochx.activity_level.options = self.activityLevelList;
      this.setVisibility(data.activity_level, sochx.activity_level);

      sochx.exercise_freq.selectedOption = data.exercise_freq;
      sochx.exercise_freq.options = self.exerciseFrequencyList;
      this.setVisibility(data.exercise_freq, sochx.exercise_freq);

      sochx.exercise_val.selectedOption = data.exercise_val;
      sochx.exercise_val.options = self.exerciseTypeList;
      this.setVisibility(data.exercise_val, sochx.exercise_val);

      sochx.hobbies.selectedOption = data.hobbies;
      sochx.hobbies.options = self.hobbiesList;
      this.setVisibility(data.hobbies, sochx.hobbies);

      sochx.dietHx.selectedOption = data.dietHx;
      sochx.dietHx.options = self.dietList;
      this.setVisibility(data.dietHx, sochx.dietHx);

      sochx.education.selectedOption = data.education;
      sochx.education.options = ['College', 'GED', 'High School', 'Junior College', 'Post Grad', 'Trade School'];
      this.setVisibility(data.education, sochx.education);

      sochx.occupation.selectedOption = data.occupation;
      sochx.occupation.options = self.occupationList;
      this.setVisibility(data.occupation, sochx.occupation);

      sochx.Employer.selectedOption = data.Employer;
      this.setVisibility(data.Employer, sochx.Employer);

      if (data.drug_Y == 1 && data.drug_type != null && data.drug_type.length > 0) {
        var sub = self.addSubstance(self.substanceList[3], data.drug_type);
        if (data.drug_occ == 1) {
          sub.selectedUsageOption = 'Occasionally';
        }
        if (data.drug_never == 1) {
          sub.selectedUsageOption = 'Never';
        }
        if (data.drug_daily == 1) {
          sub.selectedUsageOption = 'Daily';
        }
      }

      if (data.caffine_Y == 1 && data.Caffeine_Type != null && data.Caffeine_Type.length > 0) {
        var _sub = self.addSubstance(self.substanceList[2], data.Caffeine_Type);
        if (data.caff_occ == 1) {
          _sub.selectedUsageOption = 'Occasionally';
        }
        if (data.caff_never == 1) {
          _sub.selectedUsageOption = 'Never';
        }
        if (data.caff_daily == 1) {
          _sub.selectedUsageOption = 'Daily';
        }
      }

      if (data.alcohol_Y == 1 && data.Alcohol_Type != null && data.Alcohol_Type.length > 0) {
        var _sub2 = self.addSubstance(self.substanceList[1], data.Alcohol_Type);
        if (data.alc_occ == 1) {
          _sub2.selectedUsageOption = 'Occasionally';
        }
        if (data.alc_never == 1) {
          _sub2.selectedUsageOption = 'Never';
        }
        if (data.alc_daily == 1) {
          _sub2.selectedUsageOption = 'Daily';
        }
      }

      if (data.tobacco_Y == 1 && data.tobacco_type != null && data.tobacco_type.length > 0) {
        var _sub3 = self.addSubstance(self.substanceList[0], data.tobacco_type);
        if (data.tob_occ == 1) {
          _sub3.selectedUsageOption = 'Occasionally';
        }
        if (data.tob_never == 1) {
          _sub3.selectedUsageOption = 'Never';
        }
        if (data.tob_daily == 1) {
          _sub3.selectedUsageOption = 'Daily';
        }
        if (data.tob_light == 1) {
          _sub3.selectedUsageOption = 'Light';
        }
        if (data.tob_heavy == 1) {
          _sub3.selectedUsageOption = 'Heavy';
        }
        if (data.tob_unknown == 1) {
          _sub3.selectedUsageOption = 'Unknown';
        }
        if (data.tobacco_Form == 1) {
          _sub3.selectedUsageOption = 'Former';
        }
      }
    };

    SocialHistory.prototype.setEditing = function setEditing(editing) {
      var self = this;
      self.history.sochx.Appearance.editing = editing;
      self.history.sochx.activity_level.editing = editing;
      self.history.sochx.exercise_freq.editing = editing;
      self.history.sochx.exercise_val.editing = editing;
      self.history.sochx.hobbies.editing = editing;
      self.history.sochx.dietHx.editing = editing;
      self.history.sochx.education.editing = editing;
      self.history.sochx.occupation.editing = editing;
      self.history.sochx.Employer.editing = editing;
    };

    SocialHistory.prototype.addSubstance = function addSubstance(substanceType, value) {

      var self = this;

      self.history.sochx.All_Sub_Neg.selected = false;
      self.history.sochx.All_Sub_Neg.visible = true;

      if (substanceType == undefined) {
        if (self.selectedSubstance == 'Substances') return;

        var found = _.find(self.history.sochx.substances, function (s) {
          return s.substanceType == self.selectedSubstance;
        });
        if (found) {
          alert("Substance for type: " + self.selectedSubstance + " already exists.");
          return;
        }

        var sub = new Substance(self.selectedSubstance);
        self.history.sochx.substances.push(sub);
        return sub;
      } else {
        var _sub4 = new Substance(substanceType);
        if (value) {
          _sub4.selectedValue = value;
        }
        self.history.sochx.substances.push(_sub4);
        return _sub4;
      }
    };

    SocialHistory.prototype.selectSubstance = function selectSubstance(s) {
      this.selectedSubstance = s;
    };

    SocialHistory.prototype.removeSubstance = function removeSubstance(s) {
      for (var i = 0; i < this.history.sochx.substances.length; i++) {
        if (this.history.sochx.substances[i].selectedValue == s.selectedValue) {
          this.history.sochx.substances.splice(i, 1);
        }
      }
    };

    return SocialHistory;
  }()) || _class);
});;
define('text!go/patientHistory/socialHistory.html',[],function(){return "<template><require from=\"../customElements/myCheckbox\"></require><div class=\"col-md-12\"><div class=\"card mb-2\"><div class=\"card-header py-0\"><div class=\"d-inline-block align-middle py-2 h4 m-1\">Social History</div></div><div class=\"card-body\"><div class=\"row\"><div class=\"col-md-5\"><label class=\"col-form-label\">Hand Dominance</label></div><div class=\"col-md-auto\"><my-checkbox with.bind=\"history.sochx.hand_dom_R\" if.bind=\"visible\" selected.bind=\"selected\" value.bind=\"name\" editing.bind=\"editing\" click.delegate=\"select()\"></my-checkbox><my-checkbox with.bind=\"history.sochx.hand_dom_L\" if.bind=\"visible\" selected.bind=\"selected\" value.bind=\"name\" editing.bind=\"editing\" click.delegate=\"select()\"></my-checkbox></div></div><div class=\"row\"><div class=\"col-md-auto\"><my-checkbox with.bind=\"history.sochx.pregnant\" if.bind=\"isFemale\" selected.bind=\"selected\" value.bind=\"name\" editing.bind=\"editing\" click.delegate=\"select()\"></my-checkbox></div></div></div></div><div class=\"card mb-2\"><div class=\"card-header py-0\"><div class=\"d-inline-block align-middle py-2 m-1\">Substances</div><my-checkbox with.bind=\"history.sochx.All_Sub_Neg\" if.bind=\"visible\" class=\"float-right text-primary\" selected.bind=\"selected\" value.bind=\"name\" editing.bind=\"editing\" click.delegate=\"select()\"></my-checkbox></div><div class=\"card-body\"><div class=\"row\"><div class=\"col-md-12\"><div if.bind=\"parent.edit\" class=\"row mb-2\"><div class=\"col-md-12\"><div class=\"dropdown d-inline-block\"><button class=\"btn btn-outline-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-expanded=\"false\"> ${selectedSubstance} </button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><a repeat.for=\"s of substanceList\" class=\"dropdown-item\" href=\"#\" click.delegate=\"selectSubstance(s)\">${s}</a></div></div><button type=\"button\" class=\"btn btn-primary d-inline-block ml-2\" click.delegate=\"addSubstance()\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button></div></div><div class=\"row mb-2\" repeat.for=\"s of history.sochx.substances\"><div if.bind=\"!parent.edit\" style=\"display:contents\"><label class=\"col-md-5 col-form-label font-weight-bold\">${s.selectedValue}</label><div class=\"col-auto\"><div class=\"d-inline-block\"><label class=\"col-form-label\">${s.selectedUsageOption}</label></div></div></div><div if.bind=\"parent.edit\" class=\"col-md-8\"><div style=\"display:inline-block;padding-right:10px;width:50%\"><select value.bind=\"s.selectedValue\" class=\"form-control d-inline-block\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"o of s.typeOptions\" model.bind=\"o\">${o}</option></select></div><div class=\"d-inline-block\" style=\"width:50%\"><select value.bind=\"s.selectedUsageOption\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"o of s.usageOptions\" model.bind=\"o\">${o}</option></select></div></div><div if.bind=\"parent.edit\" class=\"col-md-auto pl-0\"><button type=\"button\" class=\"btn btn-danger d-inline-block\" click.delegate=\"removeSubstance(s)\">Delete</button></div></div></div></div></div></div><div class=\"card mb-2\"><div class=\"card-header\">Lifestyle | Appearance | Orientation</div><div class=\"card-body\"><div class=\"row\"><div class=\"col-md-12\"><div if.bind=\"history.sochx.Appearance.visible\" class=\"row mb-2\"><label class=\"col-md-5 col-form-label font-weight-bold\">${history.sochx.Appearance.name}</label><div class=\"col-auto\"><div class=\"d-inline-block\"><label if.bind=\"!parent.edit\" class=\"col-form-label\">${history.sochx.Appearance.selectedOption}</label> <select if.bind=\"parent.edit\" value.bind=\"history.sochx.Appearance.selectedOption\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of history.sochx.Appearance.options\" model.bind=\"s\">${s}</option></select></div></div></div><div if.bind=\"history.sochx.activity_level.visible\" class=\"row mb-2\"><label class=\"col-md-5 col-form-label font-weight-bold\">${history.sochx.activity_level.name}</label><div class=\"col-auto\"><div class=\"d-inline-block\"><label if.bind=\"!parent.edit\" class=\"col-form-label\">${history.sochx.activity_level.selectedOption}</label> <select if.bind=\"parent.edit\" value.bind=\"history.sochx.activity_level.selectedOption\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of history.sochx.activity_level.options\" model.bind=\"s\">${s}</option></select></div></div></div><div if.bind=\"history.sochx.exercise_freq.visible\" class=\"row mb-2\"><label class=\"col-md-5 col-form-label font-weight-bold\">${history.sochx.exercise_freq.name}</label><div class=\"col-auto\"><div class=\"d-inline-block\"><label if.bind=\"!parent.edit\" class=\"col-form-label\">${history.sochx.exercise_freq.selectedOption}</label> <select if.bind=\"parent.edit\" value.bind=\"history.sochx.exercise_freq.selectedOption\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of history.sochx.exercise_freq.options\" model.bind=\"s\">${s}</option></select></div></div></div><div if.bind=\"history.sochx.exercise_val.visible\" class=\"row mb-2\"><label class=\"col-md-5 col-form-label font-weight-bold\">${history.sochx.exercise_val.name}</label><div class=\"col-auto\"><div class=\"d-inline-block\"><label if.bind=\"!parent.edit\" class=\"col-form-label\">${history.sochx.exercise_val.selectedOption}</label> <select if.bind=\"parent.edit\" value.bind=\"history.sochx.exercise_val.selectedOption\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of history.sochx.exercise_val.options\" model.bind=\"s\">${s}</option></select></div></div></div><div if.bind=\"history.sochx.hobbies.visible\" class=\"row mb-2\"><label class=\"col-md-5 col-form-label font-weight-bold\">${history.sochx.hobbies.name}</label><div class=\"col-auto\"><div class=\"d-inline-block\"><label if.bind=\"!parent.edit\" class=\"col-form-label\">${history.sochx.hobbies.selectedOption}</label> <select if.bind=\"parent.edit\" value.bind=\"history.sochx.hobbies.selectedOption\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of history.sochx.hobbies.options\" model.bind=\"s\">${s}</option></select></div></div></div><div if.bind=\"history.sochx.dietHx.visible\" class=\"row mb-2\"><label class=\"col-md-5 col-form-label font-weight-bold\">${history.sochx.dietHx.name}</label><div class=\"col-auto\"><div class=\"d-inline-block\"><label if.bind=\"!parent.edit\" class=\"col-form-label\">${history.sochx.dietHx.selectedOption}</label> <select if.bind=\"parent.edit\" value.bind=\"history.sochx.dietHx.selectedOption\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of history.sochx.dietHx.options\" model.bind=\"s\">${s}</option></select></div></div></div></div></div></div></div><div class=\"card mb-2\"><div class=\"card-header\">Demographics</div><div class=\"card-body\"><div class=\"row\"><div class=\"col-md-12\"><div if.bind=\"history.sochx.occupation.visible\" class=\"row mb-2\"><label class=\"col-md-5 col-form-label font-weight-bold\">${history.sochx.occupation.name}</label><div class=\"col-auto\"><div class=\"d-inline-block\"><label if.bind=\"!parent.edit\" class=\"col-form-label\">${history.sochx.occupation.selectedOption}</label> <select if.bind=\"parent.edit\" value.bind=\"history.sochx.occupation.selectedOption\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of history.sochx.occupation.options\" model.bind=\"s\">${s}</option></select></div></div></div><div if.bind=\"history.sochx.Employer.visible\" class=\"row mb-2\"><label class=\"col-md-5 col-form-label font-weight-bold\">Employer</label><div class=\"col-auto\"><div class=\"d-inline-block\"><label if.bind=\"!parent.edit\" class=\"col-form-label\">${history.sochx.Employer.selectedOption}</label> <input if.bind=\"parent.edit\" type=\"text\" class=\"form-control\" placeholder=\"Employer...\" value.bind=\"history.sochx.Employer.selectedOption\"></div></div></div><div if.bind=\"history.sochx.education.visible\" class=\"row mb-2\"><label class=\"col-md-5 col-form-label font-weight-bold\">${history.sochx.education.name}</label><div class=\"col-auto\"><div class=\"d-inline-block\"><label if.bind=\"!parent.edit\" class=\"col-form-label\">${history.sochx.education.selectedOption}</label> <select if.bind=\"parent.edit\" value.bind=\"history.sochx.education.selectedOption\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of history.sochx.education.options\" model.bind=\"s\">${s}</option></select></div></div></div></div></div></div></div></div></template>";});;
define('go/patientHistory/vitalSigns',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', '../home', '../../data/go/data', 'lodash', 'aurelia-event-aggregator', 'moment', './bmiPercentile', './weightLengthPercentile'], function (exports, _helper, _http, _aureliaFramework, _home, _data, _lodash, _aureliaEventAggregator, _moment, _bmiPercentile, _weightLengthPercentile) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.VitalSigns = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var VitalRow = function VitalRow(data) {
    _classCallCheck(this, VitalRow);

    this.date = (0, _moment2.default)(data.ExamDateTime).format("MM/DD/YYYY");
    this.time = data.TimeStamp != null ? (0, _moment2.default)(data.TimeStamp).format("h:mma") : "";
    this.height = data.Height;
    this.weight = data.Weight;
    this.bmi = data.BMI;
    this.bmiPercent = data.BmiPercent;
    this.heightLengthPercent = data.HeightLengthPercent;
    this.bloodpressure = null;
    if (data.Systole && data.Diastole) {
      this.bloodpressure = data.Systole + '/' + data.Diastole;
    }
    this.pulse = data.Pulse;
    this.resp = data.Resp;
    this.temp = data.Temp;
  };

  var VitalSigns = exports.VitalSigns = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home, _aureliaEventAggregator.EventAggregator, _bmiPercentile.BmiPercentile, _weightLengthPercentile.WeightLengthPercentile), _dec(_class = function () {
    function VitalSigns(helper, http, Data, Home, EventAggregator, BmiPercentile, WeightLengthPercentile) {
      _classCallCheck(this, VitalSigns);

      this.rows = [];

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
      this.event = EventAggregator;
      this.bmiPercent = BmiPercentile;
      this.weightLengthPercent = WeightLengthPercentile;
    }

    VitalSigns.prototype.activate = function activate(model) {
      var self = this;
      self.history = model.history;

      self.parent = model;

      self.populateVitalObjectWithData(self.history.vitals, model.vitalData);
    };

    VitalSigns.prototype.calculateBmi = function calculateBmi(heightInches, pounds, convertToMetric) {
      var length = convertToMetric ? Math.round((heightInches * 2.54 + Number.EPSILON) * 100) / 100 : heightInches;
      var weight = convertToMetric ? Math.round((pounds / 2.2046 + Number.EPSILON) * 100) / 100 : pounds;
      var bmi = 0;
      if (!convertToMetric) {
        var lengthMulti = length * length;
        var weight_Height = weight / lengthMulti;
        bmi = weight_Height * 703;
      } else {
        bmi = weight / length / length * 10000;
      }
      return Math.round((bmi + Number.EPSILON) * 10) / 10;
    };

    VitalSigns.prototype.addClick = function addClick() {
      var self = this;

      var tHeight = null;
      var tWeight = null;

      if (self.height) {
        tHeight = self.height;
      } else if (self.rows.length > 0 && self.rows[0].height != null) {
        tHeight = self.rows[0].height;
      }

      if (self.weight) {
        tWeight = self.weight;
      } else if (self.rows.length > 0 && self.rows[0].weight != null) {
        tWeight = self.rows[0].weight;
      }

      var bmiPercent = null;
      var heightLengthPercent = null;
      var bmi = null;

      if (tHeight != null && tWeight != null) {
        var bmiMetric = self.calculateBmi(tHeight, tWeight, true);
        var age = (0, _moment2.default)().diff(self.helper.getDateWithFormat(self.parent.demographics.patient.data.DOB, "MM-DD-YYYY"), 'years');

        if (age >= 3 && age <= 20) {
          bmiPercent = self.bmiPercent.getWithSexAgeAndBmi(self.parent.demographics.patient.data.Sex, age, bmiMetric);
        }
        var ageMonths = age * 12;
        if (ageMonths <= 36) {
          var cms = Math.round((tHeight * 2.54 + Number.EPSILON) * 100) / 100;
          var kgs = Math.round((tWeight / 2.2046 + Number.EPSILON) * 100) / 100;
          heightLengthPercent = self.weightLengthPercent.getWithSexHeightAndWeight(self.parent.demographics.patient.data.Sex, cms, kgs);
        }
        if (age > 20) {
          bmi = self.calculateBmi(tHeight, tWeight, false);
          bmi = Math.round((bmi + Number.EPSILON) * 10) / 10;
        }
      }

      var hxId = self.parent.saveObject.PatientHistory.HistoryID;

      var visitDate = (0, _moment2.default)(self.parent.date);
      var date = visitDate.format("MM-DD-YYYY");

      var currentHour = (0, _moment2.default)().get('hour');
      var currentMinute = (0, _moment2.default)().get('minute');
      var currentSecond = (0, _moment2.default)().get('second');
      var currentMil = (0, _moment2.default)().get('millisecond');

      visitDate.set('hour', currentHour);
      visitDate.set('minute', currentMinute);
      visitDate.set('second', currentSecond);
      visitDate.set('millisecond', currentMil);

      var timeStamp = visitDate.format("YYYY-MM-DD HH:mm:ss.SSS");
      var patientId = self.parent.saveObject.PatientHistory.PatientID;
      var userId = self.parent.saveObject.PatientHistory.UserID;

      var vsObj = {
        vital: {
          Diastole: self.diastole,
          Systole: self.systole,
          Pulse: self.pulse,
          Resp: self.resp,
          Temp: self.temp,
          Height: self.height,
          Weight: self.weight,
          HistoryID: hxId,
          ExamDateTime: date,
          PatientID: patientId,
          UserID: userId,
          TimeStamp: timeStamp
        }
      };

      if (bmiPercent != null) {
        vsObj.vital['BmiPercent'] = bmiPercent;
      }
      if (heightLengthPercent != null) {
        vsObj.vital['HeightLengthPercent'] = heightLengthPercent;
      }
      if (bmi != null) {
        vsObj.vital['BMI'] = bmi;
      }

      self.data.updateVitalSigns(vsObj, function (res) {
        var vRow = new VitalRow(res);
        self.rows.unshift(vRow);
      });
    };

    VitalSigns.prototype.populateVitalObjectWithData = function populateVitalObjectWithData(vitalObj, data) {
      var self = this;

      data = _.orderBy(data, ['ExamDateTime', 'TimeStamp'], ['desc', 'desc']);

      for (var v = 0; v < data.length; v++) {
        var vRow = new VitalRow(data[v]);
        self.rows.push(vRow);
      }
    };

    return VitalSigns;
  }()) || _class);
});;
define('text!go/patientHistory/vitalSigns.html',[],function(){return "<template><div class=\"col-md-12\"><div class=\"card mb-2\"><div class=\"card-header py-0\"><div class=\"d-inline-block align-middle py-2 h4 m-1\">Vital Signs</div></div><div class=\"card-body\"><div if.bind=\"parent.edit\"><h4>Blood Pressure</h4><div class=\"row\"><div class=\"col-md-6\"><div class=\"input-group mb-3\"><div class=\"input-group-prepend\"><span class=\"input-group-text\" id=\"basic-addon1\">Systolic</span></div><input type=\"number\" value.bind=\"systole\" class=\"form-control\" placeholder=\"value...\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"></div></div><div class=\"col-md-6\"><div class=\"input-group mb-3\"><div class=\"input-group-prepend\"><span class=\"input-group-text\" id=\"basic-addon2\">Diastolic</span></div><input type=\"number\" value.bind=\"diastole\" class=\"form-control\" placeholder=\"value...\" aria-label=\"Username\" aria-describedby=\"basic-addon2\"></div></div></div><h4>Pulse - Resp - Temp</h4><div class=\"row\"><div class=\"col-md-4\"><div class=\"input-group mb-3\"><div class=\"input-group-prepend\"><span class=\"input-group-text\" id=\"pulseAddon\">Pulse</span></div><input type=\"number\" value.bind=\"pulse\" class=\"form-control\" placeholder=\"value...\" aria-label=\"Username\" aria-describedby=\"pulseAddon\"></div></div><div class=\"col-md-4\"><div class=\"input-group mb-3\"><div class=\"input-group-prepend\"><span class=\"input-group-text\" id=\"respAddon\">Resp</span></div><input type=\"number\" value.bind=\"resp\" class=\"form-control\" placeholder=\"value...\" aria-label=\"Username\" aria-describedby=\"respAddon\"></div></div><div class=\"col-md-4\"><div class=\"input-group mb-3\"><div class=\"input-group-prepend\"><span class=\"input-group-text\" id=\"tempAddon\">Temp</span></div><input type=\"number\" value.bind=\"temp\" class=\"form-control\" placeholder=\"value...\" aria-label=\"Username\" aria-describedby=\"tempAddon\"></div></div></div><h4>Height - Weight</h4><div class=\"row\"><div class=\"col-md-6\"><div class=\"input-group mb-3\"><div class=\"input-group-prepend\"><span class=\"input-group-text\" id=\"heightaddon1\">Height</span></div><input type=\"number\" value.bind=\"height\" class=\"form-control\" placeholder=\"value...\" aria-label=\"Username\" aria-describedby=\"heightaddon1\"></div></div><div class=\"col-md-6\"><div class=\"input-group mb-3\"><div class=\"input-group-prepend\"><span class=\"input-group-text\" id=\"weightAddon\">Weight</span></div><input type=\"number\" value.bind=\"weight\" class=\"form-control\" placeholder=\"value...\" aria-label=\"Username\" aria-describedby=\"weightAddon\"></div></div></div><div class=\"row\"><div class=\"col-md-12 pb-2\"><button type=\"button\" class=\"btn btn-primary float-right\" click.delegate=\"addClick()\">Add</button></div></div></div><div class=\"row\"><div class=\"col-md-12\"><div class=\"tableFixHeadLight\" css=\"height: 100px;\" style=\"overflow-y:scroll;overflow-x:hidden\"><table class=\"table table-condensed table-striped w-auto\"><thead style=\"font-size:small;color:grey\"><tr><th scope=\"col\">Date</th><th scope=\"col\">Time</th><th scope=\"col\">Ht</th><th scope=\"col\">Wt</th><th scope=\"col\">BMI</th><th scope=\"col\">BMI%</th><th scope=\"col\">HL%</th><th scope=\"col\">B/P</th><th scope=\"col\">P</th><th scope=\"col\">R</th><th scope=\"col\" style=\"width:100%\">Temp</th></tr></thead><tbody><tr repeat.for=\"v of rows\"><td>${v.date}</td><td>${v.time}</td><td>${v.height}</td><td>${v.weight}</td><td>${v.bmi}</td><td>${v.bmiPercent}</td><td>${v.heightLengthPercent}</td><td>${v.bloodpressure}</td><td>${v.pulse}</td><td>${v.resp}</td><td>${v.temp}</td></tr></tbody></table></div></div></div></div></div></div></template>";});;
define('go/patientHistory/weightLengthPercentile',['exports', 'lodash'], function (exports, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WeightLengthPercentile = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var WeightLengthPercentile = exports.WeightLengthPercentile = function () {
    function WeightLengthPercentile() {
      _classCallCheck(this, WeightLengthPercentile);

      this.percents = [{
        "Sex": "1",
        "Length": "45",
        "L": "1.44903689",
        "M": "2.289757735",
        "S": "0.149236691",
        "P3": "1.597028518",
        "P5": "1.690593749",
        "P10": "1.830303285",
        "P25": "2.053702326",
        "P50": "2.289757735",
        "P75": "2.515338948",
        "P90": "2.710846705",
        "P95": "2.824861387",
        "P97": "2.89780918"
      }, {
        "Sex": "1",
        "Length": "45.5",
        "L": "1.31794165",
        "M": "2.38617219",
        "S": "0.144790131",
        "P3": "1.702957417",
        "P5": "1.792954672",
        "P10": "1.928805392",
        "P25": "2.149314246",
        "P50": "2.38617219",
        "P75": "2.615766477",
        "P90": "2.817044967",
        "P95": "2.935328776",
        "P97": "3.011338317"
      }, {
        "Sex": "1",
        "Length": "46.5",
        "L": "1.041730589",
        "M": "2.587097922",
        "S": "0.1365472",
        "P3": "1.918742401",
        "P5": "2.00306056",
        "P10": "2.132607345",
        "P25": "2.34835311",
        "P50": "2.587097922",
        "P75": "2.824925474",
        "P90": "3.038262787",
        "P95": "3.165635227",
        "P97": "3.248240003"
      }, {
        "Sex": "1",
        "Length": "47.5",
        "L": "0.756615683",
        "M": "2.797952593",
        "S": "0.129156077",
        "P3": "2.139283471",
        "P5": "2.219514291",
        "P10": "2.344442385",
        "P25": "2.556834051",
        "P50": "2.797952593",
        "P75": "3.044241159",
        "P90": "3.270147404",
        "P95": "3.407200737",
        "P97": "3.49693518"
      }, {
        "Sex": "1",
        "Length": "48.5",
        "L": "0.472617587",
        "M": "3.017679791",
        "S": "0.122589498",
        "P3": "2.364025965",
        "P5": "2.441421905",
        "P10": "2.563170915",
        "P25": "2.773593907",
        "P50": "3.017679791",
        "P75": "3.272646214",
        "P90": "3.511467362",
        "P95": "3.65864093",
        "P97": "3.755928383"
      }, {
        "Sex": "1",
        "Length": "49.5",
        "L": "0.197455933",
        "M": "3.245225583",
        "S": "0.116802688",
        "P3": "2.59243106",
        "P5": "2.667982282",
        "P10": "2.78776291",
        "P25": "2.997514515",
        "P50": "3.245225583",
        "P75": "3.509103506",
        "P90": "3.761071952",
        "P95": "3.918675144",
        "P97": "4.023835077"
      }, {
        "Sex": "1",
        "Length": "50.5",
        "L": "-0.063272822",
        "M": "3.479567767",
        "S": "0.111734963",
        "P3": "2.823966844",
        "P5": "2.89846365",
        "P10": "3.017289051",
        "P25": "3.227549277",
        "P50": "3.479567767",
        "P75": "3.752613117",
        "P90": "4.01788174",
        "P95": "4.18611338",
        "P97": "4.299368538"
      }, {
        "Sex": "1",
        "Length": "51.5",
        "L": "-0.305663778",
        "M": "3.719739648",
        "S": "0.107316407",
        "P3": "3.058104103",
        "P5": "3.132186651",
        "P10": "3.250908274",
        "P25": "3.462735881",
        "P50": "3.719739648",
        "P75": "4.002224198",
        "P90": "4.280884515",
        "P95": "4.459845507",
        "P97": "4.581326217"
      }, {
        "Sex": "1",
        "Length": "52.5",
        "L": "-0.527210764",
        "M": "3.964838222",
        "S": "0.10347453",
        "P3": "3.294322225",
        "P5": "3.368517223",
        "P10": "3.487856107",
        "P25": "3.702195087",
        "P50": "3.964838222",
        "P75": "4.257039544",
        "P90": "4.549132322",
        "P95": "4.738836361",
        "P97": "4.868585555"
      }, {
        "Sex": "1",
        "Length": "53.5",
        "L": "-0.726356263",
        "M": "4.214033476",
        "S": "0.100139369",
        "P3": "3.532109837",
        "P5": "3.606859589",
        "P10": "3.727435106",
        "P25": "3.94512977",
        "P50": "4.214033476",
        "P75": "4.516224426",
        "P90": "4.821741654",
        "P95": "5.022119957",
        "P97": "5.160094928"
      }, {
        "Sex": "1",
        "Length": "54.5",
        "L": "-0.902380499",
        "M": "4.466562625",
        "S": "0.097246097",
        "P3": "3.770975175",
        "P5": "3.846657516",
        "P10": "3.969008144",
        "P25": "4.190815779",
        "P50": "4.466562625",
        "P75": "4.779002851",
        "P90": "5.097890522",
        "P95": "5.308799266",
        "P97": "5.454877316"
      }, {
        "Sex": "1",
        "Length": "55.5",
        "L": "-1.055126826",
        "M": "4.721730669",
        "S": "0.09473644",
        "P3": "4.010448329",
        "P5": "4.087392272",
        "P10": "4.211993219",
        "P25": "4.43859789",
        "P50": "4.721730669",
        "P75": "5.044659815",
        "P90": "5.376817878",
        "P95": "5.598043337",
        "P97": "5.752026649"
      }, {
        "Sex": "1",
        "Length": "56.5",
        "L": "-1.184933443",
        "M": "4.978903744",
        "S": "0.092558749",
        "P3": "4.250088071",
        "P5": "4.328584525",
        "P10": "4.455860069",
        "P25": "4.687882702",
        "P50": "4.978903744",
        "P75": "5.312536448",
        "P90": "5.65782066",
        "P95": "5.889087035",
        "P97": "6.050711037"
      }, {
        "Sex": "1",
        "Length": "57.5",
        "L": "-1.292531809",
        "M": "5.237504753",
        "S": "0.09066765",
        "P3": "4.489485537",
        "P5": "4.569794994",
        "P10": "4.700127546",
        "P25": "4.938133749",
        "P50": "5.237504753",
        "P75": "5.582026947",
        "P90": "5.940251499",
        "P95": "6.181229894",
        "P97": "6.350173518"
      }, {
        "Sex": "1",
        "Length": "58.5",
        "L": "-1.378973111",
        "M": "5.497008915",
        "S": "0.089023438",
        "P3": "4.728267233",
        "P5": "4.810625098",
        "P10": "4.94436155",
        "P25": "5.188867126",
        "P50": "5.497008915",
        "P75": "5.85257519",
        "P90": "6.22351642",
        "P95": "6.473835067",
        "P97": "6.649732739"
      }, {
        "Sex": "1",
        "Length": "59.5",
        "L": "-1.445563111",
        "M": "5.756939907",
        "S": "0.087591418",
        "P3": "4.966096999",
        "P5": "5.050717205",
        "P10": "5.188173227",
        "P25": "5.439647821",
        "P50": "5.756939907",
        "P75": "6.123671792",
        "P90": "6.507072866",
        "P95": "6.766328167",
        "P97": "6.94878282"
      }, {
        "Sex": "1",
        "Length": "60.5",
        "L": "-1.49380121",
        "M": "6.016866693",
        "S": "0.086341291",
        "P3": "5.202677038",
        "P5": "5.289754427",
        "P10": "5.431217262",
        "P25": "5.690086611",
        "P50": "6.016866693",
        "P75": "6.394851791",
        "P90": "6.790428163",
        "P95": "7.058196003",
        "P97": "7.246792315"
      }, {
        "Sex": "1",
        "Length": "61.5",
        "L": "-1.525332827",
        "M": "6.276400575",
        "S": "0.085246598",
        "P3": "5.437748497",
        "P5": "5.527460202",
        "P10": "5.673190232",
        "P25": "5.939837222",
        "P50": "6.276400575",
        "P75": "6.66569255",
        "P90": "7.073138226",
        "P95": "7.348985362",
        "P97": "7.543302768"
      }, {
        "Sex": "1",
        "Length": "62.5",
        "L": "-1.541839648",
        "M": "6.535195541",
        "S": "0.084284401",
        "P3": "5.671089001",
        "P5": "5.763595946",
        "P10": "5.91382859",
        "P25": "6.18859526",
        "P50": "6.535195541",
        "P75": "6.935815081",
        "P90": "7.354807872",
        "P95": "7.638300762",
        "P97": "7.837923511"
      }, {
        "Sex": "1",
        "Length": "63.5",
        "L": "-1.545098045",
        "M": "6.792942366",
        "S": "0.083434649",
        "P3": "5.902515543",
        "P5": "5.997962236",
        "P10": "6.152907479",
        "P25": "6.436093976",
        "P50": "6.792942366",
        "P75": "7.204878803",
        "P90": "7.635088323",
        "P95": "7.925804423",
        "P97": "8.130333399"
      }, {
        "Sex": "1",
        "Length": "64.5",
        "L": "-1.536863318",
        "M": "7.049370425",
        "S": "0.08268004",
        "P3": "6.131880558",
        "P5": "6.230395557",
        "P10": "6.390238592",
        "P25": "6.682104069",
        "P50": "7.049370425",
        "P75": "7.472584314",
        "P90": "7.9136782",
        "P95": "8.211213607",
        "P97": "8.420274027"
      }, {
        "Sex": "1",
        "Length": "65.5",
        "L": "-1.518786093",
        "M": "7.304248994",
        "S": "0.082005843",
        "P3": "6.359068402",
        "P5": "6.460765369",
        "P10": "6.625668165",
        "P25": "6.926433317",
        "P50": "7.304248994",
        "P75": "7.738675499",
        "P90": "8.190324128",
        "P95": "8.494298133",
        "P97": "8.707543698"
      }, {
        "Sex": "1",
        "Length": "66.5",
        "L": "-1.49249029",
        "M": "7.557381995",
        "S": "0.081399411",
        "P3": "6.583997561",
        "P5": "6.688974915",
        "P10": "6.859075839",
        "P25": "7.168922842",
        "P50": "7.557381995",
        "P75": "8.002934684",
        "P90": "8.46481824",
        "P95": "8.774880112",
        "P97": "8.991998822"
      }, {
        "Sex": "1",
        "Length": "67.5",
        "L": "-1.459487925",
        "M": "7.808610136",
        "S": "0.080850107",
        "P3": "6.806616368",
        "P5": "6.914957848",
        "P10": "7.090372671",
        "P25": "7.409447317",
        "P50": "7.808610136",
        "P75": "8.26518536",
        "P90": "8.736998815",
        "P95": "9.052831095",
        "P97": "9.27354736"
      }, {
        "Sex": "1",
        "Length": "68.5",
        "L": "-1.421167427",
        "M": "8.057810266",
        "S": "0.08034908",
        "P3": "7.026901165",
        "P5": "7.138676485",
        "P10": "7.319499566",
        "P25": "7.647913807",
        "P50": "8.057810266",
        "P75": "8.525291839",
        "P90": "9.006749431",
        "P95": "9.328070124",
        "P97": "9.552145587"
      }, {
        "Sex": "1",
        "Length": "69.5",
        "L": "-1.378835366",
        "M": "8.304892397",
        "S": "0.079888977",
        "P3": "7.244856495",
        "P5": "7.360121388",
        "P10": "7.54642602",
        "P25": "7.884259416",
        "P50": "8.304892397",
        "P75": "8.783156413",
        "P90": "9.273996989",
        "P95": "9.600562566",
        "P97": "9.827797569"
      }, {
        "Sex": "1",
        "Length": "70.5",
        "L": "-1.333634661",
        "M": "8.549802669",
        "S": "0.079463915",
        "P3": "7.460510099",
        "P5": "7.579307642",
        "P10": "7.771148283",
        "P25": "8.118452209",
        "P50": "8.549802669",
        "P75": "9.038722435",
        "P90": "9.53871203",
        "P95": "9.870316803",
        "P97": "10.10054839"
      }, {
        "Sex": "1",
        "Length": "71.5",
        "L": "-1.286605147",
        "M": "8.792519752",
        "S": "0.079069193",
        "P3": "7.67391364",
        "P5": "7.796274848",
        "P10": "7.993688292",
        "P25": "8.350488663",
        "P50": "8.792519752",
        "P75": "9.291970609",
        "P90": "9.800906186",
        "P95": "10.13738322",
        "P97": "10.37048464"
      }, {
        "Sex": "1",
        "Length": "72.5",
        "L": "-1.238665517",
        "M": "9.033054944",
        "S": "0.07870118",
        "P3": "7.885140184",
        "P5": "8.011085035",
        "P10": "8.214092237",
        "P25": "8.580393153",
        "P50": "9.033054944",
        "P75": "9.542918966",
        "P90": "10.06063106",
        "P95": "10.40185184",
        "P97": "10.63773097"
      }, {
        "Sex": "1",
        "Length": "73.5",
        "L": "-1.19066716",
        "M": "9.271448675",
        "S": "0.078357096",
        "P3": "8.094284811",
        "P5": "8.223822595",
        "P10": "8.432429492",
        "P25": "8.808215482",
        "P50": "9.271448675",
        "P75": "9.791619211",
        "P90": "10.31797568",
        "P95": "10.66385133",
        "P97": "10.90245061"
      }, {
        "Sex": "1",
        "Length": "74.5",
        "L": "-1.143316882",
        "M": "9.507773605",
        "S": "0.078035021",
        "P3": "8.301459453",
        "P5": "8.434590571",
        "P10": "8.648791006",
        "P25": "9.034032141",
        "P50": "9.507773605",
        "P75": "10.03815952",
        "P90": "10.57306631",
        "P95": "10.92354547",
        "P97": "11.16483888"
      }, {
        "Sex": "1",
        "Length": "75.5",
        "L": "-1.097263403",
        "M": "9.742129356",
        "S": "0.077733651",
        "P3": "8.506795026",
        "P5": "8.643511567",
        "P10": "8.863288423",
        "P25": "9.257942887",
        "P50": "9.742129356",
        "P75": "10.28265908",
        "P90": "10.82606321",
        "P95": "11.18113275",
        "P97": "11.42512564"
      }, {
        "Sex": "1",
        "Length": "76.5",
        "L": "-1.053083813",
        "M": "9.974642178",
        "S": "0.077452242",
        "P3": "8.710439238",
        "P5": "8.850725924",
        "P10": "9.076052776",
        "P25": "9.480070094",
        "P50": "9.974642178",
        "P75": "10.52526749",
        "P90": "11.07715916",
        "P95": "11.43684424",
        "P97": "11.68357247"
      }, {
        "Sex": "1",
        "Length": "77.5",
        "L": "-1.011294273",
        "M": "10.20546331",
        "S": "0.077190512",
        "P3": "8.912555531",
        "P5": "9.056390619",
        "P10": "9.287233301",
        "P25": "9.700557381",
        "P50": "10.20546331",
        "P75": "10.76616287",
        "P90": "11.32657755",
        "P95": "11.69094178",
        "P97": "11.94047127"
      }, {
        "Sex": "1",
        "Length": "78.5",
        "L": "-0.972360231",
        "M": "10.43476723",
        "S": "0.076948562",
        "P3": "9.113322086",
        "P5": "9.260678201",
        "P10": "9.496996252",
        "P25": "9.91956818",
        "P50": "10.43476723",
        "P75": "11.00554988",
        "P90": "11.57457043",
        "P95": "11.94371638",
        "P97": "12.19614287"
      }, {
        "Sex": "1",
        "Length": "79.5",
        "L": "-0.936705887",
        "M": "10.66274993",
        "S": "0.076726804",
        "P3": "9.312930869",
        "P5": "9.463775754",
        "P10": "9.705523721",
        "P25": "10.13728428",
        "P50": "10.66274993",
        "P75": "11.24365775",
        "P90": "11.8214166",
        "P95": "12.19548652",
        "P97": "12.45093578"
      }, {
        "Sex": "1",
        "Length": "80.5",
        "L": "-0.904722736",
        "M": "10.88962699",
        "S": "0.076525901",
        "P3": "9.511586717",
        "P5": "9.665883884",
        "P10": "9.913012453",
        "P25": "10.35390433",
        "P50": "10.88962699",
        "P75": "11.48073815",
        "P90": "12.06741962",
        "P95": "12.44659654",
        "P97": "12.70522492"
      }, {
        "Sex": "1",
        "Length": "81.5",
        "L": "-0.876777097",
        "M": "11.11563177",
        "S": "0.076346711",
        "P3": "9.709506461",
        "P5": "9.867215725",
        "P10": "10.11967266",
        "P25": "10.5696423",
        "P50": "11.11563177",
        "P75": "11.71706321",
        "P90": "12.31290587",
        "P95": "12.69741505",
        "P97": "12.9594104"
      }, {
        "Sex": "1",
        "Length": "82.5",
        "L": "-0.853216568",
        "M": "11.34101346",
        "S": "0.076190236",
        "P3": "9.90691806",
        "P5": "10.06799596",
        "P10": "10.32572684",
        "P25": "10.78472594",
        "P50": "11.34101346",
        "P75": "11.95292329",
        "P90": "12.55822265",
        "P95": "12.94833337",
        "P97": "13.21391629"
      }, {
        "Sex": "1",
        "Length": "83.5",
        "L": "-0.834375406",
        "M": "11.56603512",
        "S": "0.076057579",
        "P3": "10.10405976",
        "P5": "10.26845983",
        "P10": "10.53140858",
        "P25": "10.99939524",
        "P50": "11.56603512",
        "P75": "12.18862496",
        "P90": "12.8037362",
        "P95": "13.19976391",
        "P97": "13.46918953"
      }, {
        "Sex": "1",
        "Length": "84.5",
        "L": "-0.820578855",
        "M": "11.79097176",
        "S": "0.075949901",
        "P3": "10.30117927",
        "P5": "10.46885221",
        "P10": "10.73696139",
        "P25": "11.21390081",
        "P50": "11.79097176",
        "P75": "12.42448873",
        "P90": "13.04982974",
        "P95": "13.45213869",
        "P97": "13.7256987"
      }, {
        "Sex": "1",
        "Length": "85.5",
        "L": "-0.81214646",
        "M": "12.01610828",
        "S": "0.075868383",
        "P3": "10.49853295",
        "P5": "10.66942663",
        "P10": "10.94263752",
        "P25": "11.42850232",
        "P50": "12.01610828",
        "P75": "12.66084697",
        "P90": "13.29690152",
        "P95": "13.70590772",
        "P97": "13.98393299"
      }, {
        "Sex": "1",
        "Length": "86.5",
        "L": "-0.809394398",
        "M": "12.24173753",
        "S": "0.075814185",
        "P3": "10.69638497",
        "P5": "10.87044435",
        "P10": "11.14869679",
        "P25": "11.64346692",
        "P50": "12.24173753",
        "P75": "12.89804158",
        "P90": "13.5453628",
        "P95": "13.96153752",
        "P97": "14.24440109"
      }, {
        "Sex": "1",
        "Length": "87.5",
        "L": "-0.812636889",
        "M": "12.46815824",
        "S": "0.075788413",
        "P3": "10.89500657",
        "P5": "11.07217344",
        "P10": "11.35540546",
        "P25": "11.85906768",
        "P50": "12.46815824",
        "P75": "13.13642183",
        "P90": "13.79563586",
        "P95": "14.21950956",
        "P97": "14.50763019"
      }, {
        "Sex": "1",
        "Length": "88.5",
        "L": "-0.822186712",
        "M": "12.69567298",
        "S": "0.075792075",
        "P3": "11.0946752",
        "P5": "11.27488782",
        "P10": "11.56303507",
        "P25": "12.07558197",
        "P50": "12.69567298",
        "P75": "13.37634196",
        "P90": "14.04815191",
        "P95": "14.48031873",
        "P97": "14.77416503"
      }, {
        "Sex": "1",
        "Length": "89.5",
        "L": "-0.838354876",
        "M": "12.92458613",
        "S": "0.075826044",
        "P3": "11.29567376",
        "P5": "11.47886643",
        "P10": "11.77186133",
        "P25": "12.29328999",
        "P50": "12.92458613",
        "P75": "13.6181589",
        "P90": "14.30334895",
        "P95": "14.74447181",
        "P97": "15.044567"
      }, {
        "Sex": "1",
        "Length": "90.5",
        "L": "-0.861449493",
        "M": "13.15520182",
        "S": "0.075891019",
        "P3": "11.49828978",
        "P5": "11.68439228",
        "P10": "11.98216306",
        "P25": "12.51247319",
        "P50": "13.15520182",
        "P75": "13.86222981",
        "P90": "14.56166964",
        "P95": "15.01248591",
        "P97": "15.31941326"
      }, {
        "Sex": "1",
        "Length": "91.5",
        "L": "-0.891773904",
        "M": "13.38782185",
        "S": "0.075987476",
        "P3": "11.70281463",
        "P5": "11.89175157",
        "P10": "12.19422113",
        "P25": "12.73341284",
        "P50": "13.38782185",
        "P75": "14.10890963",
        "P90": "14.82355899",
        "P95": "15.28488689",
        "P97": "15.59929608"
      }, {
        "Sex": "1",
        "Length": "92.5",
        "L": "-0.929617736",
        "M": "13.6227442",
        "S": "0.076115636",
        "P3": "11.90954225",
        "P5": "12.10123261",
        "P10": "12.4083174",
        "P25": "12.95638887",
        "P50": "13.6227442",
        "P75": "14.35854899",
        "P90": "15.08946216",
        "P95": "15.5622076",
        "P97": "15.88482163"
      }, {
        "Sex": "1",
        "Length": "93.5",
        "L": "-0.975268944",
        "M": "13.86025986",
        "S": "0.076275395",
        "P3": "12.1187693",
        "P5": "12.31312548",
        "P10": "12.62473383",
        "P25": "13.18167788",
        "P50": "13.86025986",
        "P75": "14.61149059",
        "P90": "15.35982164",
        "P95": "15.84498667",
        "P97": "16.17661055"
      }, {
        "Sex": "1",
        "Length": "94.5",
        "L": "-1.028990493",
        "M": "14.10065234",
        "S": "0.076466299",
        "P3": "12.33079298",
        "P5": "12.52772045",
        "P10": "12.84375146",
        "P25": "13.40955269",
        "P50": "14.10065234",
        "P75": "14.86806787",
        "P90": "15.63507513",
        "P95": "16.13376622",
        "P97": "16.47529604"
      }, {
        "Sex": "1",
        "Length": "95.5",
        "L": "-1.091024455",
        "M": "14.34419522",
        "S": "0.076687482",
        "P3": "12.54591071",
        "P5": "12.74530738",
        "P10": "13.06564953",
        "P25": "13.64028082",
        "P50": "14.34419522",
        "P75": "15.12860179",
        "P90": "15.91565257",
        "P95": "16.42909034",
        "P97": "16.78152407"
      }, {
        "Sex": "1",
        "Length": "96.5",
        "L": "-1.161574946",
        "M": "14.59115139",
        "S": "0.076937631",
        "P3": "12.76441819",
        "P5": "12.9661743",
        "P10": "13.29070461",
        "P25": "13.87412402",
        "P50": "14.59115139",
        "P75": "15.39339911",
        "P90": "16.20197359",
        "P95": "16.73150285",
        "P97": "17.09595206"
      }, {
        "Sex": "1",
        "Length": "97.5",
        "L": "-1.240820737",
        "M": "14.84177007",
        "S": "0.077214912",
        "P3": "12.98660961",
        "P5": "13.19060724",
        "P10": "13.5191898",
        "P25": "14.11133652",
        "P50": "14.84177007",
        "P75": "15.66274835",
        "P90": "16.494444",
        "P95": "17.04154573",
        "P97": "17.41925008"
      }, {
        "Sex": "1",
        "Length": "98.5",
        "L": "-1.328879402",
        "M": "15.0962879",
        "S": "0.077516968",
        "P3": "13.21277431",
        "P5": "13.41888786",
        "P10": "13.75137383",
        "P25": "14.3521657",
        "P50": "15.0962879",
        "P75": "15.93691963",
        "P90": "16.79345342",
        "P95": "17.35975605",
        "P97": "17.75209809"
      }, {
        "Sex": "1",
        "Length": "99.5",
        "L": "-1.425809463",
        "M": "15.35492729",
        "S": "0.077840877",
        "P3": "13.44319598",
        "P5": "13.65129272",
        "P10": "13.98752021",
        "P25": "14.59685108",
        "P50": "15.35492729",
        "P75": "16.21616173",
        "P90": "17.09937174",
        "P95": "17.68666374",
        "P97": "18.09518631"
      }, {
        "Sex": "1",
        "Length": "100.5",
        "L": "-1.531575592",
        "M": "15.61789822",
        "S": "0.078183177",
        "P3": "13.67814897",
        "P5": "13.88809057",
        "P10": "14.22788616",
        "P25": "14.8456253",
        "P50": "15.61789822",
        "P75": "16.50070256",
        "P90": "17.41254676",
        "P95": "18.02278798",
        "P97": "18.44921206"
      }, {
        "Sex": "1",
        "Length": "101.5",
        "L": "-1.646081976",
        "M": "15.88539464",
        "S": "0.078539804",
        "P3": "13.91789949",
        "P5": "14.12954284",
        "P10": "14.47272193",
        "P25": "15.09871195",
        "P50": "15.88539464",
        "P75": "16.79074422",
        "P90": "17.73329941",
        "P95": "18.36863542",
        "P97": "18.81488277"
      }, {
        "Sex": "1",
        "Length": "102.5",
        "L": "-1.769082483",
        "M": "16.15760201",
        "S": "0.078906277",
        "P3": "14.16269719",
        "P5": "14.37589784",
        "P10": "14.722269",
        "P25": "15.35632936",
        "P50": "16.15760201",
        "P75": "17.08646948",
        "P90": "18.06192364",
        "P95": "18.72469422",
        "P97": "19.19290687"
      }, {
        "Sex": "1",
        "Length": "103.5",
        "L": "-1.900221246",
        "M": "16.43469418",
        "S": "0.079277694",
        "P3": "14.41277633",
        "P5": "14.62739094",
        "P10": "14.97675902",
        "P25": "15.61868832",
        "P50": "16.43469418",
        "P75": "17.38803782",
        "P90": "18.39868195",
        "P95": "19.09143177",
        "P97": "19.58399633"
      }, {
        "Sex": "2",
        "Length": "45",
        "L": "0.666839915",
        "M": "2.305396985",
        "S": "0.168969897",
        "P3": "1.61302626",
        "P5": "1.69530853",
        "P10": "1.824644762",
        "P25": "2.047707671",
        "P50": "2.305396985",
        "P75": "2.573066177",
        "P90": "2.822211988",
        "P95": "2.974943903",
        "P97": "3.075559629"
      }, {
        "Sex": "2",
        "Length": "45.5",
        "L": "0.699616404",
        "M": "2.403256702",
        "S": "0.157654766",
        "P3": "1.723754478",
        "P5": "1.805222631",
        "P10": "1.932850514",
        "P25": "2.151843669",
        "P50": "2.403256702",
        "P75": "2.662835955",
        "P90": "2.90317596",
        "P95": "3.049956403",
        "P97": "3.146436315"
      }, {
        "Sex": "2",
        "Length": "46.5",
        "L": "0.747915684",
        "M": "2.606020484",
        "S": "0.139389663",
        "P3": "1.946460733",
        "P5": "2.026496007",
        "P10": "2.151303478",
        "P25": "2.363960397",
        "P50": "2.606020484",
        "P75": "2.853889995",
        "P90": "3.081735239",
        "P95": "3.220172553",
        "P97": "3.310892709"
      }, {
        "Sex": "2",
        "Length": "47.5",
        "L": "0.751754737",
        "M": "2.817114082",
        "S": "0.125837223",
        "P3": "2.170805299",
        "P5": "2.249554961",
        "P10": "2.37216013",
        "P25": "2.580564792",
        "P50": "2.817114082",
        "P75": "3.058703241",
        "P90": "3.280280685",
        "P95": "3.414702479",
        "P97": "3.502712567"
      }, {
        "Sex": "2",
        "Length": "48.5",
        "L": "0.691329975",
        "M": "3.035356101",
        "S": "0.115888948",
        "P3": "2.396673878",
        "P5": "2.474214132",
        "P10": "2.595089193",
        "P25": "2.80098615",
        "P50": "3.035356101",
        "P75": "3.275451769",
        "P90": "3.496304856",
        "P95": "3.630584823",
        "P97": "3.718622563"
      }, {
        "Sex": "2",
        "Length": "49.5",
        "L": "0.559107556",
        "M": "3.259693318",
        "S": "0.108648608",
        "P3": "2.623845869",
        "P5": "2.700266794",
        "P10": "2.819827425",
        "P25": "3.024685576",
        "P50": "3.259693318",
        "P75": "3.502419401",
        "P90": "3.72742595",
        "P95": "3.865029598",
        "P97": "3.955569802"
      }, {
        "Sex": "2",
        "Length": "50.5",
        "L": "0.361549127",
        "M": "3.48922017",
        "S": "0.103402703",
        "P3": "2.852008338",
        "P5": "2.92747924",
        "P10": "3.046162798",
        "P25": "3.251250865",
        "P50": "3.48922017",
        "P75": "3.738025406",
        "P90": "3.971395567",
        "P95": "4.115400222",
        "P97": "4.210681986"
      }, {
        "Sex": "2",
        "Length": "51.5",
        "L": "0.116436203",
        "M": "3.723195489",
        "S": "0.099599651",
        "P3": "3.08077988",
        "P5": "3.155581427",
        "P10": "3.273900839",
        "P25": "3.480372197",
        "P50": "3.723195489",
        "P75": "3.980867931",
        "P90": "4.2261236",
        "P95": "4.37920066",
        "P97": "4.481218409"
      }, {
        "Sex": "2",
        "Length": "52.5",
        "L": "-0.152509094",
        "M": "3.961034945",
        "S": "0.096830356",
        "P3": "3.309743456",
        "P5": "3.384266533",
        "P10": "3.502832371",
        "P25": "3.71180166",
        "P50": "3.961034945",
        "P75": "4.229754129",
        "P90": "4.489708217",
        "P95": "4.654076004",
        "P97": "4.76453627"
      }, {
        "Sex": "2",
        "Length": "53.5",
        "L": "-0.421478627",
        "M": "4.202270022",
        "S": "0.09480477",
        "P3": "3.538486235",
        "P5": "3.613206007",
        "P10": "3.732716377",
        "P25": "3.945306087",
        "P50": "4.202270022",
        "P75": "4.483693775",
        "P90": "4.760455514",
        "P95": "4.937828528",
        "P97": "5.058090815"
      }, {
        "Sex": "2",
        "Length": "54.5",
        "L": "-0.671388289",
        "M": "4.446476028",
        "S": "0.093323068",
        "P3": "3.766648425",
        "P5": "3.842082114",
        "P10": "3.963283111",
        "P25": "4.180622529",
        "P50": "4.446476028",
        "P75": "4.741844038",
        "P90": "5.036873117",
        "P95": "5.228445091",
        "P97": "5.359480791"
      }, {
        "Sex": "2",
        "Length": "55.5",
        "L": "-0.889973526",
        "M": "4.693220151",
        "S": "0.092246459",
        "P3": "3.99394852",
        "P5": "4.070613878",
        "P10": "4.194251416",
        "P25": "4.417443974",
        "P50": "4.693220151",
        "P75": "5.003447846",
        "P90": "5.317643817",
        "P95": "5.524112903",
        "P97": "5.666497508"
      }, {
        "Sex": "2",
        "Length": "56.5",
        "L": "-1.071844454",
        "M": "4.942029343",
        "S": "0.091473166",
        "P3": "4.22019582",
        "P5": "4.298576091",
        "P10": "4.425349217",
        "P25": "4.65542253",
        "P50": "4.942029343",
        "P75": "5.267777008",
        "P90": "5.601587401",
        "P95": "5.823223715",
        "P97": "5.977171656"
      }, {
        "Sex": "2",
        "Length": "57.5",
        "L": "-1.216671445",
        "M": "5.192403337",
        "S": "0.090923715",
        "P3": "4.445271101",
        "P5": "4.525795306",
        "P10": "4.656327074",
        "P25": "4.894194501",
        "P50": "5.192403337",
        "P75": "5.534118638",
        "P90": "5.887634175",
        "P95": "6.124358847",
        "P97": "6.289778737"
      }, {
        "Sex": "2",
        "Length": "58.5",
        "L": "-1.327360462",
        "M": "5.443830096",
        "S": "0.090532906",
        "P3": "4.669110719",
        "P5": "4.75214371",
        "P10": "4.886964606",
        "P25": "5.133398784",
        "P50": "5.443830096",
        "P75": "5.801772695",
        "P90": "6.174806785",
        "P95": "6.426273604",
        "P97": "6.602835746"
      }, {
        "Sex": "2",
        "Length": "59.5",
        "L": "-1.408261687",
        "M": "5.69581328",
        "S": "0.090246768",
        "P3": "4.891682562",
        "P5": "4.977524782",
        "P10": "5.117070202",
        "P25": "5.372695342",
        "P50": "5.69581328",
        "P75": "6.070070759",
        "P90": "6.462216757",
        "P95": "6.72787876",
        "P97": "6.91507564"
      }, {
        "Sex": "2",
        "Length": "60.5",
        "L": "-1.464051065",
        "M": "5.947889759",
        "S": "0.090021128",
        "P3": "5.112971092",
        "P5": "5.201863101",
        "P10": "5.34647836",
        "P25": "5.611774363",
        "P50": "5.947889759",
        "P75": "6.33839139",
        "P90": "6.749065162",
        "P95": "7.028227249",
        "P97": "7.225424353"
      }, {
        "Sex": "2",
        "Length": "61.5",
        "L": "-1.499105627",
        "M": "6.199640267",
        "S": "0.089820688",
        "P3": "5.332968047",
        "P5": "5.42509726",
        "P10": "5.57504651",
        "P25": "5.850360248",
        "P50": "6.199640267",
        "P75": "6.606171625",
        "P90": "7.034644746",
        "P95": "7.326504329",
        "P97": "7.532980555"
      }, {
        "Sex": "2",
        "Length": "62.5",
        "L": "-1.517197913",
        "M": "6.450695818",
        "S": "0.089618171",
        "P3": "5.551666409",
        "P5": "5.64717487",
        "P10": "5.80265208",
        "P25": "6.088213081",
        "P50": "6.450695818",
        "P75": "6.872915135",
        "P90": "7.318342",
        "P95": "7.622019771",
        "P97": "7.836997958"
      }, {
        "Sex": "2",
        "Length": "63.5",
        "L": "-1.521479703",
        "M": "6.700736725",
        "S": "0.089393174",
        "P3": "5.769060531",
        "P5": "5.868051772",
        "P10": "6.029190763",
        "P25": "6.325126546",
        "P50": "6.700736725",
        "P75": "7.138192567",
        "P90": "7.59963607",
        "P95": "7.914202723",
        "P97": "8.136875366"
      }, {
        "Sex": "2",
        "Length": "64.5",
        "L": "-1.514481331",
        "M": "6.949493534",
        "S": "0.089131254",
        "P3": "5.985144406",
        "P5": "6.08769022",
        "P10": "6.254574837",
        "P25": "6.560927184",
        "P50": "6.949493534",
        "P75": "7.401643498",
        "P90": "7.878098236",
        "P95": "8.202595917",
        "P97": "8.432144771"
      }, {
        "Sex": "2",
        "Length": "65.5",
        "L": "-1.498204976",
        "M": "7.196744733",
        "S": "0.088822943",
        "P3": "6.199912645",
        "P5": "6.306059022",
        "P10": "6.478732239",
        "P25": "6.795472337",
        "P50": "7.196744733",
        "P75": "7.662974516",
        "P90": "8.15338936",
        "P95": "8.486850867",
        "P97": "8.722463522"
      }, {
        "Sex": "2",
        "Length": "66.5",
        "L": "-1.474231858",
        "M": "7.442313819",
        "S": "0.088462854",
        "P3": "6.413361985",
        "P5": "6.523134146",
        "P10": "6.701605945",
        "P25": "7.028648027",
        "P50": "7.442313819",
        "P75": "7.921956215",
        "P90": "8.425256531",
        "P95": "8.766723181",
        "P97": "9.00760766"
      }, {
        "Sex": "2",
        "Length": "67.5",
        "L": "-1.443808911",
        "M": "7.686067039",
        "S": "0.088048963",
        "P3": "6.625492182",
        "P5": "6.738899009",
        "P10": "6.923153436",
        "P25": "7.260367355",
        "P50": "7.686067039",
        "P75": "8.17842062",
        "P90": "8.693529674",
        "P95": "9.04206755",
        "P97": "9.287464886"
      }, {
        "Sex": "2",
        "Length": "68.5",
        "L": "-1.407959107",
        "M": "7.92790936",
        "S": "0.087581916",
        "P3": "6.836308446",
        "P5": "6.953345818",
        "P10": "7.143346471",
        "P25": "7.49056809",
        "P50": "7.92790936",
        "P75": "8.432256562",
        "P90": "8.958117069",
        "P95": "9.312833279",
        "P97": "9.562029761"
      }, {
        "Sex": "2",
        "Length": "69.5",
        "L": "-1.367521025",
        "M": "8.167783677",
        "S": "0.087064605",
        "P3": "7.045821054",
        "P5": "7.166475096",
        "P10": "7.362170518",
        "P25": "7.719212002",
        "P50": "8.167783677",
        "P75": "8.683408324",
        "P90": "9.219002186",
        "P95": "9.579058661",
        "P97": "9.831395513"
      }, {
        "Sex": "2",
        "Length": "70.5",
        "L": "-1.32324327",
        "M": "8.405666621",
        "S": "0.086501667",
        "P3": "7.254047943",
        "P5": "7.378297165",
        "P10": "7.579624634",
        "P25": "7.946282454",
        "P50": "8.405666621",
        "P75": "8.931870645",
        "P90": "9.47623884",
        "P95": "9.840866488",
        "P97": "10.09574977"
      }, {
        "Sex": "2",
        "Length": "71.5",
        "L": "-1.275834578",
        "M": "8.641566305",
        "S": "0.085899159",
        "P3": "7.461015613",
        "P5": "7.588832522",
        "P10": "7.795721098",
        "P25": "8.171783008",
        "P50": "8.641566305",
        "P75": "9.177685743",
        "P90": "9.729947188",
        "P95": "10.09845888",
        "P97": "10.35536822"
      }, {
        "Sex": "2",
        "Length": "72.5",
        "L": "-1.226014257",
        "M": "8.875519723",
        "S": "0.085264271",
        "P3": "7.666760352",
        "P5": "7.798112411",
        "P10": "8.010485082",
        "P25": "8.395735838",
        "P50": "8.875519723",
        "P75": "9.420939935",
        "P90": "9.980309503",
        "P95": "10.3521122",
        "P97": "10.61060874"
      }, {
        "Sex": "2",
        "Length": "73.5",
        "L": "-1.174555804",
        "M": "9.107590221",
        "S": "0.084605096",
        "P3": "7.871329398",
        "P5": "8.006179356",
        "P10": "8.223954294",
        "P25": "8.61818018",
        "P50": "9.107590221",
        "P75": "9.661760324",
        "P90": "10.22756595",
        "P95": "10.60217203",
        "P97": "10.86190554"
      }, {
        "Sex": "2",
        "Length": "74.5",
        "L": "-1.122323639",
        "M": "9.337865054",
        "S": "0.083930435",
        "P3": "8.07478203",
        "P5": "8.213087629",
        "P10": "8.436178609",
        "P25": "8.839170822",
        "P50": "9.337865054",
        "P75": "9.900311537",
        "P90": "10.47201035",
        "P95": "10.84904795",
        "P97": "11.10976332"
      }, {
        "Sex": "2",
        "Length": "75.5",
        "L": "-1.070302348",
        "M": "9.566453061",
        "S": "0.083249631",
        "P3": "8.277190538",
        "P5": "8.418903651",
        "P10": "8.647219687",
        "P25": "9.05877667",
        "P50": "9.566453061",
        "P75": "10.13679255",
        "P90": "10.7139859",
        "P95": "11.09320847",
        "P97": "11.35475136"
      }, {
        "Sex": "2",
        "Length": "76.5",
        "L": "-1.019617172",
        "M": "9.793482492",
        "S": "0.082572421",
        "P3": "8.478641037",
        "P5": "8.623706299",
        "P10": "8.857150596",
        "P25": "9.277079452",
        "P50": "9.793482492",
        "P75": "10.37143354",
        "P90": "10.95388092",
        "P95": "11.33517576",
        "P97": "11.59749766"
      }, {
        "Sex": "2",
        "Length": "77.5",
        "L": "-0.971544123",
        "M": "10.01909902",
        "S": "0.081908788",
        "P3": "8.679234065",
        "P5": "8.82758712",
        "P10": "9.066055489",
        "P25": "9.494172583",
        "P50": "10.01909902",
        "P75": "10.60449286",
        "P90": "11.19212443",
        "P95": "11.57552036",
        "P97": "11.83868308"
      }, {
        "Sex": "2",
        "Length": "78.5",
        "L": "-0.927495981",
        "M": "10.24346467",
        "S": "0.081268832",
        "P3": "8.879084281",
        "P5": "9.03065003",
        "P10": "9.274029292",
        "P25": "9.710160711",
        "P50": "10.24346467",
        "P75": "10.83625465",
        "P90": "11.42918192",
        "P95": "11.81485555",
        "P97": "12.07903468"
      }, {
        "Sex": "2",
        "Length": "79.5",
        "L": "-0.889046221",
        "M": "10.46675386",
        "S": "0.080662561",
        "P3": "9.078322619",
        "P5": "9.233012616",
        "P10": "9.481177715",
        "P25": "9.925157686",
        "P50": "10.46675386",
        "P75": "11.06702353",
        "P90": "11.66554993",
        "P95": "12.05383282",
        "P97": "12.3193224"
      }, {
        "Sex": "2",
        "Length": "80.5",
        "L": "-0.857844783",
        "M": "10.6891553",
        "S": "0.080099785",
        "P3": "9.277093118",
        "P5": "9.434804244",
        "P10": "9.68761705",
        "P25": "10.13928821",
        "P50": "10.6891553",
        "P75": "11.29712459",
        "P90": "11.90175234",
        "P95": "12.29313502",
        "P97": "12.56034996"
      }, {
        "Sex": "2",
        "Length": "81.5",
        "L": "-0.835600041",
        "M": "10.91086924",
        "S": "0.079589888",
        "P3": "9.475553729",
        "P5": "9.636166759",
        "P10": "9.893474476",
        "P25": "10.35268693",
        "P50": "10.91086924",
        "P75": "11.52689868",
        "P90": "12.13833477",
        "P95": "12.53347134",
        "P97": "12.80295084"
      }, {
        "Sex": "2",
        "Length": "82.5",
        "L": "-0.824007806",
        "M": "11.13210717",
        "S": "0.079141623",
        "P3": "9.673874713",
        "P5": "9.837253816",
        "P10": "10.0988884",
        "P25": "10.56549933",
        "P50": "11.13210717",
        "P75": "11.75669976",
        "P90": "12.37585953",
        "P95": "12.77557129",
        "P97": "13.04798203"
      }, {
        "Sex": "2",
        "Length": "83.5",
        "L": "-0.824673085",
        "M": "11.35309164",
        "S": "0.078762888",
        "P3": "9.872236954",
        "P5": "10.03823028",
        "P10": "10.30400903",
        "P25": "10.77788274",
        "P50": "11.35309164",
        "P75": "11.98689198",
        "P90": "12.61490029",
        "P95": "13.02017859",
        "P97": "13.29631805"
      }, {
        "Sex": "2",
        "Length": "84.5",
        "L": "-0.839021353",
        "M": "11.57405623",
        "S": "0.078460511",
        "P3": "10.07082987",
        "P5": "10.2392715",
        "P10": "10.50899902",
        "P25": "10.9900078",
        "P50": "11.57405623",
        "P75": "12.21784683",
        "P90": "12.85603662",
        "P95": "13.26804494",
        "P97": "13.54884494"
      }, {
        "Sex": "2",
        "Length": "85.5",
        "L": "-0.868191531",
        "M": "11.79524697",
        "S": "0.078240047",
        "P3": "10.26984825",
        "P5": "10.44056188",
        "P10": "10.71403421",
        "P25": "11.20206069",
        "P50": "11.79524697",
        "P75": "12.44994139",
        "P90": "13.0998487",
        "P95": "13.51992325",
        "P97": "13.80645301"
      }, {
        "Sex": "2",
        "Length": "86.5",
        "L": "-0.912987527",
        "M": "12.0169203",
        "S": "0.078105554",
        "P3": "10.46949211",
        "P5": "10.64229536",
        "P10": "10.9193044",
        "P25": "11.41424337",
        "P50": "12.0169203",
        "P75": "12.68355339",
        "P90": "13.346911",
        "P95": "13.77656207",
        "P97": "14.07003317"
      }, {
        "Sex": "2",
        "Length": "87.5",
        "L": "-0.973732843",
        "M": "12.23934838",
        "S": "0.078059544",
        "P3": "10.66996042",
        "P5": "10.84467191",
        "P10": "11.12501362",
        "P25": "11.62677789",
        "P50": "12.23934838",
        "P75": "12.91906338",
        "P90": "13.59778826",
        "P95": "14.03869722",
        "P97": "14.3404656"
      }, {
        "Sex": "2",
        "Length": "88.5",
        "L": "-1.050238631",
        "M": "12.46281861",
        "S": "0.078102898",
        "P3": "10.87145032",
        "P5": "11.04789724",
        "P10": "11.33138025",
        "P25": "11.83990685",
        "P50": "12.46281861",
        "P75": "13.15685175",
        "P90": "13.85303006",
        "P95": "14.3070456",
        "P97": "14.61861423"
      }, {
        "Sex": "2",
        "Length": "89.5",
        "L": "-1.141750538",
        "M": "12.68763627",
        "S": "0.078234935",
        "P3": "11.07415394",
        "P5": "11.25218061",
        "P10": "11.53863663",
        "P25": "12.05389519",
        "P50": "12.68763627",
        "P75": "13.39729953",
        "P90": "14.1131669",
        "P95": "14.5822978",
        "P97": "14.90531723"
      }, {
        "Sex": "2",
        "Length": "90.5",
        "L": "-1.246935039",
        "M": "12.9141268",
        "S": "0.078453576",
        "P3": "11.27825609",
        "P5": "11.45773296",
        "P10": "11.74702786",
        "P25": "12.26903094",
        "P50": "12.9141268",
        "P75": "13.64078954",
        "P90": "14.37870706",
        "P95": "14.86511095",
        "P97": "15.20137719"
      }, {
        "Sex": "2",
        "Length": "91.5",
        "L": "-1.363881842",
        "M": "13.1426393",
        "S": "0.078755652",
        "P3": "11.48393116",
        "P5": "11.66476403",
        "P10": "11.95681",
        "P25": "12.48562589",
        "P50": "13.1426393",
        "P75": "13.88771008",
        "P90": "14.65013514",
        "P95": "15.1561012",
        "P97": "15.50754879"
      }, {
        "Sex": "2",
        "Length": "92.5",
        "L": "-1.490235591",
        "M": "13.37354263",
        "S": "0.079137144",
        "P3": "11.69134669",
        "P5": "11.87348344",
        "P10": "12.16824818",
        "P25": "12.70401141",
        "P50": "13.37354263",
        "P75": "14.13845236",
        "P90": "14.92790917",
        "P95": "15.45583919",
        "P97": "15.82453284"
      }, {
        "Sex": "2",
        "Length": "93.5",
        "L": "-1.623204367",
        "M": "13.60723197",
        "S": "0.079593737",
        "P3": "11.9006578",
        "P5": "12.08409573",
        "P10": "12.38161332",
        "P25": "12.92453941",
        "P50": "13.60723197",
        "P75": "14.39341959",
        "P90": "15.21246325",
        "P95": "15.76484189",
        "P97": "16.1529576"
      }, {
        "Sex": "2",
        "Length": "94.5",
        "L": "-1.759750536",
        "M": "13.84412275",
        "S": "0.080121122",
        "P3": "12.11201227",
        "P5": "12.29680209",
        "P10": "12.5971797",
        "P25": "13.14757603",
        "P50": "13.84412275",
        "P75": "14.65302443",
        "P90": "15.5042068",
        "P95": "16.08356951",
        "P97": "16.49337198"
      }, {
        "Sex": "2",
        "Length": "95.5",
        "L": "-1.896722704",
        "M": "14.08464853",
        "S": "0.080715361",
        "P3": "12.32555163",
        "P5": "12.51179974",
        "P10": "12.81522219",
        "P25": "13.37349756",
        "P50": "14.08464853",
        "P75": "14.91769089",
        "P90": "15.80352641",
        "P95": "16.41242128",
        "P97": "16.84623319"
      }, {
        "Sex": "2",
        "Length": "96.5",
        "L": "-2.031079769",
        "M": "14.32925018",
        "S": "0.081372938",
        "P3": "12.54141939",
        "P5": "12.72928607",
        "P10": "13.03601505",
        "P25": "13.60268237",
        "P50": "14.32925018",
        "P75": "15.1878468",
        "P90": "16.11078394",
        "P95": "16.75173457",
        "P97": "17.21190355"
      }, {
        "Sex": "2",
        "Length": "97.5",
        "L": "-2.159985258",
        "M": "14.57837334",
        "S": "0.082090922",
        "P3": "12.75976132",
        "P5": "12.9494582",
        "P10": "13.25983009",
        "P25": "13.83550775",
        "P50": "14.57837334",
        "P75": "15.4639243",
        "P90": "16.42631821",
        "P95": "17.10178143",
        "P97": "17.59063809"
      }, {
        "Sex": "2",
        "Length": "98.5",
        "L": "-2.280992946",
        "M": "14.8324557",
        "S": "0.082866693",
        "P3": "12.98073439",
        "P5": "13.17251854",
        "P10": "13.48693728",
        "P25": "14.07234276",
        "P50": "14.8324557",
        "P75": "15.74634796",
        "P90": "16.7504403",
        "P95": "17.46276845",
        "P97": "17.9825849"
      }, {
        "Sex": "2",
        "Length": "99.5",
        "L": "-2.392125361",
        "M": "15.09192012",
        "S": "0.083697706",
        "P3": "13.20451042",
        "P5": "13.39867734",
        "P10": "13.71760521",
        "P25": "14.31354493",
        "P50": "15.09192012",
        "P75": "16.03552754",
        "P90": "17.08342993",
        "P95": "17.83483458",
        "P97": "18.38778042"
      }, {
        "Sex": "2",
        "Length": "100.5",
        "L": "-2.491985117",
        "M": "15.35716167",
        "S": "0.08458092",
        "P3": "13.43128538",
        "P5": "13.62815947",
        "P10": "13.95210374",
        "P25": "14.55945515",
        "P50": "15.35716167",
        "P75": "16.33184172",
        "P90": "17.42552542",
        "P95": "18.21805007",
        "P97": "18.80615497"
      }, {
        "Sex": "2",
        "Length": "101.5",
        "L": "-2.579688446",
        "M": "15.62854849",
        "S": "0.085512655",
        "P3": "13.66127661",
        "P5": "13.86120318",
        "P10": "14.19070443",
        "P25": "14.81039951",
        "P50": "15.62854849",
        "P75": "16.63563645",
        "P90": "17.77692011",
        "P95": "18.61241094",
        "P97": "19.23752318"
      }, {
        "Sex": "2",
        "Length": "102.5",
        "L": "-2.654922113",
        "M": "15.90640903",
        "S": "0.086487929",
        "P3": "13.89473275",
        "P5": "14.09806774",
        "P10": "14.43368432",
        "P25": "15.06668553",
        "P50": "15.90640903",
        "P75": "16.94720609",
        "P90": "18.13774777",
        "P95": "19.01783635",
        "P97": "19.68159413"
      }, {
        "Sex": "2",
        "Length": "103.5",
        "L": "-2.717782155",
        "M": "16.19103966",
        "S": "0.087500575",
        "P3": "14.13192569",
        "P5": "14.33902847",
        "P10": "14.68132531",
        "P25": "15.32860703",
        "P50": "16.19103966",
        "P75": "17.2667985",
        "P90": "18.50808075",
        "P95": "19.43416015",
        "P97": "20.13795636"
      }];
    }

    WeightLengthPercentile.prototype.getWithSexHeightAndWeight = function getWithSexHeightAndWeight(sex, heightCms, weightKgs) {

      var tSex = sex.toLowerCase() == 'male' || sex.toLowerCase() == 'm' ? 1 : 2;

      var heightRounded = Math.round(heightCms);
      heightRounded += 0.5;

      var pctObj = _.find(this.percents, function (p) {
        return p.Sex == tSex && p.Length == heightRounded;
      });

      var percentages = [];
      var keys = Object.keys(pctObj);
      var values = Object.values(pctObj);
      for (var k = 0; k < keys.length; k++) {
        if (keys[k].substr(0, 1) == 'P') {
          var percent = keys[k].substr(1, keys[k].length - 1);
          percentages.push({ 'percent': percent, 'value': values[k] });
        }
      }

      percentages = _.orderBy(percentages, 'value');

      var currentPercent = percentages[0];

      for (var p = 0; p < percentages.length; p++) {
        if (weightKgs >= percentages[p].value) {
          currentPercent = percentages[p];
        }
      }
      return currentPercent.percent;
    };

    return WeightLengthPercentile;
  }();
});;
define('go/patientSearch',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper', './globals', 'lodash', '../data/go/data'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper, _globals, _lodash, _data) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PatientSearch = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Pat = function Pat(id, name, data) {
    _classCallCheck(this, Pat);

    this.id = id;
    this.name = name;
    this.selected = false;
    this.data = data;
  };

  var PatientSearch = exports.PatientSearch = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper, _globals.Globals, _data.Data), _dec(_class = function () {
    function PatientSearch(DialogController, http, helper, Globals, Data) {
      _classCallCheck(this, PatientSearch);

      this.selectedPatient = null;
      this.searchResults = [];
      this.searchString = "";
      this.popupLR = 0;
      this.popupTB = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.showCreatePatient = false;

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
      this.globals = Globals;
      this.data = Data;
    }

    PatientSearch.prototype.close = function close() {
      var self = this;
      self.dialogController.close(true, self.selectedPatient);
    };

    PatientSearch.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    PatientSearch.prototype.activate = function activate(obj) {
      var self = this;
      self.popupWidth = obj.popupWidth * .8;
      self.popupHeight = (obj.popupHeight - 75) * .8;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;
    };

    PatientSearch.prototype.attached = function attached() {
      var self = this;
      var res = $(this.patientpop).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5002", "important");

      var style = {
        'z-index': 5001
      };
      $('ux-dialog-overlay').css(style);
    };

    PatientSearch.prototype.searchClicked = function searchClicked() {
      this.search();
    };

    PatientSearch.prototype.inputKeydown = function inputKeydown(e) {
      if (e.key === 'Enter') {
        this.search();
      }
      return true;
    };

    PatientSearch.prototype.selectAndClose = function selectAndClose(p) {
      var self = this;
      self.dialogController.close(true, p);
    };

    PatientSearch.prototype.search = function search() {
      var self = this;
      self.showCreatePatient = false;

      var n = self.helper.createNoty("searching...", 10000);
      n.show();

      self.searchResults = [];
      var url = 'patients/search/delimited?searchDelimited=' + self.searchString;
      self.http.get(self.helper.getApiUrl(url), function (res) {

        var sorted = _.orderBy(res, ['NameLast', 'NameFirst'], ['asc', 'asc']);

        for (var i = 0; i < sorted.length; i++) {
          var aPat = sorted[i];
          var lastFirst = aPat.NameLast + ", " + aPat.NameFirst;
          self.searchResults.push(new Pat(aPat.PatientID, lastFirst, aPat));
        }

        if (self.searchResults.length == 0 && !self.globals.admin.HL7Enabled) {
          self.showCreatePatient = true;
        }

        self.helper.updateNoty(n, "search complete", "success", 1000);
      });
    };

    PatientSearch.prototype.rowClicked = function rowClicked(r) {
      this.selectedPatient = r;
      for (var i = 0; i < this.searchResults.length; i++) {
        if (this.searchResults[i].id == r.id) {
          this.searchResults[i].selected = true;
        } else {
          this.searchResults[i].selected = false;
        }
      }
    };

    PatientSearch.prototype.createPatientClick = function createPatientClick() {
      this.dialogController.close(true, { "createPatient": true });
    };

    return PatientSearch;
  }()) || _class);
});;
define('text!go/patientSearch.html',[],function(){return "<template><style>.dialog-header-content{display:flex!important}</style><ux-dialog ref=\"patientpop\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header style=\"padding:10px\"><h4 style=\"display:inline-block;margin-bottom:0\"><i class=\"fa fa-user\"></i> Patient Search</h4><i class=\"fa fa-times fa-2x ml-auto mr-2\" style=\"cursor:pointer\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body style=\"position:absolute;width:100%;height:70%\"><div class=\"input-group mb-3\"><input type=\"text\" class=\"form-control\" placeholder=\"Search LastName, FirstName, PatientID...\" aria-label=\"search patient...\" aria-describedby=\"button-addon2\" value.bind=\"searchString\" keydown.trigger=\"inputKeydown($event)\"><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" click.delegate=\"searchClicked()\"><i class=\"fa fa-search mr-1\" aria-hidden=\"true\"></i>Search</button></div></div><div if.bind=\"!showCreatePatient\" class=\"tableFixHeadLight\" css=\"height: ${popupHeight - 198}px;\"><table class=\"table table-sm table-striped w-auto\"><thead><tr><th scope=\"col\"></th><th scope=\"col\">Name</th><th scope=\"col\">DOB</th><th scope=\"col\">Address</th><th scope=\"col\">Phone</th><th scope=\"col\" style=\"width:100%\">PatientID</th></tr></thead><tbody><template repeat.for=\"s of searchResults\"><tr click.delegate=\"selectAndClose(s)\"><td><button type=\"button\" class=\"btn btn-primary\" click.delegate=\"selectAndClose(s)\"><i class=\"fa fa-folder-open-o\" aria-hidden=\"true\"></i></button></td><td class=\"text-nowrap\">${s.name}</td><td class=\"text-nowrap\">${s.data.DOB}</td><td class=\"text-nowrap\">${s.data.Address1}</td><td class=\"text-nowrap\">${s.data.PhoneHome}</td><td class=\"text-nowrap\">${s.data.PatientID}</td></tr></template></tbody></table></div><div class=\"card\" if.bind=\"showCreatePatient\"><div class=\"card-body p-0\"><div class=\"jumbotron m-0\"><h1 class=\"display-4\">No Patient Found</h1><a class=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\" click.delegate=\"createPatientClick()\">Create New</a></div></div></div></ux-dialog-body></ux-dialog></template>";});;
define('go/phoneCall',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'lodash', 'moment', '../data/go/data', './home', './popupHelper', 'aurelia-templating-resources', './globals'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _data, _home, _popupHelper, _aureliaTemplatingResources, _globals) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PhoneCall = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _desc, _value, _class, _descriptor, _dec, _class3;

  var PhoneCallRow = (_class = function () {
    function PhoneCallRow(date, message, staff, data) {
      _classCallCheck(this, PhoneCallRow);

      _initDefineProp(this, 'message', _descriptor, this);

      this.date = date;
      this.message = message;
      this.staff = staff;
      this.data = data;
      this.saveNeeded = false;
      this.index = 0;
      this.displayDelete = false;
      this.selected = false;
      this.readonly = false;
    }

    PhoneCallRow.prototype.messageChanged = function messageChanged(newVal, oldVal) {
      if (oldVal) {
        this.saveNeeded = true;
        this.data.PatientMessage = newVal;
      }
    };

    return PhoneCallRow;
  }(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'message', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  })), _class);
  var PhoneCall = exports.PhoneCall = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home, _popupHelper.PopupHelper, _aureliaFramework.BindingEngine, _aureliaTemplatingResources.BindingSignaler, _globals.Globals), _dec(_class3 = function () {
    function PhoneCall(helper, http, Data, Home, PopupHelper, BindingEngine, BindingSignaler, Globals) {
      _classCallCheck(this, PhoneCall);

      this.messages = [];
      this.customMessages = [];
      this.displayDeleteHeader = false;
      this.patientSelected = false;
      this.overlayVisible = true;
      this.phonecallHeight = 500;

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
      this.popupHelper = PopupHelper;
      this.bindingEngine = BindingEngine;
      this.signaler = BindingSignaler;
      this.globals = Globals;
    }

    PhoneCall.prototype.activate = function activate(params) {
      var self = this;

      self.taskHelper = params.taskHelper;

      self.displayDeleteHeader = !self.globals.isTouchDevice ? true : false;

      self.phoneTaskType = self.taskHelper.getTaskTypeWithTypeAndDescription('phone', 'phone call');

      if (params.currentBoard && params.currentBoard.visitInfo) {
        self.patientId = params.currentBoard.visitInfo.patientId;
        self.date = params.currentBoard.visitInfo.date;
        self.providerId = params.currentBoard.visitInfo.providerId;
        self.userId = params.currentBoard.userId;
      }

      self.overlay = params.overlay[0];

      var mycontainer = document.getElementById('mycontainer');
      self.phonecallHeight = mycontainer.clientHeight - params.bluebar.clientHeight - 8;

      if (params.patient.data.PatientID.length > 0) {
        self.patientId = params.patient.data.PatientID;
        self.selectedPatient = params.patient.data;
        self.patientSelected = true;
      }

      self.data.getWithUrl('login/users', function (u) {
        for (var i = 0; i < u.length; i++) {
          if (u[i].UserID == self.helper._user.UserID) {
            self.currentUser = u[i];
            break;
          }
        }
      });

      self.data.getWithUrl('listcombo?listType=Phone Call', function (custom) {
        self.customMessages = custom;
      });

      if (self.patientId) {
        self.getMessages(self.patientId);
      }
    };

    PhoneCall.prototype.detached = function detached() {
      this.saveAll();
    };

    PhoneCall.prototype.selectRow = function selectRow(message) {
      var self = this;

      var _loop = function _loop(i) {
        var aRow = self.messages[i];
        if (aRow.index == message.index) {
          aRow.selected = true;

          if (aRow.data.PhoneCallID == 0) {
            self._save(aRow, function (res) {
              aRow.data = res;
              self.setTaskObject(res.PhoneCallID, self.phoneTaskType.Id, self.selectedPatient.PatientID, self.currentUser.UserID);
            });
          } else {
            self.setTaskObject(aRow.data.PhoneCallID, self.phoneTaskType.Id, self.selectedPatient.PatientID, self.currentUser.UserID);
          }
        } else {
          aRow.selected = false;
        }
      };

      for (var i = 0; i < self.messages.length; i++) {
        _loop(i);
      }
    };

    PhoneCall.prototype.setTaskObject = function setTaskObject(phoneCallId, taskTypeId, patientId, userId) {
      var self = this;

      self.taskHelper.setObjectToTask(phoneCallId, taskTypeId);
      self.taskHelper.patientId = patientId;
      self.taskHelper.userId = userId;
      var tDate = new Date();
      self.taskHelper.date = tDate.getMonth() + 1 + '/' + tDate.getDate() + '/' + tDate.getFullYear();
    };

    PhoneCall.prototype.getMessages = function getMessages(patientId) {
      var self = this;
      self.data.getWithUrl('phonecalls/patients/' + patientId, function (calls) {
        self.messages = [];

        calls = _.sortBy(calls, "PhoneCallID", "desc");

        for (var c = 0; c < calls.length; c++) {

          var readOnly = true;
          var today = (0, _moment2.default)().format('MM/DD/YYYY');
          var callDate = (0, _moment2.default)(calls[c].DateCall).format('MM/DD/YYYY');
          if (today == callDate) {
            readOnly = false;
          }

          var pRow = new PhoneCallRow(calls[c].DateCall, calls[c].PatientMessage, calls[c].Staff, calls[c].Data);
          pRow.readonly = readOnly;
          pRow.index = c;
          self.messages.push(pRow);
        }
      });
    };

    PhoneCall.prototype.toggleOverlay = function toggleOverlay() {
      var self = this;
      self.overlayVisible = self.overlayVisible ? false : true;


      if (!self.overlayVisible) {
        self.overlay.classList.remove("active");
      } else {
        self.overlay.classList.add("active");
      }
    };

    PhoneCall.prototype.searchClicked = function searchClicked() {
      var self = this;

      self.toggleOverlay();

      self.popupHelper.openPatientPop(false, true, function (pat) {

        if (pat.hasOwnProperty('cancelled')) {
          self.toggleOverlay();
          return;
        }

        self.toggleOverlay();

        if (self.selectedPatient && pat.PatientID != self.selectedPatient.PatientID) {
          self.saveAll();
        }

        self.selectedPatient = pat;
        self.patientSelected = true;
        self.getMessages(self.selectedPatient.PatientID);
      });
    };

    PhoneCall.prototype.getDateCall = function getDateCall(date) {
      var month = date.getMonth() + 1;
      var day = date.getDate();
      var year = date.getFullYear();
      var hour = date.getHours();
      var mins = date.getMinutes().toString();
      if (mins.length == 1) {
        mins = "0" + mins;
      }
      var amPm = hour > 10 ? 'PM' : 'AM';

      var tHour = hour + 1;
      if (tHour > 12) {
        var diff = tHour - 12;
        tHour = diff;
      }

      return month + '/' + day + '/' + year + ' ' + tHour + ':' + mins + ' ' + amPm;
    };

    PhoneCall.prototype.addMessage = function addMessage(customMessage) {
      var self = this;

      self.data.getWithUrl('phonecall', function (newPhone) {

        var aDate = new Date();

        newPhone.PatientID = self.selectedPatient.PatientID;
        newPhone.ProviderID = self.providerId ? self.providerId : 0;
        newPhone.ExamDateTime = aDate;
        newPhone.DateCall = self.getDateCall(aDate);
        newPhone.OfficeStaff = self.currentUser.FirstName + ' ' + self.currentUser.LastName;
        newPhone.PatientMessage = customMessage ? customMessage.Description1 : null;
        newPhone.UserID = self.currentUser.UserID;
        newPhone.Charge = 1;
        newPhone.StaffResponse = '';

        var pRow = new PhoneCallRow(newPhone.DateCall, newPhone.PatientMessage, newPhone.OfficeStaff, newPhone);
        pRow.saveNeeded = true;
        pRow.index = self.messages.length;

        self.messages.splice(0, 0, pRow);
      });
    };

    PhoneCall.prototype.saveAll = function saveAll() {
      var self = this;
      for (var i = 0; i < self.messages.length; i++) {
        var aMsg = self.messages[i];
        if (aMsg.saveNeeded && aMsg.message != null) {
          self._save(aMsg, function (res) {});
        }
      }
    };

    PhoneCall.prototype._save = function _save(row, callback) {
      var self = this;
      self.data.postWithUrlAndData('phonecalls', JSON.stringify(row.data), function (res) {
        callback(res);
      });
    };

    PhoneCall.prototype.rowSwipe = function rowSwipe(event, row) {};

    PhoneCall.prototype.displayDeleteAlert = function displayDeleteAlert(text, header, callback) {
      var self = this;
      self.popupHelper.openGenericMessagePop(text, header, ['YES', 'NO'], false, function (res) {
        callback(res);
      });
    };

    PhoneCall.prototype.deletePhoneClick = function deletePhoneClick(index) {
      var self = this;
      self.displayDeleteAlert("Do you wish to delete this message?", 'Delete Message?', function (res) {
        if (res.result == 'YES') {
          var id = self.messages[index].data.PhoneCallID;
          if (id == 0) {
            self.messages.splice(index, 1);
            self.updateRowIndexes();
          } else {
            self.deletePhone(id, function (res) {
              if (res == true) {
                self.messages.splice(index, 1);
                self.updateRowIndexes();
              }
            });
          }
        } else {
          self.messages[index].displayDelete = false;
        }
      });
    };

    PhoneCall.prototype.deletePhone = function deletePhone(id, callback) {
      var self = this;
      var url = 'phonecalls?id=' + id;
      self.data.deleteWithUrl(url, function (res) {
        callback(res);
      });
    };

    PhoneCall.prototype.updateRowIndexes = function updateRowIndexes() {
      var self = this;
      for (var i = 0; i < self.messages.length; i++) {
        var r = self.messages[i];
        r.index = i;
      }
      self.signaler.signal('refresh-row');
    };

    return PhoneCall;
  }()) || _class3);
});;
define('text!go/phoneCall.html',[],function(){return "<template><style>.returnToDate input{width:120px}.form-control{width:unset}td.last{width:1px;white-space:nowrap}td.fitwidth{width:1px;white-space:nowrap}.selected{background-color:#d4edda}</style><div class=\"card\" css=\"height: ${phonecallHeight}px;\"><div class=\"card-header d-flex align-items-center\"><h4 class=\"m-0\"><i class=\"fa fa-phone mr-2\"></i>Phone Call</h4><i class=\"fa fa-close fa-2x ml-auto\" click.delegate=\"cancel()\"></i></div><div class=\"card-body pt-2\" style=\"overflow-y:scroll\"><div class=\"d-flex align-items-center pb-2\"><h4 class=\"m-0\"><button type=\"button\" class=\"btn btn-outline-primary mr-1\" click.delegate=\"searchClicked()\"><i class=\"fa fa-search pr-1\" aria-hidden=\"true\"></i></button> ${selectedPatient.NameFirst} ${selectedPatient.NameLast}</h4><div class=\"dropdown mr-2 ml-auto\"><button disabled.bind=\"!patientSelected\" class=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-comment pr-1\" aria-hidden=\"true\"></i>Message</button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"addMessage()\"><i class=\"fa fa-plus pr-1\" aria-hidden=\"true\"></i>New</a><h6 class=\"dropdown-header\">Custom Messages</h6><a class=\"dropdown-item text-truncate\" style=\"max-width:300px\" repeat.for=\"c of customMessages\" href=\"#\" click.delegate=\"addMessage(c)\"><i class=\"fa fa-plus pr-1\" aria-hidden=\"true\"></i>${c.Description1}</a></div></div></div><table class=\"table table-sm table-striped\"><thead><tr><th scope=\"col\" style=\"width:175px\">Date</th><th scope=\"col\">Staff</th><th scope=\"col\">Message</th><th scope=\"col\" if.bind=\"displayDeleteHeader\" class=\"au-animate animate-swipe-row-right\"></th></tr></thead><tbody><template repeat.for=\"m of messages\"><tr if.bind=\"globals.isTouchDevice\" hammer-swipe.call=\"rowSwipe($event, m)\" css=\"background-color: ${m.selected ? '#d4edda' : '' & signal: 'refresh-row'}\" click.delegate=\"selectRow(m)\"><td>${m.date}</td><td class=\"fitwidth\">${m.staff}</td><td><textarea class=\"form-control\" style=\"width:100%;resize:none;overflow:auto\" rows=\"3\" value.bind=\"m.message\" readonly.bind=\"m.readonly\"></textarea></td><td if.bind=\"displayDeleteHeader && !m.displayDelete\"></td><td if.bind=\"m.displayDelete\" style=\"background-color:#dd3444;vertical-align:middle\" class=\"au-animate animate-swipe-row-left animate-swipe-row-right\"><button type=\"button\" class=\"btn btn-danger\" style=\"display:block;margin:auto\" click.delegate=\"deletePhoneClick($index)\"><i class=\"fa fa-trash\"></i></button></td></tr><tr if.bind=\"!globals.isTouchDevice\" css=\"background-color: ${m.selected ? '#d4edda' : '' & signal: 'refresh-row'}\" click.delegate=\"selectRow(m)\"><td>${m.date}</td><td class=\"fitwidth\">${m.staff}</td><td><textarea class=\"form-control\" style=\"width:100%;resize:none;overflow:auto\" rows=\"3\" value.bind=\"m.message\" readonly.bind=\"m.readonly\"></textarea></td><td style=\"vertical-align:middle\"><button type=\"button\" class=\"btn\" style=\"display:block;margin:auto\" click.delegate=\"deletePhoneClick($index)\"><i class=\"fa fa-trash\"></i></button></td></tr></template></tbody></table></div></div></template>";});;
define('go/planRowCustomAttribute',['exports', 'aurelia-framework'], function (exports, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PlanRowCustomAttribute = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _dec2, _class;

  var PlanRowCustomAttribute = exports.PlanRowCustomAttribute = (_dec = (0, _aureliaFramework.customAttribute)('planrow'), _dec2 = (0, _aureliaFramework.inject)(Element), _dec(_class = _dec2(_class = function () {
    function PlanRowCustomAttribute(element) {
      _classCallCheck(this, PlanRowCustomAttribute);

      this.element = element;
    }

    PlanRowCustomAttribute.prototype.bind = function bind(bindingContext, overridingContext) {
      bindingContext.r.element = this.element;

      if (overridingContext.$last === true) {
        overridingContext.parentOverrideContext.bindingContext.loadComplete();
      }
    };

    return PlanRowCustomAttribute;
  }()) || _class) || _class);
});;
define('go/popupHelper',['exports', '../helpers/http', '../helpers/helper', '../data/go/data', 'aurelia-dialog', 'aurelia-framework', './task/taskHelper', './ptPopup', './documentPopup', './xrayPop', 'aurelia-event-aggregator', './userSearch', './task/task', './task/taskPopup', 'lodash', './patientSearch', './appendOverwritePopup', './bodypartPickerPopup', './genericPopups/genericMessagePopup', './viewModelPopup', './pxSearch', './genericPopups/genericInputPopup', './genericPopups/genericPicklistPopup', './genericPopups/genericTablePopup', './genericPopups/genericMultiTabPickerPopup', 'moment', './dxSearch', './alertPopup', './createVisitPopup', './camera', '../formbuilder/dialogs/sqlSelector'], function (exports, _http, _helper, _data, _aureliaDialog, _aureliaFramework, _taskHelper, _ptPopup, _documentPopup, _xrayPop, _aureliaEventAggregator, _userSearch, _task, _taskPopup, _lodash, _patientSearch, _appendOverwritePopup, _bodypartPickerPopup, _genericMessagePopup, _viewModelPopup, _pxSearch, _genericInputPopup, _genericPicklistPopup, _genericTablePopup, _genericMultiTabPickerPopup, _moment, _dxSearch, _alertPopup, _createVisitPopup, _camera, _sqlSelector) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PopupHelper = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var PopupHelper = exports.PopupHelper = (_dec = (0, _aureliaFramework.inject)(_http.http, _helper.helper, _aureliaDialog.DialogService, _data.Data, _taskHelper.TaskHelper, _aureliaEventAggregator.EventAggregator), _dec(_class = function () {
    function PopupHelper(http, helper, DialogService, Data, TaskHelper, EventAggregator) {
      _classCallCheck(this, PopupHelper);

      this.activeController = null;

      this.http = http;
      this.helper = helper;
      this.dialogService = DialogService;
      this.goData = Data;
      this.taskHelper = TaskHelper;
      this.eventAggregator = EventAggregator;
    }

    PopupHelper.prototype.closeActiveDialog = function closeActiveDialog() {
      var self = this;
      if (self.activeController != null) {
        self.activeController.cancel();
      }
    };

    PopupHelper.prototype.showVisitTypePicker = function showVisitTypePicker(callback) {
      var self = this;
      var visitTypeList = [];
      var visitTypeStrings = self.goData.getVisitTypes();

      for (var i = 0; i < visitTypeStrings.length; i++) {
        var pItm = self.goData.getGenericPicklistItem(visitTypeStrings[i], visitTypeStrings[i]);
        visitTypeList.push(pItm);
      }

      self.openGenericPicklistPop("Please select a type for this visit.", "Select Visit Type", visitTypeList, false, function (selectedVisitType) {
        var sType = selectedVisitType.item;
        callback(sType);
      });
    };

    PopupHelper.prototype.openCreateVisitPopup = function openCreateVisitPopup(visitInfo, homeInstance, callback) {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.dialogService.open({ viewModel: _createVisitPopup.CreateVisitPopup, model: { popupWidth: windowWidth, popupHeight: windowHeight, visitObject: visitInfo, home: homeInstance } }).whenClosed(function (response) {

        var px = response.output;
        if (px != null) {
          callback(px);
        }
      });
    };

    PopupHelper.prototype.openSqlSelector = function openSqlSelector(callback, options) {
      var self = this;

      if (options != null) {
        if (options.hasOwnProperty('closeActiveDialog')) {
          if (options.closeActiveDialog == true) {
            self.closeActiveDialog();
          }
        }
      } else {
        self.closeActiveDialog();
      }

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.dialogService.open({ viewModel: _sqlSelector.SqlSelector, model: { popupWidth: windowWidth, popupHeight: windowHeight, options: options } }).then(function (openDialogResult) {
        self.activeController = openDialogResult.controller;
        return openDialogResult.closeResult;
      }).then(function (response) {
        var res = response.output;
        if (res != null) {
          if (callback) {
            callback(res);
          }
        }
      });
    };

    PopupHelper.prototype.openProcedureSearchPop = function openProcedureSearchPop(filterType, displayModifers, callback) {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.dialogService.open({ viewModel: _pxSearch.PxSearch, model: { popupWidth: windowWidth, popupHeight: windowHeight,
          typeFilter: filterType, displayModifers: displayModifers, popupHelper: self } }).whenClosed(function (response) {
        var px = response.output;
        if (px != null) {
          callback(px);
        }
      });
    };

    PopupHelper.prototype.openAlertPop = function openAlertPop(alerts, options, callback) {
      var self = this;

      if (options != null) {
        if (options.hasOwnProperty('closeActiveDialog')) {
          if (options.closeActiveDialog == true) {
            self.closeActiveDialog();
          }
        }
      } else {
        self.closeActiveDialog();
      }

      self.dialogService.open({ viewModel: _alertPopup.AlertPopup, model: { alerts: alerts.Response, options: options } }).then(function (openDialogResult) {
        self.activeController = openDialogResult.controller;
        return openDialogResult.closeResult;
      }).then(function (response) {
        var res = response.output;
        if (res != null) {
          if (callback) {
            callback(res);
          }
        }
      });
    };

    PopupHelper.prototype.openViewModelPop = function openViewModelPop(viewpath, viewmodel, header, width, height, top, left, options, callback) {
      var self = this;

      if (options != null) {
        if (options.hasOwnProperty('closeActiveDialog')) {
          if (options.closeActiveDialog == true) {
            self.closeActiveDialog();
          }
        }
      } else {
        self.closeActiveDialog();
      }

      self.dialogService.open({ viewModel: _viewModelPopup.ViewModelPopup, model: { popupWidth: width, popupHeight: height, top: top, left: left, header: header, viewPath: viewpath, viewModel: viewmodel, options: options } }).then(function (openDialogResult) {
        self.activeController = openDialogResult.controller;

        self.updateDialogOverlayZIndex();

        return openDialogResult.closeResult;
      }).then(function (response) {

        self.updateDialogOverlayZIndex();

        var res = response.output;
        if (res != null) {
          if (callback) {
            callback(res, response);
          }
        } else {
          callback({ 'cancelled': response.wasCancelled });
        }
      });
    };

    PopupHelper.prototype.openGenericTablePop = function openGenericTablePop(header, columnHeaders, genericTableRows, closeActiveDialog, options, callback) {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      if (closeActiveDialog == true) {
        self.closeActiveDialog();
      }

      self.dialogService.open({ viewModel: _genericTablePopup.GenericTablePopup, model: { header: header, columnHeaders: columnHeaders, rows: genericTableRows, options: options } }).then(function (openDialogResult) {
        self.activeController = openDialogResult.controller;
        return openDialogResult.closeResult;
      }).then(function (response) {
        var res = response.output;
        if (res != null) {
          if (callback) {
            callback(res);
          }
        }
      });
    };

    PopupHelper.prototype.openGenericPicklistPop = function openGenericPicklistPop(description, header, genericPicklistItems, closeActiveDialog, callback) {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      if (closeActiveDialog == true) {
        self.closeActiveDialog();
      }

      self.dialogService.open({ viewModel: _genericPicklistPopup.GenericPicklistPopup, model: { popupWidth: windowWidth, popupHeight: windowHeight, description: description, header: header, items: genericPicklistItems } }).then(function (openDialogResult) {
        self.activeController = openDialogResult.controller;

        self.updateDialogOverlayZIndex();

        return openDialogResult.closeResult;
      }).then(function (response) {

        self.updateDialogOverlayZIndex();

        var res = response.output;
        if (res != null) {
          if (callback) {
            callback(res);
          }
        }
      });
    };

    PopupHelper.prototype.openGenericMultiTabPickerPopup = function openGenericMultiTabPickerPopup(description, header, genericPicklistItems, closeActiveDialog, callback) {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      if (closeActiveDialog == true) {
        self.closeActiveDialog();
      }

      self.dialogService.open({ viewModel: _genericMultiTabPickerPopup.GenericMultiTabPickerPopup, model: { popupWidth: windowWidth, popupHeight: windowHeight, description: description, header: header, items: genericPicklistItems } }).then(function (openDialogResult) {
        self.activeController = openDialogResult.controller;
        return openDialogResult.closeResult;
      }).then(function (response) {
        var res = response.output;
        if (res != null) {
          if (callback) {
            callback(res);
          }
        }
      });
    };

    PopupHelper.prototype.openGenericInputPop = function openGenericInputPop(message, inputDescriptionArray, saveButtonText, closeActiveDialog, callback) {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      if (closeActiveDialog == true) {
        self.closeActiveDialog();
      }

      var btnText = saveButtonText != null ? saveButtonText : 'Save';

      self.dialogService.open({ viewModel: _genericInputPopup.GenericInputPopup, model: { popupWidth: windowWidth, popupHeight: windowHeight, message: message, inputs: inputDescriptionArray, buttonText: btnText } }).then(function (openDialogResult) {
        self.activeController = openDialogResult.controller;
        return openDialogResult.closeResult;
      }).then(function (response) {
        var res = response.output;
        if (res != null) {
          if (callback) {
            callback(res);
          }
        }
      });
    };

    PopupHelper.prototype.openGenericMessagePop = function openGenericMessagePop(message, header, buttonDescriptionsArray, closeActiveDialog, callback, options) {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      if (closeActiveDialog == true) {
        self.closeActiveDialog();
      }

      var ops = {};
      ops.buttons = buttonDescriptionsArray;
      if (options) {
        if (options.htmlTemplate) {
          ops.template = options.htmlTemplate;
        }
        if (options.alertType) {
          ops.alertType = options.alertType;
        }
      }

      self.dialogService.open({ viewModel: _genericMessagePopup.GenericMessagePopup,
        model: { popupWidth: windowWidth, popupHeight: windowHeight,
          message: message, header: header, options: ops } }).then(function (openDialogResult) {
        self.activeController = openDialogResult.controller;
        return openDialogResult.closeResult;
      }).then(function (response) {
        var res = response.output;
        if (res != null) {
          if (callback) {
            callback(res);
          }
        }
      });
    };

    PopupHelper.prototype.openBodysidePickerPop = function openBodysidePickerPop(callback, message) {
      var msg = message != undefined ? message : 'Please select body side.';
      this.openGenericMessagePop(msg, 'Select Body Side', ['RIGHT', 'LEFT', 'NONE'], false, function (res) {
        var side = res.result;
        callback(side);
      });
    };

    PopupHelper.prototype.openBodypartPickerPop = function openBodypartPickerPop(bodyparts, callback) {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.closeActiveDialog();

      self.dialogService.open({ viewModel: _bodypartPickerPopup.BodypartPickerPopup, model: { popupWidth: windowWidth, popupHeight: windowHeight, bodyparts: bodyparts } }).then(function (openDialogResult) {
        self.activeController = openDialogResult.controller;
        return openDialogResult.closeResult;
      }).then(function (response) {
        var res = response.output;
        if (res != null) {
          if (callback) {
            callback(res);
          }
        }
      });
    };

    PopupHelper.prototype.openCameraPop = function openCameraPop(callback) {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.closeActiveDialog();

      self.dialogService.open({ viewModel: _camera.Camera, model: { popupWidth: windowWidth, popupHeight: windowHeight } }).then(function (openDialogResult) {
        self.activeController = openDialogResult.controller;
        return openDialogResult.closeResult;
      }).then(function (response) {
        var res = response.output;
        if (res != null) {
          if (callback) {
            callback(res);
          }
        }
      });
    };

    PopupHelper.prototype.openAppendOverwitePop = function openAppendOverwitePop(headerText, bodyText, callback) {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.closeActiveDialog();

      self.dialogService.open({ viewModel: _appendOverwritePopup.AppendOverwritePopup, model: { popupWidth: windowWidth, popupHeight: windowHeight, headerText: headerText, bodyText: bodyText } }).then(function (openDialogResult) {
        self.activeController = openDialogResult.controller;
        return openDialogResult.closeResult;
      }).then(function (response) {
        var res = response.output;
        if (res != null) {
          if (callback) {
            callback(res);
          }
        }
      });
    };

    PopupHelper.prototype.openPatientPop = function openPatientPop(closeActiveDialog, fullData, callback) {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      if (closeActiveDialog) self.closeActiveDialog();

      self.dialogService.open({ viewModel: _patientSearch.PatientSearch, model: { popupWidth: windowWidth, popupHeight: windowHeight } }).then(function (openDialogResult) {

        self.activeController = openDialogResult.controller;

        return openDialogResult.closeResult;
      }).then(function (response) {
        var aPat = response.output;

        if (response.hasOwnProperty('wasCancelled') && response.wasCancelled) {
          callback({ 'cancelled': response.wasCancelled });
        } else if (aPat.hasOwnProperty('createPatient')) {
          callback({ 'createPatient': true });
        } else if (aPat != null) {
          if (callback) {
            callback(fullData ? aPat.data : aPat.id);
          }
        }
      });
    };

    PopupHelper.prototype.updateDialogOverlayZIndex = function updateDialogOverlayZIndex() {
      var overlay = $('ux-dialog-overlay');
      var container = $('ux-dialog-container');

      if (container.length > 0) {
        var topIndex = null;
        for (var i = 0; i < container.length; i++) {
          var z = parseInt(container[i].style.zIndex);
          if (topIndex == null || z > topIndex) {
            topIndex = z;
          }
        }

        if (topIndex != null && overlay.length > 0) {
          for (var i = 0; i < overlay.length; i++) {
            if (i == 0) {
              overlay[i].style.zIndex = topIndex - 1;
              overlay[i].classList.add("active");
            } else {
              overlay[i].style.zIndex = 1000;
              overlay[i].classList.remove("active");
            }
          }
        }
      }
    };

    PopupHelper.prototype.getNewDialogZIndex = function getNewDialogZIndex() {
      var oZ = 1000;
      var cZ = 1001;
      var dialogObj = {
        overlayZ: oZ,
        containerZ: cZ
      };
      var overlay = $('ux-dialog-overlay');
      var container = $('ux-dialog-container');
      if (container.length > 0) {
        var z = parseInt(container[0].style.zIndex);
        if (z >= cZ) {
          dialogObj.containerZ = z + 2;
          dialogObj.overlayZ = z + 1;
        }
      }
      return dialogObj;
    };

    PopupHelper.prototype.openTaskPop = function openTaskPop(patientId, providerId, date, objectId, taskTypeId, home, callback, OD_Task_ToUpdate, options) {

      var self = this;

      var closeActive = true;
      if (options) {
        if (options.hasOwnProperty('closeActiveDialog')) {
          closeActive = options.closeActiveDialog;
        }
      }
      if (closeActive) {
        self.closeActiveDialog();
      }

      var zObject = self.getNewDialogZIndex();
      var overlayZIndex = zObject.overlayZ;
      var containerZIndex = zObject.containerZ;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var taskObj = {
        "patientId": patientId,
        'providerId': providerId,
        'date': date,
        "objectId": objectId,
        "taskTypeId": taskTypeId,
        'home': home,
        'taskToUpdate': OD_Task_ToUpdate,
        'overlayZIndex': overlayZIndex,
        'containerZIndex': containerZIndex
      };

      self.dialogService.open({ viewModel: _taskPopup.TaskPopup, model: { popupWidth: windowWidth, popupHeight: windowHeight, data: taskObj } }).then(function (openDialogResult) {

        self.activeController = openDialogResult.controller;

        self.updateDialogOverlayZIndex();

        return openDialogResult.closeResult;
      }).then(function (response) {

        self.updateDialogOverlayZIndex();

        var res = response.output;
        if (res != null) {

          if (callback) {
            callback(res);
          }
        }
      });
    };

    PopupHelper.prototype.openTaskPopNew = function openTaskPopNew(taskPopupObjectList, home, callback, OD_Task_ToUpdate, options) {

      var self = this;

      var closeActive = true;
      if (options) {
        if (options.hasOwnProperty('closeActiveDialog')) {
          closeActive = options.closeActiveDialog;
        }
      }
      if (closeActive) {
        self.closeActiveDialog();
      }

      var zObject = self.getNewDialogZIndex();
      var overlayZIndex = zObject.overlayZ;
      var containerZIndex = zObject.containerZ;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var taskObj = {
        'taskPopupObjects': taskPopupObjectList,
        'home': home,
        'taskToUpdate': OD_Task_ToUpdate,
        'overlayZIndex': overlayZIndex,
        'containerZIndex': containerZIndex
      };

      self.dialogService.open({ viewModel: _taskPopup.TaskPopup, model: { popupWidth: windowWidth, popupHeight: windowHeight, data: taskObj } }).then(function (openDialogResult) {

        self.activeController = openDialogResult.controller;

        self.updateDialogOverlayZIndex();

        return openDialogResult.closeResult;
      }).then(function (response) {

        self.updateDialogOverlayZIndex();

        var res = response.output;
        if (res != null) {
          if (callback) {
            callback(res);
          }
        }
      });
    };

    PopupHelper.prototype.openUserSearchPop = function openUserSearchPop(callback, host, options) {
      var self = this;

      if (options != null && options != undefined) {
        if (options.hasOwnProperty('closeActiveDialog')) {
          if (options.closeActiveDialog == true) {
            self.closeActiveDialog();
          }
        }
      } else {
        self.closeActiveDialog();
      }

      var windowHeight = window.innerHeight / 2;
      var windowWidth = window.innerWidth;

      var quarter = windowWidth / 4;
      var width = quarter;
      var eights = windowWidth / 8;

      var op = {
        popupWidth: width,
        popupHeight: windowHeight,
        popupTop: windowHeight / 2,
        popupLeft: eights * 3
      };

      self.dialogService.open({ viewModel: _userSearch.UserSearch, model: { options: op, host: host } }).then(function (openDialogResult) {

        self.activeController = openDialogResult.controller;

        return openDialogResult.closeResult;
      }).then(function (response) {
        var res = response.output;
        callback(res);
      });
    };

    PopupHelper.prototype.openMessagePop = function openMessagePop(callback, popupHelper, home) {
      var self = this;

      self.closeActiveDialog();

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.dialogService.open({ viewModel: _task.Task, model: { popupWidth: windowWidth, popupHeight: windowHeight, popupHelper: popupHelper, home: home } }).then(function (openDialogResult) {

        self.activeController = openDialogResult.controller;

        return openDialogResult.closeResult;
      }).then(function (response) {
        var res = response.output;
        if (res != null && res.taskToOpen != null) {

          callback(res.taskToOpen);
        }
      });
    };

    PopupHelper.prototype.openDxPop = function openDxPop(bodypart, bodyside, options, callback) {
      var self = this;

      self.dialogService.open({ viewModel: _dxSearch.DxSearch, model: { "bodypart": bodypart, bodyside: bodyside, popupHelper: self, options: options } }).then(function (openDialogResult) {
        self.activeController = openDialogResult.controller;
        return openDialogResult.closeResult;
      }).then(function (response) {
        var res = response.output;
        if (res != null) {
          if (callback) {
            callback(res);
          }
        }
      });
    };

    PopupHelper.prototype.openPtPop = function openPtPop(board, home) {
      var self = this;

      if (home.ptDialog) {
        return;
      }

      var patientId = board.visitInfo.patientId;
      var date = board.visitInfo.date;
      var providerId = board.visitInfo.providerId;
      var userId = board.userId;
      var bodypart = board.visitInfo.bodypart;

      var url = self.goData.createPttUrl(patientId, providerId, userId, bodypart, date);

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.dialogService.open({ viewModel: _ptPopup.PtPopup, model: { popupWidth: windowWidth, popupHeight: windowHeight, documentUrl: url, home: home } }).then(function (openDialogResult) {
        home.ptDialog = openDialogResult;
        self.eventAggregator.publish('filterPreferencesWithCurrentProvider');
      }).then(function (response) {
        var res = response.output;
        if (res != null) {
          if (callback) {
            callback(res);
          }
        }
      });
    };

    PopupHelper.prototype.openXrayPop = function openXrayPop(studyId, xrayId) {
      var self = this;

      self.closeActiveDialog();

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var data = {
        studyId: studyId,
        xrayId: xrayId
      };

      self.dialogService.open({ viewModel: _xrayPop.XrayPopup, model: { popupWidth: windowWidth, popupHeight: windowHeight, data: data } }).then(function (openDialogResult) {

        self.activeController = openDialogResult.controller;

        return openDialogResult.closeResult;
      }).then(function (response) {
        self.taskHelper.setObjectToTask(self.taskHelper.cacheObjectId, self.taskHelper.cacheTaskTypeId);
        self.taskHelper.clearCachedTask();
      });
    };

    PopupHelper.prototype.openUrlPathPop = function openUrlPathPop(path, options) {
      var self = this;

      if (options != null) {
        if (options.hasOwnProperty('closeActiveDialog')) {
          if (options.closeActiveDialog == true) {
            self.closeActiveDialog();
          }
        }
      } else {
        self.closeActiveDialog();
      }

      self.dialogService.open({ viewModel: _documentPopup.DocumentPopup, model: { url: path, options: options } }).then(function (openDialogResult) {

        self.activeController = openDialogResult.controller;

        return openDialogResult.closeResult;
      }).then(function (response) {});
    };

    PopupHelper.prototype.openPdfPop = function openPdfPop(patientId, filepath, callback, buildUrl) {
      var self = this;

      self.closeActiveDialog();

      var windowHeight = '100%';
      var windowWidth = '100%';

      var options = {
        'width': window.innerWidth - 72 + 'px',
        'height': '100%',
        'popupHeight': '100%'
      };

      var url = "";

      if (buildUrl === true) {
        url = self.goData.createPdfUrl(patientId, filepath);
      } else {
        url = filepath;
      }

      self.dialogService.open({ viewModel: _documentPopup.DocumentPopup, model: { popupWidth: windowWidth, popupHeight: windowHeight, url: url, options: options } }).then(function (openDialogResult) {

        self.activeController = openDialogResult.controller;

        return openDialogResult.closeResult;
      }).then(function (response) {

        if (callback) {
          callback(true);
        }
      }).catch(function (err) {
        if (callback) {
          callback(false);
        }
      });
    };

    PopupHelper.prototype.openDocPop = function openDocPop(documentId, openEditor, taskTypeId) {
      var self = this;

      self.closeActiveDialog();

      var windowHeight = '100%';
      var windowWidth = '100%';

      var options = {
        'width': window.innerWidth - 72 + 'px',
        'height': '100%',
        'popupHeight': '100%'
      };

      var webDocsUrl = self.helper._webDocsServer;

      var url = openEditor ? webDocsUrl + '/#editor' : self.goData.createDocumentUrl(documentId);

      self.dialogService.open({ viewModel: _documentPopup.DocumentPopup, model: { popupWidth: windowWidth, popupHeight: windowHeight, url: url, options: options } }).then(function (openDialogResult) {

        self.activeController = openDialogResult.controller;

        if (taskTypeId) {
          self.taskHelper.setObjectToTask(documentId, taskTypeId);
        }

        return openDialogResult.closeResult;
      }).then(function (response) {

        if (openEditor) return;

        self.taskHelper.setObjectToTask(self.taskHelper.cacheObjectId, self.taskHelper.cacheTaskTypeId);
        self.taskHelper.clearCachedTask();
      });
    };

    return PopupHelper;
  }()) || _class);
});;
define('go/preference/dxTemplate',['exports', 'aurelia-framework', 'lodash', '../popupHelper'], function (exports, _aureliaFramework, _lodash, _popupHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DxTemplate = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var DxTemplate = exports.DxTemplate = (_dec = (0, _aureliaFramework.inject)(_popupHelper.PopupHelper), _dec(_class = function () {
    function DxTemplate(PopupHelper) {
      _classCallCheck(this, DxTemplate);

      this.section = null;

      this.popHelper = PopupHelper;
    }

    DxTemplate.prototype.activate = function activate(params) {
      var self = this;
      var p = params;
      self.section = params;
    };

    return DxTemplate;
  }()) || _class);
});;
define('text!go/preference/dxTemplate.html',[],function(){return "<template><div id=\"diagnosisSection\" class=\"d-flex align-items-center border-bottom px-4 py-0\" style=\"background-color:rgba(0,0,0,.03);min-height:48px\"><h5 class=\"m-0\" style=\"display:inline-block;vertical-align:middle\">${section.name}</h5></div><div repeat.for=\"i of section.items\" class=\"d-flex align-items-center border-bottom pl-4 pr-2 py-2\" style=\"min-height:55px\"><h6 class=\"d-inline-block mb-0\"> ${i.name} <small class=\"text-muted\">${i.details}</small></h6><a class=\"btn btn-danger ml-auto\" href=\"#\" click.delegate=\"section.removeItem(null, i)\"><i class=\"fa fa-trash-o fa-lg\"></i></a></div></template>";});;
define('go/preference/goFormTemplate',['exports', 'aurelia-framework', 'lodash', '../../data/go/data'], function (exports, _aureliaFramework, _lodash, _data) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.GoFormTemplate = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var GoFormTemplate = exports.GoFormTemplate = (_dec = (0, _aureliaFramework.inject)(_data.Data), _dec(_class = function () {
    function GoFormTemplate(Data) {
      _classCallCheck(this, GoFormTemplate);

      this.section = null;
      this.selectedPref = null;
      this.prefList = [];

      this.data = Data;
    }

    GoFormTemplate.prototype.activate = function activate(params) {
      var self = this;
      self.section = params;

      self.providerId = self.section.parent.editor.currentProvider.ProviderID;
      self.bodypart = self.section.parent.editor.selectedBodyPart;

      self.data.getWithUrl('goforms/pref?providerId=' + self.providerId + '&tag=' + self.bodypart, function (prefs) {
        self.prefList = prefs;
      });
    };

    GoFormTemplate.prototype.addPref = function addPref() {
      var self = this;

      var proto = {
        Id: 0,
        IMapId: self.section.parent.prefId,
        PreferenceId: self.selectedPref.Id,
        TableName: 'OD_Go_Forms_Pref',
        PreferenceIdColumn: 'Id',
        AutoTaskId: null,
        Modifier: null
      };

      var pref = {
        id: self.selectedPref.Id,
        name: self.selectedPref.Description,
        details: self.selectedPref.CPTCode,
        data: self.selectedPref,
        imapProtocol: proto
      };

      self.section.items.push(pref);
    };

    return GoFormTemplate;
  }()) || _class);
});;
define('text!go/preference/goFormTemplate.html',[],function(){return "<template><div id=\"goformprefSection\" class=\"d-flex align-items-center border-bottom px-4 py-0\" style=\"background-color:rgba(0,0,0,.03);min-height:48px\"><h5 class=\"m-0\" style=\"display:inline-block;vertical-align:middle\">${section.name}</h5><div class=\"input-group ml-auto\" style=\"width:unset;align-items:unset\"><select class=\"form-item form-control mr-0\" value.bind=\"selectedPref\" style=\"width:250px;display:inline-block\"><option model.bind=\"null\">Prefs...</option><option repeat.for=\"m of prefList\" model.bind=\"m\"> ${m.Description} </option></select><div class=\"input-group-append\"><i class=\"fa fa-plus fa-2x px-2 input-group-text\" aria-hidden=\"true\" click.delegate=\"addPref()\"></i></div></div></div><div repeat.for=\"i of section.items\" class=\"d-flex align-items-center border-bottom pl-4 pr-2 py-2\" style=\"min-height:55px\"><h6 class=\"d-inline-block\"> ${i.name} </h6><a class=\"btn btn-danger ml-auto\" href=\"#\" click.delegate=\"section.removeItem(null, i)\"><i class=\"fa fa-trash-o fa-lg\"></i></a></div></template>";});;
define('go/preference/hpiPlanExamTemplate',['exports', 'aurelia-framework', 'lodash'], function (exports, _aureliaFramework, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.HpiPlanExamTemplate = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var HpiPlanExamTemplate = exports.HpiPlanExamTemplate = function () {
    function HpiPlanExamTemplate() {
      _classCallCheck(this, HpiPlanExamTemplate);

      this.section = null;
      this.macroList = ['[he/she]', '[his/her]', '[him/her]', '[patient]', '[side]', '[PostOpDays]', '[AGE]', '[Gender]', '[Hand Dominance]'];
    }

    HpiPlanExamTemplate.prototype.activate = function activate(params) {
      var self = this;
      var p = params;
      self.section = params;
      self.templateId = self.section.name.toLowerCase() + "Section";
    };

    HpiPlanExamTemplate.prototype.removeSection = function removeSection() {
      var self = this;


      var itm = self.section.items[0];
      self.section.removeItem(null, itm);
    };

    HpiPlanExamTemplate.prototype.addMacro = function addMacro() {
      var self = this;
      if (self.selectedMacro && self.selectedTextarea) {

        var selectStart = self.selectedTextarea.selectionStart;
        var selectEnd = self.selectedTextarea.selectionEnd;

        var txt = self.selectedTextarea.value;
        var start = txt.substr(0, selectStart);
        var end = txt.substr(selectEnd, txt.length - selectEnd);

        self.section.items[0].details = start + self.selectedMacro + end;
      } else {
        if (!this.selectedMacro) {
          self.popHelper.openGenericMessagePop('Please select a macro to add to preference.', 'No Macro Selected', ['OK'], true, function (res) {});
          return;
        }

        if (!this.selectedTextarea) {
          self.popHelper.openGenericMessagePop('Please click in a textarea to add macro.', 'No Textarea Selected', ['OK'], true, function (res) {});
          return;
        }
      }
    };

    HpiPlanExamTemplate.prototype.textareaFocus = function textareaFocus(textarea, e) {
      var self = this;
      self.selectedTextarea = e.target;
      self.selectedTextareaType = textarea;
    };

    return HpiPlanExamTemplate;
  }();
});;
define('text!go/preference/hpiPlanExamTemplate.html',[],function(){return "<template><div id.bind=\"templateId\" class=\"d-flex align-items-center border-bottom pl-4 pr-2 py-0\" style=\"background-color:rgba(0,0,0,.03);min-height:48px\"><h5 class=\"m-0 pr-2\" style=\"display:inline-block\">${section.name}</h5><div class=\"input-group ml-auto\" style=\"width:unset;align-items:unset\"><select class=\"form-item form-control mr-0\" value.bind=\"selectedMacro\" style=\"width:100px;display:inline-block\"><option model.bind=\"null\">Macros...</option><option repeat.for=\"m of macroList\" model.bind=\"m\"> ${m} </option></select><div class=\"input-group-append\"><i class=\"fa fa-plus fa-2x px-2 input-group-text\" aria-hidden=\"true\" click.delegate=\"addMacro()\"></i></div></div><a class=\"btn btn-danger ml-2\" href=\"#\" click.delegate=\"removeSection()\"><i class=\"fa fa-trash-o fa-lg\"></i></a></div><div repeat.for=\"i of section.items\"><div class=\"form-group mb-0\" style=\"height:150px\"><textarea ref=\"selectedTextarea\" class=\"form-control\" rows=\"3\" placeholder=\"Add preference here...\" value.bind=\"i.details\" click.delegate=\"textareaFocus('hpi', $event)\" style=\"height:100%;resize:none\"></textarea></div></div></template>";});;
define('go/preference/injectionTemplate',['exports', 'aurelia-framework', 'lodash', '../../data/go/data'], function (exports, _aureliaFramework, _lodash, _data) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.InjectionTemplate = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var InjectionTemplate = exports.InjectionTemplate = (_dec = (0, _aureliaFramework.inject)(_data.Data), _dec(_class = function () {
    function InjectionTemplate(Data) {
      _classCallCheck(this, InjectionTemplate);

      this.section = null;
      this.selectedPref = null;
      this.prefList = [];

      this.data = Data;
    }

    InjectionTemplate.prototype.activate = function activate(params) {
      var self = this;
      self.section = params;

      self.providerId = self.section.parent.editor.currentProvider.ProviderID;
      self.bodypart = self.section.parent.editor.selectedBodyPart;

      self.data.getWithUrl('injections/preferences?providerid=' + self.providerId + '&bodypart=' + self.bodypart, function (prefs) {
        self.prefList = prefs;
      });
    };

    InjectionTemplate.prototype.addPref = function addPref() {
      var self = this;

      var proto = {
        Id: 0,
        IMapId: self.section.parent.prefId,
        PreferenceId: self.selectedPref.PrefID,
        TableName: 'OD_Inject_Pref',
        PreferenceIdColumn: 'PrefID',
        AutoTaskId: null,
        Modifier: null
      };

      var pref = {
        id: self.selectedPref.PrefID,
        name: self.selectedPref.Description,
        details: self.selectedPref.CPTCode,
        data: self.selectedPref,
        imapProtocol: proto
      };

      self.section.items.push(pref);
    };

    return InjectionTemplate;
  }()) || _class);
});;
define('text!go/preference/injectionTemplate.html',[],function(){return "<template><div id=\"injectionSection\" class=\"d-flex align-items-center border-bottom px-4 py-0\" style=\"background-color:rgba(0,0,0,.03);min-height:48px\"><h5 class=\"m-0\" style=\"display:inline-block;vertical-align:middle\">${section.name}</h5><div class=\"input-group ml-auto\" style=\"width:unset;align-items:unset\"><select class=\"form-item form-control mr-0\" value.bind=\"selectedPref\" style=\"width:250px;display:inline-block\"><option model.bind=\"null\">Prefs...</option><option repeat.for=\"m of prefList\" model.bind=\"m\"> ${m.Description} </option></select><div class=\"input-group-append\"><i class=\"fa fa-plus fa-2x px-2 input-group-text\" aria-hidden=\"true\" click.delegate=\"addPref()\"></i></div></div></div><div repeat.for=\"i of section.items\" class=\"d-flex align-items-center border-bottom pl-4 pr-2 py-2\" style=\"min-height:55px\"><div><div class=\"d-flex align-items-center\"><h5 class=\"d-inline-block\"> ${i.data.InjectionDesc} <small class=\"text-muted\">${i.data.JCode}</small></h5><a class=\"btn btn-danger ml-auto\" href=\"#\" click.delegate=\"section.removeItem(null, i)\"><i class=\"fa fa-trash-o fa-lg\"></i></a></div><h6>${i.data.CPTDesc}<small class=\"ml-1 text-muted\">${i.data.CPTCode}</small></h6><h6>Injection Site:<span class=\"text-muted ml-1\">${i.data.InjectSite}</span></h6><p class=\"text-muted\">${i.data.Instruction}</p></div></div></template>";});;
define('go/preference/preferenceEditor',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', 'lodash', 'moment', '../../data/go/data', '../home', '../popupHelper', 'aurelia-event-aggregator'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _data, _home, _popupHelper, _aureliaEventAggregator) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PreferenceEditor = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Section = function () {
    function Section(name, template, tableName, columnName, id) {
      _classCallCheck(this, Section);

      this.name = name;
      this.items = [];
      this.template = template;
      this.tableName = tableName;
      this.columnName = columnName;
      this.id = id;
      this.selectedItem = new Item(0, 'Select ' + name);
      this.parent = null;
      this.modifier = null;
    }

    Section.prototype.setSelected = function setSelected(data) {
      this.selectedItem = data;
    };

    Section.prototype._deleteItemWithIndex = function _deleteItemWithIndex(deleteIndex) {
      var self = this;

      self.items.splice(deleteIndex, 1);

      var itemCount = self.items.length;
      if (itemCount == 0) {
        var aSection = self.parent.getSection(self.name);
        if (aSection) {
          self.parent.removeSection(aSection);
        }
      }
    };

    Section.prototype.removeItem = function removeItem(pref, item) {

      var self = this;

      var deleteIndex = _.findIndex(self.items, function (d) {
        return d.id == item.id;
      });

      if (deleteIndex > -1 && item.imapProtocol) {
        if (item.imapProtocol.TableName == 'OD_PostOp_Pref') {
          var postOpSections = _.filter(self.parent.sections, function (s) {
            return s.tableName == 'OD_PostOp_Pref';
          });
          if (postOpSections.length > 1) {
            if (self.name == 'Exam') {
              self.parent.followup.data.NoteExam = null;
            } else if (self.name == 'HPI') {
              self.parent.followup.data.NoteHistory = null;
            } else if (self.name == 'Plan') {
              self.parent.followup.data.NotePlan = null;
            }

            self.parent.removeSection(self);
          } else {
            self._deleteItemWithIndex(deleteIndex);
          }
        } else {
          self._deleteItemWithIndex(deleteIndex);
        }
      }
    };

    return Section;
  }();

  var AutoTask = function AutoTask(id, tasktypeId, userid, recepientid, isGroup, vcDisplay) {
    _classCallCheck(this, AutoTask);

    this.AutoTaskID = id;
    this.TaskTypeID = tasktypeId;
    this.UserID = userid;
    this.RecipientID = recepientid;
    this.IsGroup = isGroup;
    this.DisplayOnVisitConsole = vcDisplay;
  };

  var AutoTaskTarget = function AutoTaskTarget(recipientId, name, isGroup) {
    _classCallCheck(this, AutoTaskTarget);

    this.recipientId = recipientId;
    this.isGroup = isGroup;
    this.name = name;
  };

  var Item = function () {
    function Item(id, name, details, type) {
      _classCallCheck(this, Item);

      this.name = name;
      this.details = details;
      this.id = id;
      this.type = type;
      this.autotask = null;
      this.modifier = null;
      this.displayDelete = false;
      this.data = null;
      this.imapProtocol = null;
    }

    Item.prototype.deleteTask = function deleteTask() {
      this.autotask = null;
    };

    return Item;
  }();

  var PreferenceObj = function () {
    function PreferenceObj(description, id, data, editor) {
      _classCallCheck(this, PreferenceObj);

      this.description = description;
      this.data = data;
      this.prefId = id;
      this.sections = [];
      this.followup = null;
      this.selected = false;
      this.selectedProtocol = null;
      this.editor = editor;
      this.editingName = false;
      this.autotask = null;
    }

    PreferenceObj.prototype.toggleNameEdit = function toggleNameEdit() {
      this.editingName = this.editingName ? false : true;
      if (!this.editingName) {
        this.data.Description = this.description;
      }
    };

    PreferenceObj.prototype.getSection = function getSection(name) {
      return _.find(this.sections, function (s) {
        return s.name == name;
      });
    };

    PreferenceObj.prototype.removeSection = function removeSection(section) {
      var self = this;
      for (var s = 0; s < self.sections.length; s++) {
        var aSection = self.sections[s];
        if (aSection.name == section.name) {
          self.sections.splice(s, 1);
        }
      }
    };

    PreferenceObj.prototype.setFollowUp = function setFollowUp(followup) {
      this.followup = followup;
    };

    PreferenceObj.prototype.addNewProtocol = function addNewProtocol(protocol) {
      var self = this;
      if (protocol.TableName === 'VW_Diagnosis') {
        self.editor.displayDxPop(function (dxs) {
          var dxSection = self.getSection("Diagnosis");
          if (!dxSection) {
            dxSection = new Section("Diagnosis", "./dxTemplate", protocol.TableName, protocol.PreferenceIdColumn, 0);
            dxSection.parent = self;
            self.sections.push(dxSection);
          }

          for (var i = 0; i < dxs.length; i++) {

            var protoTableName = protocol.TableName;
            var prefColumnId = protocol.PreferenceIdColumn;
            var dx = dxs[i];
            var prefId = dx.id;

            if (dx.data.hasOwnProperty('Descriptor')) {
              protoTableName = 'OD_ICD10Codes';
              prefColumnId = 'Code';
              prefId = dx.code;
            }

            var aDx = new Item(0, dx.description, dx.code);
            aDx.imapProtocol = self.getNewIMapProtocolObject(self.data.Id, prefId, protoTableName, prefColumnId, null, null);
            dxSection.items.push(aDx);
          }

          self.scrollSectionIntoView(protocol.description);
        });
      } else if (protocol.TableName == 'OD_Procedures' || protocol.TableName == 'OD_Lab_Order') {
        self.editor.displayPxPop(function (pxs) {

          for (var i = 0; i < pxs.length; i++) {
            var px = pxs[i];
            if (protocol.TableName == 'OD_Procedures') {
              var pxSection = self.getSection("Procedure");
              if (!pxSection) {
                pxSection = new Section("Procedure", "./pxTemplate", protocol.TableName, protocol.PreferenceIdColumn, 0);
                pxSection.parent = self;
                self.sections.push(pxSection);
              }
              var aPx = new Item(0, px.description, px.code);
              aPx.imapProtocol = self.getNewIMapProtocolObject(self.data.Id, px.id, protocol.TableName, protocol.PreferenceIdColumn, null, null);
              pxSection.items.push(aPx);
            } else {
              var oSection = self.getSection("Order");
              if (!oSection) {
                oSection = new Section("Order", "./pxTemplate", protocol.TableName, protocol.PreferenceIdColumn, 0);
                oSection.parent = self;
                self.sections.push(oSection);
              }
              var aO = new Item(0, px.description, px.code);
              aO.imapProtocol = self.getNewIMapProtocolObject(self.data.Id, px.id, protocol.TableName, protocol.PreferenceIdColumn, null, null);
              oSection.items.push(aO);
            }
            self.scrollSectionIntoView(protocol.description);
          }
        });
      } else if (protocol.description == 'HPI' || protocol.description == 'Plan' || protocol.description == 'Exam') {
        var aSection = self.getSection(protocol.description);
        if (!aSection) {
          aSection = new Section(protocol.description, "./hpiPlanExamTemplate", protocol.TableName, protocol.PreferenceIdColumn, 0);
          self.sections.push(aSection);
        }

        if (aSection.items.length > 0) {
          self.editor.popHelper.openGenericMessagePop(protocol.description + ' already exists for this preference.', 'Item Exists', ['OK'], false, function (res) {});
          return;
        }

        var aItm = new Item(0, 'New ' + protocol.description + ' Preference', null);
        aItm.imapProtocol = self.getNewIMapProtocolObject(self.data.Id, 0, protocol.TableName, protocol.PreferenceIdColumn, null, null);
        aSection.items.push(aItm);
        self.scrollSectionIntoView(protocol.description);
      } else if (protocol.TableName == 'OD_Inject_Pref') {
        var iSection = self.getSection("Injection");
        if (!iSection) {
          iSection = new Section("Injection", "./injectionTemplate", protocol.TableName, protocol.PreferenceIdColumn, 0);
          iSection.parent = self;
          self.sections.push(iSection);
        }
        self.scrollSectionIntoView(protocol.description);
      } else if (protocol.description == 'Follow Up') {
        self.editor.displayPreferencePicker(self, function (selectedPref) {
          var tProtocol = {
            TableName: self.editor.selectedPrefType == 'PT' ? 'OD_PT_DaySheet_Pref' : 'OD_PostOp_Pref',
            PreferenceIdColumn: self.editor.selectedPrefType == 'PT' ? 'PrefID' : 'PostOpID',
            IMapId: 0,
            PreferenceId: 0,
            AutoTaskId: null,
            Modifier: null,
            Id: 0
          };

          self._addNewHpiExamPlanProtocolWithPreference(tProtocol, selectedPref);
        });
      } else if (protocol.description == 'Go Form Pref') {

        var _iSection = self.getSection("Go Form");
        if (!_iSection) {
          _iSection = new Section("Go Form", "./goFormTemplate", protocol.TableName, protocol.PreferenceIdColumn, 0);
          _iSection.parent = self;
          self.sections.push(_iSection);
        }
        self.scrollSectionIntoView(protocol.description);
      }
    };

    PreferenceObj.prototype._addNewHpiExamPlanProtocolWithPreference = function _addNewHpiExamPlanProtocolWithPreference(protocol, pref) {
      var self = this;

      self.setFollowUp(pref);

      var hpiSection = void 0;
      var examSection = void 0;
      var planSection = void 0;

      if (pref.data.NoteHistory) {
        hpiSection = self.getSection("HPI");
        if (!hpiSection) {
          hpiSection = new Section("HPI", "./hpiPlanExamTemplate", protocol.TableName, protocol.PreferenceIdColumn, 0);
          hpiSection.parent = self;
          self.sections.push(hpiSection);
        }
      }

      if (pref.data.NoteExam) {
        examSection = self.getSection("Exam");
        if (!examSection) {
          examSection = new Section("Exam", "./hpiPlanExamTemplate", protocol.TableName, protocol.PreferenceIdColumn, 0);
          examSection.parent = self;
          self.sections.push(examSection);
        }
      }

      if (pref.data.NotePlan) {
        planSection = self.getSection("Plan");
        if (!planSection) {
          planSection = new Section("Plan", "./hpiPlanExamTemplate", protocol.TableName, protocol.PreferenceIdColumn, 0);
          planSection.parent = self;
          self.sections.push(planSection);
        }
      }

      var displayExisting = false;
      var existingText = '';

      if (hpiSection) {
        if (hpiSection.items.length > 0) {
          existingText += "HPI, ";
          displayExisting = true;
        } else {
          var aHpi = new Item(pref.data.PostOpID, pref.data.PostOpProcedure, pref.data.NoteHistory);
          aHpi.autoTaskId = protocol.AutoTaskId;

          aHpi.imapProtocol = self.getNewIMapProtocolObject(self.data.Id, pref.data.PostOpID, protocol.TableName, protocol.PreferenceIdColumn, null, null);
          aHpi.imapProtocol.Id = protocol.Id;
          hpiSection.items.push(aHpi);
        }
      }

      if (planSection) {
        if (planSection.items.length > 0) {
          existingText += "Plan, ";
          displayExisting = true;
        } else {
          var aPlan = new Item(pref.data.PostOpID, pref.data.PostOpProcedure, pref.data.NotePlan);
          aPlan.autoTaskId = protocol.AutoTaskId;
          aPlan.imapProtocol = self.getNewIMapProtocolObject(self.data.Id, pref.data.PostOpID, protocol.TableName, protocol.PreferenceIdColumn, null, null);
          aPlan.imapProtocol.Id = protocol.Id;
          planSection.items.push(aPlan);
        }
      }

      if (examSection) {
        if (examSection.items.length > 0) {
          existingText += "Exam, ";
          displayExisting = true;
        } else {
          var aExam = new Item(pref.data.PostOpID, pref.data.PostOpProcedure, pref.data.NoteExam);
          aExam.autoTaskId = protocol.AutoTaskId;
          aExam.imapProtocol = self.getNewIMapProtocolObject(self.data.Id, pref.data.PostOpID, protocol.TableName, protocol.PreferenceIdColumn, null, null);
          aExam.imapProtocol.Id = protocol.Id;
          examSection.items.push(aExam);
        }
      }

      if (displayExisting) {
        existingText = existingText.trimEnd();
        existingText = existingText.substring(0, existingText.length - 1);

        self.editor.popHelper.openGenericMessagePop(existingText + ' already exists for this preference.', 'Item Exists', ['OK'], false, function (res) {});
        return;
      }
    };

    PreferenceObj.prototype.scrollSectionIntoView = function scrollSectionIntoView(description) {
      var self = this;
      window.setTimeout(function () {
        var noSpace = description.replace(/\s/g, '');
        var elId = noSpace.toLowerCase() + "Section";
        var element = document.getElementById(elId);
        element.scrollIntoView();
      }, 500);
    };

    PreferenceObj.prototype.getSectionWithTableName = function getSectionWithTableName(table) {
      var self = this;
      if (table === 'VW_Diagnosis' || table === 'OD_ICD10Codes') {
        return self.getSection("Diagnosis");
      } else if (table === 'OD_PostOp_Pref') {} else if (table === 'OD_Inject_Pref') {

        return self.getSection("Injection");
      } else if (table === 'OD_Go_Forms_Pref') {

        return self.getSection("Go Form");
      } else if (table === 'OD_Procedures') {
        return self.getSection('Procedure');
      } else if (table === 'OD_Lab_Order') {
        return self.getSection('Order');
      }
    };

    PreferenceObj.prototype.setProtocolData = function setProtocolData(protocol, providerId, bodypart) {

      var self = this;

      var aProto = protocol;

      var OD_IMap_Protocol_Id = 0;

      if (aProto.hasOwnProperty('Id')) {
        OD_IMap_Protocol_Id = aProto.Id;
      }

      if (aProto.TableName === 'VW_Diagnosis' || aProto.TableName === 'OD_ICD10Codes') {
        var dxSection = self.getSection("Diagnosis");
        if (!dxSection) {
          dxSection = new Section("Diagnosis", "./dxTemplate", aProto.TableName, aProto.PreferenceIdColumn, OD_IMap_Protocol_Id);
          dxSection.parent = self;
          self.sections.push(dxSection);
        }

        var _url = "";
        if (aProto.TableName === 'VW_Diagnosis') {
          _url = "Diagnosis/vw/" + aProto.PreferenceId;
        } else {
          _url = "icd10codes?code=" + aProto.PreferenceId;
        }

        self.editor.data.getWithUrl(_url, function (json) {
          if (json) {
            var aDx = null;
            if (aProto.TableName === 'VW_Diagnosis') {
              aDx = new Item(json.DiagnosisID, json.Description, json.DxKey);
            } else {
              aDx = new Item(json.Code, json.Descriptor, json.Code);
            }
            aDx.imapProtocol = aProto;
            dxSection.items.push(aDx);
          }
        });
      } else if (aProto.TableName === 'OD_PostOp_Pref') {

        var fures = _.find(self.editor.followUpList, function (f) {
          return f.prefId == aProto.PreferenceId;
        });
        self._addNewHpiExamPlanProtocolWithPreference(aProto, fures);
      } else if (aProto.TableName === 'OD_Inject_Pref') {

        var injectSection = self.getSection("Injection");
        if (!injectSection) {
          injectSection = new Section("Injection", "./injectionTemplate", aProto.TableName, aProto.PreferenceIdColumn, OD_IMap_Protocol_Id);
          injectSection.parent = self;
          self.sections.push(injectSection);
        }

        var injectUrl = "injection/preference?id=" + aProto.PreferenceId;

        self.editor.data.getWithUrl(injectUrl, function (json) {
          if (json) {
            var aInj = new Item(json.PrefID, json.Description, json.CPTCode);
            aInj.data = json;
            aInj.imapProtocol = aProto;
            injectSection.items.push(aInj);
          }
        });
      } else if (aProto.TableName === 'OD_Go_Forms_Pref') {

        var goFormSection = self.getSection("Go Form");
        if (!goFormSection) {
          goFormSection = new Section("Go Form", "./goFormTemplate", aProto.TableName, aProto.PreferenceIdColumn, OD_IMap_Protocol_Id);
          goFormSection.parent = self;
          self.sections.push(goFormSection);
        }

        var goFormUrl = "goforms/pref?id=" + aProto.PreferenceId;

        self.editor.data.getWithUrl(goFormUrl, function (json) {
          if (json) {
            var aInj = new Item(json.Id, json.Description, null);
            aInj.data = json;
            aInj.imapProtocol = aProto;
            goFormSection.items.push(aInj);
          }
        });
      } else if (aProto.TableName === 'OD_Procedures') {
        var pxSection = self.getSection('Procedure');
        if (!pxSection) {
          pxSection = new Section("Procedure", "./pxTemplate", aProto.TableName, aProto.PreferenceIdColumn, OD_IMap_Protocol_Id);
          pxSection.parent = self;
          self.sections.push(pxSection);
        }
        var url = "Procedures/" + aProto.PreferenceId;
        self.editor.data.getWithUrl(url, function (json) {
          if (json) {
            var aPx = new Item(json.ProcedureID, json.Description, json.CptKey);
            aPx.modifier = aProto.Modifier;
            aPx.data = json;
            aPx.imapProtocol = aProto;
            pxSection.items.push(aPx);
          }
        });
      } else if (aProto.TableName === 'OD_Lab_Order') {
        var orderSection = self.getSection('Order');
        if (!orderSection) {
          orderSection = new Section("Order", "./pxTemplate", aProto.TableName, aProto.PreferenceIdColumn, OD_IMap_Protocol_Id);
          orderSection.parent = self;
          self.sections.push(orderSection);
        }
        var url = "Procedures/" + aProto.PreferenceId;
        self.editor.data.getWithUrl(url, function (json) {
          if (json) {
            var aOrd = new Item(json.ProcedureID, json.Description, json.CptKey);
            aOrd.modifier = aProto.Modifier;
            aOrd.data = json;
            aOrd.imapProtocol = aProto;
            orderSection.items.push(aOrd);
          }
        });
      }
    };

    PreferenceObj.prototype._save = function _save(callback) {
      var self = this;

      var iMap = self.getNewIMapObject(self.data.Description, self.data.ImpressionId, self.data.ProviderId, self.data.BodyPart, self.data.FollowUp, self.data.Maptype);
      iMap.Id = self.data.Id;

      var postOpPref = null;

      for (var s = 0; s < self.sections.length; s++) {
        var aSection = self.sections[s];

        if (aSection.name == 'Exam' || aSection.name == 'HPI' || aSection.name == 'Plan') {
          if (!postOpPref) {
            if (self.followup) {
              postOpPref = self.followup.data;
            } else {
              postOpPref = self.getNewPostOpPrefObject(self.data.ProviderId, null, null, null, self.data.Description, self.data.BodyPart, self.data.Maptype);
            }
          }
        }

        var autoTaskId = self.autotask ? self.autotask.AutoTaskID : null;

        for (var x = 0; x < aSection.items.length; x++) {
          var aItm = aSection.items[x];

          var imapId = 0;
          var preferenceId = 0;
          var tableName = aItm.imapProtocol.TableName;
          var preferenceIdColumn = aItm.imapProtocol.PreferenceIdColumn;aSection.columnName;
          var _autoTaskId = _autoTaskId;
          var mod = aItm.modifier;
          var protoId = 0;

          if (aItm.imapProtocol != null) {
            tableName = aItm.imapProtocol.TableName;
            preferenceIdColumn = aItm.imapProtocol.PreferenceIdColumn;
            imapId = aItm.imapProtocol.IMapId;
            preferenceId = aItm.imapProtocol.PreferenceId;
            _autoTaskId = _autoTaskId == null ? aItm.imapProtocol.AutoTaskId : _autoTaskId;
            mod = mod == null ? aItm.imapProtocol.Modifier : mod;
            protoId = aItm.imapProtocol.Id;
          }

          var aProtocol = self.getNewIMapProtocolObject(imapId, preferenceId, tableName, preferenceIdColumn, _autoTaskId, mod);

          aProtocol.Id = protoId;
          iMap.OD_IMap_Protocols.push(aProtocol);

          if (postOpPref) {
            if (aSection.name == 'Exam') {
              postOpPref.NoteExam = aItm.details;
            } else if (aSection.name == 'HPI') {
              postOpPref.NoteHistory = aItm.details;
            } else if (aSection.name == 'Plan') {
              postOpPref.NotePlan = aItm.details;
            }
          }
        }
      }

      self.saveAutoTask(self.autotask, function (autoTaskRes) {

        if (autoTaskRes != null) {
          for (var p = 0; p < iMap.OD_IMap_Protocols.length; p++) {
            var pro = iMap.OD_IMap_Protocols[p];
            pro.AutoTaskId = autoTaskRes.AutoTaskID;
          }
        }

        self.savePostOpPref(postOpPref, function (pores) {

          if (postOpPref) {

            self.setFollowUp({ data: pores });

            var currentIndex = 0;
            var foundPo = false;
            for (currentIndex; currentIndex < iMap.OD_IMap_Protocols.length; currentIndex++) {
              var aProto = iMap.OD_IMap_Protocols[currentIndex];
              if (aProto.TableName == "OD_PostOp_Pref") {
                if (!foundPo) {
                  aProto.PreferenceId = pores.PostOpID;
                  foundPo = true;
                } else {
                  iMap.OD_IMap_Protocols.splice(currentIndex, 1);
                  currentIndex--;
                }
              }
            }
          }

          var imapUrl = 'impressionmap';
          if (iMap.Id == 0) {
            self.editor.data.postWithUrlAndData(imapUrl, JSON.stringify(iMap), function (saveRes) {
              self.data.Id = saveRes.Id;
              self.updateItemProtocols(saveRes.OD_IMap_Protocols);
              callback(true);
            });
          } else {
            self.editor.data.putWithUrlAndData(imapUrl, iMap, function (updateRes) {
              callback(true);
            });
          }
        });
      });
    };

    PreferenceObj.prototype.saveAs = function saveAs() {
      var self = this;

      self.editor.popHelper.openGenericInputPop('Save New Preference As...', ['Name'], 'Save', false, function (res) {
        self.data.Id = 0;
        self.data.Description = res.inputs[0].value;

        for (var s = 0; s < self.sections.length; s++) {
          var aSection = self.sections[s];
          for (var x = 0; x < aSection.items.length; x++) {
            var aItm = aSection.items[x];
            aItm.imapProtocol = null;
          }
        }

        var saveDetail = self.description + " Preference...";
        self.saveDialog = self.editor.helper.createNoty('Saving ' + saveDetail, 3000);
        self.saveDialog.show();

        self._save(function (saveNewRes) {
          self.editor.helper.notySuccess(self.saveDialog, saveDetail + ' saved!');

          self.editor.filterPreference();
        });
      });
    };

    PreferenceObj.prototype.save = function save() {
      var self = this;

      var saveDetail = self.description + " Preference...";
      self.saveDialog = self.editor.helper.createNoty('Saving ' + saveDetail, 3000);
      self.saveDialog.show();

      var saveText = self.data.Id == 0 ? ' saved!' : ' updated!';

      self._save(function (res) {
        self.editor.helper.notySuccess(self.saveDialog, saveDetail + saveText);
      });
    };

    PreferenceObj.prototype.updateItemProtocols = function updateItemProtocols(od_imap_protocols) {
      var self = this;

      var _loop = function _loop(i) {
        var aProto = od_imap_protocols[i];

        var aSections = void 0;
        if (aProto.TableName == 'OD_ICD10Codes' || aProto.TableName == 'VW_Diagnosis') {
          aSections = _.filter(self.sections, function (s) {
            return s.name == 'Diagnosis';
          });
        } else {
          aSections = _.filter(self.sections, function (s) {
            return s.tableName == aProto.TableName;
          });
        }

        for (var s = 0; s < aSections.length; s++) {
          for (var itm = 0; itm < aSections[s].items.length; itm++) {
            var aItm = aSections[s].items[itm];
            aItm.imapProtocol = aProto;
          }
        }
      };

      for (var i = 0; i < od_imap_protocols.length; i++) {
        _loop(i);
      }
    };

    PreferenceObj.prototype.savePostOpPref = function savePostOpPref(postOpPref, callback) {
      var self = this;

      if (!postOpPref) {
        callback();
        return;
      }

      var url = 'examfollowup/preferences';
      if (postOpPref.PostOpID == 0) {
        self.editor.data.postWithUrlAndData(url, JSON.stringify(postOpPref), function (postres) {
          callback(postres);
        });
      } else {
        self.editor.data.putWithUrlAndData(url, postOpPref, function (putres) {
          callback(putres);
        });
      }
    };

    PreferenceObj.prototype.saveAutoTask = function saveAutoTask(autotask, callback) {
      var self = this;
      if (autotask != null && autotask.AutoTaskID == 0) {
        self.data.postWithUrlAndData('autotask', self.autotask, function (res) {
          callback(res);
        });
      } else {
        callback(null);
      }
    };

    PreferenceObj.prototype.getNewIMapObject = function getNewIMapObject(description, impressionId, providerId, bodypart, isFollowup, maptype) {
      return {
        Id: 0,
        Description: description,
        ImpressionId: impressionId,
        ProviderId: providerId,
        BodyPart: bodypart,
        FollowUp: isFollowup,
        Maptype: maptype,
        OD_IMap_Protocols: []
      };
    };

    PreferenceObj.prototype.getNewIMapProtocolObject = function getNewIMapProtocolObject(imapId, preferenceId, tableName, preferenceIdColumn, autotaskId, modifier) {
      return {
        Id: 0,
        IMapId: imapId,
        PreferenceId: preferenceId,
        TableName: tableName,
        PreferenceIdColumn: preferenceIdColumn,
        AutoTaskId: autotaskId,
        Modifier: modifier
      };
    };

    PreferenceObj.prototype.getNewPostOpPrefObject = function getNewPostOpPrefObject(providerId, history, exam, plan, description, bodypart, type) {
      return {
        ProviderID: providerId,
        NoteHistory: history,
        NoteExam: exam,
        NotePlan: plan,
        PostOpProcedure: description,
        BodyPart: bodypart,
        Type: type.toUpperCase(),
        PostOpID: 0
      };
    };

    return PreferenceObj;
  }();

  var Protocol = function Protocol(name, table, id, imapId, prefId, prefColumn) {
    _classCallCheck(this, Protocol);

    this.description = name;
    this.TableName = table;
    this.Id = id;
    this.IMapId = imapId;
    this.PreferenceId = prefId;
    this.PreferenceIdColumn = prefColumn;
    this.AutoTaskId = null;
    this.Modifier = null;
  };

  var PreferenceEditor = exports.PreferenceEditor = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home, _popupHelper.PopupHelper, _aureliaEventAggregator.EventAggregator), _dec(_class = (_class2 = function () {
    function PreferenceEditor(helper, http, Data, Home, PopupHelper, EventAggregator) {
      _classCallCheck(this, PreferenceEditor);

      this.providers = [];
      this.preferences = [];
      this.prefTypeButtonText = "Follow";
      this.prefTypes = ['Follow', 'Telemed', 'PT', 'OT'];
      this.prefTypeIndex = 0;

      _initDefineProp(this, 'selectedPreference', _descriptor, this);

      this.protocolList = [];
      this.followUpList = [];
      this.goFormPrefs = [];
      this.autoTaskTargets = [];
      this.macroList = ['[he/she]', '[his/her]', '[him/her]', '[patient]', '[side]', '[PostOpDays]', '[AGE]', '[Gender]', '[Hand Dominance]'];
      this.daysheetVisible = false;

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
      this.popHelper = PopupHelper;
      this.event = EventAggregator;
    }

    PreferenceEditor.prototype.activate = function activate(params) {
      var self = this;

      self.bodyparts = self.data.bodyparts;

      self.home = params.home;

      self.daysheetVisible = params.home.displayDaysheet;

      self.followUpList = params.preferences;

      self.selectedPrefType = self.prefTypes[params.prefTypeIndex];

      self.providers = params.home.allProviders;

      self.selectedBodyPart = self.bodyparts[0];
      if (params.home.currentBoard) {
        self.selectedBodyPart = params.home.currentBoard.visitInfo.bodypart;
      }
      if (params.home.currentProvider) {
        self.currentProvider = params.home.currentProvider;
      } else {
        self.currentProvider = params.home.providers[0];
      }

      self.loadProtocols();

      self.filterPreference();

      self.loadAutoTaskTargets();
    };

    PreferenceEditor.prototype.loadAutoTaskTargets = function loadAutoTaskTargets() {
      var self = this;
      self.data.getAllUsers(function (usrs) {

        usrs = _.orderBy(usrs, [function (user) {
          return user.UserName.toLowerCase();
        }], ['UserName', 'asc']);

        for (var u = 0; u < usrs.length; u++) {
          self.autoTaskTargets.push(new AutoTaskTarget(usrs[u].UserID, usrs[u].UserName, false));
        }
        self.data.getAllGroups(function (grps) {

          grps = _.orderBy(grps, 'GroupName', 'asc');

          for (var g = 0; g < grps.length; g++) {
            self.autoTaskTargets.push(new AutoTaskTarget(grps[g].GroupID, grps[g].GroupName, true));
          }
        });
      });
    };

    PreferenceEditor.prototype.deleteImpressionMapProtocolWithId = function deleteImpressionMapProtocolWithId(id, callback) {
      var self = this;
      self.data.deleteWithUrl('impressionmapprotocol/' + id, function (del) {
        callback(del);
      });
    };

    PreferenceEditor.prototype.loadProtocols = function loadProtocols() {
      var self = this;

      self.preferences = [];

      self.protocolList = [new Protocol('Diagnosis', 'VW_Diagnosis', 0, 0, 0, "DiagnosisID"), new Protocol('Exam', 'OD_PostOp_Pref', 0, 0, 0, "PostOpID"), new Protocol('HPI', 'OD_PostOp_Pref', 0, 0, 0, "PostOpID"), new Protocol('Injection', 'OD_Inject_Pref', 0, 0, 0, "PrefID"), new Protocol('Order', 'OD_Lab_Order', 0, 0, 0, "LabReqID"), new Protocol('Plan', 'OD_PostOp_Pref', 0, 0, 0, "PostOpID"), new Protocol('Procedure', 'OD_Procedures', 0, 0, 0, "ProcedureID"), new Protocol('Follow Up', 'OD_PostOp_Pref', 0, 0, 0, "PostOpID"), new Protocol('Go Form Pref', 'OD_Go_Forms_Pref', 0, 0, 0, "Id")];
    };

    PreferenceEditor.prototype.loadImpressionMaps = function loadImpressionMaps(providerId, bodypart, callback) {
      var self = this;
      self.preferences = [];
      self.data.getImpressionMaps(providerId, bodypart, self.selectedPrefType, function (res) {
        for (var i = 0; i < res.length; i++) {
          var aPref = new PreferenceObj(res[i].Description, res[i].Id, res[i], self);
          if (i == 0) {
            aPref.selected = true;
          }
          self.preferences.push(aPref);
          var fu = self.getFollowUpWithId(aPref.data.ImpressionId);
          aPref.setFollowUp(fu);

          for (var p = 0; p < aPref.data.OD_IMap_Protocols.length; p++) {
            var _aProto = aPref.data.OD_IMap_Protocols[p];
            aPref.setProtocolData(_aProto, res[i].ProviderId, res[i].BodyPart);
          }
        }

        if (self.preferences.length > 0) {
          window.setTimeout(function () {
            self.showHidePreferenceWithIndex(true, 0);
          }, 500);
        }

        if (callback) {
          callback();
        }
      });
    };

    PreferenceEditor.prototype.openDaysheetEditor = function openDaysheetEditor() {

      var self = this;

      var provId = self.currentProvider ? self.currentProvider.ProviderID : null;
      provId = provId == 0 ? null : provId;

      var daysheetParams = {
        patientid: null,
        providerid: provId,
        bodypart: self.selectedBodyPart,
        userid: self.helper._user.UserID,
        visitdate: null,
        type: 'PT',
        displayCloseButton: true,
        parent: self,
        displayPreferences: true,
        editMode: true,
        providers: self.providers
      };

      var path = '../ptdaysheet/datagrid';

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var options = {
        displayHeader: true,
        bodyPadding: 0,
        closeActiveDialog: false
      };

      self.popHelper.openViewModelPop(path, daysheetParams, "Daysheet Preferences", windowWidth, windowHeight, 0, 0, options, function (res) {});
    };

    PreferenceEditor.prototype.filterPreference = function filterPreference(callback) {
      var self = this;
      self.getFollowUpPreferences(self.currentProvider.ProviderID, self.selectedBodyPart, self.selectedPrefType, function () {
        self.loadImpressionMaps(self.currentProvider.ProviderID, self.selectedBodyPart, function () {
          if (callback) {
            callback();
          }
        });
      });
    };

    PreferenceEditor.prototype.getFollowUpWithId = function getFollowUpWithId(id) {
      var self = this;
      return _.find(self.followUpList, function (f) {
        return f.prefId == id;
      });
    };

    PreferenceEditor.prototype.selectPreference = function selectPreference(pref) {
      var self = this;
      self.selectedPreference = pref;
    };

    PreferenceEditor.prototype.selectedPreferenceChanged = function selectedPreferenceChanged(newVal, oldVal) {
      var self = this;

      for (var p = 0; p < self.preferences.length; p++) {
        var aPref = self.preferences[p];
        aPref.selected = aPref.prefId == newVal.prefId ? true : false;
      }
    };

    PreferenceEditor.prototype.providerSelected = function providerSelected() {
      var self = this;
      self.filterPreference();
    };

    PreferenceEditor.prototype.getFollowUpPreferences = function getFollowUpPreferences(providerId, bodypart, preftype, callback) {
      var self = this;
      self.followUpList = [];

      if (preftype == 'PT' && self.daysheetVisible) {
        self.data.getPtDaysheetPref(providerId, bodypart, function (prefs) {
          var unique = _.uniqBy(prefs, 'PrefDescription');
          for (var i = 0; i < unique.length; i++) {
            if (!self.doesFollowUpListPreferenceExist(unique[i].PrefDescription)) {
              var aPref = new PreferenceObj(unique[i].PrefDescription, unique[i].PrefID, unique[i]);
              self.followUpList.push(aPref);
            }
          }
        });
      } else {
        self.data.getFollowUpPref(providerId, bodypart, preftype, function (prefs) {
          for (var i = 0; i < prefs.length; i++) {
            if (!self.doesFollowUpListPreferenceExist(prefs[i].PostOpProcedure)) {
              var aPref = new PreferenceObj(prefs[i].PostOpProcedure, prefs[i].PostOpID, prefs[i]);
              self.followUpList.push(aPref);
            }
          }
          callback();
        });
      }
    };

    PreferenceEditor.prototype.doesFollowUpListPreferenceExist = function doesFollowUpListPreferenceExist(description) {
      for (var i = 0; i < this.followUpList.length; i++) {
        if (this.followUpList[i].description == description) {
          return true;
        }
      }
      return false;
    };

    PreferenceEditor.prototype.preferenceClick = function preferenceClick(pref) {
      var self = this;

      if (self.locked) return;

      self.selectedPreference = pref;
    };

    PreferenceEditor.prototype.togglePrefTypeClicked = function togglePrefTypeClicked() {
      var self = this;

      var i = self.prefTypeIndex + 1;
      if (i == self.prefTypes.length) {
        self.prefTypeIndex = 0;
      } else {
        self.prefTypeIndex = i;
      }
      self.filterExamPref(self.currentProvider.ProviderID);
    };

    PreferenceEditor.prototype._newPreferenceChecksReady = function _newPreferenceChecksReady() {
      var self = this;
      if (!self.currentProvider) {
        self.popHelper.openGenericMessagePop('Please select a provider for preference.', 'No Provider Selected', ['OK'], true, function (res) {});
        return false;
      }

      var bp = self.selectedBodyPart;
      if (!bp) {
        self.popHelper.openGenericMessagePop('Please select a bodypart for preference.', 'Save Preference Requirements', ['OK'], true, function (res) {});
        return false;
      }

      return true;
    };

    PreferenceEditor.prototype.newPreferenceFromExisting = function newPreferenceFromExisting() {
      var self = this;

      var ready = self._newPreferenceChecksReady();
      if (!ready) {
        return;
      }

      self.displayPreferencePicker(self, function (selectedPref) {
        var isPtDaysheet = self.selectedPrefType == 'PT' && self.daysheetVisible ? true : false;
        var tableName = isPtDaysheet ? 'OD_PT_DaySheet_Pref' : 'OD_PostOp_Pref';
        var prefIdColumn = isPtDaysheet ? 'PrefID' : 'PostOpID';

        var tProtocol = {
          TableName: tableName,
          PreferenceIdColumn: prefIdColumn,
          IMapId: 0,
          PreferenceId: 0,
          AutoTaskId: null,
          Modifier: null,
          Id: 0
        };

        selectedPref._addNewHpiExamPlanProtocolWithPreference(tProtocol, selectedPref);

        self._completeNewPreferenceCreation(selectedPref.description, selectedPref);
      });
    };

    PreferenceEditor.prototype.newPreference = function newPreference() {
      var self = this;

      var ready = self._newPreferenceChecksReady();
      if (!ready) {
        return;
      }

      self.popHelper.openGenericInputPop('Create New Preference', ['Description'], 'New', false, function (res) {

        if (res.inputs[0].value == null) {
          self.popHelper.openGenericMessagePop('Preferences require a description to save.', 'Preference Creation Failed', ['OK'], true, function (res) {
            return;
          });
        } else {

          self._completeNewPreferenceCreation(res.inputs[0].value);
        }
      });
    };

    PreferenceEditor.prototype._completeNewPreferenceCreation = function _completeNewPreferenceCreation(description, preferenceObj) {
      var self = this;

      var iMap = {
        Id: 0,
        Description: description,
        ImpressionId: preferenceObj ? preferenceObj.prefId : 0,
        ProviderId: self.currentProvider.ProviderID,
        BodyPart: self.selectedBodyPart,
        FollowUp: self.selectedPrefType.toLowerCase() == 'follow' ? 1 : 0,
        Maptype: self.selectedPrefType.toLowerCase()
      };

      var newPref = new PreferenceObj(description, 0, iMap, self);
      if (preferenceObj) {
        var fu = JSON.stringify(preferenceObj.data);
        newPref.followup = { data: JSON.parse(fu) };
        newPref.sections = preferenceObj.sections;
      }

      self.preferences.push(newPref);
      self.selectedPreference = newPref;

      var newIndex = self.preferences.length - 1;
      for (var p = 0; p < self.preferences.length; p++) {
        if (p != newIndex) {
          self.showHidePreferenceWithIndex(false, p);
        }
      }

      window.setTimeout(function () {
        self.showHidePreferenceWithIndex(true, newIndex);

        var element = document.getElementById('collapse' + newIndex);
        element.scrollIntoView();
      }, 500);
    };

    PreferenceEditor.prototype.showHidePreferenceWithIndex = function showHidePreferenceWithIndex(doShow, index) {
      var newItem = $('#collapse' + index);
      var method = doShow ? 'show' : 'hide';
      if (newItem.length > 0) {
        newItem[0].collapse(method);
      }
    };

    PreferenceEditor.prototype.addMacro = function addMacro() {
      var self = this;
      if (self.selectedMacro && self.selectedTextarea) {

        var selectStart = self.selectedTextarea.selectionStart;
        var selectEnd = self.selectedTextarea.selectionEnd;

        var txt = self.selectedTextarea.value;
        var start = txt.substr(0, selectStart);
        var end = txt.substr(selectEnd, txt.length - selectEnd);

        if (self.selectedTextareaType == 'hpi') {
          self.hpiText = start + self.selectedMacro + end;
        } else if (self.selectedTextareaType == 'exam') {
          self.examText = start + self.selectedMacro + end;
        } else {
          self.planText = start + self.selectedMacro + end;
        }
      } else {
        if (!this.selectedMacro) {
          self.popHelper.openGenericMessagePop('Please select a macro to add to preference.', 'No Macro Selected', ['OK'], true, function (res) {});
          return;
        }

        if (!this.selectedTextarea) {
          self.popHelper.openGenericMessagePop('Please click in a textarea to add macro.', 'No Textarea Selected', ['OK'], true, function (res) {});
          return;
        }
      }
    };

    PreferenceEditor.prototype.textareaFocus = function textareaFocus(textarea, e) {
      var self = this;
      self.selectedTextarea = e.target;
      self.selectedTextareaType = textarea;
    };

    PreferenceEditor.prototype.getSelectedFollowupPrefData = function getSelectedFollowupPrefData() {
      var self = this;
      var obj = {};

      obj.type = self.selectedPrefType;
      obj.hpiText = self.hpiText;
      obj.planText = self.planText;
      obj.examText = self.examText;

      return obj;
    };

    PreferenceEditor.prototype.createFollowUpPrefObject = function createFollowUpPrefObject(providerId, bodypart, type, prefDescription, hpiText, examText, planText, postopId) {

      var preference = {
        ProviderID: providerId,
        BodyPart: bodypart,
        Type: type,
        PostOpProcedure: prefDescription,
        NoteHistory: hpiText,
        NoteExam: examText,
        NotePlan: planText,
        Timeframe: '',
        visitCode: '',
        PostOpID: postopId
      };

      return preference;
    };

    PreferenceEditor.prototype.displayDxPop = function displayDxPop(callback) {
      var self = this;
      self.popHelper.openDxPop(self.bodypart, self.bodyside, undefined, function (res) {
        callback(res);
      });
    };

    PreferenceEditor.prototype.displayPxPop = function displayPxPop(callback) {
      var self = this;
      self.popHelper.openProcedureSearchPop('X-RAY', false, function (pxs) {
        callback(pxs);
      });
    };

    PreferenceEditor.prototype.openAutoTask = function openAutoTask(preference) {
      var self = this;
      var genericPicklistItems = [];
      for (var i = 0; i < self.autoTaskTargets.length; i++) {
        var pItm = self.data.getGenericPicklistItem(self.autoTaskTargets[i].name, self.autoTaskTargets[i]);
        genericPicklistItems.push(pItm);
      }
      self.popHelper.openGenericPicklistPop("Please Select Recipient for AutoTask...", 'AutoTask', genericPicklistItems, false, function (res) {
        var autoTaskTarget = res.item.data;
        var taskType = self.home.taskHelper.getTaskTypeWithTypeAndDescription('Board', 'Board');
        var autotask = new AutoTask(0, taskType.Id, self.helper._user.UserID, autoTaskTarget.recipientId, autoTaskTarget.isGroup, true);
        preference.autotask = autotask;
      });
    };

    PreferenceEditor.prototype.displayPreferencePicker = function displayPreferencePicker(pref, callback) {
      var self = this;
      var prefItems = [];
      for (var i = 0; i < self.followUpList.length; i++) {
        var pItm = self.data.getGenericPicklistItem(self.followUpList[i].description, self.followUpList[i]);
        prefItems.push(pItm);
      }
      self.popHelper.openGenericPicklistPop("Please select preference to add...", 'Select Preference', prefItems, false, function (res) {
        callback(res.item.data);
      });
    };

    return PreferenceEditor;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'selectedPreference', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  })), _class2)) || _class);
});;
define('text!go/preference/preferenceEditor.html',[],function(){return "<template><style>.preference-selected{background-color:#f0f8ff}.preference-selected-border{-webkit-box-shadow:0 0 4px 1px rgba(0,0,0,.5);box-shadow:0 0 4px 1px rgba(0,123,255,.7)}.select-pref-alert{border:1px dashed #d3d3d3;border-radius:5px;padding:10px}@keyframes FadeIn{to{opacity:1}}@keyframes FadeOut{to{opacity:0}}</style><div class=\"card\" style=\"height:inherit\"><div class=\"card-header d-flex\"><h4 class=\"mr-2 mb-0 align-self-center\"><i class=\"fa fa-user mr-2\"></i>Preference Editor</h4><div class=\"align-self-center pr-1\"><select value.bind=\"currentProvider\" class=\"form-control\" id=\"exampleFormControlSelect1\" change.delegate=\"providerSelected()\"><option model.bind=\"null\">Provider...</option><option repeat.for=\"p of providers\" model.bind=\"p\">${p.ProviderEntity}</option></select></div><button type=\"button\" class=\"btn btn-outline-secondary\" click.delegate=\"openDaysheetEditor()\"><i class=\"fa fa-pencil-square-o fa-lg pr-1\"></i>Daysheet Editor</button> <i class=\"fa fa-close fa-2x align-self-center ml-auto\" click.delegate=\"cancel()\"></i></div><div class=\"card-body pt-2\" style=\"overflow-y:scroll\"><div class=\"d-flex align-items-center mb-2\"><i class=\"fa fa-filter fa-lg mr-2 text-muted\"></i><div class=\"pr-1\"><select class=\"form-item form-control\" value.bind=\"selectedPrefType\" change.delegate=\"filterPreference()\"><option model.bind=\"null\">Type...</option><option repeat.for=\"t of prefTypes\" model.bind=\"t\"> ${t} </option></select></div><div class=\"pr-1\"><select class=\"form-item form-control\" value.bind=\"selectedBodyPart\" change.delegate=\"filterPreference()\"><option model.bind=\"null\">Bodypart...</option><option repeat.for=\"b of bodyparts\" model.bind=\"b\"> ${b} </option></select></div><div class=\"dropdown ml-auto\"><button class=\"btn btn-outline-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-plus pr-1\" aria-hidden=\"true\"></i>New</button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"newPreference()\">New</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"newPreferenceFromExisting()\">From legacy preference</a></div></div></div><div class=\"accordion\" id=\"prefAccordian\"><div if.bind=\"preferences.length==0\" class=\"jumbotron\"><h1 class=\"display-4\">No Preferences Found</h1><p class=\"lead\">No preferences were found with the current filter selections</p><hr class=\"my-4\"><p>Provider: ${currentProvider.ProviderEntity}, Type: ${selectedPrefType}, Bodypart: ${selectedBodyPart}</p></div><div repeat.for=\"p of preferences\" class=\"card ${p.selected ? 'preference-selected-border' : ''}\"><div class=\"card-header ${p.selected ? 'preference-selected' : ''} py-1 pl-4 pr-2\" id=\"heading${$index}\"><div class=\"mb-0 d-flex align-items-center\"><button if.bind=\"!p.editingName\" click.delegate=\"selectPreference(p)\" class=\"btn btn-link text-left font-weight-bold pl-0 pr-2\" style=\"font-size:1.25rem!important\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapse${$index}\" aria-expanded=\"true\" aria-controls=\"collapse${$index}\"> ${p.description} </button> <button type=\"button\" if.bind=\"!p.editingName\" disabled.bind=\"!p.selected\" class=\"btn\" click.delegate=\"p.toggleNameEdit()\"><i class=\"fa fa-pencil-square-o fa-lg text-muted\"></i></button> <input if.bind=\"p.editingName\" type=\"text\" value.bind=\"p.description\" class=\"form-control mr-1\" style=\"width:200px\"> <i if.bind=\"p.editingName\" class=\"fa fa-check-circle fa-2x text-success\" click.delegate=\"p.toggleNameEdit()\"></i><div class=\"input-group ml-auto mx-2\" style=\"width:unset;align-items:unset\"><select class=\"form-item form-control mr-0\" value.bind=\"p.selectedProtocol\" disabled.bind=\"!p.selected\" style=\"width:125px;display:inline-block\"><option model.bind=\"null\">Protocol...</option><option repeat.for=\"m of protocolList\" model.bind=\"m\"> ${m.description} </option></select><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary\" disabled.bind=\"!p.selected\" type=\"button\" id=\"button-addon2\" click.delegate=\"p.addNewProtocol(p.selectedProtocol)\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button></div></div><div class=\"btn-group\"><button type=\"button\" class=\"btn btn-primary pr-0\" disabled.bind=\"!p.selected\" click.delegate=\"p.save()\"><i class=\"fa fa-floppy-o fa-lg\"></i></button> <button type=\"button\" class=\"btn btn-primary dropdown-toggle dropdown-toggle-split\" disabled.bind=\"!p.selected\" data-toggle=\"dropdown\" aria-expanded=\"false\"><span class=\"sr-only\">Toggle Dropdown</span></button><div class=\"dropdown-menu\"><a if.bind=\"p.prefId != 0\" class=\"dropdown-item\" href=\"#\" click.delegate=\"p.saveAs()\">Save As...</a></div></div></div></div><div id=\"collapse${$index}\" class=\"collapse ${p.selected ? 'show' : ''}\" aria-labelledby=\"heading${$index}\" data-parent=\"#prefAccordian\"><div class=\"card-body p-0\"><div repeat.for=\"s of p.sections\"><compose view-model.bind=\"s.template\" model.bind=\"s\" containerless></compose></div><div if.bind=\"p.sections.length==0\" class=\"jumbotron m-0\"><h1 class=\"display-4\">No Protocols</h1><p class=\"lead\">Select a protocol with the dropdown above,<br>then use the <i class=\"fa fa-plus text-muted\" aria-hidden=\"true\"></i> button to add it to the preference</p></div></div></div></div></div></div></div></template>";});;
define('text!go/preference/protocolTemplate.html',[],function(){return "<template><div style=\"vertical-align:top\"><h5 style=\"display:inline-block\" data-bind=\"text: $data.sections()[$index()].name\"></h5><div class=\"btn-group\"><button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\"><span class=\"caret\"></span></button><ul class=\"dropdown-menu\" style=\"min-width:215px\" role=\"menu\" data-bind=\"with: $data.sections()[$index()]\"><li><a href=\"#\" data-bind=\"click: $parent.setSelected\"><i class=\"fa fa-eye fa-fw\" data-bind=\"click: $root.showItemDetails\"></i></a></li></ul></div><a class=\"btn btn-danger\" href=\"#\" data-bind=\"click: $data.removeSection.bind($data, $data.sections()[$index()])\"><i class=\"fa fa-trash-o fa-lg\"></i></a><a class=\"btn btn-warning\" style=\"vertical-align:top\" href=\"#\" data-bind=\"click: $parent.selectedItem().task\"><i class=\"fa fa-paper-plane fa-lg\"></i></a><a class=\"btn btn-default\" style=\"vertical-align:top\" href=\"#\" data-bind=\"click: $parent.selectedItem().task\"><i class=\"fa fa-paper-plane-o fa-lg\"></i></a></div></template>";});;
define('go/preference/pxTemplate',['exports', 'aurelia-framework', 'lodash', '../popupHelper'], function (exports, _aureliaFramework, _lodash, _popupHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PxTemplate = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var PxTemplate = exports.PxTemplate = (_dec = (0, _aureliaFramework.inject)(_popupHelper.PopupHelper), _dec(_class = function () {
    function PxTemplate(PopupHelper) {
      _classCallCheck(this, PxTemplate);

      this.section = null;
      this.modList = ['22', '24', '25', '26', '50', '51', '52', '55', '56', '57', '58', '59', '76', '77', '78', '79', '81', '93', '94', '95', 'LT', 'RT', 'AS', 'CH', 'CI', 'CJ', 'CK', 'CL', 'CM', 'CN', 'CO', 'CQ', 'FA', 'FY', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'GA', 'GO', 'GP', 'GY', 'GZ', 'KX', 'NU', 'Q7', 'Q8', 'Q9', 'TA', 'TC', 'T1', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7', 'T8', 'T9', 'XE', 'XS', 'XP', 'XU'];

      this.popHelper = PopupHelper;
    }

    PxTemplate.prototype.activate = function activate(params) {
      var self = this;
      var p = params;
      self.section = params;
      self.templateId = self.section.name.toLowerCase() + "Section";
    };

    PxTemplate.prototype.displayPxPop = function displayPxPop() {
      var self = this;

      self.popHelper.openPxPop(self.bodypart, self.bodyside, undefined, function (res) {});
    };

    return PxTemplate;
  }()) || _class);
});;
define('text!go/preference/pxTemplate.html',[],function(){return "<template><div id.bind=\"templateId\" class=\"d-flex align-items-center border-bottom px-4 py-0\" style=\"background-color:rgba(0,0,0,.03);min-height:48px\"><h5 class=\"m-0\" style=\"display:inline-block;vertical-align:middle\">${section.name}</h5></div><div repeat.for=\"i of section.items\" class=\"d-flex align-items-center border-bottom pl-4 pr-2 py-2\" style=\"min-height:55px\"><h6 class=\"d-inline-block mb-0\">${i.name} <small class=\"text-muted\">${i.details}</small></h6><select class=\"form-item form-control ml-auto\" value.bind=\"i.modifier\" style=\"max-width:85px;display:inline-block\"><option model.bind=\"null\">Mods...</option><option repeat.for=\"m of modList\" model.bind=\"m\"> ${m} </option></select> <a class=\"btn btn-danger ml-2\" href=\"#\" click.delegate=\"section.removeItem(null, i)\"><i class=\"fa fa-trash-o fa-lg\"></i></a></div></template>";});;
define('go/preferenceHelper',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', '../data/go/data', 'aurelia-event-aggregator', 'lodash', 'aurelia-binding', './popupHelper'], function (exports, _helper, _http, _aureliaFramework, _data, _aureliaEventAggregator, _lodash, _aureliaBinding, _popupHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PreferenceHelper = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var PreferenceHelper = exports.PreferenceHelper = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _aureliaEventAggregator.EventAggregator, _popupHelper.PopupHelper), _dec(_class = function () {
    function PreferenceHelper(helper, http, Data, EventAggregator, PopupHelper) {
      _classCallCheck(this, PreferenceHelper);

      this.board = null;
      this.selectedPreference = null;
      this.preferenceCallbackCounter = 0;
      this.preferenceCallbackObjects = [];
      this.newBlocks = [];
      this.modelAttachedEvent = null;
      this.objectsToPopulate = [];
      this.newPreferenceCallbackObjects = [];

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.eventAggregator = EventAggregator;
      this.popupHelper = PopupHelper;

      this.setup();
    }

    PreferenceHelper.prototype.clearPreferenceObjects = function clearPreferenceObjects() {
      this.preferenceCallbackObjects = [];
      this.selectedPreference = null;
      this.preferenceCallbackCounter = 0;
      this.newBlocks = [];
    };

    PreferenceHelper.prototype.setup = function setup() {
      var self = this;
      self.eventAggregator.subscribe("modelAttached", function (data) {
        if (data.block.blockType === 'plan') {
          var foundPlan = self.getPreferenceCallbackObjectWithBlockTypeAndBodypart(data.block.blockType);
          if (!foundPlan) {
            self.addPreferenceCallbackObject(data);
          }
        } else {
          self.addPreferenceCallbackObject(data);
        }

        if (self.selectedPreference == null) return;

        self.preferenceCallbackCounter = self.preferenceCallbackCounter - 1;

        if (self.preferenceCallbackCounter == 0) {
          for (var i = 0; i < self.newBlocks.length; i++) {
            var aBlock = self.newBlocks[i];
            for (var c = 0; c < self.preferenceCallbackObjects.length; c++) {
              var aObj = self.preferenceCallbackObjects[c];
              if (aObj.block.id == aBlock.id) {
                self.objectsToPopulate.push(aObj);
              }
            }
          }

          self.newBlocks = [];

          self.populatePreferenceCallbackObjectsWithPreference(self.objectsToPopulate, self.selectedPreference);

          self.board.providerId = self.board.visitInfo.providerId;

          self.updateVisitBoardLayout();
        }
      });
    };

    PreferenceHelper.prototype.getPreferenceCallbackObjectWithBlockTypeAndBodypart = function getPreferenceCallbackObjectWithBlockTypeAndBodypart(blockType, bodypart) {
      var self = this;
      if (blockType === 'plan') {
        if (bodypart) {
          var planObj = _.find(self.preferenceCallbackObjects, function (p) {
            return p.block.blockType == blockType;
          });
          if (planObj) {
            return _.find(planObj.rows, function (p) {
              return p.bodypart == bodypart;
            });
          } else {
            return undefined;
          }
        } else {
          return _.find(self.preferenceCallbackObjects, function (p) {
            return p.block.blockType == blockType;
          });
        }
      } else {
        return _.find(self.preferenceCallbackObjects, function (p) {
          return p.block.blockType == blockType && p.bodypart == bodypart;
        });
      }
    };

    PreferenceHelper.prototype.addPreferenceCallbackObject = function addPreferenceCallbackObject(o) {
      var self = this;
      self.preferenceCallbackObjects.push(o);
    };

    PreferenceHelper.prototype.populatePreference = function populatePreference(pref, board) {
      var self = this;

      self.board = board;

      if (pref.isMap) {
        self.addNewBlocksForPreferenceWithIMapProtocolsBodypartPatientIdProviderIdandDate(pref.data.OD_IMap_Protocols, pref.data.BodyPart, self.board.visitInfo.patientId, self.board.visitInfo.providerId, self.board.visitInfo.date);
        return;
      }

      var foundBodypartObject = self.followupBlocksExistForBodypart(pref.data.BodyPart);

      if (!foundBodypartObject) {

        self.selectedPreference = pref;
        self.preferenceCallbackCounter = 3;

        if (!self.board.visitInfo.hasBodypart(pref.data.BodyPart)) {
          self.board.visitInfo.addBodypartSide(self.data.getBodypartSide(pref.data.BodyPart, self.board.visitInfo.bodyside));
        }

        self.addNewBlocksForPreference(pref.data.BodyPart);
      } else {
        var updateObjects = [];
        for (var i = 0; i < self.preferenceCallbackObjects.length; i++) {
          var obj = self.preferenceCallbackObjects[i];
          var type = obj.block.blockType.toLowerCase();

          if (type == 'exam' && obj.bodypart == pref.data.BodyPart) {
            updateObjects.push(obj);
          }
          if (type == 'hpi' && obj.bodypart == pref.data.BodyPart) {
            updateObjects.push(obj);
          }
          if (type == 'plan') {
            var planPartRow = obj.getPlanRowWithBodypart(pref.data.BodyPart);
            if (planPartRow != null) {
              obj.selectedRow = planPartRow;
              updateObjects.push(obj);
            } else {
              var newRow = obj.addNewRow(pref.data.BodyPart, null);
              updateObjects.push(obj);
            }
          }
        }

        if (updateObjects.length > 0) {
          self.populatePreferenceCallbackObjectsWithPreference(updateObjects, pref);
        } else {
          self.selectedPreference = pref;
          self.preferenceCallbackCounter = 3;
          self.addNewBlocksForPreference();
        }
      }
    };

    PreferenceHelper.prototype.followupBlocksExistForBodypart = function followupBlocksExistForBodypart(bodypart) {
      var self = this;
      var blocktypes = ['hpi', 'exam', 'plan'];
      for (var i = 0; i < blocktypes.length; i++) {
        var aBlockType = blocktypes[i];
        var foundBlockPref = self.getPreferenceCallbackObjectWithBlockTypeAndBodypart(aBlockType, bodypart);
        if (foundBlockPref) {
          return true;
        }
      }
      return false;
    };

    PreferenceHelper.prototype.sendPreferenceToBlock = function sendPreferenceToBlock(prefId, block) {
      if (block.childModel) {
        block.childModel.addPreferenceWithId(prefId);
      }
    };

    PreferenceHelper.prototype.sendPreferencesToBlock = function sendPreferencesToBlock(preferences, block) {
      if (block.childModel) {
        for (var i = 0; i < preferences.length; i++) {
          if (preferences[i].TableName == 'OD_ICD10Codes') {
            block.childModel.addPreferenceWithChildCode(preferences[i].PreferenceId);
          } else {
            block.childModel.addPreferenceWithId(preferences[i].PreferenceId);
          }
        }
      }
    };

    PreferenceHelper.prototype.addNewBlocksForPreferenceWithIMapProtocolsBodypartPatientIdProviderIdandDate = function addNewBlocksForPreferenceWithIMapProtocolsBodypartPatientIdProviderIdandDate(protocols, bodypart, patientId, providerId, date) {
      var self = this;

      var _loop = function _loop(i) {
        var aProto = protocols[i];
        var blockName = null;
        var autoTaskId = aProto.AutoTaskId;
        var found_protocols = [];

        if (aProto.TableName == 'OD_PostOp_Pref' || aProto.TableName == 'OD_HPI_Pref' || aProto.TableName == 'OD_Plan_Preference') {
          var valuesExist = false;

          var tExamBlock = _.find(self.board.blocks, function (b) {
            return b.blockType == 'exam';
          });
          var tPlanBlock = _.find(self.board.blocks, function (b) {
            return b.blockType == 'plan';
          });
          var tHpiBlock = _.find(self.board.blocks, function (b) {
            return b.blockType == 'hpi';
          });

          if (tExamBlock) {
            if (!valuesExist) {
              valuesExist = tExamBlock.childModel.hasValue();
            }
          }
          if (tHpiBlock) {
            if (!valuesExist) {
              valuesExist = tHpiBlock.childModel.hasValue();
            }
          }


          if (tPlanBlock) {
            if (!valuesExist) {
              valuesExist = tPlanBlock.childModel.hasValue();
            }
          }

          self.data.getFollowUpPrefPopulated(aProto.PreferenceId, patientId, providerId, date, function (fuRes) {

            var addExam = false;
            var addPLan = false;
            var addHpi = false;

            if (fuRes.NoteHistory != null && fuRes.NoteHistory.length > 0) {
              self.preferenceCallbackCounter++;
              addHpi = true;
            }

            if (fuRes.NoteExam != null && fuRes.NoteExam.length > 0) {
              self.preferenceCallbackCounter++;
              addExam = true;
            }

            if (fuRes.NotePlan != null && fuRes.NotePlan.length > 0) {
              self.preferenceCallbackCounter++;
              addPLan = true;
            }

            if (addExam) {
              self.queueBlockForAddCompletionAndPopulate(tExamBlock, 'exam', valuesExist, fuRes, bodypart, autoTaskId);
            }
            if (addPLan) {
              self.queueBlockForAddCompletionAndPopulate(tPlanBlock, 'plan', valuesExist, fuRes, bodypart, autoTaskId);
            }
            if (addHpi) {
              self.queueBlockForAddCompletionAndPopulate(tHpiBlock, 'hpi', valuesExist, fuRes, bodypart, autoTaskId);
            }
          });

          return 'continue';
        } else if (aProto.TableName == 'OD_Lab_Order') {
          blockName = 'order';
        } else if (aProto.TableName == 'VW_Diagnosis' || aProto.TableName == 'OD_ICD10Codes') {
          blockName = 'diagnosis';

          found_protocols = _.filter(protocols, function (p) {
            return p.TableName == 'VW_Diagnosis' || p.TableName == 'OD_ICD10Codes';
          });
        } else if (aProto.TableName == 'OD_Procedures') {
          blockName = 'procedure';
        } else if (aProto.TableName == 'OD_Inject_Pref') {
          blockName = 'jointInjection';
        } else if (aProto.TableName == 'OD_Go_Forms_Pref') {
          blockName = 'exam';
          goFormPrefSaveObj = {
            PreferenceId: aProto.PreferenceId,
            PatientId: patientId,
            Date: date
          };
          url = 'goforms/instance/pref';

          self.data.postWithUrlAndData(url, JSON.stringify(goFormPrefSaveObj), function (res) {
            var aBlock = self.data.getNewBlock();
            aBlock.description = res.Description;
            aBlock.blockType = 'goForm';
            aBlock.widthMult = 1;
            aBlock.heightMult = 1;
            aBlock.data = { 'CreateDate': res.Date };
            aBlock.id = res.Id;
            self.board.documents.push(aBlock);

            var examBlock = self.board.getBlockWithType('exam');
            if (!examBlock) {
              var options = {
                loadData: false,
                widthMult: 2,
                heightMult: 2,
                x: 0,
                editing: false,
                soapSort: true
              };
              examBlock = self.board.addBlock('exam', options);
              examBlock.loadData = false;
              examBlock.goFormDetails = res.Description;
              examBlock.dontSave = true;
            } else {
              var examData = {
                details: "See document tray for details.",
                title: "Exam"
              };
              self.eventAggregator.publish('updateExamData', examData);
            }
          });

          return 'continue';
        }

        var aBlock = _.find(self.board.blocks, function (b) {
          return b.blockType == blockName;
        });
        if (!aBlock) {
          self.board.addBlock(blockName, {
            editing: false,
            widthMult: 2,
            soapSort: true,
            loadPreferenceCallback: function loadPreferenceCallback(newBlock) {
              if (found_protocols.length > 0) {
                self.sendPreferencesToBlock(found_protocols, newBlock);
              } else {
                self.sendPreferenceToBlock(aProto.PreferenceId, newBlock);
              }
            }
          });
        } else {
          if (aBlock.childModel) {
            if (aProto.TableName == 'OD_ICD10Codes') {
              aBlock.childModel.addPreferenceWithChildCode(aProto.PreferenceId);
            } else {
              aBlock.childModel.addPreferenceWithId(aProto.PreferenceId);
            }
          }
        }
      };

      for (var i = 0; i < protocols.length; i++) {
        var goFormPrefSaveObj;
        var url;

        var _ret = _loop(i);

        if (_ret === 'continue') continue;
      }
    };

    PreferenceHelper.prototype.queueBlockForAddCompletionAndPopulate = function queueBlockForAddCompletionAndPopulate(blockToAdd, blockType, valuesExist, preference, bodypart, autoTaskId) {
      var self = this;
      if (!blockToAdd) {
        blockToAdd = self.board.addBlock(blockType, { editing: false,
          loadData: false,
          widthMult: 2,
          soapSort: true,
          loadPreferenceCallback: function loadPreferenceCallback(newBlock) {

            if (blockType == 'plan') {
              newBlock.childModel.addNewRow(bodypart, '');
            }

            newBlock.childModel.autoTaskId = autoTaskId;

            self.newPreferenceCallbackObjects.push(newBlock.childModel);
            self.checkBlockAddCompletionAndPopulate(valuesExist, preference);
          }
        });
      } else {
        if (blockType == 'plan') {
          if (blockToAdd.childModel.rows.length == 0) {
            blockToAdd.childModel.addNewRow(bodypart, '');
          } else {
            blockToAdd.childModel.setSelectedRowWithIndex(blockToAdd.childModel.selectedRowIndex);
          }
        }

        blockToAdd.childModel.autoTaskId = autoTaskId;

        self.newPreferenceCallbackObjects.push(blockToAdd.childModel);
        self.checkBlockAddCompletionAndPopulate(valuesExist, preference);
      }
    };

    PreferenceHelper.prototype.updateVisitBoardLayout = function updateVisitBoardLayout() {
      var self = this;

      self.data.saveVisitBoard(self.board, function (res) {
        self.board.visitInfo.visitCode.VisitBoardId = res == true ? self.board.id : res.id;

        self.board.visitInfo.visitCode.VisitBodyParts = self.data.bodypartsToString(self.board.visitInfo.bodyparts);
        self.data.updateVisitCode(self.board.visitInfo.visitCode);
      });
    };

    PreferenceHelper.prototype.checkBlockAddCompletionAndPopulate = function checkBlockAddCompletionAndPopulate(displayPopup, preference) {
      var self = this;

      self.preferenceCallbackCounter--;
      if (self.preferenceCallbackCounter <= 0) {
        if (displayPopup) {
          self.displayAppendOverwritePopupWithObjectsAndPreference(self.newPreferenceCallbackObjects, preference);
        } else {
          self._populateCallbackObjectsWithData(self.newPreferenceCallbackObjects, preference);
        }

        self.doAutoTaskingForIMap(self.newPreferenceCallbackObjects);

        self.newPreferenceCallbackObjects = [];
        self.preferenceCallbackCounter = 0;

        self.updateVisitBoardLayout();
      }
    };

    PreferenceHelper.prototype.doAutoTaskingForIMap = function doAutoTaskingForIMap(newPreferenceCallbackObjects) {
      var self = this;
      for (var i = 0; i < newPreferenceCallbackObjects.length; i++) {
        if (newPreferenceCallbackObjects.autoTaskId != null) {}
      }
    };

    PreferenceHelper.prototype.addNewBlocksForPreference = function addNewBlocksForPreference(bodypart) {
      var self = this;

      var tExam = _.find(self.board.blocks, function (b) {
        return b.blockType == 'exam';
      });
      var tPlan = _.find(self.board.blocks, function (b) {
        return b.blockType == 'plan';
      });
      var tHpi = _.find(self.board.blocks, function (b) {
        return b.blockType == 'hpi';
      });

      var examBlock = self.board.addBlock('exam', { editing: false, loadData: false });
      if (tExam) {
        examBlock.widthCls = tExam.widthCls;
        examBlock.widthMult = tExam.widthMult;
        examBlock.heightMult = tExam.heightMult;
        examBlock.heightClass = tExam.heightCls;
      }
      self.newBlocks.push(examBlock);
      var hpiBlock = self.board.addBlock('hpi', { editing: false, loadData: false });
      if (tHpi) {
        hpiBlock.widthCls = tHpi.widthCls;
        hpiBlock.widthMult = tHpi.widthMult;
        hpiBlock.heightMult = tHpi.heightMult;
        hpiBlock.heightClass = tHpi.heightCls;
      }
      self.newBlocks.push(hpiBlock);

      if (!tPlan) {
        var planBlock = self.board.addBlock('plan', { editing: false, loadData: false });
        self.newBlocks.push(planBlock);
      } else {
        var planObj = self.getPreferenceCallbackObjectWithBlockTypeAndBodypart('plan');
        if (planObj) {
          var newRow = planObj.addNewRow(bodypart, null);
          self.objectsToPopulate.push(planObj);
          planObj.eventAggregator.publish("modelAttached", planObj);
        }
      }
    };

    PreferenceHelper.prototype.displayAppendOverwritePopupWithObjectsAndPreference = function displayAppendOverwritePopupWithObjectsAndPreference(objs, pref) {
      var self = this;
      self.popupHelper.openAppendOverwitePop('Add Preference', 'Would you like to append the preference to the existing visit or overwrite it?', function (r) {
        if (r.result == 'append') {
          self._populateCallbackObjectsWithAppendData(objs, pref);
        } else if (r.result == 'overwrite') {
          self._populateCallbackObjectsWithData(objs, pref);
        }
      });
    };

    PreferenceHelper.prototype.populatePreferenceCallbackObjectsWithPreference = function populatePreferenceCallbackObjectsWithPreference(callbackObjects, preference) {
      var self = this;
      self.selectedPreference = null;

      var postOpId = 0;
      if (!preference.isMap) {
        postOpId = preference.data.PostOpID;
      } else {
        var foundProtocol = _.find(preference.data.OD_IMap_Protocols, function (p) {
          return p.TableName == 'OD_PostOp_Pref';
        });
        if (foundProtocol) {
          postOpId = foundProtocol.PreferenceId;
        }
      }

      self.data.getFollowUpPrefPopulated(postOpId, self.board.visitInfo.patientId, self.board.visitInfo.providerId, self.board.visitInfo.date, function (res) {

        var displayAppendOverwrite = false;

        for (var i = 0; i < callbackObjects.length; i++) {

          var type = callbackObjects[i].block.blockType.toLowerCase();

          if (type == 'hpi') {
            if (callbackObjects[i].hpiText != null && callbackObjects[i].hpiText.length > 0) {
              displayAppendOverwrite = true;
              break;
            }
          } else if (type == 'plan') {
            if (callbackObjects[i].rows.length > 0 && callbackObjects[i].rows[callbackObjects[i].selectedRowIndex].text != null) {
              displayAppendOverwrite = true;
              break;
            }
          } else {
            if (callbackObjects[i].examText != null && callbackObjects[i].examText.length > 0) {
              displayAppendOverwrite = true;
              break;
            }
          }
        }

        if (displayAppendOverwrite) {
          self.displayAppendOverwritePopupWithObjectsAndPreference(callbackObjects, res);
        } else {
          self._populateCallbackObjectsWithData(callbackObjects, res);
        }

        self.preferenceCallbackCounter = 0;

        self.objectsToPopulate = [];
      });
    };

    PreferenceHelper.prototype._populateCallbackObjectsWithData = function _populateCallbackObjectsWithData(callbackObjects, data) {
      for (var i = 0; i < callbackObjects.length; i++) {

        var tTitle = data.Type.toUpperCase() == 'FOLLOW' ? 'FOLLOW UP' : data.Type.toUpperCase();
        var type = callbackObjects[i].block.blockType.toLowerCase();

        if (type == 'hpi') {
          callbackObjects[i].populateWithPreference(data.NoteHistory, data.BodyPart, tTitle + " HPI");
        } else if (type == 'plan') {
          callbackObjects[i].populateWithPreference(data.NotePlan, data.BodyPart, tTitle);
        } else {
          callbackObjects[i].populateWithPreference(data.NoteExam, data.BodyPart, tTitle + " EXAM");
        }
      }
    };

    PreferenceHelper.prototype._populateCallbackObjectsWithAppendData = function _populateCallbackObjectsWithAppendData(callbackObjects, data) {
      for (var i = 0; i < callbackObjects.length; i++) {

        var tTitle = data.Type.toUpperCase() == 'FOLLOW' ? 'FOLLOW UP' : data.Type.toUpperCase();

        var type = callbackObjects[i].block.blockType.toLowerCase();

        if (type == 'hpi') {
          var finalHpi = "";

          if (callbackObjects[i].hpiText == null) {
            finalHpi = data.NoteHistory;
          } else {
            finalHpi = callbackObjects[i].hpiText.concat(" " + data.NoteHistory);
          }
          callbackObjects[i].populateWithPreference(finalHpi, data.BodyPart, tTitle + " HPI");
        } else if (type == 'plan') {
          var finalPlan = "";
          if (callbackObjects[i].selectedRow.text == null) {
            finalPlan = data.NotePlan;
          } else {
            finalPlan = callbackObjects[i].selectedRow.text.concat(" " + data.NotePlan, tTitle);
          }

          callbackObjects[i].populateWithPreference(finalPlan, data.BodyPart, tTitle);
        } else {
          var finalExam = "";
          if (callbackObjects[i].examText == null) {
            finalExam = data.NoteExam;
          } else {
            finalExam = callbackObjects[i].examText.concat(" " + data.NoteExam);
          }
          callbackObjects[i].populateWithPreference(finalExam, data.BodyPart, tTitle + " EXAM");
        }
      }
    };

    return PreferenceHelper;
  }()) || _class);
});;
define('go/preferencePicker',['exports', 'aurelia-framework', 'lodash', '../data/go/data'], function (exports, _aureliaFramework, _lodash, _data) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PreferencePicker = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var PreferencePicker = exports.PreferencePicker = (_dec = (0, _aureliaFramework.inject)(_data.Data), _dec(_class = function () {
    function PreferencePicker(Data) {
      _classCallCheck(this, PreferencePicker);

      this.preferences = [];
      this.filteredPreferences = [];
      this.home = null;
      this.selectedPreference = null;

      this.data = Data;
    }

    PreferencePicker.prototype.setup = function setup() {
      var self = this;
      self.bodyparts = self.data.bodyparts;
      var bp = self.home.currentBoard.visitInfo.bodypart;
      self.selectedBodyPart = bp ? bp : self.bodyparts[0];
      self.filterByBodypart();
    };

    PreferencePicker.prototype.activate = function activate(model) {
      this.home = model.home;
      this.parent = model;
      this.preferences = model.preferences;
    };

    PreferencePicker.prototype.attached = function attached() {
      var self = this;
      self.setup();
    };

    PreferencePicker.prototype.attachClick = function attachClick() {
      var self = this;
      self.filterByBodypart();
    };

    PreferencePicker.prototype.prefSelected = function prefSelected(p) {
      var self = this;
      self.selectedPreference = p;

      for (var _p = 0; _p < self.filteredPreferences.length; _p++) {
        if (self.filteredPreferences[_p].description == self.selectedPreference.description) {
          self.filteredPreferences[_p].selected = true;
        } else {
          self.filteredPreferences[_p].selected = false;
        }
      }
    };

    PreferencePicker.prototype.add = function add() {
      var self = this;
      if (self.selectedPreference != null) {
        self.parent.dialog.close(true, self.selectedPreference);
      }
    };

    PreferencePicker.prototype.filterByBodypart = function filterByBodypart() {
      var self = this;
      self.filteredPreferences = _.filter(self.preferences, function (p) {
        return p.bodypart == self.selectedBodyPart;
      });
    };

    return PreferencePicker;
  }()) || _class);
});;
define('text!go/preferencePicker.html',[],function(){return "<template><div class=\"card\"><div class=\"card-header\"><label for=\"bodypart\">Body Part</label> <select id=\"bodypart\" class=\"form-item form-control\" value.bind=\"selectedBodyPart\" style=\"display:inline-block;width:auto\" change.delegate=\"filterByBodypart()\"><option model.bind=\"null\">Bodypart...</option><option repeat.for=\"b of bodyparts\" model.bind=\"b\"> ${b} </option></select></div><ul class=\"list-group list-group-flush\" style=\"overflow-y:auto;height:250px\"><li repeat.for=\"p of filteredPreferences\" class=\"list-group-item ${p.selected ? 'active' : ''}\" click.delegate=\"prefSelected(p)\">${p.description}</li></ul><div class=\"card-footer\"><button type=\"button\" class=\"btn btn-primary float-right\" click.delegate=\"add()\">Add</button></div></div></template>";});;
define('go/ptAuthPop',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'moment', './home', '../data/go/data', 'lodash', 'aurelia-binding'], function (exports, _helper, _http, _aureliaFramework, _moment, _home, _data, _lodash, _aureliaBinding) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PtAuthPop = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor;

  var PtAuthPop = exports.PtAuthPop = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _home.Home, _data.Data), _dec(_class = (_class2 = function () {
    function PtAuthPop(helper, http, Home, Data) {
      _classCallCheck(this, PtAuthPop);

      this.authTypes = ['PT', 'OT'];

      _initDefineProp(this, 'datepicker', _descriptor, this);

      this.ptAuth = null;
      this.statusText = null;

      this.helper = helper;
      this.http = http;
      this.home = Home;
      this.goData = Data;
    }

    PtAuthPop.prototype.cancel = function cancel() {
      this.ptAuth.dialog.cancel();
    };

    PtAuthPop.prototype.close = function close() {
      this.ptAuth.AuthDate = this.authdate;
      this.ptAuth.dialog.close(true, this.ptAuth);
    };

    PtAuthPop.prototype.delete = function _delete() {
      this.ptAuth.Status = 'DEL';
      this.close();
    };

    PtAuthPop.prototype.activate = function activate(model) {
      var self = this;
      self.bodyparts = self.goData.bodyparts;
      self.ptAuth = model;

      if (model.Id == 0) {
        self.authdate = (0, _moment2.default)().format('MM/DD/YYYY');
        self.statusText = 'ACTIVE';
        self.ptAuth.Status = 'ACT';
      } else {
        self.authdate = (0, _moment2.default)(self.ptAuth.AuthDate).format('MM/DD/YYYY');
        if (self.ptAuth.Status == 'ACT') {
          self.statusText = 'ACTIVE';
        } else if (self.ptAuth.Status == 'DEL') {
          self.statusText = 'DELETED';
        } else {
          self.statusText = 'EXPIRED';
        }
      }
    };

    return PtAuthPop;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'datepicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!go/ptAuthPop.html',[],function(){return "<template><div ref=\"ptauthpop\" class=\"card\"><div class=\"card-header\"><h4 style=\"display:inline-block;margin-bottom:0\"><i class=\"fa fa-list mr-2\"></i>Authorization</h4><i class=\"fa fa-close fa-2x float-right\" click.delegate=\"cancel()\"></i></div><div class=\"card-body\"><div class=\"form-row\"><div class=\"form-group col-md-6\"><label>Authorization Date</label><div class=\"input-group ml-auto\"><abp-datetime-picker style=\"width:120px\" icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"datepicker\" value.bind=\"authdate\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary\" type=\"button\" click.delegate=\"openCalendar()\"><i class=\"fa fa-calendar\"></i></button></div></div></div><div class=\"form-group col-md-6\"><label>Type</label> <select value.bind=\"ptAuth.Type\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"t of authTypes\" model.bind=\"t\">${t}</option></select></div></div><div class=\"form-row\"><div class=\"form-group col-md-6\"><label>Bodypart</label> <select value.bind=\"ptAuth.BodyPart\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"b of bodyparts\" model.bind=\"b\">${b}</option></select></div><div class=\"form-group col-md-6\"><label>Status</label><div class=\"form-control ${ptAuth.Status=='ACT' ? 'text-success' : 'text-danger'} font-weight-bold\" style=\"border:none\">${statusText}</div></div></div><div class=\"form-row\"><div class=\"form-group col-md-6\"><label>Days</label> <input type=\"text\" class=\"form-control\" value.bind=\"ptAuth.AuthDays\"></div><div class=\"form-group col-md-6\"><label>Visits</label> <input type=\"text\" class=\"form-control\" value.bind=\"ptAuth.AuthVisits\"></div></div><div class=\"form-row\"><div class=\"form-group col-md-6\"><label>Auth#</label> <input type=\"text\" class=\"form-control\" value.bind=\"ptAuth.AuthNumber\"></div><div class=\"form-group col-md-6\"><label>Claim ID</label> <input type=\"text\" class=\"form-control\" value.bind=\"ptAuth.ClaimID\"></div></div><div class=\"form-row\"><div class=\"form-group col-md-12\"><label>Comments</label> <textarea type=\"text\" class=\"form-control\" value.bind=\"ptAuth.Comments\"></textarea></div></div></div><div class=\"card-footer\"><button type=\"button\" class=\"btn btn-primary float-right\" click.delegate=\"close()\">OK</button> <button if.bind=\"statusText =='ACTIVE'\" type=\"button\" class=\"btn btn-danger\" click.delegate=\"delete()\">DELETE</button></div></div></template>";});;
define('go/ptOrder',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'lodash', 'moment', '../data/go/data', './home'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _data, _home) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PtOrder = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _desc, _value, _class, _descriptor, _dec, _class3;

  var Mycheckbox = (_class = function () {
    function Mycheckbox(detail, parent, callback) {
      _classCallCheck(this, Mycheckbox);

      _initDefineProp(this, 'checked', _descriptor, this);

      this.checked = false;
      this.callback = callback;
      this.detail = detail;
      this.parent = parent;
      this.editing = true;
      this.ignoreCallback = false;
    }

    Mycheckbox.prototype.select = function select() {
      this.checked = this.checked ? false : true;
    };

    Mycheckbox.prototype.checkedChanged = function checkedChanged(newVal, oldVal) {
      if (this.callback && !this.ignoreCallback) {
        this.callback(this);
      }
    };

    return Mycheckbox;
  }(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'checked', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  })), _class);
  var PtOrder = exports.PtOrder = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home), _dec(_class3 = function () {
    function PtOrder(helper, http, Data, Home) {
      _classCallCheck(this, PtOrder);

      this.preferences = [];
      this.comments = "";
      this.pushes = [];
      this.modalities = [];
      this.exercises = [];
      this.roms = [];
      this.tractions = [];

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
    }

    PtOrder.prototype.activate = function activate(params) {
      var self = this;

      self.popupHelper = params.popupHelper;

      self.patientId = params.currentBoard.visitInfo.patientId;
      self.date = params.currentBoard.visitInfo.date;
      self.providerId = params.currentBoard.visitInfo.providerId;
      self.userId = params.currentBoard.userId;

      if (params.currentBoard && params.currentBoard.visitInfo) {
        self.bodypart = params.currentBoard.visitInfo.bodypart;
        self.bodyside = params.currentBoard.visitInfo.bodyside;
      }

      self.ptCheckbox = new Mycheckbox('PT', self, self.ptDelegate);
      self.otCheckbox = new Mycheckbox('OT', self, self.otDelegate);
      self.workHardenCheckbox = new Mycheckbox('Work Harden', self, self.concatDelegate);
      self.evalTreatCheckbox = new Mycheckbox('Eval & Treat', self, self.concatDelegate);

      self.pushes.push(new Mycheckbox('Gentle', self, self.pushDelegate));
      self.pushes.push(new Mycheckbox('Moderate', self, self.pushDelegate));
      self.pushes.push(new Mycheckbox('Aggressive', self, self.pushDelegate));

      self.modalities.push(new Mycheckbox('As indicated', self, self.concatDelegate));
      self.modalities.push(new Mycheckbox('Heat', self, self.concatDelegate));
      self.modalities.push(new Mycheckbox('Ice', self, self.concatDelegate));
      self.modalities.push(new Mycheckbox('U/S', self, self.concatDelegate));
      self.modalities.push(new Mycheckbox('TENS', self, self.concatDelegate));
      self.modalities.push(new Mycheckbox('Iontophoresis', self, self.concatDelegate));
      self.modalities.push(new Mycheckbox('Phonophoresis', self, self.concatDelegate));
      self.modalities.push(new Mycheckbox('Moist heat', self, self.concatDelegate));
      self.modalities.push(new Mycheckbox('E-Stim', self, self.concatDelegate));
      self.modalities.push(new Mycheckbox('Massage', self, self.concatDelegate));
      self.modalities.push(new Mycheckbox('Whirlpool', self, self.concatDelegate));

      self.exercises.push(new Mycheckbox('Stretching', self, self.concatDelegate));
      self.exercises.push(new Mycheckbox('Strengthening', self, self.concatDelegate));
      self.exercises.push(new Mycheckbox('Balance training', self, self.concatDelegate));
      self.exercises.push(new Mycheckbox('Teach home exercise', self, self.concatDelegate));
      self.exercises.push(new Mycheckbox('Plyometrics', self, self.concatDelegate));
      self.exercises.push(new Mycheckbox('Proprioception', self, self.concatDelegate));

      self.roms.push(new Mycheckbox('PROM', self, self.concatDelegate));
      self.roms.push(new Mycheckbox('AAROM', self, self.concatDelegate));
      self.roms.push(new Mycheckbox('AROM', self, self.concatDelegate));

      self.tractions.push(new Mycheckbox('Cervical', self, self.tractionDelegate));
      self.tractions.push(new Mycheckbox('Lumbar', self, self.tractionDelegate));

      if (self.providerId) {
        var url = 'ptpref?providerId=' + self.providerId;
        self.data.getWithUrl(url, function (res) {
          self.preferences = res;
        });
      }

      self.load();
    };

    PtOrder.prototype.concatDelegate = function concatDelegate() {
      this.parent.concat();
    };

    PtOrder.prototype.concatCheckList = function concatCheckList(checklist, title) {
      var self = this;
      var concatRes = "";
      var checked = [];
      for (var i = 0; i < checklist.length; i++) {
        if (checklist[i].checked) {
          checked.push(checklist[i]);
        }
      }
      if (checked.length > 0) {
        concatRes = title;
        if (checked.length == 1) {
          concatRes += checked[0].detail + ". ";
        } else if (checked.length == 2) {
          concatRes += checked[0].detail + " and " + checked[1].detail + ". ";
        } else {
          for (var c = 0; c < checked.length; c++) {
            if (c == checked.length - 2) {
              concatRes += checked[c].detail + " and ";
            } else if (c == checked.length - 1) {
              concatRes += checked[c].detail + ". ";
            } else {
              concatRes += checked[c].detail + ", ";
            }
          }
        }
      }
      return concatRes;
    };

    PtOrder.prototype.concatModalities = function concatModalities() {
      var self = this;
      return self.concatCheckList(self.modalities, "Modalities ordered: ");
    };

    PtOrder.prototype.concatExercise = function concatExercise() {
      var self = this;
      return self.concatCheckList(self.exercises, "Exercise ordered: ");
    };

    PtOrder.prototype.concatRom = function concatRom() {
      var self = this;
      return self.concatCheckList(self.roms, "Exercise ordered: ");
    };

    PtOrder.prototype.ptDelegate = function ptDelegate() {

      this.parent.otCheckbox.checked = this.parent.ptCheckbox.checked ? false : true;

      this.parent.concat();
    };

    PtOrder.prototype.otDelegate = function otDelegate() {

      this.parent.ptCheckbox.checked = this.parent.otCheckbox.checked ? false : true;

      this.parent.concat();
    };

    PtOrder.prototype.tractionDelegate = function tractionDelegate(obj) {
      var checkVal = obj.checked ? false : true;
      for (var p = 0; p < obj.parent.tractions.length; p++) {
        var aPush = obj.parent.tractions[p];
        aPush.ignoreCallback = aPush.detail == obj.detail ? false : true;
        if (aPush.detail != obj.detail) {
          aPush.checked = checkVal;
        }
      }
      obj.parent.concat();
    };

    PtOrder.prototype.clearTractionIgnoreCallback = function clearTractionIgnoreCallback() {
      for (var i = 0; i < this.tractions.length; i++) {
        this.tractions[i].ignoreCallback = false;
      }
    };

    PtOrder.prototype.clearPushIgnoreCallback = function clearPushIgnoreCallback() {
      for (var i = 0; i < this.pushes.length; i++) {
        this.pushes[i].ignoreCallback = false;
      }
    };

    PtOrder.prototype.pushDelegate = function pushDelegate(obj) {
      var checkVal = obj.checked ? false : true;

      for (var p = 0; p < obj.parent.pushes.length; p++) {
        var aPush = obj.parent.pushes[p];
        aPush.ignoreCallback = aPush.detail == obj.detail ? false : true;
        if (aPush.detail != obj.detail) {
          aPush.checked = checkVal;
        }
      }

      obj.parent.concat();
    };

    PtOrder.prototype.concat = function concat() {
      var self = this;
      self.comments = "";

      if (self.selectedPref) {
        self.comments = self.selectedPref.Comments.trim();

        var period = self.comments.substr(self.comments.length - 1);
        if (period !== '.') {
          self.comments += ". ";
        } else {
          self.comments += " ";
        }
      }

      if (self.ptCheckbox.checked) {
        self.comments += "Physical therapy: " + self.bodyside + " " + self.bodypart + ". ";
      }
      if (self.otCheckbox.checked) {
        self.comments += "Occupational therapy: " + self.bodyside + " " + self.bodypart + ". ";
      }
      if (self.workHardenCheckbox.checked) {
        self.comments += "Work hardening: ";
      }
      if (self.evalTreatCheckbox.checked) {
        self.comments += "Evaluate and treat ";
      }

      for (var t = 0; t < self.pushes.length; t++) {
        if (self.pushes[t].checked) {
          self.comments += "push " + self.pushes[t].detail + ". ";
        }
      }
      self.clearPushIgnoreCallback();

      var modConcat = self.concatModalities();
      if (modConcat.length > 0) {
        self.comments += modConcat;
      }

      var exConcat = self.concatExercise();
      if (exConcat.length > 0) {
        self.comments += exConcat;
      }

      var romConcat = self.concatRom();
      if (romConcat.length > 0) {
        self.comments += romConcat;
      }

      for (var _t = 0; _t < self.tractions.length; _t++) {
        if (self.tractions[_t].checked) {
          self.comments += self.tractions[_t].detail + " traction. ";
        }
      }
      self.clearTractionIgnoreCallback();
    };

    PtOrder.prototype.prefSelected = function prefSelected(pref) {
      this.selectedPref = pref;
      this.concat();
    };

    PtOrder.prototype.createPref = function createPref() {
      var self = this;
      var url = 'ptpref';
      self.popupHelper.openGenericInputPop('Create New Preference', ['Description'], null, false, function (res) {

        var pref = {
          'Description': res.inputs[0].value,
          'Comments': self.comments,
          'ProviderID': self.providerId
        };

        var dialog = self.helper.createNoty("Saving Preference...", 1000);
        dialog.show();

        self.data.postWithUrlAndData(url, JSON.stringify(pref), function (postRes) {
          dialog.close();
          self.preferences.push(postRes);
        });
      });
    };

    PtOrder.prototype.updatePref = function updatePref() {
      var self = this;
      var url = 'ptpref';

      if (!self.selectedPref) {
        self.popupHelper.openGenericMessagePop('Please select a preference to update.', 'Save Preference Requirements', ['OK'], true, function (res) {});
        return;
      }

      var dialog = self.helper.createNoty("Updating Preference...", 1000);
      dialog.show();

      self.selectedPref.Comments = self.comments;

      self.data.putWithUrlAndData(url, self.selectedPref, function (putRes) {
        dialog.close();
      });
    };

    PtOrder.prototype.save = function save() {
      var self = this;
      var schoolUrl = 'ptorder';

      var dialog = self.helper.createNoty("Saving Therapy Order...", 3000);
      dialog.show();

      if (!self.therapyData) {
        var orderType = 'PT';
        if (self.otCheckbox.checked) {
          orderType = 'OT';
        }
        var order = {
          'ExamDateTime': self.date,
          'UserID': self.userId,
          'PatientID': self.patientId,
          'ProviderID': self.providerId,
          'PtComments': self.comments,
          'Type': orderType
        };

        self.data.postWithUrlAndData(schoolUrl, JSON.stringify(order), function (saveRes) {
          self.therapyData = saveRes.Model;
          self.helper.notySuccess(dialog, 'Therapy Order saved!');
        });
      } else {
        self.therapyData.PtComments = self.comments;
        self.data.putWithUrlAndData(schoolUrl, self.therapyData, function (updateRes) {
          self.helper.notySuccess(dialog, 'Therapy Order saved!');
        });
      }
    };

    PtOrder.prototype.load = function load() {
      var self = this;
      self.comments = "";
      var frmtDate = (0, _moment2.default)(self.date).format('MM-DD-YYYY');
      var orderUrl = 'ptorder/patients/' + self.patientId + '/providers/' + self.providerId + '/date/' + frmtDate;
      self.data.getWithUrl(orderUrl, function (res) {
        self.therapyData = res.Model;
        if (res.Model != null) {
          self.comments = res.Model.PtComments;
        }
      });
    };

    return PtOrder;
  }()) || _class3);
});;
define('text!go/ptOrder.html',[],function(){return "<template><require from=\"./customElements/myCheckbox\"></require><style>.returnToDate input{width:120px}.form-control{width:unset}</style><div class=\"card\" style=\"height:inherit\"><div class=\"card-header\"><h4 class=\"mr-2 mb-0\" style=\"display:inline-block;vertical-align:middle\"><i class=\"fa fa-sticky-note-o mr-2\"></i>Therapy Order</h4><div class=\"dropdown d-inline-block\" style=\"vertical-align:middle\"><button class=\"btn btn-sm btn-primary\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-user-plus mr-1\" aria-hidden=\"true\"></i>Pref</button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><a repeat.for=\"p of preferences\" class=\"dropdown-item\" click.delegate=\"prefSelected(p)\">${p.Description}</a></div></div><div class=\"dropdown d-inline-block\" style=\"vertical-align:middle\"><button class=\"btn btn-sm\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-ellipsis-h fa-2x mr-1\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><a class=\"dropdown-item\" click.delegate=\"createPref()\"><i class=\"fa fa-user mr-1 text-danger\" aria-hidden=\"true\"></i>New Preference</a> <a class=\"dropdown-item\" click.delegate=\"updatePref()\"><i class=\"fa fa-user mr-1 text-success\" aria-hidden=\"true\"></i>Update Preference</a></div></div><i class=\"fa fa-close fa-2x float-right\" style=\"vertical-align:middle\" click.delegate=\"cancel()\"></i></div><div class=\"card-body\" style=\"overflow-y:scroll\"><h4>Order</h4><div class=\"row row-cols-4\"><div class=\"col\"><my-checkbox selected.bind=\"ptCheckbox.checked\" value.bind=\"ptCheckbox.detail\" editing.bind=\"ptCheckbox.editing\" click.delegate=\"ptCheckbox.select()\"></my-checkbox></div><div class=\"col\"><my-checkbox selected.bind=\"otCheckbox.checked\" value.bind=\"otCheckbox.detail\" editing.bind=\"otCheckbox.editing\" click.delegate=\"otCheckbox.select()\"></my-checkbox></div><div class=\"col\"><my-checkbox selected.bind=\"workHardenCheckbox.checked\" value.bind=\"workHardenCheckbox.detail\" editing.bind=\"workHardenCheckbox.editing\" click.delegate=\"workHardenCheckbox.select()\"></my-checkbox></div><div class=\"col\"><my-checkbox selected.bind=\"evalTreatCheckbox.checked\" value.bind=\"evalTreatCheckbox.detail\" editing.bind=\"evalTreatCheckbox.editing\" click.delegate=\"evalTreatCheckbox.select()\"></my-checkbox></div></div><strong>Push</strong><div class=\"row row-cols-3\"><div repeat.for=\"p of pushes\" class=\"col\"><my-checkbox selected.bind=\"p.checked\" value.bind=\"p.detail\" editing.bind=\"p.editing\" click.delegate=\"p.select()\"></my-checkbox></div></div><hr><h5>Modalities</h5><div class=\"row row-cols-3\"><div repeat.for=\"m of modalities\" class=\"col\"><my-checkbox selected.bind=\"m.checked\" value.bind=\"m.detail\" editing.bind=\"m.editing\" click.delegate=\"m.select()\"></my-checkbox></div></div><hr><h5>Exercise</h5><div class=\"row row-cols-3\"><div repeat.for=\"e of exercises\" class=\"col\"><my-checkbox selected.bind=\"e.checked\" value.bind=\"e.detail\" editing.bind=\"e.editing\" click.delegate=\"e.select()\"></my-checkbox></div></div><hr><h5>ROM</h5><div class=\"row row-cols-3\"><div repeat.for=\"r of roms\" class=\"col\"><my-checkbox selected.bind=\"r.checked\" value.bind=\"r.detail\" editing.bind=\"r.editing\" click.delegate=\"r.select()\"></my-checkbox></div></div><strong>Traction</strong><div class=\"row row-cols-3\"><div repeat.for=\"t of tractions\" class=\"col\"><my-checkbox selected.bind=\"t.checked\" value.bind=\"t.detail\" editing.bind=\"t.editing\" click.delegate=\"t.select()\"></my-checkbox></div></div><div class=\"form-group\"><label for=\"exampleFormControlTextarea1\">Comments</label> <textarea class=\"form-control\" id=\"exampleFormControlTextarea1\" value.bind=\"comments\" rows=\"8\" style=\"width:100%\"></textarea></div></div><div class=\"card-footer\"><button type=\"button\" class=\"btn btn-primary float-right\" click.delegate=\"save()\">Save</button></div></div></template>";});;
define('go/ptPopup',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper', 'aurelia-event-aggregator'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper, _aureliaEventAggregator) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PtPopup = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var PtPopup = exports.PtPopup = (_dec = (0, _aureliaFramework.inject)(_http.http, _helper.helper, _aureliaDialog.DialogController, _aureliaEventAggregator.EventAggregator), _dec(_class = function () {
    function PtPopup(http, helper, DialogController, EventAggregator) {
      _classCallCheck(this, PtPopup);

      this.popupLR = 0;
      this.popupTB = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.mynewValue = null;
      this.canClose = false;
      this.home = null;
      this.params = null;

      this.http = http;
      this.helper = helper;
      this.dialogController = DialogController;

      this.dialogController.settings.lock = false;

      var container = document.getElementById('mycontainer');
      this.dialogController.settings.host = container;
      this.eventAggregator = EventAggregator;
    }

    PtPopup.prototype.cancel = function cancel() {
      var self = this;

      self.home.ptDialog = null;
      self.eventAggregator.publish('filterPreferencesWithCurrentProvider');
      self.dialogController.cancel();
    };

    PtPopup.prototype.onFrameLoad = function onFrameLoad() {
      var self = this;

      window.setTimeout(function () {
        var res = $(self.docframe).contents().find('head');
        console.log(res);
      }, 4000);
    };

    PtPopup.prototype.activate = function activate(obj) {
      var self = this;

      self.home = obj.home;
      var vi = self.home.currentBoard.visitInfo;
      self.board = self.home.currentBoard;
      self.patientId = self.home.currentBoard.visitInfo.patientId;
      self.date = self.home.currentBoard.visitInfo.date;
      self.providerId = self.home.currentBoard.visitInfo.providerId;
      self.userId = self.home.currentBoard.userId;

      self.boardType = self.home.currentBoard.visitInfo.typeForSave;

      self.params = {
        patientid: vi.patientId,
        providerid: vi.providerId,
        bodypart: vi.bodyparts[0].part,
        userid: self.home.currentBoard.userId,
        visitdate: vi.date,
        type: 'PT'
      };

      document.cookie = 'SameSite=None;';
      document.cookie = 'Secure;';

      self.url = obj.documentUrl;

      self.popupWidth = obj.popupWidth - 88;
      self.popupHeight = obj.popupHeight - 75;
      self.popupTop = 0;
      self.popupLeft = 10;

      window.onmessage = function (event) {
        if (event.data == 'savedaysheetcomplete') {
          self.canClose = true;
          self.cancel();
        }
        if (event.data == 'datagridattached') {
          self.docframe.contentWindow.postMessage('gosetup', '*');
        }
      };
    };

    PtPopup.prototype.canDeactivate = function canDeactivate(dialogResult) {
      if (!this.canClose) {
        var frm = this.docframe;
        frm.contentWindow.postMessage('savedaysheet', '*');
      }
      return this.canClose;
    };

    PtPopup.prototype.attached = function attached() {

      var style = {
        'left': '70px',
        'top': '63px'
      };

      $('ux-dialog-container').css(style);

      style['background-color'] = 'white';
      style['opacity'] = 1;
      $('ux-dialog-overlay').css(style);
    };

    return PtPopup;
  }()) || _class);
});;
define('text!go/ptPopup.html',[],function(){return "<template><ux-dialog style=\"background:0 0;border:none;box-shadow:5px 5px 4px rgba(0,0,0,.25)\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><div><i class=\"fa fa-times fa-lg\" style=\"cursor:pointer;float:right;position:relative;z-index:1000;padding:15px\" click.delegate=\"cancel()\"></i></div><ux-dialog-body style=\"position:absolute;padding:0;left:0;top:0;bottom:0;right:0\"><compose view-model=\"../ptdaysheet/datagrid\" model.bind=\"params\" containerless></compose></ux-dialog-body></ux-dialog></template>";});;
define('go/pxSearch',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper', 'lodash', '../data/go/data'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper, _lodash, _data) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PxSearch = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var PxSearch = exports.PxSearch = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper, _data.Data), _dec(_class = function () {
    function PxSearch(DialogController, http, helper, Data) {
      _classCallCheck(this, PxSearch);

      this.P = null;
      this.searchResults = [];
      this.searchString = "";
      this.modifiers = ['NONE', '95'];
      this.selectedModifier = null;
      this.popupLR = 0;
      this.popupTB = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.headerDescription = 'Procedure';
      this.typeList = ['ALL', 'DME', 'INJECTION', 'IMAGING', 'LAB', 'PROCEDURES', 'SURGERY', 'THERAPY', 'VISIT', 'X-RAY'];
      this.selectedType = null;
      this.displayMods = false;
      this.spinnerLeft = 0;
      this.spinnerTop = 0;
      this.displaySpinner = false;
      this.selectedProcedures = [];

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
      this.goData = Data;
    }

    PxSearch.prototype.close = function close() {
      var self = this;
      self.dialogController.close(true, self.selectedProcedures);
    };

    PxSearch.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    PxSearch.prototype.activate = function activate(obj) {
      var self = this;

      self.typeFilter = obj.hasOwnProperty('typeFilter') ? obj.typeFilter : null;
      self.displayMods = obj.hasOwnProperty('displayModifiers') ? obj.displayModifiers : false;

      if (self.typeFilter == null) {
        self.selectedType = self.typeList[5];
      } else {
        self.selectedType = self.typeFilter;
      }

      self.popupWidth = obj.popupWidth * .8;
      self.popupHeight = (obj.popupHeight - 75) * .8;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;

      self.spinnerLeft = self.popupWidth / 2 - 21;
      self.spinnerTop = self.popupHeight / 2 - 21;

      self.popupHelper = obj.popupHelper;

      this.search();
    };

    PxSearch.prototype.attached = function attached() {
      var res = $(this.pxSearch).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");

      var style = {
        'z-index': 5001
      };

      $('ux-dialog-overlay').css(style);

      this.resizeSearchResults();
    };

    PxSearch.prototype.typeClicked = function typeClicked(t) {
      this.selectedType = t;

      if (this.selectedType == 'LAB') {
        this.getLoincList();
      } else if (this.selectedType == 'ALL') {} else {
        this.search();
      }
    };

    PxSearch.prototype.searchClicked = function searchClicked() {
      if (this.selectedType == 'LAB') {
        this.searchLoinc();
      } else {
        this.search();
      }
    };

    PxSearch.prototype.setSelectedModifier = function setSelectedModifier(px, mod) {
      px.modifier = mod;
    };

    PxSearch.prototype.getLoincList = function getLoincList() {
      var self = this;
      self.searchResults = [];
      self.goData.getLoinc(function (res) {
        for (var i = 0; i < res.length; i++) {
          var r = res[i];
          self.searchResults.push(self.goData.getNewPx(r.LNAMEID, r.LCODE, r.Short_Name, null, r));
        }
      });
    };

    PxSearch.prototype.searchLoinc = function searchLoinc() {
      var self = this;
      self.searchResults = [];
      self.displaySpinner = true;
      self.goData.searchLoinc(self.searchString, function (res) {
        for (var i = 0; i < res.length; i++) {
          var r = res[i];
          self.searchResults.push(self.goData.getNewPx(r.LNAMEID, r.LCODE, r.Short_Name, null, r));
        }
        self.displaySpinner = false;
      });
    };

    PxSearch.prototype.inputKeydown = function inputKeydown(e) {
      if (e.key === 'Enter') {
        this.search();
      }
      return true;
    };

    PxSearch.prototype.search = function search() {
      var self = this;
      self.searchResults = [];
      self.displaySpinner = true;
      var url = 'procedures/search?searchTerm=' + this.searchString;
      self.http.get(self.helper.getApiUrl(url), function (res) {

        if (res != null && res.length > 0) {
          var filteredRes = res;

          var tFilter = self.selectedType;

          if (self.selectedType != null) {
            if (tFilter == 'IMAGING') {
              filteredRes = _.filter(filteredRes, function (item) {
                return item.Type != null && _.includes(['mri', 'ct', 'bone scan', 'image'], item.Type.toLowerCase());
              });
            } else if (tFilter == 'PROCEDURES') {
              filteredRes = _.filter(filteredRes, function (item) {
                return item.Type != null && (item.Type.toLowerCase() == 'opx' || item.Type.toLowerCase() == 'pt' || item.Type.toLowerCase() == 'ot');
              });
            } else if (tFilter == 'THERAPY') {
              filteredRes = _.filter(filteredRes, function (item) {
                return item.Type != null && (item.Type.toLowerCase() == 'pt' || item.Type.toLowerCase() == 'ot');
              });
              filteredRes = _.orderBy(filteredRes, 'Description', 'asc');
            } else if (tFilter == 'INJECTION') {
              filteredRes = _.filter(filteredRes, function (item) {
                return item.Type != null && item.Type.toLowerCase() == 'injection';
              });
            } else if (tFilter == 'All') {} else {
              filteredRes = _.filter(filteredRes, function (item) {
                return item.Type != null && item.Type.toLowerCase() == tFilter.toLowerCase();
              });
            }
          }

          for (var i = 0; i < filteredRes.length; i++) {
            var r = filteredRes[i];

            if (tFilter == 'IMAGING') {
              r.Type = 'IMAGE';
            }

            self.searchResults.push(self.goData.getNewPx(r.ProcedureID, r.CptKey, r.Description, null, r));
          }
        }
        self.displaySpinner = false;
      });
    };

    PxSearch.prototype.resizeSearchResults = function resizeSearchResults() {
      var self = this;
      this.resizeSearchTimeout = setTimeout(self.resizeSearchResultsCallback.bind(self), 50);
    };

    PxSearch.prototype.resizeSearchResultsCallback = function resizeSearchResultsCallback() {
      var self = this;
      clearTimeout(self.resizeSearchTimeout);

      var selectedPxHeight = $('#selectedProcedures').height();
      selectedPxHeight = selectedPxHeight == undefined ? 0 : selectedPxHeight;
      self.searchResultsHeight = self.popupHeight - 198 - selectedPxHeight;
    };

    PxSearch.prototype.addClicked = function addClicked(r) {
      var self = this;
      var displaySideSelection = self.checkForSideSelection(r);
      self.tryBodysidePicker(displaySideSelection, function (side) {

        var pxToAdd = r;

        var foundPx = self.checkSelectedProceduresForExisting(pxToAdd);
        if (foundPx) {
          pxToAdd = self.goData.getNewPx(r.id, r.code, r.description, null, r.data);
        }

        if (side != null) {
          pxToAdd.side = side;
        }

        if (r.data.Body_Part != null) {
          pxToAdd.part = r.data.Body_Part;
        }

        self.selectedProcedures.push(pxToAdd);
        self.resizeSearchResults();
      });
    };

    PxSearch.prototype.checkSelectedProceduresForExisting = function checkSelectedProceduresForExisting(px) {
      return _.find(this.selectedProcedures, function (p) {
        return p.code == px.code;
      });
    };

    PxSearch.prototype.checkForSideSelection = function checkForSideSelection(px) {
      if (px.data.Body_Part == null) return false;

      var part = px.data.Body_Part.toUpperCase();
      if (part == 'ANKLE' || part == 'KNEE' || part == 'HIP' || part == 'HAND' || part == 'WRIST' || part == 'SHOULDER' || part == 'FOOT' || part == 'ELBOW' || part == '50') {
        return part == '50' ? 'BILATERAL' : true;
      }
      return false;
    };

    PxSearch.prototype.tryBodysidePicker = function tryBodysidePicker(showPicker, callback) {
      var self = this;
      if (showPicker) {
        if (showPicker == 'BILATERAL') {
          callback(showPicker);
          return;
        }

        var msg = 'Please select body side.';
        self.popupHelper.openGenericMessagePop(msg, 'Select Body Side', ['RIGHT', 'LEFT', 'BILATERAL'], false, function (res) {
          var side = res.result;
          callback(side);
        });
      } else {
        callback(null);
      }
    };

    PxSearch.prototype.removeProcedureClick = function removeProcedureClick(px) {
      var self = this;
      for (var i = 0; i < self.selectedProcedures.length; i++) {
        if (self.selectedProcedures[i].data.ProcedureID == px.data.ProcedureID) {
          self.selectedProcedures.splice(i, 1);
        }
      }
      self.resizeSearchResults();
    };

    return PxSearch;
  }()) || _class);
});;
define('text!go/pxSearch.html',[],function(){return "<template><style>td{vertical-align:middle!important}.dialog-header-content{display:flex!important}</style><ux-dialog ref=\"pxSearch\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\">${headerDescription}</h4><i class=\"fa fa-times fa-2x ml-auto mr-2\" style=\"cursor:pointer\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body style=\"position:absolute;width:100%;height:70%\"><div class=\"input-group mb-3\"><input type=\"text\" class=\"form-control\" placeholder=\"search code or description...\" aria-label=\"search code or description...\" keydown.trigger=\"inputKeydown($event)\" aria-describedby=\"button-addon2\" value.bind=\"searchString\"><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" click.delegate=\"searchClicked()\"><i class=\"fa fa-search\"></i></button> <button class=\"btn btn-outline-secondary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\">${selectedType}</button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" repeat.for=\"t of typeList\" href=\"#\" click.delegate=\"typeClicked(t)\">${t}</a></div></div></div><i if.bind=\"displaySpinner\" class=\"fa fa-spinner fa-pulse fa-3x fa-fw\" style=\"position:absolute\" css=\"left:${spinnerLeft}px; top:${spinnerTop}px;\"></i><div id=\"selectedProcedures\" class=\"d-flex flex-wrap\"><span repeat.for=\"t of selectedProcedures\" click.delegate=\"removeProcedureClick(t)\" class=\"p-1 text-primary d-inline-block\"> ${t.code}&nbsp;${t.description}&nbsp;${t.side} <i class=\"fa fa-times float-right\" aria-hidden=\"true\"></i></span></div><div class=\"tableFixHeadLight\" css=\"height: ${searchResultsHeight}px;\"><table class=\"table table-sm\"><thead><tr><th scope=\"col\"></th><th scope=\"col\">Code</th><th scope=\"col\">Desc</th><th scope=\"col\">Part</th><th scope=\"col\"></th></tr></thead><tbody><template repeat.for=\"s of searchResults\"><tr class.bind=\"s.selected ? 'table-primary' : 'table-light'\"><td click.delegate=\"addClicked(s)\"><i class=\"fa fa-plus-square fa-2x text-primary\"></i></td><td>${s.code}</td><td>${s.description}</td><td>${s.data.Body_Part}</td><td><div if.bind=\"displayMods\" class=\"dropdown\"><button class=\"btn btn-sm btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><span if.bind=\"s.modifier\">${s.modifier}</span><span if.bind=\"!s.modifier\">MOD</span></button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><template repeat.for=\"m of modifiers\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"setSelectedModifier(s, m)\">${m}</a></template></div></div></td></tr></template></tbody></table></div></ux-dialog-body><ux-dialog-footer style=\"position:absolute;width:100%;bottom:0;padding-right:15px\"><button click.delegate=\"close()\">OK</button></ux-dialog-footer></ux-dialog></template>";});;
define('go/returnForm',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'lodash', 'moment', '../data/go/data', './home'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _data, _home) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ReturnForm = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _desc, _value, _class, _descriptor, _dec, _class3, _desc2, _value2, _class4, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17;

  var Mycheckbox = (_class = function () {
    function Mycheckbox(detail, parent, callback) {
      _classCallCheck(this, Mycheckbox);

      _initDefineProp(this, 'checked', _descriptor, this);

      this.checked = false;
      this.callback = callback;
      this.detail = detail;
      this.parent = parent;
    }

    Mycheckbox.prototype.select = function select() {
      this.checked = this.checked ? false : true;
    };

    Mycheckbox.prototype.checkedChanged = function checkedChanged() {
      if (this.callback) {
        this.callback();
      }
    };

    return Mycheckbox;
  }(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'checked', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  })), _class);
  var ReturnForm = exports.ReturnForm = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home), _dec(_class3 = (_class4 = function () {
    ReturnForm.prototype.selectedPrefChanged = function selectedPrefChanged(newVal, oldVal) {
      if (newVal && newVal.hasOwnProperty("Id")) {
        this.concat();
      }
    };

    ReturnForm.prototype.workRelatedChanged = function workRelatedChanged(newVal, oldVal) {
      this.concatWork();
    };

    ReturnForm.prototype.workStatusChanged = function workStatusChanged(newVal, oldVal) {
      this.concatWork();
    };

    ReturnForm.prototype.workCapabilitiesChanged = function workCapabilitiesChanged(newVal, oldVal) {
      this.concatWork();
    };

    ReturnForm.prototype.nextApptDateChanged = function nextApptDateChanged(newVal, oldVal) {
      this.concatWork();
    };

    ReturnForm.prototype.nextApptDateValueChanged = function nextApptDateValueChanged(newVal, oldVal) {
      this.concatWork();
    };

    ReturnForm.prototype.nextApptDaysWeeksValueChanged = function nextApptDaysWeeksValueChanged(newVal, oldVal) {
      this.concatWork();
    };

    ReturnForm.prototype.nextApptDaysWeeksChanged = function nextApptDaysWeeksChanged(newVal, oldVal) {
      this.concatWork();
    };

    function ReturnForm(helper, http, Data, Home) {
      _classCallCheck(this, ReturnForm);

      this.modifiedActiviesList = ['No sports', 'No gym class', 'No swimming', 'Must use crutches', 'Must wear cast, splint or brace at all times', 'Must be allowed to elevate injured extremity in class'];
      this.sportStatusList = ['No sports', 'Modified sports', 'Normal sports'];
      this.ambulationList = ['Walking', 'Jogging', 'Running', 'Cutting', 'Leaping', 'Hopping', 'Jumping', 'Quick start and stop'];
      this.throwingList = ['Short distance', 'Long distance', 'Gentle lob', 'Gentle line-drive', 'Hard lin-drive', 'Batting'];

      _initDefineProp(this, 'excuseFromDatePicker', _descriptor2, this);

      _initDefineProp(this, 'excuseFromDate', _descriptor3, this);

      _initDefineProp(this, 'excuseToDatePicker', _descriptor4, this);

      _initDefineProp(this, 'excuseToDate', _descriptor5, this);

      _initDefineProp(this, 'returnToSchoolDatePicker', _descriptor6, this);

      _initDefineProp(this, 'returnToSchoolDate', _descriptor7, this);

      _initDefineProp(this, 'returnToSportsDatePicker', _descriptor8, this);

      _initDefineProp(this, 'returnToSportsDate', _descriptor9, this);

      this.showReturnToSports = false;
      this.showModifiedSports = false;
      this.comments = "";
      this.preferences = [];

      _initDefineProp(this, 'selectedPref', _descriptor10, this);

      this.workNoteId = 0;
      this.workRelatedList = ['Yes', 'No', 'Do not know'];
      this.workStatusList = ['No work', 'Modified Duties', 'Graduated RTW', 'Full Duties'];
      this.workCapabilitiesList = ['Sedentary Work', 'Light Work', 'Medium Work', 'Heavy Work', 'Very Hard Work'];

      _initDefineProp(this, 'workRelated', _descriptor11, this);

      _initDefineProp(this, 'workStatus', _descriptor12, this);

      _initDefineProp(this, 'workCapabilities', _descriptor13, this);

      this.workNextApptIsDays = true;

      _initDefineProp(this, 'nextApptDate', _descriptor14, this);

      _initDefineProp(this, 'nextApptDateValue', _descriptor15, this);

      _initDefineProp(this, 'nextApptDaysWeeksValue', _descriptor16, this);

      _initDefineProp(this, 'nextApptDaysWeeks', _descriptor17, this);

      this.formTypeSchool = true;

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
    }

    ReturnForm.prototype.activate = function activate(params) {
      var self = this;

      self.popupHelper = params.popupHelper;

      self.patientId = params.currentBoard.visitInfo.patientId;
      self.date = params.currentBoard.visitInfo.date;
      self.providerId = params.currentBoard.visitInfo.providerId;
      self.userId = params.currentBoard.userId;

      self.excuseCheck = new Mycheckbox("Please excuse the student's absence from school today. The student was in our office for evaluation", self, self.concatDelegate);
      self.excuseDateRangeCheck = new Mycheckbox("Please excuse the student's absence from school for date range:", self, self.concatDelegate);
      self.returnToSchoolCheck = new Mycheckbox("May return to school on:", self, self.concatDelegate);
      self.restrictionsCheck = new Mycheckbox("Restrictions", self, self.concatDelegate);

      if (self.providerId) {
        var url = 'returnto?providerId=' + self.providerId;
        self.data.getWithUrl(url, function (res) {
          self.preferences = res;
        });
      }

      self.load();
    };

    ReturnForm.prototype.toggleFormType = function toggleFormType() {
      this.formTypeSchool = this.formTypeSchool ? false : true;
    };

    ReturnForm.prototype.toggleWorkNextAppt = function toggleWorkNextAppt() {
      this.workNextApptIsDays = this.workNextApptIsDays ? false : true;
    };

    ReturnForm.prototype.openNextApptDate = function openNextApptDate() {
      this.nextApptDate.methods.toggle();
    };

    ReturnForm.prototype.excuseToDateChanged = function excuseToDateChanged() {
      this.concat();
    };

    ReturnForm.prototype.excuseFromDateChanged = function excuseFromDateChanged() {
      this.concat();
    };

    ReturnForm.prototype.returnToSchoolDateChanged = function returnToSchoolDateChanged() {
      this.concat();
    };

    ReturnForm.prototype.returnToSportsDateChanged = function returnToSportsDateChanged() {
      this.concat();
    };

    ReturnForm.prototype.concatDelegate = function concatDelegate() {
      this.parent.concat();
    };

    ReturnForm.prototype.valuesSelected = function valuesSelected() {
      if (!this.excuseCheck.checked && !this.excuseDateRangeCheck.checked && !this.returnToSchoolCheck.checked && !this.restrictionsCheck.checked && !this.showReturnToSports && !this.showModifiedSports && !this.sportStatus) {
        return false;
      }
      return true;
    };

    ReturnForm.prototype.concatWork = function concatWork() {
      var self = this;
      self.comments = "";

      if (self.workRelated) {
        if (self.workRelated == 'Yes') {
          self.comments += "The injury is work related. ";
        } else if (self.workRelated == 'No') {
          self.comments += "The injury is not work related. ";
        }
      }

      if (self.workStatus && self.workCapabilities) {
        self.comments += "The patient can perform " + self.workStatus.toLowerCase() + ", with the capablity of " + self.workCapabilities.toLowerCase() + ". ";
      } else if (self.workStatus) {
        self.comments += "The patient can perform " + self.workStatus.toLowerCase() + ". ";
      } else if (self.workCapabilities) {
        self.comments += "The patient is capable of performing " + self.workCapabilities.toLowerCase() + ". ";
      }

      if (self.workNextApptIsDays && self.nextApptDaysWeeksValue && self.nextApptDaysWeeks) {
        self.comments += "The patient's next appointment is in " + self.nextApptDaysWeeksValue.toLowerCase() + " " + self.nextApptDaysWeeks.toLowerCase() + ". ";
      } else if (self.nextApptDateValue) {
        self.comments += "The patient's next appointment is on " + self.nextApptDateValue.toLowerCase() + ". ";
      }

      self.comments = self.comments.trimEnd();
    };

    ReturnForm.prototype.concat = function concat() {
      var self = this;
      self.comments = "";

      if (self.selectedPref) {
        self.comments = self.selectedPref.Detail.trim();

        var period = self.comments.substr(self.comments.length - 1);
        if (period !== '.') {
          self.comments += ". ";
        } else {
          self.comments += " ";
        }
      }

      if (self.excuseCheck.checked) {
        self.comments += self.excuseCheck.detail + ". ";
      }

      if (self.excuseDateRangeCheck.checked) {
        var final = self.excuseDateRangeCheck.detail;
        if (self.excuseFromDate) {
          final += " " + self.excuseFromDate;
        }
        if (self.excuseToDate) {
          final += " to " + self.excuseToDate;
        }
        self.comments += final + ". ";
      }

      if (self.returnToSchoolCheck.checked) {
        var _final = self.returnToSchoolCheck.detail;
        if (self.returnToSchoolDate) {
          _final += " " + self.returnToSchoolDate;
        }
        self.comments += _final + ". ";
      }

      if (self.restrictionsCheck.checked && self.modifiedActivity) {
        self.comments += "Restrictions: " + self.modifiedActivity + ". ";
      }

      if (self.showReturnToSports && self.returnToSportsDate) {
        self.comments += "Return to sports on: " + self.returnToSportsDate + ". ";
      }

      if (self.showModifiedSports) {
        var _final2 = 'The athlete is able to perform: ';
        if (self.ambulation) {
          _final2 += self.ambulation;
        }
        if (self.throwing) {
          if (self.ambulation) {
            _final2 += " and " + self.throwing;
          } else {
            _final2 += self.throwing;
          }
        }
        self.comments += _final2 + ". ";
      }

      if (self.sportStatus === 'Normal sports') {
        self.comments += "The athlete is able to perform: Normal sports. ";
      }
    };

    ReturnForm.prototype.restrictionsSelected = function restrictionsSelected() {
      var self = this;
      self.concat();
    };

    ReturnForm.prototype.sportStatusSelected = function sportStatusSelected() {
      var self = this;

      self.showReturnToSports = false;
      self.showModifiedSports = false;

      if (self.sportStatus == 'No sports') {
        self.showReturnToSports = true;
      } else if (self.sportStatus == 'Modified sports') {
        self.showModifiedSports = true;
      }

      self.concat();
    };

    ReturnForm.prototype.ambulationSelected = function ambulationSelected() {
      this.concat();
    };

    ReturnForm.prototype.throwingSelected = function throwingSelected() {
      this.concat();
    };

    ReturnForm.prototype.updatePref = function updatePref() {
      var self = this;
      var url = 'returnto';

      if (!self.selectedPref) {
        self.popupHelper.openGenericMessagePop('Please select a preference to update.', 'Save Preference Requirements', ['OK'], true, function (res) {});
        return;
      }

      var dialog = self.helper.createNoty("Updating Preference...", 1000);
      dialog.show();

      self.selectedPref.Detail = self.comments;

      self.data.putWithUrlAndData(url, self.selectedPref, function (putRes) {
        dialog.close();
      });
    };

    ReturnForm.prototype.createPref = function createPref() {
      var self = this;
      var url = 'returnto';
      self.popupHelper.openGenericInputPop('Create New Preference', ['Description'], null, false, function (res) {

        var pref = {
          'Description': res.inputs[0].value,
          'Detail': self.comments,
          'ProviderId': self.providerId
        };

        var dialog = self.helper.createNoty("Saving Preference...", 1000);
        dialog.show();

        self.data.postWithUrlAndData(url, JSON.stringify(pref), function (postRes) {
          dialog.close();
          self.preferences.push(postRes);
        });
      });
    };

    ReturnForm.prototype.save = function save() {
      var self = this;
      var schoolUrl = 'schoolnote';
      var sportUrl = 'sportnote';
      var workUrl = 'worknote';

      var dialog = self.helper.createNoty("Saving Return To...", 3000);
      dialog.show();

      if (self.formTypeSchool) {

        if (!self.schoolNoteData) {
          var schoolNote = {
            'ExamDateTime': self.date,
            'UserID': self.userId,
            'PatientID': self.patientId,
            'ProviderId': self.providerId,
            'Comments': self.comments
          };

          self.data.postWithUrlAndData(schoolUrl, JSON.stringify(schoolNote), function (saveRes) {
            self.schoolNoteData = saveRes;
            self.helper.notySuccess(dialog, 'Return To... saved!');
          });
        } else {
          self.schoolNoteData.Comments = self.comments;
          self.data.putWithUrlAndData(schoolUrl, self.schoolNoteData, function (updateRes) {
            self.helper.notySuccess(dialog, 'Return To... saved!');
          });
        }

        if (!self.sportNoteData) {
          var sportNote = {
            'ExamDateTime': self.date,
            'UserID': self.userId,
            'PatientID': self.patientId,
            'ProviderId': self.providerId,
            'Comments': self.comments
          };

          self.data.postWithUrlAndData(sportUrl, JSON.stringify(sportNote), function (saveRes) {
            self.sportNoteData = saveRes;
            self.helper.notySuccess(dialog, 'Return To... saved!');
          });
        } else {
          self.sportNoteData.Comments = self.comments;
          self.data.putWithUrlAndData(sportUrl, self.sportNoteData, function (updateRes) {
            self.helper.notySuccess(dialog, 'Return To... saved!');
          });
        }
      } else {

        self.workNoteData = {
          ExamDateTime: self.date,
          PatientID: self.patientId,
          WorkNoteID: self.workNoteId
        };

        self.workNoteData.InstComments = self.comments;

        if (self.nextApptDateValue) {
          self.workNoteData.NextApptDate = self.nextApptDateValue;
        }

        if (self.nextApptDaysWeeksValue) {
          self.workNoteData.NextApptIn = self.nextApptDaysWeeksValue;
        }

        if (self.nextApptDaysWeeks) {
          if (self.nextApptDaysWeeks == 'days') {
            self.workNoteData.NextApptInDays = 1;
          } else {
            self.workNoteData.NextApptInWks = 1;
          }
        }

        if (self.workRelated) {
          if (self.workRelated == 'Yes') {
            self.workNoteData.WorkRelatedYes = 1;
          } else if (self.workRelated == 'No') {
            self.workNoteData.WorkRelatedNo = 1;
          } else {
            self.workNoteData.WorkRelatedDontKnow = 1;
          }
        }

        if (self.workStatus) {
          if (self.workStatus == self.workStatusList[0]) {
            self.workNoteData.WorkStatusNoWork = 1;
          } else if (self.workStatus == self.workStatusList[1]) {
            self.workNoteData.WorkStatusModDuty = 1;
          } else if (self.workStatus == self.workStatusList[2]) {
            self.workNoteData.WorkStatusGraduated = 1;
          } else if (self.workStatus == self.workStatusList[3]) {
            self.workNoteData.WorkStatusFull = 1;
          }
        }

        if (self.workCapabilities) {
          if (self.workCapabilities == self.workCapabilitiesList[0]) {
            self.workNoteData.SedentrayWrk = 1;
          } else if (self.workCapabilities == self.workCapabilitiesList[1]) {
            self.workNoteData.LightWrk = 1;
          } else if (self.workCapabilities == self.workCapabilitiesList[2]) {
            self.workNoteData.MediumWrk = 1;
          } else if (self.workCapabilities == self.workCapabilitiesList[3]) {
            self.workNoteData.HeavyWrk = 1;
          } else if (self.workCapabilities == self.workCapabilitiesList[4]) {
            self.workNoteData.VeryHeavyWrk = 1;
          }
        }

        if (self.workNoteData.WorkNoteID == 0) {
          self.data.postWithUrlAndData(workUrl, JSON.stringify(self.workNoteData), function (saveRes) {
            self.workNoteData = saveRes;
            self.workNoteId = saveRes.WorkNoteID;
            self.helper.notySuccess(dialog, 'Return To... saved!');
          });
        } else {
          self.data.putWithUrlAndData(workUrl, self.workNoteData, function (updateRes) {
            self.helper.notySuccess(dialog, 'Return To... saved!');
          });
        }
      }
    };

    ReturnForm.prototype.load = function load() {
      var self = this;
      var schoolUrl = 'schoolnote?patientId=' + self.patientId + '&providerId=' + self.providerId + '&date=' + self.date;
      var sportUrl = 'sportnote?patientId=' + self.patientId + '&providerId=' + self.providerId + '&date=' + self.date;
      var workUrl = 'worknote?patientId=' + self.patientId + '&providerId=' + self.providerId + '&date=' + self.date;

      self.data.getWithUrl(schoolUrl, function (schoolres) {
        self.schoolNoteData = schoolres;
        if (schoolres != null) {
          self.comments = schoolres.Comments;
        }
      });

      self.data.getWithUrl(sportUrl, function (sportres) {
        self.sportNoteData = sportres;
      });

      self.data.getWithUrl(workUrl, function (workRes) {
        if (workRes) {
          self.workNoteData = workRes;
          self.formTypeSchool = false;

          if (self.workNoteData.NextApptDate) {
            self.workNextApptIsDays = false;
            self.nextApptDateValue = self.workNoteData.NextApptDate;
          }

          self.nextApptDaysWeeksValue = self.workNoteData.NextApptIn;

          if (self.workNoteData.NextApptInDays == 1) {
            self.nextApptDaysWeeks == 'days';
          }
          if (self.workNoteData.NextApptInWks == 1) {
            self.nextApptDaysWeeks == 'weeks';
          }

          if (self.workNoteData.WorkRelatedYes == 1) {
            self.workRelated = 'Yes';
          }
          if (self.workNoteData.WorkRelatedNo == 1) {
            self.workRelated = 'No';
          }
          if (self.workNoteData.WorkRelatedDontKnow == 1) {
            self.workRelated = 'Do not know';
          }

          if (self.workNoteData.WorkStatusNoWork == 1) {
            self.workStatus = self.workStatusList[0];
          }
          if (self.workNoteData.WorkStatusModDuty == 1) {
            self.workStatus = self.workStatusList[1];
          }
          if (self.workNoteData.WorkStatusGraduated == 1) {
            self.workStatus = self.workStatusList[2];
          }
          if (self.workNoteData.WorkStatusFull == 1) {
            self.workStatus = self.workStatusList[3];
          }

          if (self.workNoteData.SedentrayWrk == 1) {
            self.workCapabilities = self.workCapabilitiesList[0];
          }
          if (self.workNoteData.LightWrk == 1) {
            self.workCapabilities = self.workCapabilitiesList[1];
          }
          if (self.workNoteData.MediumWrk == 1) {
            self.workCapabilities = self.workCapabilitiesList[2];
          }
          if (self.workNoteData.HeavyWrk == 1) {
            self.workCapabilities = self.workCapabilitiesList[3];
          }
          if (self.workNoteData.VeryHeavyWrk == 1) {
            self.workCapabilities = self.workCapabilitiesList[4];
          }
        }
      });
    };

    return ReturnForm;
  }(), (_descriptor2 = _applyDecoratedDescriptor(_class4.prototype, 'excuseFromDatePicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class4.prototype, 'excuseFromDate', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class4.prototype, 'excuseToDatePicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class4.prototype, 'excuseToDate', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class4.prototype, 'returnToSchoolDatePicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class4.prototype, 'returnToSchoolDate', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class4.prototype, 'returnToSportsDatePicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class4.prototype, 'returnToSportsDate', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class4.prototype, 'selectedPref', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class4.prototype, 'workRelated', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class4.prototype, 'workStatus', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class4.prototype, 'workCapabilities', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class4.prototype, 'nextApptDate', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _descriptor15 = _applyDecoratedDescriptor(_class4.prototype, 'nextApptDateValue', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _descriptor16 = _applyDecoratedDescriptor(_class4.prototype, 'nextApptDaysWeeksValue', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _descriptor17 = _applyDecoratedDescriptor(_class4.prototype, 'nextApptDaysWeeks', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  })), _class4)) || _class3);
});;
define('text!go/returnForm.html',[],function(){return "<template><style>.returnToDate input{width:120px}.form-control{width:unset}</style><div class=\"card\" style=\"height:inherit\"><div class=\"card-header d-flex align-items-center\"><h4 class=\"mr-2 mb-0\" style=\"display:inline-block\"><i class=\"fa fa-sticky-note-o mr-2\"></i>Return To...</h4><fieldset disabled.bind=\"!formTypeSchool\"><div class=\"input-group\" style=\"width:auto\"><select value.bind=\"selectedPref\" class=\"custom-select\" style=\"width:120px\" aria-label=\"Example select with button addon\"><option selected=\"selected\">Choose...</option><option repeat.for=\"p of preferences\" model.bind=\"p\">${p.Description}</option></select><div class=\"input-group-append\"><button class=\"btn btn-outline-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-user mr-1\" aria-hidden=\"true\"></i>Pref</button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" click.delegate=\"createPref()\"><i class=\"fa fa-user mr-1 text-danger\" aria-hidden=\"true\"></i>New Preference</a> <a class=\"dropdown-item\" click.delegate=\"updatePref()\"><i class=\"fa fa-user mr-1 text-success\" aria-hidden=\"true\"></i>Update Preference</a></div></div></div></fieldset><i class=\"fa fa-close fa-2x ml-auto\" click.delegate=\"cancel()\"></i></div><div class=\"card-body\" style=\"overflow-y:scroll\"><div class=\"btn-group mb-3\" role=\"group\" aria-label=\"Basic example\"><button type=\"button\" class=\"btn btn-lg btn-outline-primary ${formTypeSchool ? 'active' : ''}\" click.delegate=\"toggleFormType()\">School</button> <button type=\"button\" class=\"btn btn-lg btn-outline-primary ${!formTypeSchool ? 'active' : ''}\" click.delegate=\"toggleFormType()\">Work</button></div><div if.bind=\"formTypeSchool\"><div class=\"mb-2\"><i class=\"fa ${excuseCheck.checked ? 'fa-check-square-o': 'fa-square-o'} fa-2x\" style=\"vertical-align:middle;color:#c3c3c3\" click.delegate=\"excuseCheck.select()\"></i> <span class=\"mr-1\" style=\"vertical-align:middle\">${excuseCheck.detail}</span></div><div class=\"mb-3\"><i class=\"fa ${excuseDateRangeCheck.checked ? 'fa-check-square-o': 'fa-square-o'} fa-2x\" style=\"vertical-align:middle;color:#c3c3c3\" click.delegate=\"excuseDateRangeCheck.select()\"></i> <span class=\"mr-1\" style=\"vertical-align:middle\">${excuseDateRangeCheck.detail}</span><div if.bind=\"excuseDateRangeCheck.checked\"><span class=\"ml-5 mr-1\">From</span><abp-datetime-picker id=\"toDate\" class=\"mr-1 returnToDate d-inline-block\" icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"excuseFromDatePicker\" value.bind=\"excuseFromDate\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker><span class=\"mr-1\">to</span><abp-datetime-picker id=\"toDate\" class=\"returnToDate d-inline-block\" icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"excuseToDatePicker\" value.bind=\"excuseToDate\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker></div></div><hr><div class=\"mb-3\"><i class=\"fa ${returnToSchoolCheck.checked ? 'fa-check-square-o': 'fa-square-o'} fa-2x\" style=\"vertical-align:middle;color:#c3c3c3\" click.delegate=\"returnToSchoolCheck.select()\"></i> <span class=\"mr-1\" style=\"vertical-align:middle\">Return to School</span><div if.bind=\"returnToSchoolCheck.checked\" style=\"display:inline-block;vertical-align:middle\"><span class=\"pl-4 pr-2 font-weight-bold\">${returnToSchoolCheck.detail}</span><abp-datetime-picker id=\"toDate\" class=\"mr-1 returnToDate d-inline-block\" style=\"width:80px\" icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"returnToSchoolDatePicker\" value.bind=\"returnToSchoolDate\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker></div></div><div class=\"mb-3\"><i class=\"fa ${restrictionsCheck.checked ? 'fa-check-square-o': 'fa-square-o'} fa-2x\" style=\"vertical-align:middle;color:#c3c3c3\" click.delegate=\"restrictionsCheck.select()\"></i> <span class=\"mr-2\" style=\"vertical-align:middle\">Restrictions</span><div if.bind=\"restrictionsCheck.checked\" class=\"form-group d-inline-block mb-0\"><select value.bind=\"modifiedActivity\" class=\"form-control\" change.delegate=\"restrictionsSelected()\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"a of modifiedActiviesList\" model.bind=\"a\">${a}</option></select></div></div><div class=\"form-group\"><select value.bind=\"sportStatus\" class=\"form-control\" change.delegate=\"sportStatusSelected()\"><option model.bind=\"null\">Sports...</option><option repeat.for=\"a of sportStatusList\" model.bind=\"a\">${a}</option></select></div><div class=\"mb-3\" if.bind=\"showReturnToSports\"><span class=\"pr-2\">Return to sports on:</span><abp-datetime-picker id=\"toDate\" class=\"mr-1 returnToDate d-inline-block\" style=\"width:80px\" icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"returnToSportsDatePicker\" value.bind=\"returnToSportsDate\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker></div><div if.bind=\"showModifiedSports\"><div class=\"mb-1 font-weight-bold\">The athelete is able to perform:</div><div class=\"form-group\"><select value.bind=\"ambulation\" class=\"form-control\" change.delegate=\"ambulationSelected()\"><option model.bind=\"null\">Ambulation...</option><option repeat.for=\"a of ambulationList\" model.bind=\"a\">${a}</option></select></div><div class=\"form-group\"><select value.bind=\"throwing\" class=\"form-control\" change.delegate=\"throwingSelected()\"><option model.bind=\"null\">Throwing...</option><option repeat.for=\"a of throwingList\" model.bind=\"a\">${a}</option></select></div></div></div><div if.bind=\"!formTypeSchool\"><div class=\"form-row\"><div class=\"form-group col-md-6\"><label>Work Related</label> <select value.bind=\"workRelated\" class=\"form-control w-100\" matcher.bind=\"surgeonMatcher\" aria-describedby=\"languageHelp\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of workRelatedList\" model.bind=\"s\">${s}</option></select></div><div class=\"form-group col-md-6\"><label>Work Status</label> <select value.bind=\"workStatus\" class=\"form-control w-100\" matcher.bind=\"assistantMatcher\" aria-describedby=\"languageHelp\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of workStatusList\" model.bind=\"s\">${s}</option></select></div></div><div class=\"form-row\"><div class=\"form-group col-md-12\"><label>The patient is capable of performing the following degree of work:</label> <select value.bind=\"workCapabilities\" class=\"form-control w-100\" matcher.bind=\"surgeonMatcher\" aria-describedby=\"languageHelp\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of workCapabilitiesList\" model.bind=\"s\">${s}</option></select></div></div><div class=\"form-row\"><div class=\"form-group col-md-6\"><label class=\"d-block\">Next appointment</label><div class=\"btn-group mb-2 mr-2\" role=\"group\" aria-label=\"Basic example\"><button type=\"button\" class=\"btn btn-outline-secondary ${workNextApptIsDays ? 'active' : ''}\" click.delegate=\"toggleWorkNextAppt()\">Days</button> <button type=\"button\" class=\"btn btn-outline-secondary ${!workNextApptIsDays ? 'active' : ''}\" click.delegate=\"toggleWorkNextAppt()\">Date</button></div><div if.bind=\"workNextApptIsDays\" class=\"btn-group mb-2 d-inline-block\"><input type=\"number\" value.bind=\"nextApptDaysWeeksValue\" class=\"form-control d-inline-block\" style=\"width:80px\" id=\"exampleFormControlInput1\"> <select value.bind=\"nextApptDaysWeeks\" class=\"form-control d-inline-block\" aria-describedby=\"languageHelp\"><option model.bind=\"null\">Choose...</option><option>days</option><option>weeks</option></select></div><div if.bind=\"!workNextApptIsDays\" class=\"btn-group mb-2 d-inline-block\"><div class=\"input-group\"><abp-datetime-picker icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"nextApptDate\" value.bind=\"nextApptDateValue\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary\" type=\"button\" click.delegate=\"openNextApptDate()\"><i class=\"fa fa-calendar\"></i></button></div></div></div></div></div></div><div class=\"form-group\"><label for=\"exampleFormControlTextarea1\">Comments</label> <textarea class=\"form-control\" id=\"exampleFormControlTextarea1\" value.bind=\"comments\" rows=\"8\" style=\"width:100%\"></textarea></div></div><div class=\"card-footer\"><button type=\"button\" class=\"btn btn-primary float-right\" click.delegate=\"save()\">Save</button></div></div></template>";});;
define('go/schedule',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'aurelia-event-aggregator', 'lodash', 'moment', '../data/go/data', './home', './popupHelper', './globals', './workflowHelper'], function (exports, _helper, _http, _aureliaFramework, _aureliaEventAggregator, _lodash, _moment, _data, _home, _popupHelper, _globals, _workflowHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Schedule = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2;

  var Schedule = exports.Schedule = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home, _popupHelper.PopupHelper, _globals.Globals, _workflowHelper.WorkflowHelper, _aureliaEventAggregator.EventAggregator), _dec(_class = (_class2 = function () {
    function Schedule(helper, http, Data, Home, PopupHelper, Globals, WorkflowHelper, eventAggregator) {
      _classCallCheck(this, Schedule);

      this.scheduleFilters = [];
      this.currentFilter = '';
      this.locations = [];
      this.scrollHeight = 0;
      this.scheduleWidth = '435px';
      this.fullSizeSchedule = false;
      this.statusList = ['Next', 'Ready', 'Waiting', 'Not Arrived', 'Canceled', 'No Show', 'Complete', 'X-ray Order'];
      this.roomList = [];
      this.podList = [];
      this.filteredProviders = [];

      _initDefineProp(this, 'datepicker', _descriptor, this);

      _initDefineProp(this, 'scheduleDate', _descriptor2, this);

      this.displaySpinner = false;
      this.past_date = false;

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
      this.popupHelper = PopupHelper;
      this.globals = Globals;
      this.workflowHelper = WorkflowHelper;
      this.eventAggregator = eventAggregator;

      console.log('EventAggregator injected successfully:', this.eventAggregator);

      this.setupChatbotIntegration();
    }

    Schedule.prototype.setupChatbotIntegration = function setupChatbotIntegration() {
      console.log('Setting up chatbot integration...');

      var self = this;

      this.eventAggregator.subscribe('office-visits-requested', function (data) {
        console.log('Received office-visits-requested event:', data);
        self.handleOfficeVisitsRequest(data.patientName, data.apiResponse);
      });
    };

    Schedule.prototype.handleOfficeVisitsRequest = function handleOfficeVisitsRequest(patientName, apiResponse) {
      console.log('Handling office visits request for:', patientName);

      var patient = this.findPatientByName(patientName);

      if (patient) {
        console.log('Found patient in schedule:', patient);
      } else {
        console.log('Patient not found in schedule:', patientName);
      }
    };

    Schedule.prototype.findPatientByName = function findPatientByName(patientName) {
      if (!this.home.schedule || !Array.isArray(this.home.schedule)) {
        console.log('No schedule available or schedule is not an array');
        return null;
      }

      var nameParts = patientName.toLowerCase().split(' ');
      console.log('Searching for patient with name parts:', nameParts);
      console.log('Current schedule has', this.home.schedule.length, 'items');

      if (this.home.schedule.length > 0) {
        console.log('Sample schedule item:', this.home.schedule[0]);
      }

      var self = this;
      return this.home.schedule.find(function (scheduleItem) {
        var fullName = (scheduleItem.patientName || scheduleItem.fullName || '').toLowerCase();
        var firstName = '';
        var lastName = '';

        if (scheduleItem.firstName) {
          firstName = scheduleItem.firstName.toLowerCase();
        } else if (scheduleItem.data && scheduleItem.data.Patient && scheduleItem.data.Patient.FirstName) {
          firstName = scheduleItem.data.Patient.FirstName.toLowerCase();
        }

        if (scheduleItem.lastName) {
          lastName = scheduleItem.lastName.toLowerCase();
        } else if (scheduleItem.data && scheduleItem.data.Patient && scheduleItem.data.Patient.LastName) {
          lastName = scheduleItem.data.Patient.LastName.toLowerCase();
        }

        console.log('Checking patient: ' + fullName + ' (' + firstName + ' ' + lastName + ')');

        var matches = nameParts.every(function (part) {
          return fullName.includes(part) || firstName.includes(part) || lastName.includes(part) || (firstName + ' ' + lastName).includes(part);
        });

        if (matches) {
          console.log('Found matching patient:', scheduleItem);
        }

        return matches;
      });
    };

    Schedule.prototype.activate = function activate(params) {
      var self = this;

      self.filteredProviders = self.home.providers;

      self.fullSizeSchedule = self.globals.fullSizeSchedule;
      self.setScheduleWidth(self.fullSizeSchedule);

      if (self.globals.scheduleLocation) {
        self.currentLocation = self.globals.scheduleLocation;
      }

      self.getLocations();

      if (self.globals.scheduleDate) {
        self.scheduleDate = self.globals.scheduleDate;
      } else {
        self.scheduleDate = (0, _moment2.default)().format('MM/DD/YYYY');
      }

      self.getPods();
      self.getRooms();

      self.nearestVisitTimer = setInterval(function () {
        self.highlightSchedule();
      }, 60000);
    };

    Schedule.prototype.openCalendar = function openCalendar() {
      var self = this;

      var path = './calendar';
      var date = (0, _moment2.default)().format('MM/DD/YYYY');
      var windowHeight = window.innerHeight - 100;
      var windowWidth = window.innerWidth;

      var quarter = windowWidth / 4;
      var third = windowWidth / 3;

      var width = windowWidth - 71;
      var left = 71;

      var height = windowHeight;
      var top = 0;

      var options = {
        displayHeader: true
      };

      self.home.toggleSchedulePicker();

      self.popupHelper.openViewModelPop(path, self, "", width, height, top, left, options, function (res) {});
    };

    Schedule.prototype.highlightSchedule = function highlightSchedule() {
      var self = this;

      for (var s = 0; s < self.home.schedule.length; s++) {
        var sched = self.home.schedule[s];
        var diff = self.compareScheduleItemToNow(sched);
        if (diff < 0) {
          var index = s == 0 ? 0 : s - 1;
          self.home.schedule[index].nearestSchedule = true;

          var rowEl = self.scheduletable.rows[index];
          if (rowEl) {
            rowEl.scrollIntoView();
          }

          break;
        } else {
          sched.nearestSchedule = false;
        }
      }
    };

    Schedule.prototype.compareScheduleItemToNow = function compareScheduleItemToNow(item) {
      var self = this;

      var parsedTime = self.parseTime(item.time);
      var strTime = parsedTime.hour + ":" + parsedTime.minute;

      var dateSplit = item.data.Schedule.Date.split('-');

      var dNow = new Date();

      var dateTimeStr = dateSplit[2] + '-' + dateSplit[0] + "-" + dateSplit[1] + "T" + strTime;
      var dItemTime = new Date(dateTimeStr);
      var dDiff = dNow - dItemTime;

      return dDiff;
    };

    Schedule.prototype.getScheduleDateTime = function getScheduleDateTime(OD_Schedule) {
      var self = this;
      var tTime = self.parseTime(OD_Schedule.Time);
      var strTime = tTime.hour + ":" + tTime.minute;

      var dateSplit = OD_Schedule.Date.split('/');
      var dateTimeStr = dateSplit[2] + '-' + dateSplit[0] + "-" + dateSplit[1] + "T" + strTime;
      return new Date(dateTimeStr);
    };

    Schedule.prototype.parseTime = function parseTime(time) {

      var initTime = time;

      var isPm = true;

      var amIndex = time.search('AM');
      if (amIndex > -1) {
        isPm = false;
      }

      time = time.replace(isPm ? 'PM' : 'AM', '');
      time = time.trim();

      var timeSplit = time.split(':');
      var hour = void 0,
          minute = void 0;
      if (!isPm) {
        if (timeSplit[0] == '12') {
          hour = 0;
        }
        hour = timeSplit[0] == '12' ? 0 : timeSplit[0];
      } else {
        var tHour = parseInt(timeSplit[0]);
        hour = tHour != 12 ? 12 + tHour : tHour;
      }
      minute = timeSplit[1];

      var strHour = hour.toString();
      if (strHour.length == 1) {
        strHour = '0' + strHour;
      }

      return { 'hour': strHour, 'minute': minute };
    };

    Schedule.prototype.trySelectLoggedInUser = function trySelectLoggedInUser() {
      var self = this;

      var userId = self.globals.scheduleProvider != null ? self.globals.scheduleProvider.UserID : self.helper._user.UserID;
      var aProvider = _.find(self.home.providers, function (p) {
        return p.UserID == userId;
      });
      if (aProvider != undefined) {
        if (self.home.currentProvider != null && aProvider.ProviderID == self.home.currentProvider.ProviderID) {} else {
          self.home.currentProvider = aProvider;
        }

        self.providerSelected();
      }
    };

    Schedule.prototype.scheduleDateChanged = function scheduleDateChanged(newVal, oldVal) {
      var self = this;

      if (self.home.currentProvider == null || self.home.schedule.length > 0 && self.home.schedule[0].data.Schedule.ProviderID != self.home.currentProvider.ProviderID) {
        self.home.schedule = [];
      }

      self.globals.scheduleDate = newVal;

      if (!self.helper.is_today(newVal)) {
        self.past_date = true;
      } else {
        self.past_date = false;
      }

      self.home.loadScheduledProviders(newVal, function () {
        self.trySelectLoggedInUser();
      });
    };

    Schedule.prototype.toggleScheduleSize = function toggleScheduleSize() {
      this.fullSizeSchedule = this.fullSizeSchedule ? false : true;
      this.globals.fullSizeSchedule = this.fullSizeSchedule;


      this.setScheduleWidth(this.fullSizeSchedule);
    };

    Schedule.prototype.setScheduleWidth = function setScheduleWidth(isFullsize) {
      this.scheduleWidth = isFullsize ? '100%' : "435px";
    };

    Schedule.prototype.saveChanges = function saveChanges() {
      var self = this;

      for (var i = 0; i < this.home.schedule.length; i++) {
        var aSchedule = this.home.schedule[i];
        if (aSchedule.hasOwnProperty('needsUpdate')) {
          this.updateScheduleRow(aSchedule);
        }
      }
    };

    Schedule.prototype.reasonForVisitFocus = function reasonForVisitFocus(row, e) {
      var ev = e;
      e.stopPropagation();
      row.needsUpdate = true;
    };

    Schedule.prototype.updateScheduleRow = function updateScheduleRow(r) {
      var self = this;
      var url = 'schedule';

      r.data.Schedule.Date = (0, _moment2.default)(r.data.Schedule.Date).format('MM/DD/YYYY');
      r.data.Schedule.Pod = r.pod === 'Choose...' ? "" : r.pod;
      r.data.Schedule.Room = r.room === 'Choose...' ? "" : r.room;
      r.data.Schedule.Reason_for_Visit = r.reasonForVisit;

      var tDateTime = self.getScheduleDateTime(r.data.Schedule);
      var dateTimeStr = tDateTime.toISOString();
      r.data.Schedule.Time = dateTimeStr;

      delete r.data.Schedule.LocationID;
      delete r.data.Schedule.OD_Provider_ID;

      self.data.putWithUrlAndData(url, r.data.Schedule, function (res) {
        delete r.needsUpdate;
      });
    };

    Schedule.prototype.testFailedPutObject = function testFailedPutObject(url, keyPropertyName, object) {
      var self = this;
      var testObj = {};
      var objs = Object.getOwnPropertyNames(object);
      var vals = Object.values(object);

      for (var k = 0; k < objs.length; k++) {
        if (objs[k] == keyPropertyName) {
          testObj[keyPropertyName] = vals[k];
          break;
        }
      }

      var _loop = function _loop(i) {

        var error = false;

        if (objs[i] == keyPropertyName) {
          return 'continue';
        }

        testObj[objs[i]] = vals[i];

        self.data.putWithUrlAndData(url, testObj, function (res) {
          if (res == null) {
            alert('Put Error: see console');

            console.log('ERROR: ' + objs[i] + ":" + vals[i]);
            error = true;
          }
        });

        if (error) {
          return 'break';
        }
      };

      _loop2: for (var i = 0; i < objs.length; i++) {
        var _ret = _loop(i);

        switch (_ret) {
          case 'continue':
            continue;

          case 'break':
            break _loop2;}
      }
    };

    Schedule.prototype.detached = function detached() {
      clearInterval(this.nearestVisitTimer);
      this.saveChanges();
    };

    Schedule.prototype.attached = function attached() {
      var self = this;

      var windowHeight = window.innerHeight;
      self.scrollHeight = windowHeight - 63;

      self.spinnerLeft = self.scheduledisplay.clientWidth / 2 - 21;
      self.spinnerTop = self.scheduledisplay.clientHeight / 2 - 21;
    };

    Schedule.prototype.getCurrentProviderIndexFromList = function getCurrentProviderIndexFromList() {
      var self = this;

      if (!self.home.currentProvider && !self.globals.scheduleProvider) {
        return 0;
      }

      var providerIdToMatch = self.home.currentProvider ? self.home.currentProvider.ProviderID : self.globals.scheduleProvider.ProviderID;

      for (var i = 0; i < self.home.providers.length; i++) {
        var aProvider = self.home.providers[i];
        if (aProvider.ProviderID == providerIdToMatch) {
          return i + 1;
        }
      }

      return 0;
    };

    Schedule.prototype.getLocations = function getLocations() {
      var self = this;
      self.data.getWithUrl('locations', function (res) {
        var clinicLocs = _.filter(res, function (l) {
          return l.displayLocation == true;
        });
        for (var i = 0; i < clinicLocs.length; i++) {
          self.locations.push(clinicLocs[i]);
        }

        self.locations.splice(0, 0, { LocationName: 'All' });
      });
    };

    Schedule.prototype.getRooms = function getRooms() {
      var self = this;
      self.roomList = [];

      self.data.getList('Room', function (rooms) {
        self.roomList = _.uniqBy(rooms, 'Description1');
      });
    };

    Schedule.prototype.getPods = function getPods() {
      var self = this;
      self.podList = [];
      self.data.getList('Pod', function (rooms) {
        self.podList = _.uniqBy(rooms, 'Description1');
      });
    };

    Schedule.prototype.getScheduleWithLocation = function getScheduleWithLocation(location) {
      var self = this;
      self.currentLocation = location;
      self.globals.scheduleLocation = location;
      self.filterScheduleV2();
    };

    Schedule.prototype.filterProvidersWithScheduleAndLocation = function filterProvidersWithScheduleAndLocation(schedule, locationId) {
      var self = this;
      if (locationId == null) {
        self.filteredProviders = self.home.providers;
      } else {
        self.filteredProviders = [];
        var locationSchedule = _.filter(schedule, function (s) {
          return s.data.Schedule.LocationID == locationId;
        });
        var filterdProviderSchedule = _.uniqBy(locationSchedule, 'providerName');
        for (var i = 0; i < filterdProviderSchedule.length; i++) {
          var provId = filterdProviderSchedule[i].data.Schedule.ProviderID;
          for (var p = 0; p < self.home.providers.length; p++) {
            if (self.home.providers[p].ProviderID == provId) {
              var cloneProv = _.clone(self.home.providers[p]);
              self.filteredProviders.push(cloneProv);
              break;
            }
          }
        }
      }
    };

    Schedule.prototype.filterScheduleV2 = function filterScheduleV2() {
      var self = this;

      self.displaySpinner = true;

      var providerId = self.home.currentProvider ? self.home.currentProvider.ProviderID : 0;

      var getAllLocations = false;
      if (self.currentLocation) {
        getAllLocations = self.currentLocation.LocationName == 'All' ? true : false;
      }
      var locationId = self.currentLocation ? self.currentLocation.LocationID : null;

      self._getSchedule(providerId, self.scheduleDate, self.currentFilter, getAllLocations, locationId);
    };

    Schedule.prototype._getSchedule = function _getSchedule(providerId, scheduleDate, filter, getAll, locationId) {
      var self = this;
      self.data.getSchedule(providerId, scheduleDate, filter, getAll, locationId, function (res) {
        self.home.schedule = res;

        self.filterProvidersWithScheduleAndLocation(res, locationId);

        self.highlightSchedule();

        self.displaySpinner = false;
      });
    };

    Schedule.prototype.providerSelected = function providerSelected() {
      var self = this;

      var provId = self.home.currentProvider ? self.home.currentProvider.ProviderID : 0;
      self.globals.scheduleProvider = self.home.currentProvider;

      self.displaySpinner = true;

      var locationId = self.currentLocation ? self.currentLocation.LocationID : null;

      self._getSchedule(provId, self.scheduleDate, self.currentFilter, false, locationId);

      self.home.getProviderForms(provId);

      self.workflowHelper.initWorkflowForProvider(provId, function (success) {
        if (success) {
          var dt = (0, _moment2.default)().format('MM/DD/YYYY');
          self.workflowHelper.getWorkflow(provId, dt, dt, function (res) {
            var wfRes = res;
            self.home.updateWorkflowSidebarItemBadge(wfRes.incompleteCount);
          });
        }
      });
    };

    Schedule.prototype.statusSelected = function statusSelected(r) {
      r.data.Schedule.Status = r.status;

      if (r.status == 'Waiting') {
        r.bgColor = 'table-primary';
        r.txtColor = '#004085';
      } else if (r.status == 'Ready') {
        r.bgColor = 'table-success';
        r.txtColor = '#155724';
      } else if (r.status == 'Next') {
        r.bgColor = 'table-danger';
        r.txtColor = '#721c24';
      } else {
        r.bgColor = '';
        r.txtColor = '#000000';
      }

      r.needsUpdate = true;
    };

    Schedule.prototype.roomSelected = function roomSelected(r) {
      r.needsUpdate = true;
    };

    Schedule.prototype.podSelected = function podSelected(r) {
      r.needsUpdate = true;
    };

    Schedule.prototype.rowClick = function rowClick(r, e) {
      var self = this;

      if (e.target.localName === 'select') {
        return;
      }

      if (!self.home.currentProvider) {
        if (self.globals.scheduleProvider) {
          self.home.currentProvider = self.globals.scheduleProvider;
        }
      }

      if (!self.home.currentProvider) {
        return;
      }

      if (self.home.currentProvider.ProviderID == 0) {
        var pro = self.home.getProviderFromScheduledProviderList(r.data.Schedule.ProviderID);
        if (pro) {
          self.home.currentProvider = pro;
        } else {}
      }

      if (r.data.Schedule == undefined) {
        var noAllLocations = _.reject(self.locations, function (r) {
          return r.LocationName == 'All';
        });
        var genericPicklistItems = [];
        for (var i = 0; i < noAllLocations.length; i++) {
          var pItm = self.data.getGenericPicklistItem(noAllLocations[i].LocationName, noAllLocations[i]);
          genericPicklistItems.push(pItm);
        }
        this.home.toggleSchedulePicker();
        self.popupHelper.openGenericPicklistPop("Location", 'Please Select Visit Location', genericPicklistItems, true, function (res) {
          var locId = res.item.data.LocationID;
          self.home.setLocationId(locId);
          self.home.loadPatientWithMostRecentVisit(r.patientId);
        });
      } else {
        self.home.setLocationId(r.data.Schedule.LocationID);
        self.home.loadPatientWithMostRecentVisit(r.patientId);
      }
      self.home.toggleSchedulePicker();
    };

    _createClass(Schedule, [{
      key: 'showCalendarButton',
      get: function get() {
        return true;
      }
    }]);

    return Schedule;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'datepicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'scheduleDate', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!go/schedule.html',[],function(){return "<template><style>.current-item{border:2px solid #007bff}.past-date input{color:red}</style><require from=\"./scheduleProviderCustomAttribute\"></require><compose if.bind=\"globals.mobileView\" ref=\"scheduledisplay\" view=\"./mobile/schedule-handheld.html\" containerless></compose><div if.bind=\"!globals.mobileView\" ref=\"scheduledisplay\" id=\"providerschedule\" class=\"card h-100\" css=\"width: ${scheduleWidth};\" style=\"box-shadow:2px 5px .25rem rgba(0,0,0,.3)\"><div class=\"card-header px-2 d-flex align-items-center\"><i class=\"fa fa-clock-o fa-2x px-2\" aria-hidden=\"true\"></i><abp-datetime-picker class=\"pr-2 ml-auto ${past_date ? 'past-date' : ''}\" style=\"width:120px\" icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"datepicker\" value.bind=\"scheduleDate\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker><div class=\"form-group mb-0\"><select ref=\"providerpicker\" value.bind=\"home.currentProvider\" class=\"form-control\" id=\"exampleFormControlSelect1\" change.delegate=\"providerSelected()\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"p of filteredProviders\" model.bind=\"p\">${p.ProviderEntity}</option></select></div><div class=\"dropdown btn-group\"><div if.bind=\"fullSizeSchedule\" class=\"d-inline-block\" style=\"padding:7px 0 0 8px\">${currentLocation.LocationName}</div><button id=\"btnGroupDrop1\" class=\"btn dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"fa fa-filter\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"btnGroupDrop1\"><a repeat.for=\"l of locations\" class=\"dropdown-item\" href=\"#\" click.delegate=\"getScheduleWithLocation(l)\"><i class=\"fa fa-map-marker\" aria-hidden=\"true\"></i> ${l.LocationName} </a></div></div></div><div class=\"tableFixHeadLight\" css=\"height: ${scrollHeight}px;\" style=\"overflow-y:auto;overflow-x:hidden\"><i if.bind=\"displaySpinner\" class=\"fa fa-spinner fa-pulse fa-3x fa-fw\" css=\"left: ${spinnerLeft}px; top: ${spinnerTop}px;\" style=\"position:absolute\"></i><table ref=\"scheduletable\" class=\"table\" style=\"table-layout:fixed\"><thead style=\"font-size:small;color:grey\"><tr if.bind=\"!fullSizeSchedule\"><th scope=\"col\" style=\"width:7px;padding:0\"></th><th scope=\"col\" style=\"width:20px\"></th><th scope=\"col\" style=\"width:80px\">Time</th><th scope=\"col\" style=\"width:150px\">Name</th><th scope=\"col\" style=\"width:75px\">Type</th></tr><tr if.bind=\"fullSizeSchedule\"><th scope=\"col\" style=\"width:7px;padding:0\"></th><th scope=\"col\" style=\"width:20px\"></th><th scope=\"col\" style=\"width:80px\">Time</th><th scope=\"col\">Name</th><th scope=\"col\">Status</th><th scope=\"col\">Type</th><th scope=\"col\">Reason</th><th scope=\"col\">Room</th><th scope=\"col\">Pod</th><th scope=\"col\">Provider</th></tr></thead><tbody><template repeat.for=\"r of home.schedule\"><tr click.delegate=\"rowClick(r, $event)\" class=\"${r.bgColor} ${r.nearestSchedule ? 'current-item' : ''}\"><td if.bind=\"r.nearestSchedule\" style=\"background-color:#007bff\"></td><td if.bind=\"!r.nearestSchedule\"></td><td css=\"color: ${r.txtColor}\"><i class=\"fa fa-clock-o pr-1\" aria-hidden=\"true\"></i></td><td css=\"color: ${r.txtColor}\" class=\"text-nowrap\">${r.time}</td><td css=\"color: ${r.txtColor}\" class=\"text-nowrap font-weight-bold text-truncate\">${r.name}</td><td if.bind=\"fullSizeSchedule\" class=\"text-nowrap\" style=\"padding:0 12px 0 12px\"><select value.bind=\"r.status\" change.delegate=\"statusSelected(r)\" css=\"color: ${r.txtColor}\" style=\"width:100%;height:48px;border:none;background:0 0\"><option>Choose...</option><option repeat.for=\"s of statusList\" model.bind=\"s\">${s}</option></select></td><td css=\"color: ${r.txtColor}\" class=\"text-nowrap\">${r.type}</td><td if.bind=\"fullSizeSchedule\" css=\"color: ${r.txtColor}\" class=\"p-0\" style=\"vertical-align:middle\"><textarea class=\"form-control\" rows=\"1\" value.bind=\"r.reasonForVisit\" style=\"resize:none;background-color:transparent;border:none\" click.delegate=\"reasonForVisitFocus(r, $event)\"></textarea></td><td if.bind=\"fullSizeSchedule\" class=\"text-nowrap\" style=\"padding:0 12px 0 12px\"><select value.bind=\"r.room\" change.delegate=\"roomSelected(r)\" css=\"color: ${r.txtColor}\" style=\"width:100%;height:48px;border:none;background:0 0\"><option>Choose...</option><option repeat.for=\"s of roomList\" model.bind=\"s.Description1\">${s.Description1}</option></select></td><td if.bind=\"fullSizeSchedule\" class=\"text-nowrap\" style=\"padding:0 12px 0 12px\"><select value.bind=\"r.pod\" change.delegate=\"podSelected(r)\" css=\"color: ${r.txtColor}\" style=\"width:100%;height:48px;border:none;background:0 0\"><option>Choose...</option><option repeat.for=\"s of podList\" model.bind=\"s.Description1\">${s.Description1}</option></select></td><td if.bind=\"fullSizeSchedule\" css=\"color: ${r.txtColor}\" class=\"text-nowrap\"> ${r.providerName} </td></tr></template></tbody></table></div><div class=\"card-footer\"><button if.bind=\"showCalendarButton\" type=\"button\" class=\"btn btn-primary\" click.delegate=\"openCalendar()\"><i class=\"fa fa-calendar mr-1\"></i>Scheduler</button> <i class=\"fa fa-arrows-h fa-2x float-right text-muted\" aria-hidden=\"true\" click.delegate=\"toggleScheduleSize()\"></i></div></div></template>";});;
define('go/schedulePopup',['exports', '../helpers/helper', 'aurelia-framework', 'aurelia-dialog', './calendarHelper', './popupHelper', '../data/go/data'], function (exports, _helper, _aureliaFramework, _aureliaDialog, _calendarHelper, _popupHelper, _data) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SchedulePopup = undefined;

  var calHelper = _interopRequireWildcard(_calendarHelper);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3;

  var SchedulePopup = exports.SchedulePopup = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _aureliaDialog.DialogController, _popupHelper.PopupHelper, _data.Data), _dec(_class = (_class2 = function () {
    SchedulePopup.prototype.scheduleDateChanged = function scheduleDateChanged(newVal, oldVal) {
      if (this.datepicker) {
        var dt = this.datepicker.methods.viewDate();
        this.date = dt.format("MM/DD/YYYY");
      }
    };

    SchedulePopup.prototype.startTimeChanged = function startTimeChanged(newVal, oldVal) {
      if (newVal == null) return;

      this.endTime = this.getNextTimeInList(newVal.time);
    };

    function SchedulePopup(helper, DialogController, PopupHelper, Data) {
      _classCallCheck(this, SchedulePopup);

      this.slot = null;
      this.appointment = null;
      this.home = null;
      this.locations = [];
      this.providers = [];
      this.reasonForVisit = null;
      this.date = null;
      this.patientName = null;
      this.patientId = null;
      this.status = null;
      this.appointmentCreated = false;
      this.editable = false;

      _initDefineProp(this, 'datepicker', _descriptor, this);

      _initDefineProp(this, 'scheduleDate', _descriptor2, this);

      this.timeList = [];

      _initDefineProp(this, 'startTime', _descriptor3, this);

      this.helper = helper;
      this.dialogController = DialogController;
      this.popupHelper = PopupHelper;
      this.data = Data;
    }

    SchedulePopup.prototype.activate = function activate(params) {

      this.slot = params.slot;
      this.editable = params.editable;

      this.createTimelist();

      this.home = params.home;
      this.appointment = params.apt;
      this.providers = params.home.providers;
      if (params.apt && params.apt.schedule && params.apt.schedule.ProviderID) {
        var foundPro = _.find(this.providers, function (l) {
          return l.ProviderID == params.apt.schedule.ProviderID;
        });
        if (foundPro) {
          this.selectedProvider = foundPro;
        }
      } else {
        this.selectedProvider = params.home.currentProvider;
      }

      this.locations = params.locations;
      if (params.apt && params.apt.schedule && params.apt.schedule.PatientLocation) {
        var foundLoc = _.find(this.locations, function (l) {
          return l.LocationName == params.apt.schedule.PatientLocation;
        });
        if (foundLoc) {
          this.selectedLocation = foundLoc;
        }
      } else {
        this.selectedLocation = params.currentLocation;
      }

      this.scheduleDate = params.slotDate;
      this.startTime = this.appointment.schedule ? this.getTimeInList(this.appointment.schedule.Time) : null;
      this.reasonForVisit = this.appointment.schedule ? this.appointment.schedule.Reason_for_Visit : null;
      this.date = this.appointment.schedule ? this.appointment.schedule.Date : calHelper.getStringDate(this.scheduleDate.getFullYear(), this.scheduleDate.getMonth(), this.scheduleDate.getDate());
      this.patientName = this.appointment.schedule ? this.appointment.schedule.Patient_Name : null;
      this.patientId = this.appointment.schedule ? this.appointment.schedule.PatientID : null;
      this.status = this.appointment.schedule ? this.appointment.schedule.Status : null;

      if (this.startTime == null) {
        this.startTime = params.slotTime;
      }
    };

    SchedulePopup.prototype.setStatus = function setStatus(status) {
      this.status = status;
    };

    SchedulePopup.prototype.getNextTimeInList = function getNextTimeInList(time) {
      for (var t = 0; t < this.timeList.length; t++) {
        if (this.timeList[t].time == time) {
          if (t + 1 < this.timeList.length) {
            return this.timeList[t + 1];
          }
        }
      }
    };

    SchedulePopup.prototype.getTimeInList = function getTimeInList(time) {
      return _.find(this.timeList, function (t) {
        return t.time == time;
      });
    };

    SchedulePopup.prototype.createTimelist = function createTimelist() {

      var availTimes = this.slot.calDay.getAvailableSlots();

      this.timeList = availTimes;
    };

    SchedulePopup.prototype.attached = function attached() {};

    SchedulePopup.prototype.updateSchedule = function updateSchedule(callback) {
      var self = this;

      var schedObj = {
        "Time": self.startTime.time,
        "EndTime": self.endTime.time,
        "PatientLocation": self.selectedLocation ? self.selectedLocation.LocationName : null,
        "Reason_for_Visit": self.reasonForVisit,
        "ProviderID": self.selectedProvider ? self.selectedProvider.ProviderID : null,
        "Date": self.date,
        "Patient_Name": self.patientName,
        "PatientID": self.patientId,
        "Status": self.status,
        "Type": "Office"
      };

      if (self.appointment.schedule == null) {
        self.appointment.schedule = schedObj;
      } else {
        self.appointment.schedule.Time = self.startTime.time;
        self.appointment.schedule.EndTime = self.endTime.time;
        self.appointment.schedule.PatientLocation = self.selectedLocation ? self.selectedLocation.LocationName : null;
        self.appointment.schedule.Reason_for_Visit = self.reasonForVisit;
        self.appointment.schedule.ProviderID = self.selectedProvider ? self.selectedProvider.ProviderID : null;
        self.appointment.schedule.Date = self.date;
        self.appointment.schedule.Patient_Name = self.patientName;
        self.appointment.schedule.PatientID = self.patientId;
        self.appointment.schedule.Status = self.status;
      }

      var saveDescription = 'Saving schedule for ' + self.patientName + '...';
      var saveDialog = self.helper.createNoty(saveDescription, 3000);
      saveDialog.show();

      var url = 'schedule';

      if (self.appointment.schedule.ScheduleID == undefined) {
        self.data.postWithUrlAndData(url, JSON.stringify(self.appointment.schedule), function (res) {
          self.appointment.schedule.ScheduleID = res.ScheduleID;
          saveDialog.close();
          self.appointmentCreated = true;
          callback();
        });
      } else {
        self.data.putWithUrlAndData(url, self.appointment.schedule, function (res) {
          saveDialog.close();
          callback();
        });
      }
    };

    SchedulePopup.prototype.save = function save() {
      var self = this;
      self.updateSchedule(function () {
        self.dialogController.close(true, { "appointment": self.appointment, "appointmentCreated": self.appointmentCreated });
      });
    };

    SchedulePopup.prototype.cancel = function cancel() {
      this.dialogController.cancel();
    };

    SchedulePopup.prototype.openPatientSearch = function openPatientSearch() {
      var self = this;
      self.popupHelper.openPatientPop(false, true, function (pat) {

        if (pat.createPatient) {
          self.home.createPatient(function (newPatient) {
            self.patientName = newPatient.NameFirst + " " + newPatient.NameLast;
            self.patientId = newPatient.PatientID;
          });
        } else {
          self.patientName = pat.NameFirst + " " + pat.NameLast;
          self.patientId = pat.PatientID;
        }
      });
    };

    _createClass(SchedulePopup, [{
      key: 'statusStyle',
      get: function get() {
        if (this.status == 'Ready') {
          return 'alert alert-success';
        } else if (this.status == 'Waiting') {
          return 'alert alert-primary';
        } else if (this.status == 'Next') {
          return 'alert alert-danger';
        } else if (this.status == 'Not Arrived' || this.status == null || this.status.length == 0) {
          return 'alert alert-dark';
        }
      }
    }]);

    return SchedulePopup;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'datepicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'scheduleDate', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'startTime', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!go/schedulePopup.html',[],function(){return "<template><style>.status-circle{height:25px;width:25px;border-radius:50%;display:inline-block;border:1px solid}</style><div class=\"row border border-bottom-0 rounded-top bg-white\"><div class=\"col-md-12\" style=\"padding-top:15px\"><div class=\"form-row\"><div class=\"form-group col-md-12\"><small id=\"nameFirstHelp\" class=\"form-text text-muted\">Patient</small><div class=\"input-group mb-3\"><input type=\"text\" readonly=\"readonly\" class=\"form-control\" value.bind=\"patientName\" placeholder=\"Patient Name\" aria-label=\"Recipient's username\" aria-describedby=\"button-addon2\"><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" click.delegate=\"openPatientSearch()\"><i class=\"fa fa-search\"></i></button></div></div></div><div class=\"form-group col-md-12 d-flex align-items-center\"><i class=\"fa fa-clock-o text-muted mr-2\"></i><abp-datetime-picker class=\"flex-fill mr-2\" icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"datepicker\" value.bind=\"scheduleDate\" options.bind=\"{ format: 'dddd, MMMM D' }\"></abp-datetime-picker><select value.bind=\"startTime\" class=\"form-control mr-2\" style=\"width:auto\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"t of timeList\" model.bind=\"t\" disabled.bind=\"t.disabled\">${t.time}</option></select> <select value.bind=\"endTime\" class=\"form-control\" style=\"width:auto\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"t of timeList\" model.bind=\"t\" disabled.bind=\"t.disabled\">${t.time}</option></select></div><div class=\"form-group col-md-6\"><small class=\"form-text text-muted\">Provider</small> <select value.bind=\"selectedProvider\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"p of providers\" model.bind=\"p\">${p.ProviderEntity}</option></select></div><div class=\"form-group col-md-6\"><small class=\"form-text text-muted\">Location</small> <select value.bind=\"selectedLocation\" class=\"form-control ${selectedLocation == null ? 'is-invalid' : ''}\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"l of locations\" model.bind=\"l\">${l.LocationName}</option></select><div class=\"invalid-feedback\">Please provide a location.</div></div><div class=\"form-group col-md-12\"><small id=\"nameLastHelp\" class=\"form-text text-muted\">Description</small> <input type=\"text\" placeholder=\"Reason for visit\" class=\"form-control\" value.bind=\"reasonForVisit\" aria-describedby=\"nameLastHelp\"></div><div class=\"form-group col-md-12\"><small id=\"nameLastHelp\" class=\"form-text text-muted\">Status</small><div class=\"dropdown\"><button class=\"btn dropdown-toggle pl-0 d-flex align-items-center\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><span class=\"status-circle mr-1 mb-0 ${statusStyle}\" style=\"padding:0!important\" aria-hidden=\"true\"></span>${status} </button><div class=\"dropdown-menu\"><a class=\"dropdown-item d-flex align-items-center\" href=\"#\" click.delegate=\"setStatus('Ready')\"><div class=\"status-circle mr-1 alert-success\" aria-hidden=\"true\"></div>Ready</a> <a class=\"dropdown-item d-flex align-items-center\" href=\"#\" click.delegate=\"setStatus('Waiting')\"><div class=\"status-circle mr-1 alert-primary\" aria-hidden=\"true\"></div>Waiting</a> <a class=\"dropdown-item d-flex align-items-center\" href=\"#\" click.delegate=\"setStatus('Not Arrived')\"><div class=\"status-circle mr-1 alert-dark\" aria-hidden=\"true\"></div>Not Arrived</a> <a class=\"dropdown-item d-flex align-items-center\" href=\"#\" click.delegate=\"setStatus('Next')\"><div class=\"status-circle mr-1 alert-danger\" aria-hidden=\"true\"></div>Next</a></div></div></div></div></div></div><div class=\"row justify-content-around pt-2 border border-top-0 rounded-bottom bg-white\" style=\"padding-bottom:15px\"><button if.bind=\"editable\" class=\"btn btn-primary\" click.delegate=\"save()\">Save</button></div></template>";});;
define('go/scheduleProviderCustomAttribute',['exports', 'aurelia-framework'], function (exports, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ScheduleProviderCustomAttribute = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _dec2, _class;

  var ScheduleProviderCustomAttribute = exports.ScheduleProviderCustomAttribute = (_dec = (0, _aureliaFramework.customAttribute)('scheduleprovider'), _dec2 = (0, _aureliaFramework.inject)(Element), _dec(_class = _dec2(_class = function () {
    function ScheduleProviderCustomAttribute(element) {
      _classCallCheck(this, ScheduleProviderCustomAttribute);

      this.last = false;
    }

    ScheduleProviderCustomAttribute.prototype.bind = function bind(bindingContext, overridingContext) {
      if (overridingContext.$last == true) {
        this.last = true;
        this.parent = overridingContext.parentOverrideContext.bindingContext;
      }
    };

    ScheduleProviderCustomAttribute.prototype.attached = function attached() {};

    return ScheduleProviderCustomAttribute;
  }()) || _class) || _class);
});;
define('go/sidebar',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', '../data/go/data', 'lodash', 'aurelia-dialog', 'aurelia-router', './globals', './popupHelper', '../access', './task/taskHelper', 'aurelia-event-aggregator'], function (exports, _helper, _http, _aureliaFramework, _data, _lodash, _aureliaDialog, _aureliaRouter, _globals, _popupHelper, _access, _taskHelper, _aureliaEventAggregator) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Sidebar = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var SidebarItem = function SidebarItem(id, icon, template) {
    _classCallCheck(this, SidebarItem);

    this.id = id;
    this.icon = icon;
    this.iconStack = null;
    this.title = null;
    this.height = 65;
    this.width = null;
    this.template = template;
    this.togglePickerValue = null;
    this.badgeCount = 0;
    this.index = 0;
    this.moreMenu = false;
    this.options = null;
    this.disabled = false;
  };

  var Sidebar = exports.Sidebar = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _aureliaDialog.DialogService, _aureliaRouter.Router, _data.Data, _globals.Globals, _access.Access, _popupHelper.PopupHelper, _taskHelper.TaskHelper, _aureliaEventAggregator.EventAggregator), _dec(_class = function () {
    function Sidebar(helper, http, DialogService, Router, Data, Globals, Access, PopupHelper, TaskHelper, EventAggregator) {
      _classCallCheck(this, Sidebar);

      this.sidebarItems = [];
      this.sidebarItemsMore = [];

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.dialogService = DialogService;
      this.router = Router;
      this.globals = Globals;
      this.access = Access;
      this.popupHelper = PopupHelper;
      this.taskHelper = TaskHelper;
      this.event = EventAggregator;
      this.blankImage = this.helper.goFileUrl + 'images/blank.png';
    }

    Sidebar.prototype.attached = function attached() {
      this.loadLayout();
    };

    Sidebar.prototype.testOriginalLayout = function testOriginalLayout() {
      var schedule = new SidebarItem("toolbar-schedule", "fa-clock-o", "basicSidebarItem");
      schedule.togglePickerValue = "schedule";
      schedule.title = "Schedule";
      this.sidebarItems.push(schedule);

      var workflow = new SidebarItem("toolbar-workflow", "fa-cubes", "badgeSidebarItem");
      workflow.togglePickerValue = "workflow";
      workflow.title = "Workflow";
      workflow.disabled = true;
      this.sidebarItems.push(workflow);

      var prescription = new SidebarItem(null, null, "rxSidebarItem");
      this.sidebarItems.push(prescription);

      var submitCharges = new SidebarItem(null, "fa-usd", "basicSidebarItem");
      submitCharges.togglePickerValue = "charges";
      submitCharges.title = "Charges";

      this.sidebarItems.push(submitCharges);

      var tasking = new SidebarItem("toolbar-messaging", "fa-comment", "badgeSidebarItem");
      tasking.togglePickerValue = "task";
      tasking.title = "Messaging/Tasking";
      tasking.iconStack = "fa-thumb-tack";
      this.sidebarItems.push(tasking);

      var patientSearch = new SidebarItem("toolbar-patient-search", "fa-search", "basicSidebarItem");
      patientSearch.togglePickerValue = "patient";
      patientSearch.title = "Patient Search";
      this.sidebarItems.push(patientSearch);

      var externalApps = new SidebarItem(null, null, "externalAppsSidebarItem");
      externalApps.moreMenu = true;
      this.sidebarItemsMore.push(externalApps);

      var kiosk = new SidebarItem("toolbar-kiosk", "fa-tachometer", "basicSidebarItem");
      kiosk.togglePickerValue = "kiosk";
      kiosk.title = "Kiosk Dashboard";
      kiosk.moreMenu = true;
      this.sidebarItemsMore.push(kiosk);

      var phone = new SidebarItem("toolbar-phonecall", "fa-phone", "basicSidebarItem");
      phone.togglePickerValue = "phone";
      phone.title = "Phone Call";
      phone.moreMenu = true;
      this.sidebarItemsMore.push(phone);

      var inboundFax = new SidebarItem(null, "fa-fax", "basicSidebarItem");
      inboundFax.togglePickerValue = "inboundfax";
      inboundFax.title = "Inbound Fax";
      inboundFax.moreMenu = true;
      this.sidebarItemsMore.push(inboundFax);

      var orders = new SidebarItem(null, null, "ordersSidebarItem");
      orders.moreMenu = true;
      this.sidebarItemsMore.push(orders);
    };

    Sidebar.prototype.loadLayout = function loadLayout() {
      if (this.helper._user.Json != "") {
        var json = JSON.parse(this.helper._user.Json);
        var toolbar = json.toolbar;
        for (var i = 0; i < toolbar.items.length; i++) {
          var itm = this.getSidebarItem(toolbar.items[i].name, false);
          this.sidebarItems.push(itm);
        }
        for (var i = 0; i < toolbar.itemsMore.length; i++) {
          var itm = this.getSidebarItem(toolbar.itemsMore[i].name, true);
          this.sidebarItemsMore.push(itm);
        }
      } else {
        this.testOriginalLayout();
      }
    };

    Sidebar.prototype.getSidebarItem = function getSidebarItem(name, moreMenu) {
      switch (name) {
        case "Patient Search":
          var patientSearch = new SidebarItem("toolbar-patient-search", "fa-search", "basicSidebarItem");
          patientSearch.togglePickerValue = "patient";
          patientSearch.title = name;
          if (moreMenu) {
            patientSearch.moreMenu = true;
          }
          return patientSearch;
        case "Schedule":
          var schedule = new SidebarItem("toolbar-schedule", "fa-clock-o", "basicSidebarItem");
          schedule.togglePickerValue = "schedule";
          schedule.title = name;
          if (moreMenu) {
            schedule.moreMenu = true;
          }
          return schedule;
        case "Kiosk Dashboard":
          var kiosk = new SidebarItem("toolbar-kiosk", "fa-tachometer", "basicSidebarItem");
          kiosk.togglePickerValue = "kiosk";
          kiosk.title = name;
          if (moreMenu) {
            kiosk.moreMenu = true;
          }
          return kiosk;
        case "Messaging/Tasking":
          var tasking = new SidebarItem("toolbar-messaging", "fa-comment", "badgeSidebarItem");
          tasking.togglePickerValue = "task";
          tasking.title = name;
          tasking.iconStack = "fa-thumb-tack";
          if (moreMenu) {
            tasking.moreMenu = true;
          }
          return tasking;
        case "Workflow":
          var workflow = new SidebarItem("toolbar-workflow", "fa-cubes", "badgeSidebarItem");
          workflow.togglePickerValue = "workflow";
          workflow.title = name;
          workflow.disabled = true;
          if (moreMenu) {
            workflow.moreMenu = true;
          }
          return workflow;
        case "Phone Call":
          var phone = new SidebarItem("toolbar-phonecall", "fa-phone", "basicSidebarItem");
          phone.togglePickerValue = "phone";
          phone.title = name;
          if (moreMenu) {
            phone.moreMenu = true;
          }
          return phone;
        case "Prescription":
          var rx = new SidebarItem(null, null, "rxSidebarItem");
          if (moreMenu) {
            rx.moreMenu = true;
          }
          return rx;
        case "External Apps":
          var ext = new SidebarItem(null, null, "externalAppsSidebarItem");
          if (moreMenu) {
            ext.moreMenu = true;
          }
          return ext;
        case "Charges":
          var submitCharges = new SidebarItem(null, "fa-usd", "basicSidebarItem");
          submitCharges.togglePickerValue = "charges";
          submitCharges.title = name;
          if (moreMenu) {
            submitCharges.moreMenu = true;
          }
          return submitCharges;
        case "Inbound Fax":
          var inboundFax = new SidebarItem(null, "fa-fax", "basicSidebarItem");
          inboundFax.togglePickerValue = "inboundfax";
          inboundFax.title = name;
          if (moreMenu) {
            inboundFax.moreMenu = true;
          }
          return inboundFax;
        case "Scan":
          var scanning = new SidebarItem(null, "fa-print", "basicSidebarItem");
          scanning.togglePickerValue = "scan";
          scanning.title = name;
          if (moreMenu) {
            scanning.moreMenu = true;
          }
          return scanning;
        case "Orders Forms":
          var orders = new SidebarItem(null, null, "ordersSidebarItem");
          if (moreMenu) {
            orders.moreMenu = true;
          }
          orders.options = { userId: this.helper._user.UserID };
          return orders;
      }
    };

    return Sidebar;
  }()) || _class);
});;
define('text!go/sidebar.html',[],function(){return "<template><div ref=\"sidebar\" class=\"d-flex flex-column flex-shrink-0 bg-light\" style=\"width:4.5rem;position:fixed;height:100%;z-index:4000;border-right:1px solid grey\"><a id=\"toolbar-demographics\" href=\"#\" class=\"d-flex align-items-center justify-content-center p-0 link-dark text-decoration-none\" style=\"background-color:#dfe1e5;border-top:1px solid grey;border-bottom:1px solid grey\" click.delegate=\"showDemographics()\"><img src.bind=\"patient && patient.imagepath ? patient.imagepath : blankImage\" alt=\"mdo\" width=\"71\" height=\"71\" style=\"width:100%;height:100%\"> <i class=\"fa fa-caret-right\" aria-hidden=\"true\" style=\"position:absolute;right:5px;top:55px\"></i></a><ul class=\"nav nav-pills nav-flush flex-column mb-auto text-center\"><template repeat.for=\"i of sidebarItems\"><compose view-model=\"./sidebarItems/${i.template}\" model.bind=\"i\" containerless></compose></template><li id=\"toolbar-more\" style=\"height:65px;width:71px\"><a href=\"#\" click.delegate=\"toggleMoreIcons()\" class=\"nav-link py-3 border-top\" title=\"More\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\"><i class=\"fa fa-ellipsis-h fa-2x\"></i></a><div if.bind=\"moreIconsVisible\" class=\"d-flex\" style=\"position:relative;left:71px;bottom:66px;height:65px;width:284px;flex-wrap:wrap;flex:1\"><template repeat.for=\"i of sidebarItemsMore\"><compose view-model=\"./sidebarItems/${i.template}\" model.bind=\"i\" containerless></compose></template></div></li><li id=\"toolbar-admin\" if.bind=\"showAdminButton\" style=\"height:65px;width:71px\"><a href=\"#\" click.delegate=\"togglePicker('admin')\" class=\"nav-link py-3 border-top border-bottom\" title=\"Settings\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\"><i class=\"fa fa-cog fa-2x\"></i></a></li><li id=\"toolbar-blocks\" class=\"position-absolute\" style=\"height:65px;width:71px;bottom:0\"><a href=\"#\" click.delegate=\"togglePicker('board')\" class=\"nav-link py-3 border-bottom\" title=\"User Boards\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\"><i class=\"fa fa-th-large fa-2x text-secondary\"></i></a></li></ul></div></template>";});;
define('go/sidebarItems/badgeSidebarItem',["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var BadgeSidebarItem = exports.BadgeSidebarItem = function () {
    function BadgeSidebarItem() {
      _classCallCheck(this, BadgeSidebarItem);

      this.item = null;
    }

    BadgeSidebarItem.prototype.activate = function activate(item) {
      this.item = item;
    };

    return BadgeSidebarItem;
  }();
});;
define('text!go/sidebarItems/badgeSidebarItem.html',[],function(){return "<template><style>.sidebar-item-disabled .nav-link{color:#adb5bd;pointer-events:none;background-color:#fff}</style><li if.bind=\"!item.moreMenu\" id.bind=\"item.id\" style=\"height:65px;width:71px\" class=\"${item.disabled ? 'sidebar-item-disabled' : ''}\"><a href=\"#\" click.delegate=\"togglePicker(item.togglePickerValue)\" class=\"nav-link py-3 border-top\" title.bind=\"item.title\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\"><span class=\"fa-stack\"><template if.bind=\"item.iconStack\"><i class=\"fa ${item.icon} fa-stack-2x\"></i> <i class=\"fa ${item.iconStack} fa-stack-1x text-light\"></i></template><template if.bind=\"!item.iconStack\"><i class=\"fa ${item.icon} fa-stack-2x\"></i></template></span><span if.bind=\"item.badgeCount > 0\" class=\"top-0 start-100 translate-middle badge rounded-pill bg-danger text-light\" style=\"position:relative;left:16px;bottom:40px\"> ${item.badgeCount} </span></a></li><div if.bind=\"item.moreMenu\" style=\"height:67px;width:71px;background-color:#f8f9fa;border:1px solid #dee2e6\" class=\"${item.disabled ? 'sidebar-item-disabled' : ''}\"><a href=\"#\" click.delegate=\"togglePicker(item.togglePickerValue)\" class=\"nav-link py-3 border-top\" title.bind=\"item.title\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\"><span if.bind=\"item.iconStack\" class=\"fa-stack\"><i class=\"fa ${item.icon} fa-stack-2x\"></i> <i class=\"fa ${item.iconStack} fa-stack-1x text-light\"></i> </span><i if.bind=\"!item.iconStack\" class=\"fa ${item.icon} fa-2x\"></i> <span if.bind=\"item.badgeCount > 0\" class=\"top-0 start-100 translate-middle badge rounded-pill bg-danger text-light\" style=\"position:relative;left:16px;bottom:40px\"> ${item.badgeCount} </span></a></div></template>";});;
define('go/sidebarItems/basicSidebarItem',["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var BasicSidebarItem = exports.BasicSidebarItem = function () {
    function BasicSidebarItem() {
      _classCallCheck(this, BasicSidebarItem);

      this.item = null;
    }

    BasicSidebarItem.prototype.activate = function activate(item) {
      this.item = item;
    };

    return BasicSidebarItem;
  }();
});;
define('text!go/sidebarItems/basicSidebarItem.html',[],function(){return "<template><style>.sidebar-item-disabled .nav-link{color:#adb5bd;pointer-events:none;background-color:#fff}</style><li if.bind=\"!item.moreMenu\" id.bind=\"item.id\" style=\"height:65px;width:71px\" class=\"${item.disabled ? 'sidebar-item-disabled' : ''}\"><a href=\"#\" click.delegate=\"togglePicker(item.togglePickerValue)\" class=\"nav-link py-3 border-top\" title.bind=\"item.title\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\"><i class=\"fa ${item.icon} fa-2x\"></i></a></li><div if.bind=\"item.moreMenu\" id.bind=\"item.id\" style=\"height:67px;width:71px;background-color:#f8f9fa;border:1px solid #dee2e6\" class=\"${item.disabled ? 'sidebar-item-disabled' : ''}\"><a href=\"#\" click.delegate=\"togglePicker(item.togglePickerValue)\" class=\"nav-link py-3 border-top\" title.bind=\"item.title\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\"><i class=\"fa ${item.icon} fa-2x\"></i></a></div></template>";});;
define('go/sidebarItems/externalAppsSidebarItem',["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var ExternalAppsSidebarItem = exports.ExternalAppsSidebarItem = function () {
    function ExternalAppsSidebarItem() {
      _classCallCheck(this, ExternalAppsSidebarItem);

      this.item = null;
    }

    ExternalAppsSidebarItem.prototype.activate = function activate(item) {
      this.item = item;
    };

    return ExternalAppsSidebarItem;
  }();
});;
define('text!go/sidebarItems/externalAppsSidebarItem.html',[],function(){return "<template><style>.sidebar-item-disabled .nav-link{color:#adb5bd;pointer-events:none;background-color:#fff}</style><li if.bind=\"!item.moreMenu\" id=\"toolbar-workflow\" style=\"height:65px;width:71px\" class=\"${item.disabled ? 'sidebar-item-disabled' : ''}\"><div class=\"dropdown\"><a href=\"#\" class=\"nav-link py-3 dropdown-toggle\" role=\"button\" title=\"External Apps\" data-toggle=\"dropdown\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\"><i class=\"fa fa-link fa-2x\"></i></a><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\"><h6 class=\"dropdown-header\">External Apps</h6><a repeat.for=\"a of externalapps\" class=\"dropdown-item\" href=\"#\" click.delegate=\"launchExternalApp(a)\">${a.ExternalAppName}</a></div></div></li><div if.bind=\"item.moreMenu\" style=\"height:67px;width:71px;background-color:#f8f9fa;border:1px solid #dee2e6\" class=\"${item.disabled ? 'sidebar-item-disabled' : ''}\"><div class=\"dropdown\"><a href=\"#\" class=\"nav-link py-3 dropdown-toggle\" role=\"button\" title=\"External Apps\" data-toggle=\"dropdown\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\"><i class=\"fa fa-link fa-2x\"></i></a><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\"><h6 class=\"dropdown-header\">External Apps</h6><a repeat.for=\"a of externalapps\" class=\"dropdown-item\" href=\"#\" click.delegate=\"launchExternalApp(a)\">${a.ExternalAppName}</a></div></div></div></template>";});;
define('go/sidebarItems/ordersSidebarItem',['exports', '../../data/go/data', 'aurelia-framework'], function (exports, _data, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.OrdersSidebarItem = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var OrdersSidebarItem = exports.OrdersSidebarItem = (_dec = (0, _aureliaFramework.inject)(_data.Data), _dec(_class = function () {
    function OrdersSidebarItem(Data) {
      _classCallCheck(this, OrdersSidebarItem);

      this.item = null;
      this.forms = [];

      this.data = Data;
    }

    OrdersSidebarItem.prototype.activate = function activate(item) {
      this.item = item;
      this.loadCustomForms();
    };

    OrdersSidebarItem.prototype.loadCustomForms = function loadCustomForms() {
      var self = this;

      var uId = self.item.options.userId;
      var url = 'goforms/notemenu?userId=' + uId;
      self.data.getWithUrl(url, function (data) {
        self.forms = data;
      });
    };

    return OrdersSidebarItem;
  }()) || _class);
});;
define('text!go/sidebarItems/ordersSidebarItem.html',[],function(){return "<template><style>.sidebar-item-disabled .nav-link{color:#adb5bd;pointer-events:none;background-color:#fff}</style><li if.bind=\"!item.moreMenu\" id=\"toolbar-workflow\" style=\"height:65px;width:71px\" class=\"${item.disabled ? 'sidebar-item-disabled' : ''}\"><div class=\"dropdown\"><a href=\"#\" class=\"nav-link py-3 dropdown-toggle\" role=\"button\" title=\"Orders\" data-toggle=\"dropdown\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\"><i class=\"fa fa-sticky-note-o fa-2x\"></i></a><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\"><a href=\"#\" click.delegate=\"togglePicker('returnto')\" class=\"dropdown-item\">Return To... </a><a href=\"#\" click.delegate=\"togglePicker('ptOrder')\" class=\"dropdown-item\">Therapy Order </a><a href=\"#\" click.delegate=\"togglePicker('surgerySchedule')\" class=\"dropdown-item\">Surgery Schedule </a><a repeat.for=\"f of forms\" href=\"#\" click.delegate=\"openGoForm(f)\" class=\"dropdown-item\"> ${f.Description} </a></div></div></li><div if.bind=\"item.moreMenu\" style=\"height:67px;width:71px;background-color:#f8f9fa;border:1px solid #dee2e6\" class=\"${item.disabled ? 'sidebar-item-disabled' : ''}\"><div class=\"dropdown\"><a href=\"#\" class=\"nav-link py-3 dropdown-toggle\" role=\"button\" title=\"Orders\" data-toggle=\"dropdown\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\"><i class=\"fa fa-sticky-note-o fa-2x\"></i></a><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\"><a href=\"#\" click.delegate=\"togglePicker('returnto')\" class=\"dropdown-item\">Return to... </a><a href=\"#\" click.delegate=\"togglePicker('ptOrder')\" class=\"dropdown-item\">Therapy Order </a><a href=\"#\" click.delegate=\"togglePicker('surgerySchedule')\" class=\"dropdown-item\">Surgery Schedule </a><a repeat.for=\"f of forms\" href=\"#\" click.delegate=\"openGoForm(f)\" class=\"dropdown-item\"> ${f.Description} </a></div></div></div></template>";});;
define('go/sidebarItems/rxSidebarItem',["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var RxSidebarItem = exports.RxSidebarItem = function () {
    function RxSidebarItem() {
      _classCallCheck(this, RxSidebarItem);

      this.item = null;
    }

    RxSidebarItem.prototype.activate = function activate(item) {
      this.item = item;
    };

    return RxSidebarItem;
  }();
});;
define('text!go/sidebarItems/rxSidebarItem.html',[],function(){return "<template><li if.bind=\"!item.moreMenu\" id=\"toolbar-prescription\" style=\"height:65px;width:71px\" class=\"prescription ${!erxEnabled ? 'disabled' : ''}\"><div class=\"dropdown\"><a class=\"btn border-top py-3\" href=\"#\" title=\"Prescription Writer\" role=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\" click.trigger=\"drfirstDropdownClicked()\"><svg id=\"toolbar-prescription-icon\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" style=\"fill:#007bff\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 1000 1000\" enable-background=\"new 0 0 1000 1000\" xml:space=\"preserve\" width=\"70%\" height=\"70%\"><g><g transform=\"translate(0.000000,224.000000) scale(0.100000,-0.100000)\"><path d=\"M6866,2080.7c-140.2-35-394.3-140.2-569.5-227.8c-284.8-144.6-538.8-389.9-3031.6-2878.2C781-3513.8,531.2-3772.2,386.7-4057c-394.3-771-381.1-1686.7,35-2400.7C1083.2-7588,2511.4-7986.6,3703-7373.3c284.8,144.6,543.2,394.3,3031.6,2878.2c2484,2488.4,2733.7,2746.8,2878.3,3031.6c613.3,1191.6,214.7,2619.8-915.6,3281.3C8202.2,2107,7422.4,2220.9,6866,2080.7z M6993.1,1204.5C7220.9,981,7199,950.4,5994.2-250c-915.6-915.6-1125.9-1108.4-1226.7-1108.4c-170.9,0-337.3,179.6-337.3,359.2c0,127,109.5,254.1,1086.5,1226.7C6489.3,1204.5,6616.3,1314,6743.4,1314C6839.8,1314,6923,1279,6993.1,1204.5z M4758.8-3023.1l1226.7-1226.7L4912.2-5327.5c-591.4-591.4-1187.2-1160.9-1331.8-1270.5C2804.9-7189.4,1736-7036,1144.6-6256.2c-416.2,552-455.6,1296.7-100.8,1918.8c100.8,170.8,2396.3,2540.9,2462.1,2540.9C3523.4-1796.4,4084.2-2348.4,4758.8-3023.1z\"/></g></g></svg></a><div class=\"dropdown-menu\"><a class=\"dropdown-item ${patient.data.PatientID=='' ? 'disabled' : ''}\" href=\"#\" click.delegate=\"launchDrFirst('patient')\" title=\"Prescribe\"><svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" style=\"width:16px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 1000 1000\" enable-background=\"new 0 0 1000 1000\" xml:space=\"preserve\" width=\"70%\" height=\"70%\"><g><g transform=\"translate(0.000000,224.000000) scale(0.100000,-0.100000)\"><path d=\"M6866,2080.7c-140.2-35-394.3-140.2-569.5-227.8c-284.8-144.6-538.8-389.9-3031.6-2878.2C781-3513.8,531.2-3772.2,386.7-4057c-394.3-771-381.1-1686.7,35-2400.7C1083.2-7588,2511.4-7986.6,3703-7373.3c284.8,144.6,543.2,394.3,3031.6,2878.2c2484,2488.4,2733.7,2746.8,2878.3,3031.6c613.3,1191.6,214.7,2619.8-915.6,3281.3C8202.2,2107,7422.4,2220.9,6866,2080.7z M6993.1,1204.5C7220.9,981,7199,950.4,5994.2-250c-915.6-915.6-1125.9-1108.4-1226.7-1108.4c-170.9,0-337.3,179.6-337.3,359.2c0,127,109.5,254.1,1086.5,1226.7C6489.3,1204.5,6616.3,1314,6743.4,1314C6839.8,1314,6923,1279,6993.1,1204.5z M4758.8-3023.1l1226.7-1226.7L4912.2-5327.5c-591.4-591.4-1187.2-1160.9-1331.8-1270.5C2804.9-7189.4,1736-7036,1144.6-6256.2c-416.2,552-455.6,1296.7-100.8,1918.8c100.8,170.8,2396.3,2540.9,2462.1,2540.9C3523.4-1796.4,4084.2-2348.4,4758.8-3023.1z\"/></g></g></svg> Prescribe</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"launchDrFirst('message')\" title=\"Messages\"><i class=\"fa fa-comment\" aria-hidden=\"true\"></i> Messages</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"launchDrFirst('report')\" title=\"Reports\"><i class=\"fa fa-file-o\" aria-hidden=\"true\"></i> Reports</a></div></div></li><div if.bind=\"item.moreMenu\" id=\"toolbar-prescription\" style=\"height:67px;width:71px;background-color:#f8f9fa;border:1px solid #dee2e6\" class=\"prescription ${!erxEnabled ? 'disabled' : ''}\"><div class=\"dropdown\"><a class=\"btn border-top py-3\" href=\"#\" title=\"Prescription Writer\" role=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\" click.trigger=\"drfirstDropdownClicked()\"><svg id=\"toolbar-prescription-icon\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" style=\"fill:#007bff\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 1000 1000\" enable-background=\"new 0 0 1000 1000\" xml:space=\"preserve\" width=\"70%\" height=\"70%\"><g><g transform=\"translate(0.000000,224.000000) scale(0.100000,-0.100000)\"><path d=\"M6866,2080.7c-140.2-35-394.3-140.2-569.5-227.8c-284.8-144.6-538.8-389.9-3031.6-2878.2C781-3513.8,531.2-3772.2,386.7-4057c-394.3-771-381.1-1686.7,35-2400.7C1083.2-7588,2511.4-7986.6,3703-7373.3c284.8,144.6,543.2,394.3,3031.6,2878.2c2484,2488.4,2733.7,2746.8,2878.3,3031.6c613.3,1191.6,214.7,2619.8-915.6,3281.3C8202.2,2107,7422.4,2220.9,6866,2080.7z M6993.1,1204.5C7220.9,981,7199,950.4,5994.2-250c-915.6-915.6-1125.9-1108.4-1226.7-1108.4c-170.9,0-337.3,179.6-337.3,359.2c0,127,109.5,254.1,1086.5,1226.7C6489.3,1204.5,6616.3,1314,6743.4,1314C6839.8,1314,6923,1279,6993.1,1204.5z M4758.8-3023.1l1226.7-1226.7L4912.2-5327.5c-591.4-591.4-1187.2-1160.9-1331.8-1270.5C2804.9-7189.4,1736-7036,1144.6-6256.2c-416.2,552-455.6,1296.7-100.8,1918.8c100.8,170.8,2396.3,2540.9,2462.1,2540.9C3523.4-1796.4,4084.2-2348.4,4758.8-3023.1z\"/></g></g></svg></a><div class=\"dropdown-menu\"><a class=\"dropdown-item ${patient.data.PatientID=='' ? 'disabled' : ''}\" href=\"#\" click.delegate=\"launchDrFirst('patient')\"><svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" style=\"width:16px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 1000 1000\" enable-background=\"new 0 0 1000 1000\" xml:space=\"preserve\" width=\"70%\" height=\"70%\"><g><g transform=\"translate(0.000000,224.000000) scale(0.100000,-0.100000)\"><path d=\"M6866,2080.7c-140.2-35-394.3-140.2-569.5-227.8c-284.8-144.6-538.8-389.9-3031.6-2878.2C781-3513.8,531.2-3772.2,386.7-4057c-394.3-771-381.1-1686.7,35-2400.7C1083.2-7588,2511.4-7986.6,3703-7373.3c284.8,144.6,543.2,394.3,3031.6,2878.2c2484,2488.4,2733.7,2746.8,2878.3,3031.6c613.3,1191.6,214.7,2619.8-915.6,3281.3C8202.2,2107,7422.4,2220.9,6866,2080.7z M6993.1,1204.5C7220.9,981,7199,950.4,5994.2-250c-915.6-915.6-1125.9-1108.4-1226.7-1108.4c-170.9,0-337.3,179.6-337.3,359.2c0,127,109.5,254.1,1086.5,1226.7C6489.3,1204.5,6616.3,1314,6743.4,1314C6839.8,1314,6923,1279,6993.1,1204.5z M4758.8-3023.1l1226.7-1226.7L4912.2-5327.5c-591.4-591.4-1187.2-1160.9-1331.8-1270.5C2804.9-7189.4,1736-7036,1144.6-6256.2c-416.2,552-455.6,1296.7-100.8,1918.8c100.8,170.8,2396.3,2540.9,2462.1,2540.9C3523.4-1796.4,4084.2-2348.4,4758.8-3023.1z\"/></g></g></svg> Prescribe</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"launchDrFirst('message')\"><i class=\"fa fa-comment\" aria-hidden=\"true\"></i> Messages</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"launchDrFirst('report')\"><i class=\"fa fa-file-o\" aria-hidden=\"true\"></i> Reports</a></div></div></div></template>";});;
define('go/signature',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'lodash', 'moment', '../data/go/data', './home'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _data, _home) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Signature = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var Signature = exports.Signature = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home), _dec(_class = function () {
    function Signature(helper, http, Data, Home) {
      _classCallCheck(this, Signature);

      this.drawing = false;
      this.mousePos = {
        x: 0,
        y: 0
      };
      this.displayCancelButton = true;
      this.dontSave = false;

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
    }

    Signature.prototype.activate = function activate(params) {
      var self = this;

      self.lastPos = self.mousePos;

      if (params.hasOwnProperty("data")) {
        self.dialog = params.dialog;
        self.userId = params.data.UserID;
      } else {
        self.userId = params.userId;
      }
      if (params.hasOwnProperty("dialog")) {
        self.dialog = params.dialog;
      }
      if (params.hasOwnProperty("options")) {
        if (params.options.dontSave) {
          this.dontSave = params.options.dontSave;
        }
        if (params.options.displayCancelButton) {
          this.displayCancelButton = params.options.displayCancelButton;
        }
      }

      if (typeof self.helper.jwt() === 'undefined' || self.helper.jwt() == null) {
        if (params.hasOwnProperty("jwt")) {
          self.helper.processToken(params.jwt);

          self.displayCancelButton = false;
        }
      } else {}

      window.requestAnimFrame = function (callback) {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimaitonFrame || function (callback) {
          window.setTimeout(callback, 1000 / 60);
        };
      }();
    };

    Signature.prototype.renderCanvas = function renderCanvas() {
      var self = this;
      if (self.drawing) {
        self.ctx.moveTo(self.lastPos.x, self.lastPos.y);
        self.ctx.lineTo(self.mousePos.x, self.mousePos.y);
        self.ctx.stroke();
        self.lastPos = self.mousePos;
      }
    };

    Signature.prototype.getMousePos = function getMousePos(canvasDom, mouseEvent) {
      var rect = canvasDom.getBoundingClientRect();
      return {
        x: mouseEvent.clientX - rect.left,
        y: mouseEvent.clientY - rect.top
      };
    };

    Signature.prototype.getTouchPos = function getTouchPos(canvasDom, touchEvent) {
      var rect = canvasDom.getBoundingClientRect();
      return {
        x: touchEvent.touches[0].clientX - rect.left,
        y: touchEvent.touches[0].clientY - rect.top
      };
    };

    Signature.prototype.submit = function submit() {
      var self = this;

      if (self.dontSave) {
        self.dialog.close(true, self.sigcanvas.toDataURL());
        return;
      }

      if (self.signature == undefined || self.signature.Id == 0) {
        self.data.getWithUrl('signatures/new', function (newSig) {

          newSig.Data = self.sigcanvas.toDataURL();
          newSig.Id = self.userId;

          self.data.postWithUrlAndData('signatures', JSON.stringify(newSig), function (saveRes) {});
        });
      } else {
        self.signature.Data = self.sigcanvas.toDataURL();
        self.data.putWithUrlAndData('signatures', self.signature, function (updateRes) {});
      }
    };

    Signature.prototype.clear = function clear() {
      this.sigcanvas.width = this.sigcanvas.width;
    };

    Signature.prototype.cancel = function cancel() {
      this.dialog.cancel();
    };

    Signature.prototype.attached = function attached() {

      var self = this;
      self.ctx = self.sigcanvas.getContext("2d");
      self.ctx.strokeStyle = "#222222";
      self.ctx.lineWidth = 4;

      var uxBody = $('ux-dialog-body');
      if (uxBody.length > 0) {
        uxBody[0].style.removeProperty('overflow-y');
      }

      $("body").css("overflow", 'hidden');

      (function drawLoop() {
        requestAnimFrame(drawLoop);
        self.renderCanvas();
      })();

      self.sigcanvas.addEventListener("mousedown", function (e) {
        self.drawing = true;
        self.lastPos = self.getMousePos(self.sigcanvas, e);
      }, false);

      self.sigcanvas.addEventListener("mouseup", function (e) {
        self.drawing = false;
      }, false);

      self.sigcanvas.addEventListener("mousemove", function (e) {
        self.mousePos = self.getMousePos(self.sigcanvas, e);
      }, false);

      self.sigcanvas.addEventListener("touchmove", function (e) {
        var touch = e.touches[0];
        var me = new MouseEvent("mousemove", {
          clientX: touch.clientX,
          clientY: touch.clientY
        });
        self.sigcanvas.dispatchEvent(me);
      }, false);

      self.sigcanvas.addEventListener("touchstart", function (e) {
        self.mousePos = self.getTouchPos(self.sigcanvas, e);
        var touch = e.touches[0];
        var me = new MouseEvent("mousedown", {
          clientX: touch.clientX,
          clientY: touch.clientY
        });
        self.sigcanvas.dispatchEvent(me);
      }, false);

      self.sigcanvas.addEventListener("touchend", function (e) {
        var me = new MouseEvent("mouseup", {});
        self.sigcanvas.dispatchEvent(me);
      }, false);

      if (self.userId) {
        self.data.getWithUrl('users/' + self.userId, function (res) {
          if (res.OD_Signature) {
            self.signature = res.OD_Signature;
            self.loadSignature(self.signature.Data);
          }
        });
      }
    };

    Signature.prototype.loadSignature = function loadSignature(data) {
      var self = this;
      var ctx = self.sigcanvas.getContext("2d");
      var image = new Image();

      var finalStrData = 'data:image/';

      if (data.substring(0, 6) == 'R0lGOD') {
        finalStrData += 'gif;base64,' + data;
      } else {
        finalStrData += 'png;base64,' + data;
      }

      image.src = finalStrData;
      image.onload = function () {
        ctx.drawImage(this, 0, 0, self.sigcanvas.width, self.sigcanvas.height);
      };
    };

    return Signature;
  }()) || _class);
});;
define('text!go/signature.html',[],function(){return "<template><style>.sig-canvas{border:2px dotted #ccc;border-radius:15px;cursor:crosshair}</style><div class=\"row\"><div class=\"col-md-12\"><canvas ref=\"sigcanvas\" class=\"sig-canvas\" width=\"620\" height=\"160\">Get a better browser, bro.</canvas></div></div><div class=\"row justify-content-around\"><button class=\"btn btn-primary\" click.delegate=\"submit()\">Submit</button> <button class=\"btn btn-outline-secondary\" click.delegate=\"clear()\">Clear</button> <button if.bind=\"displayCancelButton\" class=\"btn btn-secondary\" click.delegate=\"cancel()\">Cancel</button></div></template>";});;
define('go/submitCharges',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'lodash', 'moment', '../data/go/data', './home'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _data, _home) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SubmitCharges = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var PatientRow = function () {
    function PatientRow(data) {
      _classCallCheck(this, PatientRow);

      this.data = data;
      this.date = (0, _moment2.default)(data.VisitDate).format('MM/DD/YYYY');
      this.displayDetails = false;
      this.details = [];
      this.selected = false;
    }

    PatientRow.prototype.select = function select() {
      this.selected = this.selected ? false : true;
    };

    PatientRow.prototype.toggleDetails = function toggleDetails() {
      this.displayDetails = this.displayDetails ? false : true;
    };

    return PatientRow;
  }();

  var SubmitCharges = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home), _dec(_class = (_class2 = function () {
    function SubmitCharges(helper, http, Data, Home) {
      _classCallCheck(this, SubmitCharges);

      _initDefineProp(this, 'startdatepicker', _descriptor, this);

      _initDefineProp(this, 'enddatepicker', _descriptor2, this);

      _initDefineProp(this, 'startdate', _descriptor3, this);

      _initDefineProp(this, 'enddate', _descriptor4, this);

      this.filterTypes = ['Pending', 'Submitted', 'All'];
      this.rows = [];
      this.allSelected = false;
      this.selectAllString = "Select";
      this.displayFilters = false;
      this.filterBy = 'all';
      this.providers = [];
      this.selectedProvider = null;

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
    }

    SubmitCharges.prototype.startdateChanged = function startdateChanged(newVal, oldVal) {
      var self = this;
      if (self.displayFilters) {
        self.filter(self.filterBy);
      }
    };

    SubmitCharges.prototype.trySelectLoggedInUser = function trySelectLoggedInUser() {
      var self = this;

      var userId = self.helper._user.UserID;
      var aProvider = _.find(self.providers, function (p) {
        return p.UserID == userId;
      });
      if (aProvider != undefined) {
        self.selectedProvider = aProvider;
      } else {
        self.selectedProvider = self.providers[0];
      }
      self.providerSelected();
    };

    SubmitCharges.prototype.enddateChanged = function enddateChanged(newVal, oldVal) {
      var self = this;
      if (self.displayFilters) {
        self.filter(self.filterBy);
      }
    };

    SubmitCharges.prototype.activate = function activate(model) {
      var self = this;

      self.providers = model.providers;

      self.selectedStatusFilter = self.filterTypes[0];

      self.trySelectLoggedInUser();
    };

    SubmitCharges.prototype.providerSelected = function providerSelected() {
      this.filter(this.filterBy);
    };

    SubmitCharges.prototype.toggleFilters = function toggleFilters() {
      this.displayFilters = this.displayFilters ? false : true;
    };

    SubmitCharges.prototype.filterTypeSelected = function filterTypeSelected(t) {
      this.selectedStatusFilter = t;
      this.filter(this.filterBy);
    };

    SubmitCharges.prototype.filter = function filter(_filter) {
      this.filterBy = _filter;

      if (_filter == 'date') {
        this.getChargesWithDateRange(this.startdate, this.enddate);
      } else if (_filter == 'status') {
        this.getChargesWithStatus(this.selectedStatusFilter);
      } else {
        this.getChargesWithDateRangeAndStatus(this.startdate, this.enddate, this.selectedStatusFilter);
      }
    };

    SubmitCharges.prototype.showDetails = function showDetails(row) {
      row.toggleDetails();
      if (row.details.length == 0) {
        this.getChargeDetails(row.data.VisitCodeID, function (res) {
          row.details = res.Details;
        });
      }
    };

    SubmitCharges.prototype.getChargeDetails = function getChargeDetails(visitId, callback) {
      var self = this;
      var detailUrl = 'charges/detail?visitId=' + visitId;
      self.data.getWithUrl(detailUrl, function (detail) {
        callback(detail);
      });
    };

    SubmitCharges.prototype.getCharges = function getCharges() {
      var self = this;
      self.rows = [];
      self.data.getWithUrl('charges/all', function (res) {
        for (var i = 0; i < res.length; i++) {
          var aRow = new PatientRow(res[i]);
          self.rows.push(aRow);
        }
      });
    };

    SubmitCharges.prototype.getChargesWithDateRange = function getChargesWithDateRange(fromDate, toDate) {
      var self = this;
      var url = 'charges?fromDate=' + fromDate + '&toDate=' + toDate;
      self.rows = [];
      self.data.getWithUrl(url, function (res) {

        self.addFilterResults(res);
      });
    };

    SubmitCharges.prototype.getChargesWithStatus = function getChargesWithStatus(status) {
      var self = this;
      self.rows = [];

      if (status == 'All') {
        self.getCharges();
      } else {
        var url = 'charges?status=' + status;
        self.data.getWithUrl(url, function (res) {
          self.addFilterResults(res);
        });
      }
    };

    SubmitCharges.prototype.getChargesWithDateRangeAndStatus = function getChargesWithDateRangeAndStatus(fromDate, toDate, status) {
      var self = this;
      self.rows = [];
      var url = 'charges?fromDate=' + fromDate + '&toDate=' + toDate + '&status=' + status;
      self.data.getWithUrl(url, function (res) {
        self.addFilterResults(res);
      });
    };

    SubmitCharges.prototype.filterResultsWithSelectedProvider = function filterResultsWithSelectedProvider(results) {
      var self = this;
      if (self.selectedProvider && self.selectedProvider.ProviderID != 0) {
        return _.filter(results, function (p) {
          return p.ProviderName.toLowerCase() == self.selectedProvider.ProviderEntity.toLowerCase();
        });
      } else {
        return results;
      }
    };

    SubmitCharges.prototype.addFilterResults = function addFilterResults(results) {
      var self = this;

      var filtered = self.filterResultsWithSelectedProvider(results);

      for (var i = 0; i < filtered.length; i++) {
        var aRow = new PatientRow(filtered[i]);
        self.rows.push(aRow);
      }
    };

    SubmitCharges.prototype.selectAll = function selectAll() {
      this.allSelected = this.allSelected ? false : true;
      this.selectAllString = this.allSelected ? "Deselect" : "Select";
      for (var i = 0; i < this.rows.length; i++) {
        this.rows[i].selected = this.allSelected;
      }
    };

    SubmitCharges.prototype.submitChargesClick = function submitChargesClick() {
      var self = this;

      var _loop = function _loop(i) {
        if (!self.rows[i].selected) return 'continue';

        var rData = self.rows[i].data;
        var obj = {
          VisitID: rData.VisitCodeID,
          ScheduleID: rData.ScheduleID,
          ForeignScheduleID: rData.ForeignScheduleID,
          ForeignLocationID: rData.ForeignLocationID
        };

        self.data.postWithUrlAndData('charges/submit', JSON.stringify(obj), function (res) {
          if (res == 'Submitted') {
            rData.Status = res;
          } else {}
        });
      };

      for (var i = 0; i < self.rows.length; i++) {
        var _ret = _loop(i);

        if (_ret === 'continue') continue;
      }
    };

    return SubmitCharges;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'startdatepicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'enddatepicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'startdate', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return (0, _moment2.default)().format('MM/DD/YYYY');
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, 'enddate', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return (0, _moment2.default)().format('MM/DD/YYYY');
    }
  })), _class2)) || _class);
  exports.SubmitCharges = SubmitCharges;
});;
define('text!go/submitCharges.html',[],function(){return "<template><div class=\"card h-100\" style=\"box-shadow:2px 5px .25rem rgba(0,0,0,.3)\"><div class=\"card-header pl-3 pr-2\"><div class=\"d-flex align-items-center\"><h4 class=\"pr-2\" style=\"display:inline-block;margin-bottom:0\"><i class=\"fa fa-usd mr-2\"></i>Submit Charges</h4><div class=\"form-group mb-0 pr-1\"><select ref=\"providerpicker\" value.bind=\"selectedProvider\" class=\"form-control\" id=\"exampleFormControlSelect1\" change.delegate=\"providerSelected()\"><option model.bind=\"null\">provider...</option><option scheduleprovider repeat.for=\"p of providers\" model.bind=\"p\">${p.ProviderEntity}</option></select></div><button type=\"button\" class=\"btn btn-outline-primary btn-sm\" click.delegate=\"toggleFilters()\"><i class=\"fa fa-filter pr-1\"></i>Filter</button> <i class=\"fa fa-close fa-2x ml-auto pr-2\" click.delegate=\"cancel()\"></i></div><div if.bind=\"displayFilters\" class=\"d-flex align-items-center pt-2\"><small class=\"pr-2 font-weight-bold\">Filter visits between:</small><abp-datetime-picker class=\"mr-1\" style=\"width:110px\" icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"startdatepicker\" value.bind=\"startdate\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker><small class=\"pr-1 font-weight-bold\">and</small><abp-datetime-picker class=\"mr-4\" style=\"width:110px\" icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"enddatepicker\" value.bind=\"enddate\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker><small class=\"pr-2 font-weight-bold\">Status:</small><div class=\"dropdown\"><button class=\"btn btn-outline-primary btn-sm dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-expanded=\"false\"> ${selectedStatusFilter} </button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><a repeat.for=\"t of filterTypes\" class=\"dropdown-item\" href=\"#\" click.delegate=\"filterTypeSelected(t)\">${t}</a></div></div><div class=\"dropdown\"><button class=\"dropdown-toggle\" style=\"border:none;background-color:transparent\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-filter text-primary fa-2x\"></i></button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><h6 class=\"dropdown-header\">Filter By...</h6><a class=\"dropdown-item\" href=\"#\" click.delegate=\"filter('date')\">Date Range</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"filter('status')\">Status</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"filter('all')\">Both</a></div></div></div></div><small class=\"d-block px-2 pt-2 text-muted\">Check each row you wish to submit. Only encounters with a selected visit code will display here!</small><div class=\"card-body p-0\" style=\"overflow-y:scroll\"><div repeat.for=\"r of rows\" class=\"card mx-2 mt-2 mb-0\"><div class=\"card-body mb-0 p-0\"><div class=\"d-flex align-items-center ${r.data.Status=='Pending' ? 'alert-warning' : 'alert-success'} px-2 py-1\"><i class=\"fa ${r.selected ? 'fa-check-square-o' : 'fa-square-o'} fa-2x pr-2\" aria-hidden=\"true\" click.delegate=\"r.select()\"></i><div class=\"pr-4 font-weight-bold\" click.delegate=\"showDetails(r)\"><i class=\"fa fa-calendar-o pr-1\" aria-hidden=\"true\"></i>${r.date}</div><div class=\"pr-4\" click.delegate=\"showDetails(r)\"><strong>${r.data.PatientName}</strong></div><div class=\"pr-2 flex-grow-1 text-muted\" click.delegate=\"showDetails(r)\">${r.data.ProviderName}</div><div class=\"pr-2 text-uppercase\" click.delegate=\"showDetails(r)\">${r.data.Status}</div><i class=\"fa ${r.displayDetails ? 'fa-angle-down' : 'fa-angle-up'} fa-2x pr-2\" aria-hidden=\"true\" click.delegate=\"showDetails(r)\"></i></div><div if.bind=\"r.displayDetails\" class=\"container\"><div repeat.for=\"deet of r.details\" class=\"row py-1\"><div class=\"col-md-12\"><template repeat.for=\"i of deet.Items\"><template if.bind=\"$index == 0\"><div class=\"row\" style=\"background-color:#f2f2f2\"><div class=\"col-md-2 font-weight-bold alert-secondary h4 my-0 py-1\"><i class=\"fa fa-usd pr-2 text-success\" aria-hidden=\"true\"></i>${i.Code}</div><div class=\"col-md-10 alert-secondary h4 my-0 py-1\">${i.Description}</div><template if.bind=\"i.Modifier || i.Units\"><div class=\"col-md-2 h6 my-0 py-1\"></div><div class=\"col-md-2 h6 my-0 py-1\"><div class=\"d-inline-block pr-2\" if.bind=\"i.Modifier\">Modifier: ${i.Modifier}</div></div><div class=\"col-md-8 h6 my-0 py-1\"><div class=\"d-inline-block\" if.bind=\"i.Units\">Units: ${i.Units}</div></div></template></div></template><template if.bind=\"$index != 0\"><div class=\"row\"><div class=\"col-md-2 h6\"></div><div class=\"col-md-2 font-weight-bold h6\">${i.Code}</div><div class=\"col-md-8 h6\">${i.Description}</div></div></template></template></div></div></div></div></div><div if.bind=\"rows.length == 0\" class=\"card mx-2 mt-2 mb-0\"><div class=\"card-body h5 mb-0 p-2\"><div class=\"d-flex align-items-center justify-content-center\"><div class=\"text-secondary\">No Charges Found.</div></div></div></div></div><div class=\"card-footer\"><button type=\"button\" class=\"btn btn-outline-primary\" click.delegate=\"selectAll()\"><i class=\"fa ${allSelected ? 'fa-square-o': 'fa-check-square-o'} pr-1\" aria-hidden=\"true\"></i>${selectAllString} All</button> <button type=\"button\" class=\"btn btn-primary float-right\" click.delegate=\"submitChargesClick()\">Submit</button></div></div></template>";});;
define('go/surgerySchedule',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'lodash', 'moment', '../data/go/data', './home', './popupHelper'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _data, _home, _popupHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SurgerySchedule = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Od_Patient_Px = function Od_Patient_Px(code, description, patientId, providerId, userId) {
    _classCallCheck(this, Od_Patient_Px);

    this.CptCode = code;
    this.CodeDescr = description;
    this.BodyPart = null;
    this.BodySide = null;
    this.SurgID = null;
    this.ProcedureID = null;
    this.Modifier = null;
    this.Type = null;
    this.UserID = userId;
    this.PatientCPTID = null;
    this.ExamDateTime = null;
    this.ProviderID = providerId;
    this.PatientID = patientId;
    this.JCodeUnits = null;
  };

  var OD_Patient_Dx = function OD_Patient_Dx(code, description, patientId, providerId, userId) {
    _classCallCheck(this, OD_Patient_Dx);

    this.PatientDxCode = code;
    this.PatientDxDescription = description;
    this.PatientID = patientId;
    this.ProviderID = providerId;
    this.UserID = userId;
    this.ExamDateTime = null;
    this.PatientDXID = null;
    this.BodyPart = null;
    this.BodySide = null;
    this.SurgID = null;
    this.Status = "A";
    this.FromIcd10First = 0;
  };

  var PxDx = function PxDx(id, code, description, data) {
    _classCallCheck(this, PxDx);

    this.id = id;
    this.code = code;
    this.description = description;
    this.data = data;
    this.modifier;
  };

  var SurgeryObject = function () {
    function SurgeryObject(px, dx) {
      _classCallCheck(this, SurgeryObject);

      this.procedure = px;
      this.diagnosis = dx;
      this.bodyside = null;
      this.bodypart = null;
      this.index = null;
    }

    SurgeryObject.prototype.setBodyside = function setBodyside(side) {
      this.bodyside = side;
    };

    SurgeryObject.prototype.setBodypart = function setBodypart(part) {
      this.bodypart = part;
    };

    return SurgeryObject;
  }();

  var SurgeryObject2 = function () {
    function SurgeryObject2() {
      _classCallCheck(this, SurgeryObject2);

      this.procedures = [];
      this.diagnosis = [];
      this.bodyside = null;
      this.bodypart = null;
      this.index = null;
    }

    SurgeryObject2.prototype.setBodyside = function setBodyside(side) {
      this.bodyside = side;
    };

    SurgeryObject2.prototype.setBodypart = function setBodypart(part) {
      this.bodypart = part;
    };

    return SurgeryObject2;
  }();

  var SurgerySchedule = exports.SurgerySchedule = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home, _popupHelper.PopupHelper), _dec(_class = (_class2 = function () {
    SurgerySchedule.prototype.selectedPrefChanged = function selectedPrefChanged(newVal, oldVal) {
      if (newVal && newVal.hasOwnProperty("Surgery")) {
        this.surgeries = [];
        this.addSurgeryDetails(newVal);
      }
    };

    function SurgerySchedule(helper, http, Data, Home, PopupHelper) {
      _classCallCheck(this, SurgerySchedule);

      this.preferences = [];

      _initDefineProp(this, 'selectedPref', _descriptor, this);

      _initDefineProp(this, 'datepicker', _descriptor2, this);

      _initDefineProp(this, 'surgeryDateTime', _descriptor3, this);

      this.durationTimes = ['.5 hr', '1 hr', '1.5 hr', '2 hr', '2.5 hr', '3 hr'];

      this.surgeonMatcher = function (a, b) {
        return a != null && b != null && a.ProviderEntity == b;
      };

      this.surgeons = [];

      this.assistantMatcher = function (a, b) {
        return a != null && b != null && a.ProviderEntity == b;
      };

      this.assistants = [];
      this.positionList = ['Supine', 'Prone', 'Lateral'];
      this.admissionList = ['Inpatient', 'Outpatient', 'Outpatient with Overnight Stay', 'Overnight Procedure'];

      this.anesthesiaMatcher = function (a, b) {
        return a != null && b != null && a.Description1 == b;
      };

      this.anesthesiaList = [];

      this.locationMatcher = function (a, b) {
        return a != null && b != null && a.LocationName == b;
      };

      this.locationsList = [];
      this.surgeries = [];
      this.modlist = [];
      this.bodySides = ["Right", "Left", "None"];
      this.hxDxs = [];
      this.OD_Surg_Schedule = null;

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
      this.popupHelper = PopupHelper;
    }

    SurgerySchedule.prototype.activate = function activate(params) {
      var self = this;

      self.bodyParts = self.data.bodyparts;

      self.popupHelper = params.popupHelper;

      self.patientId = params.currentBoard.visitInfo.patientId;
      self.date = params.currentBoard.visitInfo.date;
      self.providerId = params.currentBoard.visitInfo.providerId;
      self.userId = params.currentBoard.userId;

      if (params.currentBoard && params.currentBoard.visitInfo) {
        self.bodypart = params.currentBoard.visitInfo.bodypart;
        self.bodyside = params.currentBoard.visitInfo.bodyside;
      }

      var bodypartList = [];
      for (var i = 0; i < self.bodyParts.length; i++) {
        var pItm = self.data.getGenericPicklistItem(self.bodyParts[i]);
        bodypartList.push(pItm);
      }
      self.bodyParts = bodypartList;

      var bodysideList = [];
      for (var _i = 0; _i < self.bodySides.length; _i++) {
        var _pItm = self.data.getGenericPicklistItem(self.bodySides[_i]);
        bodysideList.push(_pItm);
      }
      self.bodySides = bodysideList;

      self.getPreferences();

      self.load();
    };

    SurgerySchedule.prototype.openBodypartPicker = function openBodypartPicker(surgeryObject) {
      var self = this;
      self.popupHelper.openGenericPicklistPop("Bodypart", 'Select bodypart...', self.bodyParts, false, function (res) {
        surgeryObject.bodypart = res.item.description;
      });
    };

    SurgerySchedule.prototype.openBodysidePicker = function openBodysidePicker(surgeryObject) {
      var self = this;
      self.popupHelper.openGenericPicklistPop("Bodyside", 'Select bodyside...', self.bodySides, false, function (res) {
        surgeryObject.bodyside = res.item.description;
      });
    };

    SurgerySchedule.prototype.loadModifierList = function loadModifierList(callback) {
      var self = this;

      self.data.getListWithListTypeDescription2AndProviderId('Miscellaneous', 'Modifiers', self.providerId, function (res) {
        if (res.length > 0) {
          for (var i = 0; i < res.length; i++) {
            var oItm = self.data.getGenericPicklistItem(res[i].Description1, res[i]);
            oItm.selected = false;
            self.modlist.push(oItm);
          }
          callback();
        } else {
          self.addDefaultPtModifiers(self.board.visitInfo.visitType);
          callback();
        }
      });
    };

    SurgerySchedule.prototype.addDefaultPtModifiers = function addDefaultPtModifiers(visitType) {
      var self = this;
      if (visitType.toLowerCase() == 'pt visit') {
        var pList = ['GP', 'GA', 'GX', 'GY', 'KX', 'CQ', '59'];

        var _loop = function _loop(i) {
          var pItm = self.data.getGenericPicklistItem(pList[i], null);
          pItm.selected = false;
          exists = _.find(self.modlist, function (m) {
            return m.description == pItm.description;
          });

          if (!exists) {
            self.modlist.push(pItm);
          }
        };

        for (var i = 0; i < pList.length; i++) {
          var exists;

          _loop(i);
        }
      } else if (visitType.toLowerCase() == 'ot visit') {
        var oList = ['GO', 'CO', 'KX', 'GA', '59'];

        var _loop2 = function _loop2(i) {
          var oItm = self.data.getGenericPicklistItem(oList[i], null);
          oItm.selected = false;
          exists = _.find(self.modlist, function (m) {
            return m.description == oItm.description;
          });

          if (!exists) {
            self.modlist.push(oItm);
          }
        };

        for (var i = 0; i < oList.length; i++) {
          var exists;

          _loop2(i);
        }
      }
    };

    SurgerySchedule.prototype.selectModifiersWithModiferString = function selectModifiersWithModiferString(str) {
      var self = this;

      if (str == null) return;

      var splitMods = str.split(',');

      _.forEach(self.modlist, function (m) {
        m.selected = false;
      });

      var _loop3 = function _loop3(i) {
        var found = _.find(self.modlist, function (m) {
          return m.description == splitMods[i];
        });
        if (found) {
          found.selected = true;
        }
      };

      for (var i = 0; i < splitMods.length; i++) {
        _loop3(i);
      }
    };

    SurgerySchedule.prototype.openModPicker = function openModPicker(px) {
      var self = this;
      self.selectModifiersWithModiferString(px.modifier);
      self.popupHelper.openGenericMultiTabPickerPopup("Select a modifier", "Modifier", self.modlist, false, function (res) {
        var r = res;
        var modStr = "";
        for (var i = 0; i < res.items.length; i++) {
          modStr += res.items[i].description + ",";
        }
        if (modStr.length > 0) {
          modStr = modStr.substring(0, modStr.length - 1);
        }
        px.modifier = modStr;
      });
    };

    SurgerySchedule.prototype.newSurgeryRow = function newSurgeryRow() {
      var self = this;
      var surgObj = new SurgeryObject2();

      if (self.surgeries.length == 0) {
        surgObj.index = 1;
      } else {
        var lastIndex = -1;
        for (var i = 0; i < self.surgeries.length; i++) {
          if (self.surgeries[i].index > lastIndex) {
            lastIndex = self.surgeries[i].index;
          }
        }
        surgObj.index = lastIndex += 1;
      }

      surgObj.bodypart = self.bodypart;
      surgObj.bodyside = self.bodyside;

      self.surgeries.splice(0, 0, surgObj);
    };

    SurgerySchedule.prototype.openPxPicker = function openPxPicker(surgery) {
      var self = this;
      self.popupHelper.openProcedureSearchPop('SURGERY', false, function (pxs) {
        if (pxs.length > 0) {
          for (var i = 0; i < pxs.length; i++) {
            var px = new PxDx(0, pxs[i].data.CptKey, pxs[i].data.Description, pxs[i].data);
            surgery.procedures.push(px);
          }
        }
      });
    };

    SurgerySchedule.prototype.openDxPicker = function openDxPicker(surgery) {
      var self = this;
      var ops = {
        initialDiagnosis: self.hxDxs
      };
      self.popupHelper.openDxPop(self.bodypart, self.bodyside, ops, function (res) {
        if (res.length > 0) {
          for (var i = 0; i < res.length; i++) {
            var dx = new PxDx(0, res[i].code, res[i].description, res[i].data);
            surgery.diagnosis.push(dx);
          }
        }
      });
    };

    SurgerySchedule.prototype.getHistoricalDxs = function getHistoricalDxs() {
      var self = this;
      var url = 'patientdiagnosis?patientId=' + self.patientId + "&status=";
      self.data.getWithUrl(url, function (res) {
        var grp = _.groupBy(res, "PatientDxCode");
        var vals = Object.values(grp);
        var temp = [];
        for (var i = 0; i < vals.length; i++) {
          temp.push(vals[i][0]);
        }

        self.hxDxs = _.orderBy(temp, "PatientDxCode");
      });
    };

    SurgerySchedule.prototype.openCalendar = function openCalendar() {
      this.datepicker.methods.toggle();
    };

    SurgerySchedule.prototype.durationTimeClicked = function durationTimeClicked(d) {
      this.OD_Surg_Schedule.Surg_Duration = d;
    };

    SurgerySchedule.prototype.getSurPrefProceduresAndDiagnosisListFromForm = function getSurPrefProceduresAndDiagnosisListFromForm() {
      var surgPref = {
        Surgery: null,
        ProceduresAndDiagnosis: []
      };

      var OD_SurgSched_Pref = {
        SurgPrefDesc: this.selectedPref.Surgery.SurgPrefDesc,
        ProcID: this.selectedPref.Surgery.ProcID,
        Surgeon: this.OD_Surg_Schedule.Surgeon,
        Assistant: this.OD_Surg_Schedule.Assistant.ProviderEntity,
        SurgAnesthesia: this.OD_Surg_Schedule.SurgAnesthesia,
        SurgLocation: this.OD_Surg_Schedule.SurgLocation,
        BodyPart: this.OD_Surg_Schedule.BodyPart,
        BodySide: this.OD_Surg_Schedule.BodySide,
        ProviderID: this.OD_Surg_Schedule.ProviderID,
        Comments: this.OD_Surg_Schedule.Comments,
        LO_txt: this.OD_Surg_Schedule.LO_txt,
        Equip_PositionPatient: this.OD_Surg_Schedule.Equip_PositionPatient,
        AuthorizeNumber: this.OD_Surg_Schedule.AuthorizeNumber,
        Admission: this.OD_Surg_Schedule.Admission
      };

      surgPref.Surgery = OD_SurgSched_Pref;

      for (var i = 0; i < this.surgeries.length; i++) {
        var pxDxList = {
          Diagnosis: [],
          Procedures: [],
          BodypartSide: null
        };

        var aSurg = this.surgeries[i];

        pxDxList.BodypartSide = { Bodypart: aSurg.bodypart, Bodyside: aSurg.bodyside };

        for (var s = 0; s < aSurg.procedures.length; s++) {
          var aPx = aSurg.procedures[s];

          var OD_Patient_Px = {
            CptCode: aPx.code,
            CodeDescr: aPx.description,
            Modifier: aPx.modifier,
            PatientID: this.patientId,
            Od_Patient_Px_Sno: null
          };
          pxDxList.Procedures.push(OD_Patient_Px);
        }

        for (var d = 0; d < aSurg.diagnosis.length; d++) {
          var aDx = aSurg.diagnosis[d];

          var _OD_Patient_Dx = {
            PatientDxCode: aDx.code,
            PatientDxDescription: aDx.description,
            ExamDateTime: this.date,
            PatientID: this.patientId,
            FromIcd10First: false,
            OD_Patient_Dx_Sno: null
          };
          pxDxList.Diagnosis.push(_OD_Patient_Dx);
        }

        surgPref.ProceduresAndDiagnosis.push(pxDxList);
      }

      return surgPref;
    };

    SurgerySchedule.prototype.createPref = function createPref() {
      var self = this;
      var url = 'schedule/surgery/pref';

      self.popupHelper.openGenericInputPop('Create New Preference', ['Description'], null, false, function (res) {

        var pref = self.getSurPrefProceduresAndDiagnosisListFromForm();
        pref.Surgery.SurgPrefDesc = res.inputs[0].value;
        var dialog = self.helper.createNoty("Saving Preference...", 1000);
        dialog.show();

        self.data.postWithUrlAndData(url, JSON.stringify(pref), function (postRes) {
          dialog.close();
          self.preferences.push(postRes);
        });
      });
    };

    SurgerySchedule.prototype.updatePref = function updatePref() {
      var self = this;
      var url = 'schedule/surgery/pref/update';

      if (!self.selectedPref) {
        self.popupHelper.openGenericMessagePop('Please select a preference to update.', 'Save Preference Requirements', ['OK'], true, function (res) {});
        return;
      }

      var dialog = self.helper.createNoty("Updating Preference...", 1000);
      dialog.show();

      var pref = self.getSurPrefProceduresAndDiagnosisListFromForm();

      self.data.postWithUrlAndData(url, JSON.stringify(pref), function (putRes) {

        dialog.close();
      });
    };

    SurgerySchedule.prototype.getPreferences = function getPreferences() {
      var self = this;
      self.data.getWithUrl('schedule/surgery/pref?providerId=' + self.providerId, function (res) {
        self.preferences = res;
      });
    };

    SurgerySchedule.prototype.postNewPx = function postNewPx(procedure, bodypart, bodyside, surgId) {
      var self = this;

      var px = new Od_Patient_Px(procedure.code, procedure.description, self.patientId, self.providerId, self.userId);
      px.BodyPart = bodypart;
      px.BodySide = bodyside;
      px.ExamDateTime = self.date;
      px.Type = procedure.data.Type;
      px.Modifier = procedure.modifier;
      px.SurgID = surgId;
      px.ProcedureID = procedure.data.ProcedureID;

      self.data.postWithUrlAndData('patientprocedures', JSON.stringify(px), function (res) {
        if (res) {
          procedure.id = res.PatientCPTID;
        }
      });
    };

    SurgerySchedule.prototype.postNewDx = function postNewDx(diagnosis, bodypart, bodyside, surgId) {
      var self = this;

      var dx = new OD_Patient_Dx(diagnosis.code, diagnosis.description, self.patientId, self.providerId, self.userId);
      dx.BodyPart = bodypart;
      dx.BodySide = bodyside;
      dx.SurgID = surgId;
      dx.ExamDateTime = self.getShortTime(self.date);

      self.data.postWithUrlAndData('patientdiagnosis', JSON.stringify(dx), function (res) {
        if (res) {
          diagnosis.id = res.PatientDXID;
        }
      });
    };

    SurgerySchedule.prototype.deleteProcedure = function deleteProcedure(index, procedures, surgeryIndex) {
      var self = this;

      var pxToDelete = procedures[index];

      if (procedures[index] != null && procedures[index].id != 0) {
        self.data.deleteWithUrl('patientprocedures/' + pxToDelete.id, function (res) {
          if (res) {
            procedures.splice(index, 1);
          }
        });
      } else {
        procedures.splice(index, 1);
      }

      if (self.surgeries[surgeryIndex].diagnosis == null || self.surgeries[surgeryIndex].diagnosis.length == 0) {
        self.surgeries.splice(surgeryIndex, 1);
      }
    };

    SurgerySchedule.prototype.deleteDiagnosis = function deleteDiagnosis(index, diagnosis, surgeryIndex) {
      var self = this;

      var dxToDelete = diagnosis[index];

      if (diagnosis[index] != null && diagnosis[index].id != 0) {
        self.data.deleteWithUrl('patientdiagnosis/' + dxToDelete.id, function (res) {
          if (res) {
            diagnosis.splice(index, 1);
          }
        });
      } else {
        diagnosis.splice(index, 1);
      }

      if (self.surgeries[surgeryIndex].procedures == null || self.surgeries[surgeryIndex].procedures.length == 0) {
        self.surgeries.splice(surgeryIndex, 1);
      }
    };

    SurgerySchedule.prototype.save = function save() {
      var self = this;

      var saveDescription = 'Saving Surgery Schedule...';
      var saveDialog = self.helper.createNoty(saveDescription, 3000);
      saveDialog.show();

      if (self.OD_Surg_Schedule.Surgeon) {
        self.OD_Surg_Schedule.Surgeon = _typeof(self.OD_Surg_Schedule.Surgeon) === 'object' ? self.OD_Surg_Schedule.Surgeon.ProviderEntity : self.OD_Surg_Schedule.Surgeon;
      }

      if (self.OD_Surg_Schedule.Assistant) {
        self.OD_Surg_Schedule.Assistant = _typeof(self.OD_Surg_Schedule.Assistant) === 'object' ? self.OD_Surg_Schedule.Assistant.ProviderEntity : self.OD_Surg_Schedule.Assistant;
      }

      if (self.OD_Surg_Schedule.SurgAnesthesia) {
        self.OD_Surg_Schedule.SurgAnesthesia = _typeof(self.OD_Surg_Schedule.SurgAnesthesia) === 'object' ? self.OD_Surg_Schedule.SurgAnesthesia.Description1 : self.OD_Surg_Schedule.SurgAnesthesia;
      }

      if (self.OD_Surg_Schedule.SurgLocation) {
        self.OD_Surg_Schedule.SurgLocation = _typeof(self.OD_Surg_Schedule.SurgLocation) === 'object' ? self.OD_Surg_Schedule.SurgLocation.LocationName : self.OD_Surg_Schedule.SurgLocation;
      }

      self.OD_Surg_Schedule.SurgTime = self.surgeryDateTime ? self.getShortTime(self.surgeryDateTime) : null;
      self.OD_Surg_Schedule.SurgDate = self.surgeryDateTime ? self.getShortDate(self.surgeryDateTime) : null;

      self.data.postWithUrlAndData("schedule/surgery/poster", JSON.stringify(self.OD_Surg_Schedule), function (res) {
        self.OD_Surg_Schedule.SurgID = res.SurgID;

        for (var i = 0; i < self.surgeries.length; i++) {
          var surg = self.surgeries[i];

          if (surg.procedures && surg.procedures.length > 0) {
            for (var p = 0; p < surg.procedures.length; p++) {

              var aPx = surg.procedures[p];
              if (aPx.id == 0) {
                self.postNewPx(aPx, surg.bodypart, surg.bodyside, res.SurgID + '_' + surg.index);
              } else {
                aPx.data.Modifier = aPx.modifier;
                self.data.putWithUrlAndData('patientprocedures', aPx.data, function (res) {});
              }
            }
          }

          if (surg.diagnosis && surg.diagnosis.length > 0) {
            for (var d = 0; d < surg.diagnosis.length; d++) {
              var aDx = surg.diagnosis[d];

              if (aDx.id == 0) {
                self.postNewDx(aDx, surg.bodypart, surg.bodyside, res.SurgID + '_' + surg.index);
              } else {
                self.data.putWithUrlAndData('patientdiagnosis', aDx.data, function (res) {});
              }
            }
          }
        }
      });
    };

    SurgerySchedule.prototype.setSurgeryDateTime = function setSurgeryDateTime(date, time) {
      if (date == null) return;

      var tDate = new Date(date);
      var tTime = null;

      if (time != null) {
        tTime = new Date(date + " " + time);
      }

      var dt = new Date(tDate.getFullYear(), tDate.getMonth(), tDate.getDate());
      if (tTime) {
        dt.setHours(tTime.getHours());
        dt.setMinutes(tTime.getMinutes());
      }

      this.surgeryDateTime = dt;
    };

    SurgerySchedule.prototype.getShortTime = function getShortTime(date) {
      var aDate = new Date(date);
      var shortTime = new Intl.DateTimeFormat("en-US", {
        timeStyle: "short"
      });
      return shortTime.format(aDate);
    };

    SurgerySchedule.prototype.getShortDate = function getShortDate(date) {
      var aDate = new Date(date);
      return new Intl.DateTimeFormat('en-US').format(aDate);
    };

    SurgerySchedule.prototype.load = function load() {
      var self = this;

      self.data.getWithUrl('providers', function (res) {
        self.surgeons = _.filter(res, function (s) {
          return s.ProviderRole == 'Surgeon';
        });
        self.assistants = _.filter(res, function (s) {
          return s.ProviderRole.toLowerCase() == 'assistant';
        });

        self.data.getWithUrl('listcombo?listType=Anesthesia&providerId=' + self.providerId, function (res) {
          self.anesthesiaList = res;

          self.data.getWithUrl('locations?type=Surgical', function (res) {
            self.locationsList = res;

            self.loadModifierList(function () {
              self.loadSurgeryDetails();
            });
          });
        });
      });

      self.getHistoricalDxs();
    };

    SurgerySchedule.prototype.loadSurgeryDetails = function loadSurgeryDetails() {
      var self = this;
      var aDate = self.helper.parseSimpleDate(self.date, 'MM/DD/YYYY');
      var frmtDate = self.helper.getMMDDYYYYDateWithDate(aDate);

      self.data.getWithUrl('schedule/surgery/procedures/and/diagnosis/list?patientId=' + self.patientId + '&providerId=' + self.providerId + '&date=' + frmtDate, function (res) {

        if (res.Surgery) {

          self.surgeries = [];

          self.addSurgeryDetails(res);
        } else {

          self.OD_Surg_Schedule = {};

          self.OD_Surg_Schedule.PatientID = self.patientId;
          self.OD_Surg_Schedule.ProviderID = self.providerId;
          self.OD_Surg_Schedule.UserID = self.userId;
          self.OD_Surg_Schedule.BodyPart = self.bodypart;
          self.OD_Surg_Schedule.BodySide = self.bodyside;
          self.OD_Surg_Schedule.ScheduledBy = self.helper._user.UserName;
          self.OD_Surg_Schedule.ScheduleDate = aDate;
        }
      });
    };

    SurgerySchedule.prototype.addSurgeryDetails = function addSurgeryDetails(res) {
      var self = this;
      self.OD_Surg_Schedule = res.Surgery;

      self.OD_Surg_Schedule.ScheduledBy = self.helper._user.UserName;

      self.setSurgeryDateTime(res.Surgery.SurgDate, res.Surgery.SurgTime);

      for (var i = 0; i < res.ProceduresAndDiagnosis.length; i++) {
        var pxDx = res.ProceduresAndDiagnosis[i];

        var surgObj = new SurgeryObject2();
        for (var p = 0; p < pxDx.Procedures.length; p++) {
          var px = new PxDx(pxDx.Procedures[p].PatientCPTID, pxDx.Procedures[p].CptCode, pxDx.Procedures[p].CodeDescr);
          px.modifier = pxDx.Procedures[p].Modifier;
          px.data = pxDx.Procedures[p];
          surgObj.procedures.push(px);
        }

        for (var d = 0; d < pxDx.Diagnosis.length; d++) {
          var dx = new PxDx(pxDx.Diagnosis[d].PatientDXID, pxDx.Diagnosis[d].PatientDxCode, pxDx.Diagnosis[d].PatientDxDescription);
          dx.data = pxDx.Diagnosis[d];
          surgObj.diagnosis.push(dx);
        }

        surgObj.bodyside = pxDx.BodypartSide.Bodyside;
        surgObj.bodypart = pxDx.BodypartSide.Bodypart;

        self.surgeries.push(surgObj);
      }
    };

    return SurgerySchedule;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'selectedPref', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'datepicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'surgeryDateTime', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!go/surgerySchedule.html',[],function(){return "<template><require from=\"./customElements/myCheckbox\"></require><style>.returnToDate input{width:120px}.form-group{margin-bottom:.5rem}.body-side{color:rgba(0,0,0,.4)}.my-date-picker{flex:1 1 auto!important}.my-date-picker input{border-top-right-radius:unset;border-bottom-right-radius:unset;border-right:none}</style><div class=\"card\" style=\"height:inherit\"><div class=\"card-header d-flex align-items-center\"><h4 class=\"mr-2 mb-0 d-inline-block\"><i class=\"fa fa-sticky-note-o mr-2\"></i>Surgery Schedule</h4><div class=\"input-group\" style=\"width:auto\"><select value.bind=\"selectedPref\" class=\"custom-select\" style=\"width:120px\" aria-label=\"Example select with button addon\"><option selected=\"selected\">Choose...</option><option repeat.for=\"p of preferences\" model.bind=\"p\">${p.Surgery.SurgPrefDesc}</option></select><div class=\"input-group-append\"><button class=\"btn btn-outline-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-user mr-1\" aria-hidden=\"true\"></i>Pref</button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" click.delegate=\"createPref()\"><i class=\"fa fa-user mr-1 text-danger\" aria-hidden=\"true\"></i>New Preference</a> <a class=\"dropdown-item\" click.delegate=\"updatePref()\"><i class=\"fa fa-user mr-1 text-success\" aria-hidden=\"true\"></i>Update Preference</a></div></div></div><i class=\"fa fa-close fa-2x ml-auto\" click.delegate=\"cancel()\"></i></div><div class=\"card-body py-2\" style=\"overflow-y:scroll\"><div class=\"form-row\"><div class=\"form-group col-md-12\"><small class=\"form-text text-muted\">Scheduled By</small> <input type=\"text\" class=\"form-control\" value.bind=\"OD_Surg_Schedule.ScheduledBy\"></div></div><div class=\"form-row\"><div class=\"form-group col-md-6\"><small class=\"form-text text-muted\">Surgeon</small> <select value.bind=\"OD_Surg_Schedule.Surgeon\" class=\"form-control\" matcher.bind=\"surgeonMatcher\" aria-describedby=\"languageHelp\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of surgeons\" model.bind=\"s\">${s.ProviderEntity}</option></select></div><div class=\"form-group col-md-6\"><small class=\"form-text text-muted\">Assistant</small> <select value.bind=\"OD_Surg_Schedule.Assistant\" class=\"form-control\" matcher.bind=\"assistantMatcher\" aria-describedby=\"languageHelp\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of assistants\" model.bind=\"s\">${s.ProviderEntity}</option></select></div></div><div class=\"form-row\"><div class=\"form-group col-sm-6 col-md-6\"><small class=\"form-text text-muted\">Surgery Date | Time</small><div class=\"input-group\"><abp-datetime-picker class=\"my-date-picker\" icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"datepicker\" value.bind=\"surgeryDateTime\" options.bind=\"{ format: 'MM/DD/YYYY hh:mm a', sideBySide: true }\"></abp-datetime-picker><div class=\"input-group-append ml-auto\"><button class=\"btn btn-outline-secondary\" style=\"border-color:#ced4da\" type=\"button\" click.delegate=\"openCalendar()\"><i class=\"fa fa-calendar\"></i></button></div></div></div><div class=\"form-group col-sm-6 col-md-6\"><small class=\"form-text text-muted\">Duration</small><div class=\"input-group\"><input type=\"text\" value.bind=\"OD_Surg_Schedule.Surg_Duration\" class=\"form-control\" aria-label=\"Text input with dropdown button\"><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary dropdown-toggle\" style=\"border-color:#ced4da\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"></button><div class=\"dropdown-menu\"><a repeat.for=\"f of durationTimes\" style=\"font-family:arial\" class=\"dropdown-item\" href=\"#\" click.delegate=\"durationTimeClicked(f)\">${f}</a></div></div></div></div></div><div class=\"card\"><div class=\"card-header d-flex align-items-center pr-1\" style=\"height:44px\">Surgery <button class=\"btn btn-sm btn-outline-primary ml-auto mr-2\" type=\"button\" aria-expanded=\"false\" click.delegate=\"newSurgeryRow()\">New</button></div><div class=\"card-body py-2\"><div class=\"form-row\"><div class=\"form-group col-md-4\"><small class=\"form-text text-muted\">Facility</small> <select value.bind=\"OD_Surg_Schedule.SurgLocation\" matcher.bind=\"locationMatcher\" class=\"form-control\" aria-describedby=\"languageHelp\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of locationsList\" model.bind=\"s\">${s.LocationName}</option></select></div><div class=\"form-group col-md-4\"><small class=\"form-text text-muted\">Admission</small> <select value.bind=\"OD_Surg_Schedule.Admission\" class=\"form-control\" aria-describedby=\"languageHelp\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of admissionList\" model.bind=\"s\">${s}</option></select></div><div class=\"form-group col-md-4\"><small class=\"form-text text-muted\">Anesthesia</small> <select value.bind=\"OD_Surg_Schedule.SurgAnesthesia\" matcher.bind=\"anesthesiaMatcher\" class=\"form-control\" aria-describedby=\"languageHelp\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of anesthesiaList\" model.bind=\"s\">${s.Description1}</option></select></div></div><div class=\"list-group list-group-flush\" style=\"overflow-y:auto\"><div repeat.for=\"s of surgeries\" class=\"list-group-item px-0 d-flex\"><div class=\"d-flex flex-column justify-content-center col-sm-2 p-0\"><button class=\"btn p-0\" type=\"button\" aria-expanded=\"false\" click.delegate=\"openBodysidePicker(s)\"><span class=\"text-black-50 m-0 text-uppercase\">${s.bodyside}</span></button> <button class=\"btn p-0\" type=\"button\" aria-expanded=\"false\" click.delegate=\"openBodypartPicker(s)\"><strong class=\"h6 m-0 text-uppercase\">${s.bodypart}</strong></button></div><div class=\"d-flex flex-column justify-content-center col-sm-10 p-0\"><div repeat.for=\"px of s.procedures\" class=\"d-flex py-2\" style=\"border-bottom:1px solid #d3d3d3\"><div class=\"col-sm-2 col-md-2 pr-0\"><strong class=\"mr-3 text-primary text-uppercase\">${px.code}</strong></div><div class=\"col-sm-10 col-md-10 d-flex pr-0\"><span class=\"text-black-50\">${px.description}</span><button class=\"btn btn-sm btn-outline-secondary text-uppercase ml-auto mr-2\" type=\"button\" aria-expanded=\"false\" click.delegate=\"openModPicker(px)\"> ${px.modifier ? px.modifier : '+ MOD'} </button> <button class=\"btn btn-sm btn-danger\" style=\"max-height:31px\" type=\"button\" aria-expanded=\"false\" click.delegate=\"deleteProcedure($index, s.procedures, $parent.$index)\"><i class=\"fa fa-trash\" aria-hidden=\"true\"></i></button> <button if.bind=\"$first\" class=\"btn btn-sm btn-outline-primary ml-2\" style=\"max-height:31px\" type=\"button\" aria-expanded=\"false\" click.delegate=\"openPxPicker(s)\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button></div></div><div if.bind=\"s.procedures.length == 0\" class=\"d-flex align-items-center justify-content-center mb-2 border rounded p-2 btn-outline-primary\" style=\"border-color:#d3d3d3\"><div class=\"text-uppercase h5 m-0\" click.delegate=\"openPxPicker(s)\">ADD PROCEDURE <i class=\"fa fa-plus\" aria-hidden=\"true\"></i></div></div><div repeat.for=\"dx of s.diagnosis\" class=\"d-flex py-2\" style=\"border-bottom:1px solid #d3d3d3\"><div class=\"col-sm-2 col-md-2 pr-0\"><strong class=\"mr-3 text-primary text-uppercase\">${dx.code}</strong></div><div class=\"col-sm-10 col-md-10 d-flex pr-0\"><span class=\"text-black-50\">${dx.description}</span><button class=\"btn btn-sm btn-danger ml-auto\" style=\"max-height:31px\" type=\"button\" aria-expanded=\"false\" click.delegate=\"deleteDiagnosis($index, s.diagnosis, $parent.$index)\"><i class=\"fa fa-trash\" aria-hidden=\"true\"></i></button> <button if.bind=\"$first\" class=\"btn btn-sm btn-outline-primary ml-2\" style=\"max-height:31px\" type=\"button\" aria-expanded=\"false\" click.delegate=\"openDxPicker(s)\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button></div></div><div if.bind=\"s.diagnosis.length == 0\" class=\"d-flex align-items-center justify-content-center py-2 border rounded p-2 btn-outline-primary\" style=\"border-color:#d3d3d3\"><div class=\"text-uppercase h5 m-0\" click.delegate=\"openDxPicker(s)\">ADD DIAGNOSIS <i class=\"fa fa-plus\" aria-hidden=\"true\"></i></div></div></div></div></div></div></div><div class=\"form-row\"><div class=\"form-group col-md-12 my-2\"><strong class=\"text-muted\">Misc</strong></div></div><div class=\"form-row\"><div class=\"form-group col-md-6\"><small class=\"form-text text-muted\">Authorization #</small> <input class=\"form-control\" value.bind=\"OD_Surg_Schedule.AuthorizeNumber\" style=\"width:100%\"></div><div class=\"form-group col-md-6\"><small class=\"form-text text-muted\">Position of Patient</small> <select value.bind=\"OD_Surg_Schedule.Equip_PositionPatient\" class=\"form-control\" aria-describedby=\"languageHelp\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"s of positionList\" model.bind=\"s\">${s}</option></select></div></div><div class=\"form-row\"><div class=\"form-group col-md-6\"><small class=\"form-text text-muted\">Procedure Details</small> <textarea class=\"form-control\" value.bind=\"OD_Surg_Schedule.LO_txt\" rows=\"4\" style=\"width:100%\"></textarea></div><div class=\"form-group col-md-6\"><small class=\"form-text text-muted\">Instructions</small> <textarea class=\"form-control\" value.bind=\"OD_Surg_Schedule.Comments\" rows=\"4\" style=\"width:100%\"></textarea></div></div></div><div class=\"card-footer\"><button type=\"button\" class=\"btn btn-primary float-right\" click.delegate=\"save()\">Save</button></div></div></template>";});;
define('go/task/bubbleCustomAttribute',['exports', 'aurelia-framework', './task', '../globals', 'aurelia-event-aggregator'], function (exports, _aureliaFramework, _task, _globals, _aureliaEventAggregator) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BubbleCustomAttribute = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _dec2, _class;

  var BubbleCustomAttribute = exports.BubbleCustomAttribute = (_dec = (0, _aureliaFramework.customAttribute)('bubble-custom'), _dec2 = (0, _aureliaFramework.inject)(_task.Task, _globals.Globals, _aureliaEventAggregator.EventAggregator), _dec(_class = _dec2(_class = function () {
    function BubbleCustomAttribute(Task, Globals, EventAggregator) {
      _classCallCheck(this, BubbleCustomAttribute);

      this.bubbleEl = null;

      this.task = Task;
      this.globals = Globals;
      this.events = EventAggregator;
    }

    BubbleCustomAttribute.prototype.bind = function bind(bindingContext, overridingContext) {
      var self = this;
      self.bubbleEl = bindingContext.bubbleelement;
    };

    BubbleCustomAttribute.prototype.attached = function attached() {
      var self = this;
      var be = self.bubbleEl;
      self.task.scrollTop = self.task.scrollTop + be.clientHeight;
    };

    return BubbleCustomAttribute;
  }()) || _class) || _class);
});;
define('text!go/task/messageBubbleView.html',[],function(){return "<template><require from=\"./bubbleCustomAttribute\"></require><div class=\"row\" css=\"height: ${detailHeight}px; overflow-y: scroll;\" scrolltop.bind=\"scrollTop\"><div class=\"col-md-12\"><template repeat.for=\"m of currentMessage.bubbles\"><div class=\"row\" style=\"clear:both\"><div class=\"col-md-4\"><div if.bind=\"!m.isRight\" class=\"text-muted p-1 font-weight-light\" style=\"font-size:small\">${m.senderName}</div></div><div class=\"col-md-8\"><div if.bind=\"m.displayDate\" class=\"text-muted p-1 font-weight-light\" style=\"font-size:small\">${m.date}</div></div></div><div ref=\"bubbleelement\" bubble-custom class=\"message-bubble ${m.isRight ? 'float-right' : 'float-left'}\"><div class=\"message-bubble-content\" css=\"color: ${m.textColor}; background-color:${m.color}\" click.delegate=\"launchTask(m)\"><div class=\"text-center\" if.bind=\"m.isTask\"><i if.bind=\"m.canLaunchTask\" class=\"fa fa-thumb-tack fa-4x\"></i> <span if.bind=\"!m.canLaunchTask\" class=\"fa-stack fa-3x\"><i class=\"fa fa-thumb-tack fa-stack-1x\"></i> <i class=\"fa fa-ban fa-stack-2x\"></i> </span><span class=\"d-inline-block float-right px-2 pb-2\"><i class=\"fa fa-check\" aria-hidden=\"true\" click.delegate=\"completeTask(m.data, $event)\"></i></span> <span class=\"d-inline-block float-right px-2 pb-2\" click.delegate=\"forwardTask(m, $event)\"><i class=\"fa fa-share\" aria-hidden=\"true\"></i></span></div> ${m.description} </div><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:serif=\"http://www.serif.com/\" width=\"20px\" viewBox=\"0 0 157 94\" version=\"1.1\" xml:space=\"preserve\" class=\"${m.isRight ? 'message-bubble-tag-right ' : ''}\" style=\"position:absolute\"><path d=\"M50.146,-0.079c0,0 -8.999,42.511 -48.054,82.968c-0,-0 -6.314,12.475 13.868,10.242c0,-0 120.698,-9.28 140.133,-93.088l-105.947,-0.122Z\" css=\"fill:${m.color};\"/></svg></div></template></div></div></template>";});;
define('go/task/messageSearchView',['exports', 'aurelia-dialog', 'aurelia-framework', '../../helpers/http', '../../helpers/helper', 'lodash', '../../data/go/data'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper, _lodash, _data) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MessageSearchView = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var MessageTarget = function MessageTarget(id, first, last, matchedLast, isPatient) {
    _classCallCheck(this, MessageTarget);

    this.id = id;
    this.firstName = first;
    this.lastName = last;
    this.selected = false;
    this.matchedLast = matchedLast;
    this.isPatient = false;
  };

  var MessageSearchView = exports.MessageSearchView = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper, _data.Data), _dec(_class = function () {
    function MessageSearchView(DialogController, http, helper, Data) {
      _classCallCheck(this, MessageSearchView);

      this.selectedUser = null;
      this.searchResults = [];
      this.searchString = "";
      this.users = [];
      this.popupLR = 0;
      this.popupTB = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.searchPatients = false;
      this.searchTarget = 'User/Group';
      this.patients = [];
      this.messageForm = null;

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
      this.goData = Data;
    }

    MessageSearchView.prototype.toggleSearchTarget = function toggleSearchTarget() {
      var self = this;
      self.searchPatients = self.searchPatients ? false : true;
      self.searchTarget = self.searchPatients ? 'Patient' : 'User/Group';
    };

    MessageSearchView.prototype.targetListClicked = function targetListClicked(target) {
      var self = this;
      self.removeTargetFromList(target);
    };

    MessageSearchView.prototype.removeTargetFromList = function removeTargetFromList(target) {
      var self = this;

      for (var i = 0; i < self.messageForm.currentMessage.targetList.length; i++) {
        var aTarget = self.messageForm.currentMessage.targetList[i];
        if (aTarget.id == target.id && aTarget.firstName == target.firstName && aTarget.lastName == target.lastName) {
          self.messageForm.currentMessage.targetList.splice(i, 1);
        }
      }
    };

    MessageSearchView.prototype.searchStringResult = function searchStringResult(val) {
      this.searchString = val;
      this.filter();
    };

    MessageSearchView.prototype.searchStringResult = function searchStringResult() {
      return this.searchString;
    };

    MessageSearchView.prototype.activate = function activate(obj) {
      var self = this;
      self.messageForm = obj;

      self.getUsers();

      self.getAllPatients(function (res) {
        self.patients = res;
      });
    };

    MessageSearchView.prototype.getAllPatients = function getAllPatients(callback) {
      var self = this;

      var url = 'patients';
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    MessageSearchView.prototype.getUsers = function getUsers() {
      var self = this;

      var n = self.helper.createNoty("loading users...", 10000);
      n.show();

      self.http.get(self.helper.getApiUrl('users'), function (res) {
        self.users = _.filter(res, function (o) {
          return o.LastName != null && o.LastName.trim().length > 0;
        });

        self.helper.notySuccess(n, "users loaded");
        n.close();
      });
    };

    MessageSearchView.prototype.rowClicked = function rowClicked(t) {
      var self = this;
      self.messageForm.currentMessage.targetList.push(t);
      self.messageForm.setDetailHeight(self.messageForm.ogDetailHeight - self.targetdiv.clientHeight);
      self.searchString = null;
      self.targetinput.focus();
    };

    MessageSearchView.prototype.filter = function filter(val) {
      var self = this;
      self.searchResults = [];
      self.searchList = self.users;

      if (self.searchString.length == 0) return;

      var lastNameTerm = 'LastName';
      var firstNameTerm = 'FirstName';

      if (self.searchPatients) {
        lastNameTerm = 'NameLast';
        firstNameTerm = 'NameFirst';
        self.searchList = self.patients;
      }

      var res = _.filter(self.searchList, function (o) {
        return o[lastNameTerm].toLowerCase().startsWith(self.searchString.toLowerCase()) || o[firstNameTerm].toLowerCase().startsWith(self.searchString.toLowerCase());
      });
      var startLastName = _.filter(res, function (o) {
        return o[lastNameTerm].toLowerCase().startsWith(self.searchString.toLowerCase());
      });
      var startFirstName = _.filter(res, function (o) {
        return o[firstNameTerm].toLowerCase().startsWith(self.searchString.toLowerCase());
      });

      startLastName = _.sortBy(startLastName, [function (o) {
        return o[lastNameTerm];
      }]);
      startFirstName = _.sortBy(startFirstName, [function (o) {
        return o[firstNameTerm];
      }]);

      for (var i = 0; i < startLastName.length; i++) {
        var to = startLastName[i];
        if (!self.searchPatients) {
          var targetType = null;
          var id = null;
          var first = null;
          var last = null;
          if (to.hasOwnProperty('UserID')) {
            targetType = self.goData.TARGETTYPE.USER;
            id = 'UserID';
            first = 'FirstName';
            last = 'LastName';
          } else {
            targetType = self.goData.TARGETTYPE.GROUP;
            id = 'GroupID';
            first = 'GroupName';
          }

          var msgTarget = self.goData.getNewMessageTarget(to[id], to[first], to[last], targetType, 0);
          msgTarget.matchedLast = true;
          self.searchResults.push(msgTarget);
        } else {
          var msgTarget = self.goData.getNewMessageTarget(to.PatientID, to.NameFirst, to.NameLast, self.goData.TARGETTYPE.PATIENT, 0);
          msgTarget.matchedLast = true;
          self.searchResults.push(msgTarget);
        }
      }
      for (var i = 0; i < startFirstName.length; i++) {
        var to = startFirstName[i];
        if (!self.searchPatients) {
          var targetType = null;
          var id = null;
          var first = null;
          var last = null;
          if (to.hasOwnProperty('UserID')) {
            targetType = self.goData.TARGETTYPE.USER;
            id = 'UserID';
            first = 'FirstName';
            last = 'LastName';
          } else {
            targetType = self.goData.TARGETTYPE.GROUP;
            id = 'GroupID';
            first = 'GroupName';
          }

          var msgTarget = self.goData.getNewMessageTarget(to[id], to[first], to[last], targetType, 0);
          msgTarget.matchedLast = false;
          self.searchResults.push(msgTarget);
        } else {
          var msgTarget = self.goData.getNewMessageTarget(to.PatientID, to.NameFirst, to.NameLast, self.goData.TARGETTYPE.PATIENT, 0);
          msgTarget.matchedLast = false;
          self.searchResults.push(msgTarget);
        }
      }
    };

    return MessageSearchView;
  }()) || _class);
});;
define('text!go/task/messageSearchView.html',[],function(){return "<template><div ref=\"targetdiv\" class=\"row border-bottom py-2 pl-2 align-items-center\"><label class=\"my-1\">To:</label><template repeat.for=\"t of messageForm.currentMessage.targetList\"><span click.delegate=\"targetListClicked(t)\" class=\"p-1 text-primary d-inline-block\">${t.firstName}&nbsp;${t.lastName} <i class=\"fa fa-times float-right\" aria-hidden=\"true\"></i></span></template><input ref=\"targetinput\" class=\"d-inline-block p-1\" style=\"width:25%;border:none;outline:0\" id=\"messageTarget\" aria-describedby=\"messageTarget\" value.bind=\"searchString\" input.delegate=\"filter($this)\"></div><div class=\"row\"><div class=\"col-md-12\"><div class=\"tableFixHeadLight\" css=\"height: ${detailHeight}px;\"><table class=\"table table-sm\"><thead><tr><th scope=\"col\" click.delegate=\"toggleSearchTarget()\"><i class=\"fa fa-search py-1 text-primary\" style=\"cursor:pointer\"></i> <span class=\"py-1 text-primary font-weight-light\">${searchTarget}</span></th></tr></thead><tbody><template repeat.for=\"s of searchResults\"><tr click.delegate=\"rowClicked(s)\" class.bind=\"s.selected ? 'table-primary' : 'table-light'\"><td><span class=\"${s.matchedLast ? '' : 'font-weight-bold'}\">${s.firstName}</span>&nbsp;<span class=\"${s.matchedLast ? 'font-weight-bold' : ''}\">${s.lastName}</span></td></tr></template></tbody></table></div></div></div></template>";});;
define('go/task/task',['exports', 'aurelia-dialog', 'aurelia-framework', '../../helpers/http', '../../helpers/helper', 'moment', 'lodash', '../../data/go/data', './taskHelper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper, _moment, _lodash, _data, _taskHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Task = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var OD_Task = function OD_Task(id, date, data) {
    _classCallCheck(this, OD_Task);

    this.id = id;
    this.date = date;
    this.selected = false;
    this.data = data;
  };

  var bubble = function () {
    function bubble(description, isSender, data, date) {
      _classCallCheck(this, bubble);

      this.color = isSender ? '#007bff' : '#e6e6e6';
      this.textColor = isSender ? 'white' : 'black';
      this.isSender = isSender;
      this.description = description;
      this.isRight = isSender;
      this.data = data;
      this.date = date;
      this.sortdate = (0, _moment2.default)(date).format();
      this.displayDate = true;
      this.isTask = false;
      this.canLaunchTask = false;
      this.senderName = null;
      this.setSenderNameWithData(data);
    }

    bubble.prototype.setSenderNameWithData = function setSenderNameWithData(data) {
      if (data.Patient != null) {
        this.senderName = data.Patient.NameFirst + " " + data.Patient.NameLast;
      } else if (data.User != null) {
        this.senderName = data.User.FirstName + " " + data.User.LastName;
      } else if (data.Group != null) {
        this.senderName = data.Group.GroupName;
      }
    };

    return bubble;
  }();

  var message = function () {
    function message(patientId, date, data, targets) {
      _classCallCheck(this, message);

      this.bubbles = [];
      this.patientId = patientId;
      this.date = date;
      this.sortdate = (0, _moment2.default)(date).format();
      this.data = data;
      this.selected = false;
      this.id = data.ConversationID;
      this.detail = null;
      this.subjectName = null;
      this.targetList = targets == null ? [] : targets;
      this.alt = null;
      this.showAlt = false;
      this.imagePath = null;
      this.read = false;
      this.selectedForArchive = false;
      this.setImageAlt();
    }

    message.prototype.setDate = function setDate(date) {
      this.date = (0, _moment2.default)(date).format('MM/DD/YYYY');
      this.sortdate = (0, _moment2.default)(date).format();
    };

    message.prototype.setImageAlt = function setImageAlt() {
      var self = this;
      if (self.targetList.length > 0) {
        if (self.patientId != null) {
          var foundPatient = _.find(self.targetList, function (t) {
            return t.id == self.patientId;
          });
          self.imagePath = '/images/photos/' + foundPatient.photo;
        } else {

          var firsttarget = self.targetList[0];
          self.alt = firsttarget.firstName.substr(0, 1).toUpperCase() + firsttarget.lastName.substr(0, 1).toUpperCase();
          self.showAlt = true;
        }
      } else {
        self.imagePath = _helper.helper.goFileUrl + 'images/blank.png';
      }
    };

    message.prototype.removeBubbleWithId = function removeBubbleWithId(id) {
      for (var i = 0; i < this.bubbles.length; i++) {
        var aBubble = this.bubbles[i];
        if (aBubble.data.hasOwnProperty('TaskID') && aBubble.data.TaskID == id) {
          this.bubbles.splice(i, 1);
          break;
        }
      }
    };

    return message;
  }();

  var Task = exports.Task = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper, _aureliaDialog.DialogService, _data.Data, _taskHelper.TaskHelper), _dec(_class = function () {
    function Task(DialogController, http, helper, DialogService, Data, TaskHelper) {
      _classCallCheck(this, Task);

      this.selectedTask = null;
      this.messageResults = [];
      this.archivedMessageResults = [];
      this.filteredMessages = [];
      this.taskStatusList = ["ASSIGNED", "COMPLETED"];
      this.taskResults = [];
      this.popupLR = 0;
      this.popupTB = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.openPatientOnClose = false;
      this.launchPatientId = null;
      this.bodyHeight = 0;
      this.gridHeight = 0;
      this.tobarGridHeight = 0;
      this.detailHeight = 0;
      this.ogDetailHeight = 0;
      this.tasksToUpdate = [];
      this.filterStatus = 'assigned';
      this.currentMessage = null;
      this.scrollTop = 0;
      this.messageText = null;
      this.displayToBar = false;
      this.popHelper = null;
      this.displayMessageTasks = true;
      this.filterMessagesByUser = true;
      this.editingMessages = false;
      this.archiveList = [];
      this.refreshTimer = null;
      this.editMode = false;
      this.displayIcon = 'fa-comment';
      this.displayText = 'Tasks';
      this.showTasks = true;
      this.showMessages = false;
      this.showArchive = false;
      this.providerList = [];
      this.userList = [];
      this.filteredUserList = [];

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
      this.dialogService = DialogService;
      this.goData = Data;
      this.taskHelper = TaskHelper;
    }

    Task.prototype.scrollLastBubbleIntoView = function scrollLastBubbleIntoView() {
      window.setTimeout(function () {
        var el = $(".message-bubble").last();
        if (el.length == 1) {
          el[0].scrollIntoView();
        }
      }, 500);
    };

    Task.prototype.filterPriority = function filterPriority(priority) {
      var self = this;
      self.filteredMessages = [];

      self.getTasksWithUserId(self.taskHelper.filterUserId, priority, function (res) {
        var orderedTasks = _.orderBy(res, 'sortdate', 'desc');
        self.taskResults = orderedTasks;
        self.filteredMessages = _.orderBy(self.taskResults, function (s) {
          return s.subjectName;
        });
        self.currentMessage = self.filteredMessages[0];

        self.scrollLastBubbleIntoView();
      });
    };

    Task.prototype.filterUsers = function filterUsers(e) {
      var self = this;
      var search = e.target.value.toLowerCase();

      if (search.toString().length == 0) {
        self.filteredUserList = self.userList;
        return;
      }

      self.filteredUserList = _.filter(self.userList, function (b) {
        return b.UserName.toLowerCase().startsWith(search);
      });
    };

    Task.prototype.filter = function filter(e) {
      var self = this;
      if (this.displayMessageTasks) {
        self.filterTasks(e);
      } else {
        self.filterMessages(e);
      }
    };

    Task.prototype.filterTasks = function filterTasks(e) {
      var self = this;
      var search = e.target.value.toLowerCase();
      self.taskHelper.search = search;

      if (search.toString().length == 0) {
        self.filteredMessages = self.taskResults;
        return;
      }

      var res = [];
      var initialFilter = self.taskResults;
      self.filteredMessages = [];

      var filterIndex = 0;

      for (var i = 0; i < initialFilter.length; i++) {
        var aMsg = initialFilter[i];
        var bubs = aMsg.bubbles;
        var bubbleRes = _.filter(bubs, function (b) {
          return b.description.toLowerCase().includes(search);
        });

        for (var m = 0; m < bubbleRes.length; m++) {
          var foundBubble = bubbleRes[m];

          var foundConv = new message(null, null, { "ConversationID": 0 }, null);
          foundConv.alt = aMsg.alt;
          foundConv.data = aMsg.data;
          foundConv.date = aMsg.date;
          foundConv.detail = foundBubble.description;
          foundConv.id = filterIndex;
          foundConv.patientId = aMsg.patientId;
          foundConv.imagePath = aMsg.imagePath;
          foundConv.read = aMsg.read;
          foundConv.selected = false;
          foundConv.selectedForArchive = aMsg.selectedForArchive;
          foundConv.showAlt = aMsg.showAlt;
          foundConv.sortdate = aMsg.sortdate;
          foundConv.subjectName = aMsg.subjectName;
          foundConv.targetList = aMsg.targetList;
          foundConv.bubbles.push(foundBubble);

          res.push(foundConv);

          filterIndex++;
        }
      }

      self.filteredMessages = _.orderBy(res, function (s) {
        return s.subjectName;
      });
    };

    Task.prototype.filterMessages = function filterMessages(e) {
      var self = this;
      var search = e.target.value;

      var targetType = self.filterMessagesByUser ? self.goData.TARGETTYPE.USER : self.goData.TARGETTYPE.PATIENT;

      if (search.length == 0) {
        self.filteredMessages = self.getMessageResultsWithTargetType(targetType);
        return;
      }

      var res = [];
      var initialFilter = self.getMessageResultsWithTargetType(targetType);
      self.filteredMessages = [];

      for (var i = 0; i < initialFilter.length; i++) {
        var aMsg = initialFilter[i];
        var msgRes = _.filter(aMsg.targetList, function (t) {
          return t.firstName.toLowerCase().startsWith(search) || t.lastName.toLowerCase().startsWith(search);
        });
        if (msgRes.length > 0) {
          res.push(aMsg);
        }
      }

      var archiveSet = self.getMessageResultsWithTargetTypeAndResults(targetType, self.archivedMessageResults);
      for (var _i = 0; _i < archiveSet.length; _i++) {
        var _aMsg = archiveSet[_i];
        var _msgRes = _.filter(_aMsg.targetList, function (t) {
          return t.firstName.toLowerCase().startsWith(search) || t.lastName.toLowerCase().startsWith(search);
        });
        if (_msgRes.length > 0) {
          res.push(_aMsg);
        }
      }

      self.filteredMessages = _.orderBy(res, function (s) {
        return s.subjectName;
      });

      self.scrollLastBubbleIntoView();
    };

    Task.prototype.filterConversationTargetsByTargetype = function filterConversationTargetsByTargetype(conversationTargets, targettype) {
      var self = this;
      if (targettype == self.goData.TARGETTYPE.USER) {
        var convIdsToRemove = [];
        for (var t = 0; t < conversationTargets.length; t++) {
          var aConv = conversationTargets[t];

          var patientTargets = _.filter(aConv.Targets, function (p) {
            return p.Patient != null;
          });
          if (patientTargets.length > 0) {
            convIdsToRemove.push(aConv.ConversationId);
          }
        }

        var final = _.reject(conversationTargets, function (c) {
          return convIdsToRemove.includes(c.ConversationId);
        });
        return final;
      } else if (targettype == self.goData.TARGETTYPE.PATIENT) {
        var conversationsToKeep = [];
        for (var t = 0; t < conversationTargets.length; t++) {
          var aConv = conversationTargets[t];

          var patientTargets = _.filter(aConv.Targets, function (p) {
            return p.Patient != null;
          });
          if (patientTargets.length > 0) {
            conversationsToKeep.push(aConv);
          }
        }
        return conversationsToKeep;
      }
    };

    Task.prototype.getTasksWithUserId = function getTasksWithUserId(userId, priority, callback) {
      var self = this;
      self.taskResults = [];
      self.filteredMessages = [];
      var url = 'tasks?userId=' + userId;
      self.http.get(self.helper.getApiUrl(url), function (tasks) {
        var assignedTasks = _.filter(tasks, function (t) {
          return t.Status.toUpperCase() == 'ASSIGNED';
        });

        if (priority != undefined && priority.toLowerCase() != 'all') {
          assignedTasks = _.filter(assignedTasks, function (t) {
            return t.Priority.toUpperCase() == priority.toUpperCase();
          });
        }

        var conversationList = [];
        self.populateConversationsWithTasks(assignedTasks, conversationList);

        var resultResponseCount = 0;

        for (var i = 0; i < conversationList.length; i++) {
          var aMsg = conversationList[i].messages[0];
          if (aMsg.hasOwnProperty('TaskID')) {
            self.getConversationTargetsWithTask(aMsg, aMsg, i, function (res, index, ogConversation) {
              conversationList[index].targets = res;

              self.addToResults(aMsg, conversationList[index], self.taskResults);

              if (index == conversationList.length - 1) {
                callback(self.taskResults);
              }
            });
          }
        }
      });
    };

    Task.prototype.getMessagesByUserId = function getMessagesByUserId(userId, callback) {
      var self = this;
      self.messageResults = [];
      self.archivedMessageResults = [];
      self.filteredMessages = [];

      self.goData.getMessageConversationsWithUserId(userId, function (res) {
        var sorted = res;
        sorted = _.groupBy(sorted, 'ConversationID');
        var conversationList = [];
        var groupKeys = Object.keys(sorted);

        self.goData.getConversationTargetsWithConversationIds(groupKeys, function (res) {

          var filteredConversationTargets = res;

          for (var i = 0; i < filteredConversationTargets.length; i++) {
            var k = filteredConversationTargets[i].ConversationId;

            var tMsgs = _.filter(sorted[k], function (m) {
              return m.Reply != null;
            });

            var messageList = _.orderBy(tMsgs, 'ReplyID', 'desc');
            var targetList = _.find(filteredConversationTargets, function (t) {
              return t.ConversationId == k;
            });
            var conversation = {
              messages: messageList,
              targets: targetList.Targets,
              id: targetList.ConversationId
            };
            conversationList.push(conversation);
          }

          for (var i = 0; i < conversationList.length; i++) {
            var aMsg = conversationList[i].messages[0];

            if (aMsg.Status == 'ARCHIVED') {
              self.addToResults(aMsg, conversationList[i], self.archivedMessageResults);
            } else {
              self.addToResults(aMsg, conversationList[i], self.messageResults);
            }
          }

          if (self.showMessages) {
            callback(self.messageResults);
          } else {
            callback(self.archivedMessageResults);
          }
        });
      });
    };

    Task.prototype.doneClick = function doneClick() {
      var self = this;
      self.editMode = false;
      self.editingMessages = false;
    };

    Task.prototype.toggleMessageEdit = function toggleMessageEdit() {
      var self = this;
      self.editingMessages = self.editingMessages ? false : true;
      self.editMode = self.editingMessages;
    };

    Task.prototype.displayArchivedMessages = function displayArchivedMessages() {
      var self = this;
      self.filteredMessages = self.archivedMessageResults;
      self.editMode = false;
      self.setDisplayInfo('Archive');
    };

    Task.prototype.displayActiveMessages = function displayActiveMessages() {
      var self = this;

      var targetType = self.filterMessagesByUser ? self.goData.TARGETTYPE.USER : self.goData.TARGETTYPE.PATIENT;
      self.filteredMessages = self.getMessageResultsWithTargetType(targetType);

      self.editMode = false;
      self.setDisplayInfo('Messages');
    };

    Task.prototype.archiveConversationClick = function archiveConversationClick() {

      var self = this;
      var ids = [];
      for (var i = 0; i < self.archiveList.length; i++) {
        ids.push(self.archiveList[i].id);
      }

      self.goData.updateConversationStatusWithIdsAndStatus(ids, 'ARCHIVED', function (res) {

        var success = res;
        if (success) {
          self.archiveList = [];
          self.editingMessages = false;
        }
      });
    };

    Task.prototype.messageClickForArchive = function messageClickForArchive(message) {
      var self = this;
      var tArchive = message.selectedForArchive;
      message.selectedForArchive = tArchive ? false : true;


      if (message.selectedForArchive) {
        self.archiveList.push(message);
      } else {
        for (var i = 0; i < self.archiveList.length; i++) {
          if (self.archiveList[i].id == message.id) {
            self.archiveList.splice(i, 1);
            break;
          }
        }
      }
    };

    Task.prototype.toggleFilterPatientUserMessages = function toggleFilterPatientUserMessages() {
      var self = this;

      var messagesTofilter = self.showMessages ? self.messageResults : self.archivedMessageResults;
      self.filterMessagesByUser = self.filterMessagesByUser ? false : true;
      var tType = self.filterMessagesByUser ? self.goData.TARGETTYPE.USER : self.goData.TARGETTYPE.PATIENT;

      self.filteredMessages = self.getMessageResultsWithTargetTypeAndResults(tType, messagesTofilter);
    };

    Task.prototype.filterPatientMessages = function filterPatientMessages() {
      var self = this;

      self.taskHelper.filterPatientOrUser = 'patient';
      var messagesTofilter = self.showMessages ? self.messageResults : self.archivedMessageResults;
      self.filterMessagesByUser = false;
      var tType = self.goData.TARGETTYPE.PATIENT;
      self.filteredMessages = self.getMessageResultsWithTargetTypeAndResults(tType, messagesTofilter);
    };

    Task.prototype.filterUserMessages = function filterUserMessages() {
      var self = this;

      self.taskHelper.filterPatientOrUser = 'user';
      var messagesTofilter = self.showMessages ? self.messageResults : self.archivedMessageResults;
      self.filterMessagesByUser = true;
      var tType = self.goData.TARGETTYPE.USER;
      self.filteredMessages = self.getMessageResultsWithTargetTypeAndResults(tType, messagesTofilter);
    };

    Task.prototype.getMessageResultsWithTargetTypeAndResults = function getMessageResultsWithTargetTypeAndResults(optionalTargetType, results) {
      var self = this;
      var res = [];
      if (optionalTargetType != undefined) {
        self.filterMessagesByUser = optionalTargetType == self.goData.TARGETTYPE.USER ? true : false;
      } else {
        self.filterMessagesByUser = self.filterMessagesByUser ? false : true;
      }

      for (var i = 0; i < results.length; i++) {
        var msg = results[i];

        if (!self.filterMessagesByUser) {
          if (msg.patientId != null) {
            res.push(msg);
          }
        } else {
          if (msg.patientId == null) {
            res.push(msg);
          }
        }
      }

      return res;
    };

    Task.prototype.getMessageResultsWithTargetType = function getMessageResultsWithTargetType(optionalTargetType) {
      var self = this;
      var results = [];
      if (optionalTargetType != undefined) {
        self.filterMessagesByUser = optionalTargetType == self.goData.TARGETTYPE.USER ? true : false;
      } else {
        self.filterMessagesByUser = self.filterMessagesByUser ? false : true;
      }

      for (var i = 0; i < self.messageResults.length; i++) {
        var msg = self.messageResults[i];

        if (!self.filterMessagesByUser) {
          if (msg.patientId != null) {
            results.push(msg);
          }
        } else {
          if (msg.patientId == null) {
            results.push(msg);
          }
        }
      }

      return results;
    };

    Task.prototype.populateConversationsWithTasks = function populateConversationsWithTasks(assignedTasks, conversationList) {

      var self = this;

      for (var t = 0; t < assignedTasks.length; t++) {
        var aTask = assignedTasks[t];

        aTask.DateCreated = aTask.DateModified;

        var foundtask = false;

        for (var cl = 0; cl < conversationList.length; cl++) {
          var cList = conversationList[cl];

          var foundPatient = _.find(cList.targets, function (p) {
            return p.id == aTask.PatientID;
          });

          if (foundPatient != undefined) {
            cList.messages.push(aTask);
            foundtask = true;
          }

          if (foundtask) {
            break;
          }
        }

        if (!foundtask) {
          for (var ct = 0; ct < conversationList.length; ct++) {
            var cListTask = conversationList[ct];

            var foundUsers = _.filter(cListTask.targets, function (p) {
              return p.id == aTask.CreatedByID || p.UserId == aTask.AssignedToID;
            });

            if (foundUsers.length > 0 && foundUsers.length == cListTask.targets.length) {
              cListTask.messages.push(aTask);
              foundtask = true;
            }
          }
        }

        if (!foundtask) {
          var conversation = {
            messages: [],
            targets: [],
            id: 0
          };
          conversation.messages.push(aTask);

          var foundUser = self.getUserFromListByUserId(aTask.CreatedByID);
          if (foundUser == undefined) {
            foundUser = {};
            foundUser.FirstName = '';
            foundUser.LastName = '';
          }
          var tgt = self.goData.getNewMessageTarget(aTask.CreatedByID, foundUser.FirstName, foundUser.LastName, self.goData.TARGETTYPE.USER, aTask.TaskID);
          conversation.targets.push(tgt);

          conversationList.push(conversation);
        }
      }
    };

    Task.prototype.getUserFromListByUserId = function getUserFromListByUserId(userId) {
      var self = this;
      return _.find(self.userList, function (u) {
        return u.UserID == userId;
      });
    };

    Task.prototype.addTargetToConversation = function addTargetToConversation(conversation, target) {
      var self = this;


      var target = _.find(conversation.targets, function (t) {
        return t.id == target.id && t.targetType == target.targetType;
      });
      if (target == undefined) {}
    };

    Task.prototype.addToResults = function addToResults(_message, conversation, resultsArray) {

      var self = this;

      var date = self.helper.getISODateToFormat(_message.ReplyDateCreated, "MM/DD/YYYY");

      var conversationTasks = [];

      var targets = self.getTargetListFromConversationList(conversation.targets);

      var targetPatient = _.find(targets, function (p) {
        return p.targetType == 'patient';
      });

      var aPatientId = targetPatient != undefined ? targetPatient.id : null;

      var aMessage = new message(aPatientId, date, _message, targets);

      if (aMessage.id == undefined) {
        var array = new Uint32Array(1);
        window.crypto.getRandomValues(array);
        aMessage.id = array[0];
      }

      aMessage.subjectName = self.getMessageSubject(aMessage);

      resultsArray.push(aMessage);

      var replyList = conversation;

      var objectsForBubbles = replyList.messages;
      objectsForBubbles = _.orderBy(objectsForBubbles, 'ReplyDateCreated', 'asc');

      for (var r = 0; r < objectsForBubbles.length; r++) {
        var rep = objectsForBubbles[r];

        if (rep.hasOwnProperty('ReplyID')) {
          var aBubble = self.getNewBubbleWithReply(rep, aMessage);

          aMessage.detail = rep.Reply;
          if (rep.ReplyDateCreated != null) {
            aMessage.setDate(rep.ReplyDateCreated);
          }

          aMessage.read = aBubble.isSender ? true : false;

          aMessage.bubbles.push(aBubble);
        } else {
          var taskBubble = self.getNewBubbleWithTask(rep, aMessage);
          aMessage.detail = rep.Description;
          if (rep.DateModified != null) {
            aMessage.setDate(rep.DateModified);
          }

          aMessage.read = taskBubble.isSender ? true : false;

          aMessage.bubbles.push(taskBubble);
        }
      }
    };

    Task.prototype.getConversationTargetsWithTask = function getConversationTargetsWithTask(task, originalConversation, optionalIndex, callback) {
      var self = this;
      self.goData.getUser(task.CreatedByID, function (usr) {

        var conversationTarget = {
          'ConversationId': 0,
          'User': usr
        };

        var result = [];
        result.push(conversationTarget);

        callback(result, optionalIndex, originalConversation);
      });
    };

    Task.prototype.getTargetListFromConversationList = function getTargetListFromConversationList(conversationList) {
      var self = this;
      var targetList = [];

      for (var i = 0; i < conversationList.length; i++) {
        var reply = conversationList[i];
        if (reply.User != null) {
          var aUsr = _.find(targetList, function (t) {
            return t.id == reply.User.UserID;
          });
          if (aUsr == undefined) {
            var tgt = self.goData.getNewMessageTarget(reply.User.UserID, reply.User.FirstName, reply.User.LastName, self.goData.TARGETTYPE.USER, reply.Id);
            targetList.push(tgt);
          }
        }
        if (reply.Patient != null) {
          var aPat = _.find(targetList, function (t) {
            return t.id == reply.Patient.PatientID;
          });
          if (aPat == undefined) {
            var tgt = self.goData.getNewMessageTarget(reply.Patient.PatientID, reply.Patient.NameFirst, reply.Patient.NameLast, self.goData.TARGETTYPE.PATIENT, reply.Id, reply.Patient.Photo);
            targetList.push(tgt);
          }
        }
        if (reply.Group != null) {
          var aGrp = _.find(targetList, function (t) {
            return t.id == reply.Group.GroupID;
          });
          if (aGrp == undefined) {
            var tgt = self.goData.getNewMessageTarget(reply.Group.GroupID, reply.Group.GroupName, null, self.goData.TARGETTYPE.GROUP, reply.Id);
            targetList.push(tgt);
          }
        }
      }

      return targetList;
    };

    Task.prototype.getNewBubbleWithTask = function getNewBubbleWithTask(OD_Task, message) {

      var self = this;

      var tsk = OD_Task;

      var bubbleDate = self.helper.getISODateToFormat(tsk.DateModified, "MMM D, YYYY, h:mm a");

      var isSender = self.checkIsTaskSender(tsk);

      var aBubble = new bubble(tsk.Description, isSender, tsk, bubbleDate);

      if (OD_Task.Priority == 'Med') {
        aBubble.color = '#ffc107;';
        aBubble.textColor = 'black';
      }
      if (OD_Task.Priority == 'High') {
        aBubble.color = '#dc3545';
      }

      aBubble.isTask = true;

      var launchable = self.taskHelper.canOpen(tsk.TypeID);
      if (launchable != undefined) {
        aBubble.canLaunchTask = true;
      }

      var foundDate = _.find(message.bubbles, function (b) {
        return b.date == bubbleDate;
      });

      if (foundDate != undefined) {
        aBubble.displayDate = false;
      }
      return aBubble;
    };

    Task.prototype.getNewBubbleWithReply = function getNewBubbleWithReply(OD_Message_Reply, message, isSenderOverride) {

      var self = this;

      var rep = OD_Message_Reply;

      var bubbleDate = self.helper.getISODateToFormat(rep.ReplyDateCreated, "MMM D, YYYY, h:mm a");

      var isSender = isSenderOverride != undefined ? isSenderOverride : self.checkIsSender(rep);

      var aBubble = new bubble(rep.Reply, isSender, rep, bubbleDate);

      aBubble.isTask = false;

      var foundDate = _.find(message.bubbles, function (b) {
        return b.date == bubbleDate;
      });

      if (foundDate != undefined) {
        aBubble.displayDate = false;
      }
      return aBubble;
    };

    Task.prototype.getNewBubble = function getNewBubble(detail, message) {

      var self = this;

      var rep = null;

      var bubbleDate = (0, _moment2.default)().format("MMM D, YYYY, h:mm a");

      var isSender = true;

      var aBubble = new bubble(detail, isSender, rep, bubbleDate);

      aBubble.isTask = false;

      var foundDate = _.find(message.bubbles, function (b) {
        return b.date == bubbleDate;
      });

      if (foundDate != undefined) {
        aBubble.displayDate = false;
      }
      return aBubble;
    };

    Task.prototype.getMessageSubject = function getMessageSubject(msg) {

      var self = this;

      if (msg.hasOwnProperty('targetList')) {

        var finalListToCheck = [];


        finalListToCheck = _.reject(msg.targetList, function (u) {
          return u.targetType == self.goData.TARGETTYPE.USER && u.id == self.helper._user.UserID;
        });

        if (finalListToCheck.length > 1) {
          var concatTargets = '';
          for (var i = 0; i < finalListToCheck.length; i++) {
            var target = finalListToCheck[i];

            var spacer = ', ';
            if (i == finalListToCheck.length - 2) {
              spacer = ' & ';
            }
            concatTargets = concatTargets.concat(target.firstName + spacer);
          }
          concatTargets = concatTargets.substr(0, concatTargets.length - 2);
          return concatTargets;
        } else if (finalListToCheck.length == 1) {
          return finalListToCheck[0].firstName + " " + finalListToCheck[0].lastName;
        } else {
          return "";
        }
      }
    };

    Task.prototype.checkIsTaskSender = function checkIsTaskSender(OD_Task) {
      var self = this;
      var isSender = false;
      if (OD_Task.CreatedByID != null) {
        isSender = OD_Task.CreatedByID == self.helper._user.UserID ? true : false;
      } else {
        isSender = false;
      }

      return isSender;
    };

    Task.prototype.checkIsSender = function checkIsSender(conversationResult) {
      var self = this;
      var isSender = false;

      return conversationResult.SenderUserID == self.helper._user.UserID ? true : false;
    };

    Task.prototype.selectMessage = function selectMessage(message) {
      var self = this;
      for (var i = 0; i < self.filteredMessages.length; i++) {
        if (self.filteredMessages[i].id == message.id) {
          self.filteredMessages[i].selected = true;
        } else {
          self.filteredMessages[i].selected = false;
        }
      }
    };

    Task.prototype.messageButtonClick = function messageButtonClick() {
      var self = this;
      if (self.displayToBar) {
        self.toggleToBar();


        self.currentMessage.date = (0, _moment2.default)().format("MM/DD/YYYY");
        self.currentMessage.selected = true;
        self.currentMessage.detail = self.messageText;
        self.currentMessage.subjectName = self.getMessageSubject(self.currentMessage);
      }

      self.addConversation(function (res) {

        if (res == null) return;

        self.addMessage();
      });
    };

    Task.prototype.addConversation = function addConversation(callback) {

      var self = this;

      if (self.currentMessage.targetList.length == 0) {
        callback(null);
        return;
      }

      if (self.currentMessage.id != 0) {
        callback(self.currentMessage);
        return;
      }

      var OD_Message_Conversation = {
        "ConversationID": self.currentMessage.id,
        'DateCreated': (0, _moment2.default)().format('MM/DD/YYYY'),

        'NotifyPatient': false,
        'NotifyResponsible': false,
        'Status': 'UNREAD'
      };

      var url = 'message/new';
      self.http.post(self.helper.getApiUrl(url), OD_Message_Conversation, function (messageRes) {

        self.currentMessage.id = messageRes.ConversationID;

        var usrTarget = self.goData.getNewMessageTarget(self.helper._user.UserID, "", "", self.goData.TARGETTYPE.USER, 0);
        self.currentMessage.targetList.push(usrTarget);

        var tUrl = 'targets/new';
        var tObj = [];
        for (var t = 0; t < self.currentMessage.targetList.length; t++) {
          var aTarget = self.currentMessage.targetList[t];
          var newTarget = {
            'Id': 0,
            'ConversationId': messageRes.ConversationID,
            'UserId': null,
            'GroupId': null,
            'PatientId': null
          };
          if (aTarget.targetType == self.goData.TARGETTYPE.USER) {
            newTarget.UserId = aTarget.id;
          }
          if (aTarget.targetType == self.goData.TARGETTYPE.PATIENT) {
            newTarget.PatientId = aTarget.id;
          }
          if (aTarget.targetType == self.goData.TARGETTYPE.GROUP) {
            newTarget.GroupId = aTarget.id;
          }
          tObj.push(newTarget);
        }

        self.http.post(self.helper.getApiUrl(tUrl), JSON.stringify(tObj), function (res) {
          self.updateCurrentMessageTargetIdsWithPostResult(res, self.currentMessage.targetList);

          self.currentMessage.setImageAlt();

          self.filteredMessages.splice(0, 0, self.currentMessage);
          self.selectMessage(self.currentMessage);
          callback(self.currentMessage);
        }, { contentType: "application/json" }, function (err) {
          var e = 'oops';
        });
      });
    };

    Task.prototype.updateCurrentMessageTargetIdsWithPostResult = function updateCurrentMessageTargetIdsWithPostResult(result, targetlist) {
      for (var i = 0; i < result.length; i++) {
        var aRes = result[i];

        var tType = null;
        var searchId = null;
        if (aRes.UserId != null) {
          tType = this.goData.TARGETTYPE.USER;
          searchId = aRes.UserId;
        } else if (aRes.PatientId != null) {
          tType = this.goData.TARGETTYPE.PATIENT;
          searchId = aRes.PatientId;
        } else {
          tType = this.goData.TARGETTYPE.GROUP;
          searchId = aRes.GroupId;
        }

        var targetToUpdate = _.find(targetlist, function (t) {
          return t.id == searchId && t.targetType == tType;
        });
        targetToUpdate.targetId = aRes.Id;
      }
    };

    Task.prototype.addMessage = function addMessage() {
      var self = this;
      if (self.messageText != null && self.currentMessage != null) {
        var sender = _.find(self.currentMessage.targetList, function (s) {
          return s.id == self.helper._user.UserID && s.targetType == self.goData.TARGETTYPE.USER;
        });

        var reply = {
          "ReplyID": 0,
          "ConversationID": self.currentMessage.id,
          'Reply': self.messageText,
          'PatientReply': 0,
          'DateCreated': (0, _moment2.default)().format(),
          'IsSecure': null,
          'SenderId': sender.targetId
        };

        var url = 'message/reply';
        self.http.post(self.helper.getApiUrl(url), reply, function (returnData) {
          if (returnData != null) {

            self.currentMessage.setDate(returnData.DateCreated);

            var newBubble = self.getNewBubbleWithReply(returnData, self.currentMessage, true);
            self.currentMessage.bubbles.push(newBubble);

            self.currentMessage.detail = newBubble.description;

            self.currentMessage.read = newBubble.isSender ? true : false;

            self.messageText = "";

            self.sortFilteredMessagesByNewest();

            var reciever = _.find(self.currentMessage.targetList, function (s) {
              return s.targetType.toLowerCase() == 'patient';
            });
            if (reciever) {
              var msgUrl = 'patientportal/sendmessageemail?patientId=' + reciever.id;
              self.http.getWithUrl(msgUrl, function (messageRes) {});
            }
          } else {
            alert('Reply not created');
          }
        }, null, function (error) {
          alert(error.responseText);
        });
      }
    };

    Task.prototype.sortFilteredMessagesByNewest = function sortFilteredMessagesByNewest() {
      var self = this;
      var orderedMessages = _.orderBy(self.filteredMessages, 'sortdate', 'desc');
      self.filteredMessages = orderedMessages;
    };

    Task.prototype.newConversation = function newConversation() {
      var self = this;
      self.currentMessage = new message(null, null, { "ConversationID": 0 }, null);
      self.toggleToBar();
    };

    Task.prototype.toggleToBar = function toggleToBar() {
      var self = this;
      self.displayToBar = self.displayToBar ? false : true;
      var height = 62;
      if (self.displayToBar) {
        self.detailHeight = self.ogDetailHeight - height;
      } else {
        self.detailHeight = self.ogDetailHeight;
      }
    };

    Task.prototype.setDetailHeight = function setDetailHeight(height) {
      var self = this;
      self.detailHeight = height;
    };

    Task.prototype.cancelTobar = function cancelTobar() {
      var self = this;
      self.toggleToBar();
      self.currentMessage = self.filteredMessages.length > 0 ? self.filteredMessages[0] : null;
    };

    Task.prototype.userSearchClick = function userSearchClick() {
      var self = this;
      self.popHelper.openUserSearchPop(function (res) {});
    };

    Task.prototype.setDisplayInfo = function setDisplayInfo(displayType) {
      var self = this;
      self.displayText = displayType;
      if (displayType == 'Tasks') {
        self.displayIcon = 'fa-thumb-tack';
        self.showTasks = true;
        self.showArchive = false;
        self.showMessages = false;
      }
      if (displayType == 'Messages') {
        self.displayIcon = 'fa-message';
        self.showTasks = false;
        self.showArchive = false;
        self.showMessages = true;
      }
      if (displayType == 'Archive') {
        self.displayIcon = 'fa-archive';
        self.showTasks = false;
        self.showArchive = true;
        self.showMessages = false;
      }
    };

    Task.prototype.toggleTaskClick = function toggleTaskClick() {
      var self = this;
      self.displayMessageTasks = self.displayMessageTasks ? false : true;

      self.taskHelper.displayTaskOrMessage = self.displayMessageTasks ? 'Tasks' : 'Messages';

      if (this.displayMessageTasks) {
        self.filteredMessages = self.taskResults;
        self.setDisplayInfo('Tasks');
      } else {
        var targetType = self.filterMessagesByUser ? self.goData.TARGETTYPE.USER : self.goData.TARGETTYPE.PATIENT;
        self.filteredMessages = self.getMessageResultsWithTargetType(targetType);

        self.setDisplayInfo('Messages');
      }

      var selectedMEssage = _.find(self.filteredMessages, function (m) {
        return m.selected;
      });
      if (selectedMEssage) {
        self.currentMessage = selectedMEssage;
      } else {
        self.currentMessage = self.filteredMessages.length > 0 ? self.filteredMessages[0] : null;
        if (self.currentMessage != null) {
          self.currentMessage.selected = true;
        }
      }

      self.scrollLastBubbleIntoView();
    };

    Task.prototype.close = function close() {
      var self = this;
      self.dialogController.close(true, { 'taskToOpen': self.launchPatientId });
    };

    Task.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    Task.prototype.launchTask = function launchTask(bubble, e) {
      var self = this;
      if (bubble.isTask && bubble.canLaunchTask) {
        this.dialogController.close(true, { 'taskToOpen': bubble.data });
      }
    };

    Task.prototype.addToUpdate = function addToUpdate(task) {
      var index = _.findIndex(this.tasksToUpdate, function (o) {
        return o.TaskID == task.id;
      });
      if (index == -1) {
        this.tasksToUpdate.push(task.data);
      } else {
        this.tasksToUpdate.splice(index, 1, task.data);
      }
    };

    Task.prototype.saveAndClose = function saveAndClose() {
      var self = this;

      clearInterval(self.refreshTimer);

      self.close();
    };

    Task.prototype.saveTasks = function saveTasks(callback) {
      var self = this;

      if (self.tasksToUpdate.length == 0) {
        callback();
        return;
      }

      var url = "tasks";

      var toUpdate = {
        'tasks': []
      };

      for (var i = 0; i < self.tasksToUpdate.length; i++) {
        var aTask = {
          'Id': self.tasksToUpdate[i].TaskID,
          'Description': self.tasksToUpdate[i].Description,
          'Status': self.tasksToUpdate[i].Status,
          'AssignedToID': self.tasksToUpdate[i].AssignedToID
        };
        toUpdate.tasks.push(aTask);
      }

      self.http.put(self.helper.getApiUrl(url), toUpdate, function (res) {
        if (callback != undefined && callback != null) {
          callback(res);
        }

        self.tasksToUpdate = [];
      }, function (err) {
        if (callback != undefined && callback != null) {
          callback(err);
        }
      });
    };

    Task.prototype.activate = function activate(obj) {
      var self = this;

      self.popHelper = obj.popupHelper;
      self.popupWidth = obj.popupWidth * .8;
      self.popupHeight = (obj.popupHeight - 75) * .8;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;
      self.bodyHeight = self.popupHeight - 62;

      self.home = obj.home;

      if (self.taskHelper.filterUserId == 0) {
        self.taskHelper.filterUserId = self.helper._user.UserID;
        self.taskHelper.filterUserName = self.helper._user.UserName;
      }

      self.filterMessagesByUser = self.taskHelper.filterPatientOrUser == 'patient' ? false : true;

      self.displayMessageTasks = self.taskHelper.displayTaskOrMessage == 'Tasks' ? true : false;
      self.setDisplayInfo(self.taskHelper.displayTaskOrMessage);

      self.loadMessages(self.taskHelper.filterUserId, true, function (res) {

        window.setTimeout(function () {
          if (self.taskHelper.search.length > 0) {
            var event = { target: {
                value: self.taskHelper.search.toLowerCase()
              } };
            self.filter(event);
          }
        }, 500);
      });

      self.goData.getProviders(false, function (pros) {
        self.providerList = pros;
      });

      self.goData.getAllUsers(function (usrs) {
        self.userList = usrs;
        self.filteredUserList = self.userList;
      });
    };

    Task.prototype.filterByProvider = function filterByProvider(provider) {

      var self = this;
      self.taskHelper.filterUserId = provider.UserID;
      self.taskHelper.filterUserName = provider.ProviderEntity;

      this.loadMessages(provider.UserID);
    };

    Task.prototype.filterByUser = function filterByUser(user) {
      var self = this;

      self.taskHelper.filterUserId = user.UserID;
      self.taskHelper.filterUserName = user.UserName;
      this.loadMessages(user.UserID);
    };

    Task.prototype.loadMessages = function loadMessages(userId, loadAll, callback) {
      var self = this;
      if (!self.displayMessageTasks || loadAll != undefined) {
        self.getMessagesByUserId(userId, function (res) {
          var orderedMessages = _.orderBy(res, 'sortdate', 'desc');

          if (self.showMessages) {
            self.messageResults = orderedMessages;
          } else {
            self.archivedMessageResults = orderedMessages;
          }

          if (!self.displayMessageTasks) {
            if (self.showMessages) {

              var targetType = self.filterMessagesByUser ? self.goData.TARGETTYPE.USER : self.goData.TARGETTYPE.PATIENT;
              self.filteredMessages = self.getMessageResultsWithTargetType(targetType);
            } else {
              self.filteredMessages = self.archivedMessageResults;
            }

            if (self.filteredMessages.length > 0) {
              self.currentMessage = self.filteredMessages[0];
              self.currentMessage.selected = true;
              if (callback) {
                callback(self.currentMessage);
              }
            } else {
              self.currentMessage = null;
              if (callback) {
                callback(self.currentMessage);
              }
            }
          }
        });
      }
      if (self.displayMessageTasks || loadAll != undefined) {
        self.getTasksWithUserId(userId, undefined, function (res) {
          var orderedTasks = _.orderBy(res, 'sortdate', 'desc');
          self.taskResults = orderedTasks;

          if (self.displayMessageTasks) {
            self.filteredMessages = self.taskResults;
            if (self.filteredMessages.length > 0) {
              self.currentMessage = self.filteredMessages[0];
              self.currentMessage.selected = true;
              if (callback) {
                callback(self.currentMessage);
              }
            } else {
              self.currentMessage = null;
              if (callback) {
                callback(self.currentMessage);
              }
            }
          }
        });
      }
    };

    Task.prototype.attached = function attached() {
      var self = this;
      var res = $(this.taskdialog).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "2001", "important");

      self.gridHeight = self.popupHeight - (self.messagetoolbar.clientHeight + self.messageheader.clientHeight + 4);
      self.ogDetailHeight = self.gridHeight - 11;
      self.detailHeight = self.ogDetailHeight;
    };

    Task.prototype.setStatus = function setStatus(task, status) {
      task.data.Status = status;
      this.addToUpdate(task);
    };

    Task.prototype.toggleFilterStatus = function toggleFilterStatus() {
      var self = this;
      self.filterStatus = self.filterStatus == 'assigned' ? 'completed' : 'assigned';
      self.refreshFilteredTasks(self.filterStatus);
    };

    Task.prototype.refreshFilteredTasks = function refreshFilteredTasks(status) {
      var self = this;
      var tStatus = status == undefined ? 'assigned' : self.filterStatus;
      var filtered = _.filter(self.messageResults, function (t) {
        return t.data.Status.toLowerCase() == tStatus;
      });
      self.filteredMessages = filtered;
    };

    Task.prototype.setDescription = function setDescription(task) {
      this.addToUpdate(task);
    };

    Task.prototype.getElementoffset = function getElementoffset(el) {
      var rect = el.getBoundingClientRect(),
          scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,
          scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      return { top: rect.top + scrollTop, left: rect.left + scrollLeft };
    };

    Task.prototype.completeTask = function completeTask(OD_task, event) {
      var self = this;

      OD_task.Status = 'COMPLETED';

      self.goData.updateTask(OD_task, function (res) {

        if (res != null) {
          self.currentMessage.removeBubbleWithId(res.TaskID);
        }
      });

      event.stopPropagation();
    };

    Task.prototype.forwardTask = function forwardTask(bubble, event) {
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth / 2;

      var self = this;

      self.popHelper.openTaskPop(null, null, null, null, null, self.home, function (res) {
        var doSomething = res;
        if (res != null) {
          self.currentMessage.removeBubbleWithId(bubble.data.TaskID);
        }
      }, bubble.data);

      event.stopPropagation();
    };

    Task.prototype.rowClicked = function rowClicked(r) {
      this.selectedTask = r;
      for (var i = 0; i < this.filteredMessages.length; i++) {
        if (this.filteredMessages[i].id == r.id) {
          this.filteredMessages[i].selected = true;
        } else {
          this.filteredMessages[i].selected = false;
        }
      }
    };

    Task.prototype.messageClicked = function messageClicked(r) {
      this.currentMessage = r;
      for (var i = 0; i < this.filteredMessages.length; i++) {
        if (this.filteredMessages[i].id == r.id) {
          this.filteredMessages[i].selected = true;
        } else {
          this.filteredMessages[i].selected = false;
        }
      }

      this.scrollLastBubbleIntoView();
    };

    return Task;
  }()) || _class);
});;
define('text!go/task/task.html',[],function(){return "<template><require from=\"./bubbleCustomAttribute\"></require><ux-dialog ref=\"taskdialog\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px; padding-top:0px;\"><ux-dialog-body style=\"position:absolute;width:100%;padding:0\"><div class=\"row m-0\"><div class=\"col-md-4 border-right pl-2\"><div ref=\"messagetoolbar\" class=\"d-flex align-items-center\"><div if.bind=\"!editMode\" class=\"dropdown btn-group\"><button id=\"btnGroupDrop1\" class=\"btn text-primary\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Edit</button><div class=\"dropdown-menu\" aria-labelledby=\"btnGroupDrop1\"><li if.bind=\"showMessages\"><a class=\"dropdown-item ${showMessages ? '' : 'disabled'}\" href=\"#\" click.delegate=\"toggleMessageEdit()\">Select Messages <i class=\"fa fa-check-circle-o\" style=\"cursor:pointer\"></i></a></li><li if.bind=\"showMessages\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"displayActiveMessages()\">Display Active <i class=\"fa fa-comment\" style=\"cursor:pointer\"></i></a></li><li if.bind=\"showMessages\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"displayArchivedMessages()\">Display Archived <i class=\"fa fa-archive\" style=\"cursor:pointer\"></i></a></li><li if.bind=\"showMessages\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"filterUserMessages()\">Filter User Messages <i class=\"fa fa-filter\" style=\"cursor:pointer\"></i></a></li><li if.bind=\"showMessages\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"filterPatientMessages()\">Filter Patient Messages <i class=\"fa fa-filter\" style=\"cursor:pointer\"></i></a></li><li if.bind=\"!showMessages\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"filterPriority('all')\">Filter All <i class=\"fa fa-filter\" style=\"cursor:pointer\"></i></a></li><li if.bind=\"!showMessages\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"filterPriority('high')\">Filter High <i class=\"fa fa-filter\" style=\"cursor:pointer\"></i></a></li><li if.bind=\"!showMessages\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"filterPriority('med')\">Filter Med <i class=\"fa fa-filter\" style=\"cursor:pointer\"></i></a></li><li if.bind=\"!showMessages\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"filterPriority('low')\">Filter Low <i class=\"fa fa-filter\" style=\"cursor:pointer\"></i></a></li></div></div><span if.bind=\"editMode\" class=\"py-2 d-inline-block text-primary\" click.delegate=\"doneClick()\">Done</span> <i if.bind=\"displayMessageTasks\" class=\"fa fa-edit fa-2x py-2 ml-auto\" style=\"color:#9e9e9e\"></i> <i if.bind=\"!displayMessageTasks\" class=\"fa fa-edit fa-2x py-2 text-primary ml-auto\" style=\"cursor:pointer\" click.delegate=\"newConversation()\"></i></div><div ref=\"messageheader\" class=\"d-flex align-items-center\"><span click.delegate=\"toggleTaskClick()\"><span if.bind=\"showMessages\"><i class=\"fa fa-comment fa-2x text-primary\"></i> <i class=\"fa fa-thumb-tack\" style=\"color:#9e9e9e\"></i> <span class=\"py-1 pl-2 mb-0 h3 d-inline-block font-weight-bold\"><span>${displayText}</span></span></span><span if.bind=\"showTasks\"><i class=\"fa fa-thumb-tack fa-2x text-primary\"></i> <i class=\"fa fa-comment\" style=\"color:#9e9e9e\"></i> <span class=\"py-1 pl-2 mb-0 h3 d-inline-block font-weight-bold\"><span>${displayText}</span></span></span><span if.bind=\"showArchive\"><i class=\"fa fa-archive fa-2x text-primary\"></i> <span class=\"py-1 pl-2 mb-0 h3 d-inline-block font-weight-bold\"><span>${displayText}</span></span></span></span><div class=\"dropdown ml-auto\"><button class=\"btn dropdown-toggle text-primary\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-user\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu dropdown-menu-right p-2\" style=\"overflow-y:scroll\" css=\"height: ${popupHeight - 100}px;\"><input type=\"text\" input.delegate=\"filterUsers($event)\" class=\"form-control\" placeholder=\"Users...\"> <a repeat.for=\"u of filteredUserList\" class=\"dropdown-item\" href=\"#\" click.delegate=\"filterByUser(u)\"> ${u.UserName} </a></div></div></div><div class=\"row\" style=\"overflow-y:scroll\" css=\"height:${gridHeight}px;\"><div class=\"col-md-12\"><div class=\"row p-1 mx-0\"><div class=\"input-group\"><div class=\"input-group-text\" id=\"btnGroupAddon\" style=\"border-top:1px solid #ced4da;border-bottom:1px solid #ced4da;border-left:1px solid #ced4da;border-right:none;border-top-left-radius:10px;border-bottom-left-radius:10px;background-color:#fff;border-top-right-radius:0;border-bottom-right-radius:0\"><i class=\"fa fa-search\" aria-hidden=\"true\" style=\"color:#adadad\"></i></div><input type=\"text\" input.delegate=\"filter($event)\" value.bind=\"taskHelper.search\" style=\"border-top:1px solid #ced4da;box-shadow:none!important;border-bottom:1px solid #ced4da;border-right:1px solid #ced4da;border-left:none;border-top-right-radius:10px;border-bottom-right-radius:10px;padding-left:0\" class=\"form-control\" placeholder.bind=\"displayMessageTasks ? 'Search Task Description...' : 'Search Sender...'\" aria-label=\"Input group example\" aria-describedby=\"btnGroupAddon\"></div></div><div class=\"row p-1 mx-0 d-flex\" style=\"padding-top:0!important\"><span class=\"font-weight-light\" style=\"color:#9e9e9e;font-size:small\"><i class=\"fa fa-user py-1\" aria-hidden=\"true\"></i> ${taskHelper.filterUserName} </span><span class=\"font-weight-light ml-auto\" style=\"color:#9e9e9e;font-size:small\"><i class=\"fa fa-filter py-1\" aria-hidden=\"true\"></i> <span if.bind=\"!filterMessagesByUser\">Patient</span> <span if.bind=\"filterMessagesByUser\">User</span></span></div><template repeat.for=\"s of filteredMessages\"><div class=\"row p-1 mx-0 mt-0 d-flex\" click.delegate=\"messageClicked(s)\" class.bind=\"s.selected ? 'message' : 'border-bottom'\"><div if.bind=\"editingMessages\" class=\"p-0 mr-2 align-self-center\" style=\"line-height:45px;height:45px\" click.delegate=\"messageClickForArchive(s)\"><i if.bind=\"!s.selectedForArchive\" class=\"fa fa-circle-thin fa-lg text-muted pl-1\" aria-hidden=\"true\" style=\"vertical-align:middle;line-height:normal\"></i> <i if.bind=\"s.selectedForArchive\" class=\"fa fa-check-circle fa-lg text-primary pl-1\" aria-hidden=\"true\" style=\"vertical-align:middle;line-height:normal\"></i></div><div if.bind=\"!editingMessages\" class=\"p-0 text-center mr-2 align-self-center\" style=\"line-height:45px;height:45px;width:22px\"><i if.bind=\"!s.read\" class=\"fa fa-circle text-primary\" aria-hidden=\"true\" style=\"font-size:x-small;vertical-align:middle;line-height:normal\"></i></div><div class=\"p-0 mr-2 align-self-center\"><img if.bind=\"!s.showAlt\" src.bind=\"s.imagePath\" class=\"rounded-circle py-1\" alt=\"...\" style=\"width:45px;min-width:45px\"><div if.bind=\"s.showAlt\" class=\"d-inline-block rounded-circle\" style=\"background-color:#d3d3d3;width:45px;height:45px;line-height:45px;text-align:center\"><span class=\"d-inline-block\" style=\"vertical-align:middle;line-height:normal\">${s.alt}</span></div></div><div class=\"align-self-start flex-grow-1\" style=\"width:10px\"><div class=\"d-flex align-items-center\"><span class=\"font-weight-bold text-truncate\">${s.subjectName}</span><small class=\"ml-auto text-muted\">${s.date}</small></div><div class=\"text-truncate text-muted\"><small>${s.detail}</small></div></div></div></template><div if.bind=\"editingMessages\" class=\"row border-top mx-0\" style=\"background-color:#f7f7f7;position:absolute;bottom:0;right:0;left:4px\"><div class=\"col-md-12 py-2\"><div if.bind=\"archiveList.length > 0\" class=\"float-right text-primary\" click.delegate=\"archiveConversationClick()\">Archive</div><div if.bind=\"archiveList.length == 0\" class=\"float-right text-muted\">Archive</div></div></div></div></div></div><div class=\"col-md-8\"><div class=\"row border-bottom\" style=\"background-color:#f7f7f7;border-top-right-radius:5px\"><div class=\"col-md-12 text-center\"><span class=\"font-weight-bold py-2 d-inline-block\">${currentMessage.subjectName}</span><span if.bind=\"displayToBar\" class=\"py-2 d-inline-block text-primary float-right\" click.delegate=\"cancelTobar()\">Cancel</span> <i if.bind=\"!displayToBar\" class=\"fa fa-times fa-2x float-right py-2\" style=\"cursor:pointer\" click.delegate=\"saveAndClose()\"></i></div></div><compose if.bind=\"!displayToBar\" view=\"./messageBubbleView.html\" containerless></compose><compose if.bind=\"displayToBar\" view-model=\"./messageSearchView\" model.bind=\"$this\" containerless></compose><div class=\"row pb-2\" style=\"position:absolute;bottom:0;width:100%\"><div class=\"col-md-12\"><div if.bind=\"!displayMessageTasks\" class=\"input-group\"><textarea value.bind=\"messageText\" class=\"form-control message-box\" placeholder=\"message...\" aria-describedby=\"button-addon2\" style=\"height:40px;resize:none;border-right:none;border-top-left-radius:18px;border-bottom-left-radius:18px\"></textarea><div class=\"input-group-append\"><span style=\"border:1px solid #ced4da;border-left:none;padding-top:2px;padding-bottom:2px;padding-right:6px;border-top-right-radius:18px;border-bottom-right-radius:18px\" id=\"button-addon2\" click.delegate=\"messageButtonClick()\"><i class=\"fa fa-arrow-circle-up text-primary fa-2x\" aria-hidden=\"true\"></i></span></div></div></div></div></div></div></ux-dialog-body></ux-dialog></template>";});;
define('go/task/taskHelper',['exports', 'aurelia-framework', '../../data/go/data', 'lodash'], function (exports, _aureliaFramework, _data, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TaskHelper = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor;

  var TaskHelper = exports.TaskHelper = (_dec = (0, _aureliaFramework.inject)(_data.Data), _dec(_class = (_class2 = function () {
    function TaskHelper(Data) {
      _classCallCheck(this, TaskHelper);

      _initDefineProp(this, 'objectId', _descriptor, this);

      this.taskTypeId = 0;
      this.cacheObjectId = 0;
      this.cacheTaskTypeId = 0;
      this.hasTaskableObject = false;
      this.search = '';
      this.filterUserId = 0;
      this.filterUserName = null;
      this.filterPatientOrUser = 'patient';
      this.displayTaskOrMessage = 'Tasks';

      var self = this;
      this.goData = Data;
      this.taskTypeList = [];
      this.all = [];
    }

    TaskHelper.prototype.setup = function setup() {
      var self = this;
      self.goData.getAllowableTaskTypes(function (allowed, all) {
        self.taskTypeList = allowed;
        self.all = all;
      });
    };

    TaskHelper.prototype.clear = function clear() {
      this.objectId = 0;
      this.taskTypeId = 0;
      this.patientId = null;
      this.userId = 0;
      this.date = null;
    };

    TaskHelper.prototype.objectIdChanged = function objectIdChanged(newVal, oldVal) {
      if (newVal == 0) {
        this.hasTaskableObject = false;
      } else {
        this.hasTaskableObject = true;
      }
    };

    TaskHelper.prototype.clearCachedTask = function clearCachedTask() {
      this.cacheObjectId = 0;
      this.cacheTaskTypeId = 0;
    };

    TaskHelper.prototype.canOpen = function canOpen(taskTypeId) {
      return _.find(this.taskTypeList, function (t) {
        return t.Id == taskTypeId;
      });
    };

    TaskHelper.prototype.setObjectToTask = function setObjectToTask(objectId, taskTypeId) {
      this.objectId = objectId;
      this.taskTypeId = taskTypeId;
    };

    TaskHelper.prototype.cacheObjectToTask = function cacheObjectToTask(objectId, taskTypeId) {
      this.cacheObjectId = objectId;
      this.cacheTaskTypeId = taskTypeId;
    };

    TaskHelper.prototype.cacheCurrentTask = function cacheCurrentTask() {
      this.cacheObjectId = this.objectId;
      this.cacheTaskTypeId = this.taskTypeId;
    };

    TaskHelper.prototype.getTypeWithId = function getTypeWithId(id) {
      return _.find(this.all, function (t) {
        return t.Id == id;
      });
    };

    TaskHelper.prototype.getTaskTypeWithTypeAndDescription = function getTaskTypeWithTypeAndDescription(type, desc) {
      return _.find(this.all, function (t) {
        return t.TypeAsString.toLowerCase() == type.toLowerCase() && t.Description.toLowerCase() == desc.toLowerCase();
      });
    };

    return TaskHelper;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'objectId', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return 0;
    }
  })), _class2)) || _class);
});;
define('go/task/taskPopup',['exports', 'aurelia-framework', 'aurelia-dialog', '../../helpers/http', '../../helpers/helper', '../../data/go/data', 'moment', './taskHelper'], function (exports, _aureliaFramework, _aureliaDialog, _http, _helper, _data, _moment, _taskHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TaskPopup = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var TaskTarget = function () {
    function TaskTarget() {
      _classCallCheck(this, TaskTarget);

      this.id;
      this.isGroup = false;

      this.firstName;
      this.lastName;
    }

    _createClass(TaskTarget, [{
      key: 'description',
      get: function get() {
        return this.firstName + ' ' + this.lastName;
      }
    }]);

    return TaskTarget;
  }();

  var TaskPopup = exports.TaskPopup = (_dec = (0, _aureliaFramework.inject)(_http.http, _helper.helper, _aureliaDialog.DialogController, _data.Data, _taskHelper.TaskHelper), _dec(_class = (_class2 = function () {
    TaskPopup.prototype.priorityChanged = function priorityChanged(newVal, oldVal) {
      this.updateTaskItemsPriority(newVal);
    };

    TaskPopup.prototype.dueDateChanged = function dueDateChanged(newVal, oldVal) {
      this.updateTaskItemsDueDate(newVal);
    };

    function TaskPopup(http, helper, DialogController, Data, TaskHelper) {
      _classCallCheck(this, TaskPopup);

      this.popupLR = 0;
      this.popupTB = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.popupLeft = 0;
      this.popupTop = 0;
      this.overlayZIndex = 5000;
      this.containerZIndex = 5001;
      this.patientId = null;
      this.providerId = null;
      this.taskTypeId = 0;
      this.description = "";

      _initDefineProp(this, 'priority', _descriptor, this);

      this.createdById = 0;
      this.objectId = 0;
      this.objectDate = null;
      this.selectedTarget = null;
      this.taskTargets = [];
      this.filteredTaskTargets = [];
      this.priorityList = ['Low', 'Med', 'High'];
      this.isSaving = false;

      _initDefineProp(this, 'datepicker', _descriptor2, this);

      _initDefineProp(this, 'dueDate', _descriptor3, this);

      this.home = null;
      this.taskToUpdate = null;
      this.fieldRequired = true;
      this.taskItems = [];

      this.http = http;
      this.helper = helper;
      this.dialogController = DialogController;
      this.goData = Data;
      this.taskHelper = TaskHelper;
    }

    TaskPopup.prototype.activate = function activate(obj) {
      var self = this;

      self.popupWidth = obj.popupWidth * .8;
      self.popupHeight = (obj.popupHeight - 75) * .8;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;

      if (obj.data) {
        if (obj.data.overlayZIndex) {
          self.overlayZIndex = obj.data.overlayZIndex;
        }
        if (obj.data.containerZIndex) {
          self.containerZIndex = obj.data.containerZIndex;
        }
      }

      self.home = obj.data.home;

      var descriptionDate = null;

      if (obj.data.taskToUpdate != undefined) {
        self.taskItems.push(obj.data.taskToUpdate);
      } else {
        if (obj.data.providerId == 0) {
          self.openProviderPicker(function (pro) {
            self.home.popupHelper.closeActiveDialog();
            self.providerId = pro.ProviderID;
          });
        } else {
          self.providerId = obj.data.providerId;
        }

        self.setupTaskObjects(obj.data.taskPopupObjects);
      }

      self.loadTargetList();
    };

    TaskPopup.prototype.updateTaskItemsPriority = function updateTaskItemsPriority(priority) {
      for (var i = 0; i < this.taskItems.length; i++) {
        this.taskItems[i].Priority = priority;
      }
    };

    TaskPopup.prototype.updateTaskItemsDueDate = function updateTaskItemsDueDate(date) {
      for (var i = 0; i < this.taskItems.length; i++) {
        this.taskItems[i].DueDate = date;
      }
    };

    TaskPopup.prototype.updateTaskItemsTarget = function updateTaskItemsTarget(target) {
      for (var i = 0; i < this.taskItems.length; i++) {
        if (target.isGroup) {
          this.taskItems[i].GroupId = target.id;
        } else {
          this.taskItems[i].AssignedToID = target.id;
        }
      }
    };

    TaskPopup.prototype.setupTaskObjects = function setupTaskObjects(taskPopupObjects) {
      var self = this;
      for (var i = 0; i < taskPopupObjects.length; i++) {
        var tObj = taskPopupObjects[i];
        var taskToSave = self.goData.getTaskObject(tObj.taskTypeId, tObj.objectId);

        new Promise(function (resolve, reject) {
          resolve(tObj.patientName);
        }).then(function (pname) {
          if (pname == null) {
            return new Promise(function (resolve, reject) {
              self.home.getPatientName(tObj.patientId, function (name) {
                resolve(name);
              });
            });
          } else {
            return pname;
          }
        }).then(function (finalPatientName) {

          taskToSave['Patient_Name'] = finalPatientName;
          taskToSave.Type = self.taskHelper.getTypeWithId(tObj.taskTypeId).TypeAsString;
          taskToSave.Description = "Review " + finalPatientName + " " + taskToSave.Type + " from " + tObj.date;
          taskToSave.Priority = self.priority;
          taskToSave.Status = 'ASSIGNED';
          taskToSave.UserID = self.helper._user.UserID;
          taskToSave.CreatedByID = taskToSave.UserID;
          taskToSave.PatientID = tObj.patientId;
          taskToSave.AssignedToID = 0;
          taskToSave.GroupId = 0;

          taskToSave.DueDate = self.dueDate;
          taskToSave.ProviderID = tObj.providerId;
          taskToSave.objectDate = tObj.date;

          self.description += taskToSave.Description + "&#13;&#10";

          self.taskItems.push(taskToSave);
        });
      }
    };

    TaskPopup.prototype.openProviderPicker = function openProviderPicker(callback) {
      var self = this;
      var providerList = [];
      for (var i = 0; i < self.home.providers.length; i++) {
        if (i == 0) continue;
        var pItm = self.goData.getGenericPicklistItem(self.home.providers[i].ProviderEntity, self.home.providers[i]);
        providerList.push(pItm);
      }
      self.home.popupHelper.openGenericPicklistPop("A provider must be selected for the task.", "Select Task Provider", providerList, false, function (providerRes) {
        callback(providerRes.item);
      });
    };

    TaskPopup.prototype.filterTarget = function filterTarget(t) {
      var self = this;
      var search = t.target.value;

      var searchRes = _.filter(self.taskTargets, function (t) {
        return t.firstName.toLowerCase().startsWith(search.toLowerCase()) || t.lastName.toLowerCase().startsWith(search.toLowerCase());
      });
      self.filteredTaskTargets = _.sortBy(searchRes, function (u) {
        return u.description.toLowerCase();
      });

      $('#assignedDropdown').dropdown('show');
      $('#assignedTextbox').focus();
    };

    TaskPopup.prototype.targetSelected = function targetSelected(t) {
      this.selectedTarget = t;
      this.updateTaskItemsTarget(t);
      this.toggleRequiredFieldColor();
    };

    TaskPopup.prototype.toggleRequiredFieldColor = function toggleRequiredFieldColor() {
      var self = this;
      self.fieldRequired = self.fieldRequired ? false : true;
    };

    TaskPopup.prototype.loadTargetList = function loadTargetList() {
      var self = this;

      self.goData.getAllUsers(function (res) {
        for (var i = 0; i < res.length; i++) {
          var aTarget = new TaskTarget();
          aTarget.id = res[i].UserID;

          aTarget.firstName = res[i].FirstName;
          aTarget.lastName = res[i].LastName;
          self.taskTargets.push(aTarget);
        }

        self.goData.getAllGroups(function (res) {
          for (var g = 0; g < res.length; g++) {
            var aTarget = new TaskTarget();
            aTarget.id = res[g].GroupID;
            aTarget.isGroup = true;

            aTarget.firstName = res[g].GroupName;
            aTarget.lastName = "";
            self.taskTargets.push(aTarget);
          }

          self.filteredTaskTargets = _.sortBy(self.taskTargets, function (u) {
            return u.description.toLowerCase();
          });
        });
      });
    };

    TaskPopup.prototype.attached = function attached() {
      var container = $(this.taskpop).closest('ux-dialog-container');
      var contDx = container[0];
      contDx.style.setProperty("z-index", this.containerZIndex, "important");
      contDx.classList.add("active");

      contDx.previousSibling.classList.add("active");
      contDx.previousSibling.style.setProperty("z-index", this.overlayZIndex, "important");
    };

    TaskPopup.prototype.openCalendar = function openCalendar() {
      this.datepicker.methods.toggle();
    };

    TaskPopup.prototype.saveTask = function saveTask(callback) {
      var self = this;

      if (self.selectedTarget == null) {
        callback(false);
        return;
      }

      for (var i = 0; i < self.taskItems.length; i++) {
        var aTask = self.taskItems[i];

        if (aTask.TaskID == 0) {
          self.goData.saveTask(aTask, function (res) {
            var success = res;
            if (self.taskItems.length == 1) {
              callback(success);
            }
          });
        } else {
          self.goData.updateTask(aTask, function (res) {
            var success = res;
            if (self.taskItems.length == 1) {
              callback(success);
            }
          });
        }
      }

      callback(false);
    };

    TaskPopup.prototype.close = function close() {
      var self = this;

      if (self.fieldRequired) return;

      self.isSaving = true;
      self.saveTask(function (res) {
        if (res == false) {
          self.isSaving = false;
        } else {
          self.dialogController.close(true, { "taskToOpen": res });
        }
      });
    };

    TaskPopup.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    return TaskPopup;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'priority', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return 'Low';
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'datepicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'dueDate', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return (0, _moment2.default)().format('MM/DD/YYYY');
    }
  })), _class2)) || _class);
});;
define('text!go/task/taskPopup.html',[],function(){return "<template><style>.dialog-header-content{display:flex!important}</style><ux-dialog ref=\"taskpop\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\">Create Task</h4><i class=\"fa fa-times fa-lg fa-2x ml-auto mr-2\" style=\"cursor:pointer;float:right\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body><form><div class=\"form-row\"><div class=\"form-group col-md-12\"><label for=\"descriptionInput\" class=\"form-label\">Description</label> <textarea innerhtml.bind=\"description\" style=\"width:100%\" rows=\"3\" class=\"form-control\" id=\"descriptionInput\" aria-describedby=\"description\"></textarea></div></div><div class=\"form-row\"><div class=\"form-group col-md-8\"><label for=\"assignedTextbox\">Assigned To</label> <button id=\"assignedDropdown\" type=\"button\" class=\"btn\" style=\"border:none;padding-top:0;padding-left:0;box-shadow:none!important;display:block\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><input id=\"assignedTextbox\" input.delegate=\"filterTarget($event)\" value.bind=\"selectedTarget.description\" style=\"display:inline-block;width:75%;float:left;border:none;border-top:1px solid #ced4da;border-bottom:1px solid #ced4da;border-left:1px solid #ced4da;border-top-right-radius:0;border-bottom-right-radius:0\" type=\"text\" class=\"form-control\" placeholder=\"Assigned to...\" css=\"border-color:${ fieldRequired ? '#dc3545' : '#ced4da'}\"> <i class=\"fa fa-caret-down\" style=\"position:relative;border-top:1px solid #ced4da;border-bottom:1px solid #ced4da;border-right:1px solid #ced4da;border-top-right-radius:.25rem;border-bottom-right-radius:.25rem;height:38px;padding:10px;float:left\" css=\"border-color:${ fieldRequired ? '#dc3545' : '#ced4da'}\"></i></button><div class=\"dropdown-menu\" style=\"overflow:scroll;height:350px\"><a repeat.for=\"b of filteredTaskTargets\" class=\"dropdown-item\" href=\"#\" click.delegate=\"targetSelected(b)\"> ${b.description} </a></div></div><div class=\"form-group col-md-4\"><label for=\"prioritySelect\">Priority</label> <select id=\"prioritySelect\" class=\"form-control\" value.bind=\"priority\" required><option model.bind=\"null\">Select...</option><option repeat.for=\"s of priorityList\" model.bind=\"s\"> ${s} </option></select></div></div><div class=\"form-row\"><div class=\"input-group col-md-12\"><label class=\"pt-1 pr-2\">Due Date</label><abp-datetime-picker icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"datepicker\" value.bind=\"dueDate\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary\" type=\"button\" click.delegate=\"openCalendar()\"><i class=\"fa fa-calendar\"></i></button></div></div></div></form></ux-dialog-body><ux-dialog-footer><button disabled.bind=\"isSaving\" click.delegate=\"close()\">Save</button></ux-dialog-footer></ux-dialog></template>";});;
define('go/userSearch',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper', 'lodash'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.UserSearch = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var User = function User(id, name, data) {
    _classCallCheck(this, User);

    this.id = id;
    this.name = name;
    this.selected = false;
    this.data = data;
  };

  var UserSearch = exports.UserSearch = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
    function UserSearch(DialogController, http, helper) {
      _classCallCheck(this, UserSearch);

      this.selectedUser = null;
      this.searchResults = [];
      this.searchString = "";
      this.users = [];
      this.popupLR = 0;
      this.popupTB = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
    }

    UserSearch.prototype.searchStringResult = function searchStringResult(val) {
      this.searchString = val;
      this.filter();
    };

    UserSearch.prototype.searchStringResult = function searchStringResult() {
      return this.searchString;
    };

    UserSearch.prototype.close = function close() {
      var self = this;
      self.dialogController.close(true, self.selectedUser);
    };

    UserSearch.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    UserSearch.prototype.attached = function attached() {
      var res = $(this.userdialog).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");
    };

    UserSearch.prototype.activate = function activate(obj) {
      var self = this;

      self.popupWidth = obj.options.popupWidth;
      self.popupHeight = obj.options.popupHeight;
      self.popupTop = obj.options.popupTop;
      self.popupLeft = obj.options.popupLeft;

      self.dialogController.settings.host = obj.host;

      self.getUsers();
    };

    UserSearch.prototype.getUsers = function getUsers() {
      var self = this;

      var n = self.helper.createNoty("loading users...", 10000);
      n.show();

      self.http.get(self.helper.getApiUrl('users'), function (res) {
        self.users = _.filter(res, function (o) {
          return o.LastName != null && o.LastName.trim().length > 0;
        });

        self.helper.notySuccess(n, "users loaded");
        n.close();
      });
    };

    UserSearch.prototype.filter = function filter(val) {
      var self = this;
      self.searchResults = [];

      var res = _.filter(self.users, function (o) {
        return o.LastName.toLowerCase().startsWith(self.searchString.toLowerCase()) || o.FirstName.toLowerCase().startsWith(self.searchString.toLowerCase());
      });
      var startsWith = _.filter(res, function (o) {
        return o.LastName.toLowerCase().startsWith(self.searchString.toLowerCase());
      });
      var notStartWith = _.filter(res, function (o) {
        return !o.LastName.toLowerCase().startsWith(self.searchString.toLowerCase());
      });

      startsWith = _.sortBy(startsWith, [function (o) {
        return o.LastName;
      }]);
      notStartWith = _.sortBy(notStartWith, [function (o) {
        return o.LastName;
      }]);

      for (var i = 0; i < startsWith.length; i++) {
        var aUser = startsWith[i];
        self.searchResults.push(new User(aUser.UserID, aUser.LastName + ", " + aUser.FirstName, aUser));
      }
      for (var i = 0; i < notStartWith.length; i++) {
        var aUser = notStartWith[i];
        self.searchResults.push(new User(aUser.UserID, aUser.LastName + ", " + aUser.FirstName, aUser));
      }
    };

    UserSearch.prototype.rowClicked = function rowClicked(r) {
      var self = this;
      for (var i = 0; i < self.searchResults.length; i++) {
        var row = self.searchResults[i];
        if (row.id == r.id) {
          row.selected = true;
          self.selectedUser = r;
        } else {
          row.selected = false;
        }
      }
    };

    return UserSearch;
  }()) || _class);
});;
define('text!go/userSearch.html',[],function(){return "<template><ux-dialog ref=\"userdialog\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\">User</h4><i class=\"fa fa-times fa-lg\" style=\"cursor:pointer;float:right\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body style=\"position:absolute;width:100%;height:70%\"><div><span style=\"position:absolute;margin-left:8px;height:38px;display:flex;align-items:center;color:grey\"><i class=\"fa fa-search\" aria-hidden=\"true\"></i> </span><input type=\"text\" class=\"form-control\" placeholder=\"search user...\" aria-label=\"search user...\" aria-describedby=\"searchIcon\" value.bind=\"searchString\" input.delegate=\"filter($this)\" style=\"padding-left:25px\"></div><div class=\"tableFixHeadLight\" css=\"height: ${popupHeight - 198}px;\"><table class=\"table table-sm\"><thead><tr><th scope=\"col\">Name</th></tr></thead><tbody><template repeat.for=\"s of searchResults\"><tr click.delegate=\"rowClicked(s)\" class.bind=\"s.selected ? 'table-primary' : 'table-light'\"><td>${s.name}</td></tr></template></tbody></table></div></ux-dialog-body><ux-dialog-footer style=\"position:absolute;width:100%;bottom:0;padding-right:15px\"><button click.delegate=\"close()\">Select</button></ux-dialog-footer></ux-dialog></template>";});;
define('go/viewModelPopup',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ViewModelPopup = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var ViewModelPopup = exports.ViewModelPopup = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
    function ViewModelPopup(DialogController, http, helper) {
      _classCallCheck(this, ViewModelPopup);

      this.popupTop = 0;
      this.popupLeft = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.overlayTop = 0;
      this.viewPath = "";
      this.header = "";
      this.viewModel = null;
      this.displayHeader = true;
      this.bodyPadding = 16;
      this.ignoreScrollHeightCalculation = false;
      this.backgroundColor = '#ffffff';
      this.dropshadow = true;
      this.overflowY = 'unset';
      this.displaySpinner = false;
      this.elId = "test";

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
    }

    ViewModelPopup.prototype.activate = function activate(obj) {
      var self = this;

      var widthFloor = Math.floor(obj.popupWidth);
      var heightFloor = Math.floor(obj.popupHeight);

      self.popupWidth = Number.isInteger(widthFloor) ? obj.popupWidth + "px" : obj.popupWidth;
      self.popupHeight = Number.isInteger(heightFloor) ? obj.popupHeight + "px" : obj.popupHeight;
      self.popupTop = obj.top;
      self.popupLeft = obj.left;

      self.viewPath = obj.viewPath;
      self.header = obj.header;
      self.viewModel = obj.viewModel;
      self.viewModel.dialog = self.dialogController;

      if (obj.options) {
        if (obj.options.hasOwnProperty('icon')) {
          self.icon = obj.options.icon;
        }
        if (obj.options.hasOwnProperty('dropshadow')) {
          self.dropshadow = obj.options.dropshadow;
        }
        if (obj.options.hasOwnProperty('displayHeader')) {
          self.displayHeader = obj.options.displayHeader;
        }
        if (obj.options.hasOwnProperty('bodyPadding')) {
          self.bodyPadding = obj.options.bodyPadding;
        }
        if (obj.options.hasOwnProperty('overlayTop')) {
          self.overlayTop = obj.options.overlayTop;
        }
        if (obj.options.hasOwnProperty('backgroundColor')) {
          self.backgroundColor = obj.options.backgroundColor;
        }
        if (obj.options.hasOwnProperty('ignoreScrollHeightCalculation')) {
          self.ignoreScrollHeightCalculation = obj.options.ignoreScrollHeightCalculation;
        }
        if (obj.options.hasOwnProperty('scrollHeight')) {
          self.scrollheight = obj.options.scrollHeight;
        } else {
          self.scrollheight = 'initial';
        }
        if (obj.options.hasOwnProperty('overflowY')) {
          self.overflowY = obj.options.overflowY;
        }
        if (obj.viewModel && obj.viewModel.options && obj.viewModel.options.hasOwnProperty('elId')) {
          self.elId = obj.viewModel.options.elId;
        }
      }
    };

    ViewModelPopup.prototype.showSpinner = function showSpinner() {
      this.displaySpinner = true;
    };

    ViewModelPopup.prototype.hideSpinner = function hideSpinner() {
      this.displaySpinner = false;
    };

    ViewModelPopup.prototype.attached = function attached() {
      var self = this;
      var res = $(self.viewmodelpop).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");

      if (!self.ignoreScrollHeightCalculation) {
        if (self.displayHeader) {
          self.scrollheight = self.viewmodelpop.clientHeight - self.viewmodelheader.clientHeight;
        } else {
          self.scrollheight = self.viewmodelpop.clientHeight;
        }
      }

      var style = {
        'top': self.overlayTop + 'px',
        'overflow-y': self.overflowY
      };

      var overlay = $('ux-dialog-overlay');
      self.viewModel.overlay = overlay;

      $('ux-dialog-overlay').css(style);
      $('ux-dialog-container').css(style);

      if (!self.dropshadow) {
        var dxStyle = {
          'box-shadow': '0 0 0 rgba(0,0,0,.5)'
        };
        $('ux-dialog').css(dxStyle);
      }
    };

    ViewModelPopup.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    return ViewModelPopup;
  }()) || _class);
});;
define('text!go/viewModelPopup.html',[],function(){return "<template><style>.dialog-header-content{display:flex!important;align-items:center!important;height:40px}</style><ux-dialog ref=\"viewmodelpop\" style=\"padding:0;display:flex!important\" id.bind=\"elId\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}; height: ${popupHeight}; flex-direction: ${displayHeader ? 'column' : 'row'};\"><i if.bind=\"displaySpinner\" class=\"fa fa-spinner fa-pulse fa-3x fa-fw\" style=\"position:absolute;left:50%;top:50%\"></i><ux-dialog-header ref=\"viewmodelheader\" class=\"py-2\" if.bind=\"displayHeader\"><i if.bind=\"icon\" class=\"fa ${icon} mr-2 fa-2x\"></i><h4 style=\"display:inline-block;margin-bottom:0\">${header}</h4><i class=\"fa fa-times fa-2x ml-auto mr-2\" style=\"cursor:pointer\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body css=\"padding:${bodyPadding}px; height:${scrollheight}; background-color: ${backgroundColor}; width: 100%;\"><div style=\"height:100%\"><compose view-model=\"${viewPath}\" model.bind=\"viewModel\" containerless></compose></div></ux-dialog-body></ux-dialog></template>";});;
define('go/visitPicker',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'lodash', 'moment', '../data/go/data', './home', './createVisitPopup', 'aurelia-dialog', './popupHelper', './globals', '../formbuilder/viewer'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _data, _home, _createVisitPopup, _aureliaDialog, _popupHelper, _globals, _viewer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.VisitPicker = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var VisitPicker = exports.VisitPicker = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home, _aureliaDialog.DialogService, _popupHelper.PopupHelper, _globals.Globals, _viewer.Viewer), _dec(_class = function () {
    function VisitPicker(helper, http, Data, Home, DialogService, PopupHelper, Globals, Viewer) {
      _classCallCheck(this, VisitPicker);

      this.visits = [];
      this.filteredVisits = [];
      this.zIndex = 1000;
      this.listHeight = 0;
      this.previousMode = false;
      this.disableVisitCreation = false;
      this.canLockVisits = false;
      this.selectedVisitFilter = 'date';
      this.ptFilter = false;
      this.searchText = null;

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
      this.dialogService = DialogService;
      this.popupHelper = PopupHelper;
      this.globals = Globals;
      this.goformViewer = Viewer;
    }

    VisitPicker.prototype.activate = function activate(model) {
      this.visits = model;
      this.filteredVisits = model;
      this.patientName = this.home.patient.PatientName();

      if (this.helper._user.RoleDetails.hasOwnProperty("AdminAccess")) {
        this.canLockVisits = this.helper._user.RoleDetails.AdminAccess;
      }
    };

    VisitPicker.prototype.attached = function attached() {
      var self = this;
      self.listHeight = self.listParentDiv.clientHeight;

      self.checkForExistingVisit(function (existingVisit) {
        console.log('callback: ', existingVisit);

        var licenseValid = self.home.currentProvider;
        if (licenseValid != null) {
          licenseValid = self.checkUserLicense(self.home.currentProvider.OD_Users.License, self.home.currentProvider.OD_Users.UserID);
        }
        console.log('licenseValid: ', licenseValid);

        if (existingVisit || !licenseValid) {
          self.disableVisitCreation = true;
        }
      });

      self.scrollSearchbarOutOfView();
    };

    VisitPicker.prototype.scrollSearchbarOutOfView = function scrollSearchbarOutOfView() {
      var divToScroll = this.listParentDiv.firstChild;
      divToScroll.scrollTop = 46;
    };

    VisitPicker.prototype.checkUserLicense = function checkUserLicense(license, userId) {
      console.log('checkUserLicense, ' + license + ', ' + userId);

      if (license == null) {
        return false;
      }

      var lic = this.helper.openToken(license);
      console.log('lic: ', lic);

      return true;
    };

    VisitPicker.prototype.filterVisits = function filterVisits(visitFilter) {
      var self = this;
      self.filteredVisits = [];
      self.selectedVisitFilter = visitFilter;
      if (self.selectedVisitFilter == 'date') {
        self.filteredVisits = self.visits;
      } else if (self.selectedVisitFilter == 'provider') {

        self.ptFilter = self.ptFilter ? false : true;

        var _loop = function _loop(v) {
          var aVisit = self.visits[v];

          var aProvider = _.find(self.home.allProviders, function (p) {
            return p.ProviderID == aVisit.ProviderID;
          });

          if (aProvider) {
            if (self.ptFilter && aProvider.ProviderRole.toUpperCase() == 'THERAPY') {
              self.filteredVisits.push(aVisit);
            } else if (!self.ptFilter && aProvider.ProviderRole.toUpperCase() != 'THERAPY') {
              self.filteredVisits.push(aVisit);
            }
          }
        };

        for (var v = 0; v < self.visits.length; v++) {
          _loop(v);
        }
      }
    };

    VisitPicker.prototype.searchVisits = function searchVisits() {

      var self = this;
      self.filteredVisits = [];
      var text = new RegExp(self.searchText, "i");
      if (text == null || text.length == 0) {
        self.filteredVisits = self.visits;
        return;
      }

      for (var i = 0; i < self.visits.length; i++) {
        var found = self.visits[i].ProviderName.match(text);
        if (found) {
          self.filteredVisits.push(self.visits[i]);
          continue;
        }

        if (self.visits[i].Description != null) {
          found = self.visits[i].Description.match(text);
          if (found) {
            self.filteredVisits.push(self.visits[i]);
            continue;
          }
        }

        if (self.visits[i].Part != null) {
          found = self.visits[i].Part.match(text);
          if (found) {
            self.filteredVisits.push(self.visits[i]);
            continue;
          }
        }

        if (self.visits[i].Details != null) {
          found = self.visits[i].Details.match(text);
          if (found) {
            self.filteredVisits.push(self.visits[i]);
            continue;
          }
        }

        var foundDoc = false;
        for (var d = 0; d < self.visits[i].Documents.length; d++) {
          found = self.visits[i].Documents[d].Description.match(text);
          if (found) {
            self.filteredVisits.push(self.visits[i]);
            foundDoc = true;
            break;
          }
        }
        if (foundDoc) {
          continue;
        }

        var foundXray = false;
        for (var x = 0; x < self.visits[i].Xrays.length; x++) {
          found = self.visits[i].Xrays[x].Description.match(text);
          if (found) {
            self.filteredVisits.push(self.visits[i]);
            foundXray = true;
            break;
          }
        }
        if (foundXray) {
          continue;
        }
      }
    };

    VisitPicker.prototype.checkForExistingVisit = function checkForExistingVisit(callback) {
      var self = this;
      var provId = self.home.currentProvider ? self.home.currentProvider.ProviderID : 0;
      console.log('check for existing visit: ', callback);
      if (provId == 0) {
        callback();
      }
      var today = (0, _moment2.default)().format('MM-DD-YYYY');
      self.data.getVisitCodeWithPatientIdProviderIdAndDate(self.home.patient.data.PatientID, provId, today, function (res) {
        callback(res);
      });
    };

    VisitPicker.prototype.toggleVisitLock = function toggleVisitLock(visit, e) {

      var self = this;
      var locked = false;
      if (visit.Locked == null) {
        locked = true;
      } else {
        locked = visit.Locked ? false : true;
      }

      self.data.getVisitCode(visit.ObjectID, function (vc) {
        vc.VisitLocked = locked;

        self.data.updateVisitCode(vc, function (update) {
          if (update.VisitLocked == locked) {
            visit.Locked = locked;
          }
        });
      });

      e.stopPropagation();
    };

    VisitPicker.prototype.setVisitSelected = function setVisitSelected(visit) {
      for (var v = 0; v < this.visits.length; v++) {
        if (this.visits[v].ObjectID == visit.ObjectID) {
          this.visits[v].selected = true;
        } else {
          this.visits[v].selected = false;
        }
      }
    };

    VisitPicker.prototype.visitRowClicked = function visitRowClicked(visit, event) {
      var self = this;

      self.setVisitSelected(visit);

      var aDate = self.helper.getISODateToFormat(visit.ExamDateTime, "MM/DD/YYYY");
      var bodyparts = self.data.parseVisitBodyparts(visit.Part);
      var vi = self.data.getVisitInfo(aDate, self.home.patient.data.PatientID, visit.ProviderID, visit.Description, bodyparts, visit.BoardId, visit.ObjectID, visit.Locked);

      vi.providerName = self.home.getProviderName(visit.ProviderID);
      self.home.loadVisit(vi, function () {});
      self.home.hideDemographics();
    };

    VisitPicker.prototype.documentClicked = function documentClicked(document, e) {
      var self = this;
      self.home.openDocument(document.ObjectID, document.TaskTypeID);
      self.home.hideDemographics();
      e.stopPropagation();
    };

    VisitPicker.prototype.xrayClicked = function xrayClicked(xray, e) {
      var self = this;
      self.popupHelper.openXrayPop(xray.DocPath, xray.ObjectID);

      self.home.hideDemographics();
      e.stopPropagation();
    };

    VisitPicker.prototype.newVisitClick = function newVisitClick() {
      var self = this;
      var newDate = (0, _moment2.default)().format('MM-DD-YYYY');
      if (self.globals.scheduleDate) {
        newDate = (0, _moment2.default)(self.globals.scheduleDate).format('MM-DD-YYYY');
      }

      var vInfo = self.data.getVisitInfo();
      vInfo.date = newDate;

      if (self.home.currentBoard.visitInfo != null) {
        vInfo.bodypart = self.home.currentBoard.visitInfo.bodypart;
        vInfo.bodyside = self.home.currentBoard.visitInfo.bodyside;
        vInfo.visitType = self.home.currentBoard.visitInfo.visitType;
        vInfo.bodyparts = self.home.currentBoard.visitInfo.bodyparts;

        vInfo.locked = false;
      }

      self.displayVisitCreatePopup(vInfo);

      self.home.hideDemographics();
    };

    VisitPicker.prototype.getPreviousVisitForProvider = function getPreviousVisitForProvider(providerId) {
      var self = this;
      for (var i = 0; i < this.visits.length; i++) {
        var visit = this.visits[i];
        if (visit.ProviderID === providerId) {
          return visit;
        }
      }
      return null;
    };

    VisitPicker.prototype.previousVisitClick = function previousVisitClick() {
      this.previousMode = true;
    };

    VisitPicker.prototype.showVisitTypePicker = function showVisitTypePicker(callback) {
      var self = this;
      var visitTypeList = [];
      var visitTypeStrings = self.data.getVisitTypes();

      for (var i = 0; i < visitTypeStrings.length; i++) {
        var pItm = self.data.getGenericPicklistItem(visitTypeStrings[i], visitTypeStrings[i]);
        visitTypeList.push(pItm);
      }

      self.popupHelper.openGenericPicklistPop("Please select a type for this visit.", "Select Visit Type", visitTypeList, false, function (selectedVisitType) {
        var sType = selectedVisitType.item;
        callback(sType);
      });
    };

    VisitPicker.prototype.openFax = function openFax(document, event) {

      var self = this;

      event.stopPropagation();

      var slashIndex = document.DocPath.lastIndexOf("\\") + 1;
      var docName = document.DocPath.slice(slashIndex, document.DocPath.length);

      self.home.openFax(docName, document.ObjectID, 'DOCUMENT');
    };

    VisitPicker.prototype.previousVisitSelected = function previousVisitSelected(prev, event) {
      var self = this;

      event.stopPropagation();

      self.home.hideDemographics();

      var patId = self.home.patient.data.PatientID;
      var proId = self.home.currentProvider == null ? 0 : self.home.currentProvider.ProviderID;
      var locId = self.home.locationId;

      var vInfo = self.data.getVisitInfo();
      var bodyparts = self.data.parseVisitBodyparts(prev.Part);
      vInfo.date = (0, _moment2.default)().format('MM-DD-YYYY');

      new Promise(function (resolve, reject) {
        resolve(proId);
      }).then(function (providerid) {
        if (providerid == 0) {
          return new Promise(function (reslove, reject) {
            self.openProviderPickerPop(function (provider) {
              proId = provider.data.ProviderID;
              reslove(proId);
            });
          });
        } else {
          return providerid;
        }
      }).then(function () {
        vInfo.visitType = prev.Description;

        if (bodyparts.length > 0) {
          vInfo.bodypart = bodyparts[0].part;
          vInfo.bodyside = bodyparts[0].side;
        }
        vInfo.patientId = patId;
        vInfo.providerId = proId;
        vInfo.providerName = self.home.getProviderName(proId);
        vInfo.bodyparts = bodyparts;

        var prevDate = self.helper.getISODateToFormat(prev.ExamDateTime, "MM-DD-YYYY");
        var prevProviderId = prev.ProviderID;

        vInfo.fromPreviousProviderId = prevProviderId;
        vInfo.fromPreviousBodyPart = vInfo.bodypart;

        var splitDate = prevDate.split('-');
        var year = parseInt(splitDate[2]);
        var day = parseInt(splitDate[1]);

        var month = parseInt(splitDate[0]);
        month = month - 1 < 0 ? 0 : month - 1;
        var prevDatePlusOne = new Date(year, month, day + 1);
        var frmPrevDate = self.helper.getMMDDYYYYDate(prevDatePlusOne.getFullYear(), prevDatePlusOne.getMonth(), prevDatePlusOne.getDate());
        vInfo.fromPreviousDate = frmPrevDate;
        self.data.getVisitBoardData(patId, prevProviderId, prevDate, function (boardRes) {
          if (boardRes.blocks.length == 0) {
            boardRes.blocks = self.data.getDefaultFollowUpBlocks();
          }

          self.tryCreateGoFormsFromPrevious(patId, prevDate, proId, boardRes, function (res) {
            self.createVisitFromPrevious(patId, vInfo, proId, self.helper._user.UserID, locId, res, function (v, p) {
              self.home.loadVisitFromPrevious(v, p);
            });
          });
        });
      });
    };

    VisitPicker.prototype.tryCreateGoFormsFromPrevious = function tryCreateGoFormsFromPrevious(patientId, date, newProviderId, board, callback) {
      var self = this;

      var goFormsUrl = 'goforms/instances?patientId=' + patientId + '&date=' + date;
      self.data.getWithUrl(goFormsUrl, function (goRes) {

        var goForms = [];
        if (goRes.length > 0) {

          var formCompleteCount = 0;

          new Promise(function (resolve, reject) {

            for (var i = 0; i < goRes.length; i++) {

              var goForm = goRes[i];

              var params = {
                fromPrevious: true,
                instanceId: goForm.Id,
                formId: goForm.FormId,
                fromPreviousNewProviderId: newProviderId,
                date: (0, _moment2.default)().format('MM/DD/YYYY')
              };
              self.goformViewer.silentSave(params, function (res) {

                var aBlock = self.data.getNewBlock();
                aBlock.description = res.Description;
                aBlock.blockType = 'goForm';
                aBlock.widthMult = 1;
                aBlock.heightMult = 1;
                aBlock.data = { 'CreateDate': res.Date, 'formId': res.formId, 'ObjectID': res.Id };
                aBlock.id = res.Id;

                goForms.push(aBlock);
                formCompleteCount++;

                if (formCompleteCount == goRes.length) {
                  resolve(callback);
                }
              });
            }
          }).then(function (callback) {

            board.documents = goForms;
            callback(board);
          });
        } else {
          callback(board);
        }
      });
    };

    VisitPicker.prototype.checkForPatientSchedule = function checkForPatientSchedule(patientId, date, callback) {
      var self = this;
      var tDate = (0, _moment2.default)(date).format('MM/DD/YYYY');

      self.data.getScheduleWithDateAndPatientId(date, patientId, function (res) {
        callback(res);
      });
    };

    VisitPicker.prototype.createNewScheduleObject = function createNewScheduleObject(patient, providerId, userId) {
      var self = this;
      var tDate = (0, _moment2.default)().add(15, 'minutes');

      var schedObj = {
        "Time": tDate.format(),
        "Date": tDate.format('MM/DD/YYYY'),
        "Patient_Name": patient.NameFirst + " " + patient.NameLast,
        "ProviderID": providerId,
        'Type': "Office",
        "PatientID": patient.PatientID,
        "UserID": userId,
        "PatientLocation": "All"
      };

      return schedObj;
    };

    VisitPicker.prototype.addPatientToSchedule = function addPatientToSchedule(patient, providerId, userId, callback) {
      var self = this;
      var newScheduleObj = self.createNewScheduleObject(patient, providerId, userId);
      self.data.createSchedule(newScheduleObj, function (res) {
        callback(res);
      });
    };

    VisitPicker.prototype.openProviderPickerPop = function openProviderPickerPop(callback) {
      var self = this;
      var providerList = [];
      for (var i = 0; i < self.home.providers.length; i++) {
        if (i == 0) continue;
        var pItm = self.data.getGenericPicklistItem(self.home.providers[i].ProviderEntity, self.home.providers[i]);
        providerList.push(pItm);
      }
      self.popupHelper.openGenericPicklistPop("A provider must be selected for the visit.", "Select Visit Provider", providerList, false, function (providerRes) {
        callback(providerRes.item);
      });
    };

    VisitPicker.prototype.displayVisitCreatePopup = function displayVisitCreatePopup(createVisitObj) {
      var self = this;
      var windowHeight = window.innerHeight / 2;
      var windowWidth = window.innerWidth / 2;

      self.popupHelper.openCreateVisitPopup(createVisitObj, self.home, function (response) {
        var res = response;
        if (res != null) {
          self.checkForPatientSchedule(self.home.patient.data.PatientID, res.visitObject.date, function (foundPatient) {
            var patId = self.home.patient.data.PatientID;
            var proId = self.home.currentProvider == null ? 0 : self.home.currentProvider.ProviderID;
            var locId = self.home.locationId;

            if (proId == 0) {
              self.openProviderPickerPop(function (provider) {
                var selectedProvider = provider;
                proId = selectedProvider.data.ProviderID;

                self.createVisit(patId, res.visitObject, proId, self.helper._user.UserID, locId, res.boardId, function (v) {
                  self.home.loadVisit(v);
                });

                if (!foundPatient) {
                  self.addPatientToSchedule(self.home.patient.data, proId, self.helper._user.UserID, function (schedres) {});
                }
              });
            } else {
              self.createVisit(patId, res.visitObject, proId, self.helper._user.UserID, locId, res.boardId, function (v) {
                self.home.loadVisit(v);
              });

              if (!foundPatient) {
                self.addPatientToSchedule(self.home.patient.data, proId, self.helper._user.UserID, function (schedres) {});
              }
            }
          });
        }
      });
    };

    VisitPicker.prototype.createVisitFromPrevious = function createVisitFromPrevious(patientId, visitObject, providerId, userId, locationId, previousBoard, callback) {
      var self = this;
      self._createVisit(patientId, visitObject, providerId, userId, locationId, 0, previousBoard, callback);
    };

    VisitPicker.prototype.createVisit = function createVisit(patientId, visitObject, providerId, userId, locationId, boardId, callback) {
      var self = this;
      self._createVisit(patientId, visitObject, providerId, userId, locationId, boardId, null, callback);
    };

    VisitPicker.prototype._createVisit = function _createVisit(patientId, visitObject, providerId, userId, locationId, boardId, previousBoard, callback) {
      var self = this;

      var n = self.helper.createNoty("Creating visit...", 10000);
      n.show();

      self.data.getVisitCodeObject(function (vc) {
        vc.PatientID = patientId;
        vc.ProviderID = providerId;
        vc.UserID = userId;
        vc.LocationID = locationId;
        vc.Visit_Type = visitObject.visitType;
        vc.VisitBodyPart = visitObject.bodypart;
        vc.VisitLocked = false;

        var strBodyparts = self.data.bodypartsToString(visitObject.bodyparts);

        vc.VisitBodyParts = strBodyparts;
        vc.VisitBodySide = visitObject.bodyside;

        var dateSplit = visitObject.date.split('-');
        var aDate = new Date();
        aDate.setMonth(dateSplit[0] - 1);
        aDate.setDate(dateSplit[1]);
        aDate.setFullYear(dateSplit[2]);
        var now = new Date();
        aDate.setHours(now.getHours());
        aDate.setMinutes(now.getMinutes());
        aDate.setSeconds(now.getSeconds());

        var currentTime = (0, _moment2.default)().format('hh:mm:ss.SSS');

        var tDate = (0, _moment2.default)(aDate).format('YYYY-MM-DD');

        var dateAndTime = tDate + " " + currentTime;

        vc.ExamDateTime = dateAndTime;

        self.data.createVisitCode(vc, function (createVcRes) {
          var boardToSave = null;
          if (boardId != 0) {
            boardToSave = self.home.getUserBoardById(boardId);
          } else if (previousBoard != null) {
            boardToSave = previousBoard;

            var hpiToBodypartIndex = 0;
            var examToBodypartIndex = 0;

            for (var b = 0; b < boardToSave.blocks.length; b++) {
              var aBlock = boardToSave.blocks[b];
              aBlock.fromPrevious = true;
              aBlock.fromPreviousDate = visitObject.fromPreviousDate;
              aBlock.fromPreviousProviderId = visitObject.fromPreviousProviderId;

              if (aBlock.blockType == 'hpi') {
                aBlock.fromPreviousBodyPart = visitObject.bodyparts[hpiToBodypartIndex].part;
                hpiToBodypartIndex++;
              } else if (aBlock.blockType == 'exam') {
                aBlock.fromPreviousBodyPart = visitObject.bodyparts[examToBodypartIndex].part;
                examToBodypartIndex++;
              } else {
                aBlock.fromPreviousBodyPart = visitObject.fromPreviousBodyPart;
              }
            }
          } else {
            boardToSave = self.data.getNewBoard();
          }

          boardToSave.providerId = providerId;
          boardToSave.patientId = patientId;
          boardToSave.date = vc.ExamDateTime;
          boardToSave.id = 0;
          boardToSave.visitCodeId = createVcRes.VisitCodeID;

          for (var _b = 0; _b < boardToSave.blocks.length; _b++) {
            var _aBlock = boardToSave.blocks[_b];
            _aBlock.objectId = 0;
          }

          var finalDate = self.helper.getISODateToFormat(vc.ExamDateTime, 'MM/DD/YYYY');
          var bodyparts = self.data.parseVisitBodyparts(vc.VisitBodyParts);
          var viResult = self.data.getVisitInfo(finalDate, vc.PatientID, vc.ProviderID, vc.Visit_Type, bodyparts, boardToSave.id, vc.VisitCodeID);
          viResult.locked = vc.VisitLocked;
          viResult.visitCode = vc;
          viResult.visitCodeId = createVcRes.VisitCodeID;

          var providerName = "";
          var aProvider = self.home.getProviderWithId(createVcRes.ProviderID);
          if (aProvider) {
            providerName = aProvider ? aProvider.NameFirst.substring(0, 1) + " " + aProvider.NameLast : "";
          }
          viResult.providerName = providerName;
          boardToSave.visitInfo = viResult;

          self.data.saveVisitBoard(boardToSave, function (boardRes) {
            if (boardRes == false || boardRes == null) {} else {
              vc.VisitBoardId = boardRes.id;
              vc.VisitCodeID = boardRes.VisitCodeId;
              self.data.updateVisitCode(vc, function (updateVcRes) {});

              boardToSave.id = boardRes.id;

              var vInfo = {
                ExamDateTime: createVcRes.ExamDateTime,
                Description: createVcRes.Visit_Type,
                Details: createVcRes.Visit_Code_Selected,
                Part: createVcRes.VisitBodyParts,
                BoardId: boardRes.id,
                ObjectID: createVcRes.VisitCodeID,
                ProviderID: createVcRes.ProviderID,
                ProviderName: providerName,
                Locked: createVcRes.VisitLocked
              };

              self.home.patientVisits.splice(0, 0, vInfo);

              self.helper.notySuccess(n, "Visit Created!");
              n.close();

              if (callback) {

                boardToSave.visitInfo.boardId = boardToSave.id;

                callback(viResult, boardToSave);
              }
            }
          });
        });
      });
    };

    return VisitPicker;
  }()) || _class);
});;
define('text!go/visitPicker.html',[],function(){return "<template><style>.lock-color{color:#51a4ff}.unlock-color{color:#c2ddfb}.document-item{background-color:transparent;padding-left:0;padding-right:0}</style><div class=\"container-fluid h-100 w-100\" css=\"z-index:${zIndex}\" style=\"background-color:#fff\"><div ref=\"listParentDiv\" class=\"row h-100\"><div class=\"col px-2 pb-2\" style=\"overflow-y:auto\" css=\"height: ${listHeight}px;\"><nav class=\"navbar navbar-expand-lg navbar-light sticky-top p-0 mb-2\" style=\"background-color:#fff\"><div class=\"dropdown\"><button class=\"btn dropdown-toggle pb-0\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-calendar fa-2x\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><h6 class=\"dropdown-header\">Filter Visits by...</h6><a class=\"dropdown-item\" href=\"#\" click.delegate=\"filterVisits('date')\"><i class=\"fa fa-calendar fa-fw pr-1\" aria-hidden=\"true\"></i>Date</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"filterVisits('provider')\"><i class=\"fa fa-user fa-fw pr-1\" aria-hidden=\"true\"></i> <span if.bind=\"ptFilter\"><strong>Therapy</strong>/Provider</span> <span if.bind=\"!ptFilter\"><strong>Provider</strong>/Therapy</span></a></div></div><a class=\"navbar-brand\" href=\"#\">${patientName}</a><button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span class=\"navbar-toggler-icon\"></span></button><div class=\"collapse navbar-collapse\" id=\"navbarNavDropdown\"><ul class=\"navbar-nav w-100\"><li class=\"nav-item dropdown ml-auto mr-2\"><a class=\"nav-link\" href=\"#\" id=\"navbarDropdownMenuLink\" role=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\" aria-haspopup=\"true\"><i class=\"fa fa-plus fa-2x\"></i></a><div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"navbarDropdownMenuLink\"><a class=\"dropdown-item ${disableVisitCreation ? 'disabled' : ''}\" href=\"#\" click.delegate=\"newVisitClick()\"><i class=\"fa fa-plus\"></i> New Visit</a> <a class=\"dropdown-item ${disableVisitCreation ? 'disabled' : ''}\" href=\"#\" click.delegate=\"previousVisitClick()\"><i class=\"fa fa-plus\"></i> Previous Visit</a></div></li></ul></div></nav><div class=\"input-group\"><div class=\"input-group-text ml-2\" id=\"btnGroupAddon\" style=\"border-top:1px solid #ced4da;border-bottom:1px solid #ced4da;border-left:1px solid #ced4da;border-right:none;border-top-left-radius:10px;border-bottom-left-radius:10px;background-color:#fff;border-top-right-radius:0;border-bottom-right-radius:0\"><i class=\"fa fa-search\" aria-hidden=\"true\" style=\"color:#adadad\"></i></div><input type=\"text\" input.delegate=\"searchVisits()\" value.bind=\"searchText\" style=\"border-top:1px solid #ced4da;box-shadow:none!important;border-bottom:1px solid #ced4da;border-right:1px solid #ced4da;border-left:none;border-top-right-radius:10px;border-bottom-right-radius:10px;padding-left:0\" class=\"form-control mr-2\" placeholder=\"Search visits...\" aria-label=\"Input group example\" aria-describedby=\"btnGroupAddon\"></div><div repeat.for=\"v of filteredVisits\" class=\"card m-2\" css=\"background-color: ${v.selected ? '#afddff' : '#e3f2fd'};\" style=\"border:1.5px solid #000\" click.delegate=\"visitRowClicked(v)\"><div class=\"card-body\"><h5 class=\"card-title\"><i class=\"fa fa-calendar-o pr-1\" aria-hidden=\"true\"></i>${helper.getISODateToFormat(v.ExamDateTime, 'MM/DD/YYYY')} <small class=\"pl-2 text-primary\">${v.ProviderName}</small></h5><h6 class=\"card-subtitle mb-2 text-muted\">${v.Description} <small class=\"text-muted\">${v.Details}</small></h6><h4 class=\"card-subtitle mb-2 text-muted\">${v.Part}</h4><ul class=\"list-group list-group-flush\"><li repeat.for=\"d of v.Documents\" class=\"list-group-item document-item text-muted d-flex align-items-center\" click.delegate=\"documentClicked(d, $event)\"><i class=\"fa fa-file-text-o mr-1 text-muted\" aria-hidden=\"true\"></i> ${d.Description} <i if.bind=\"home.faxEnabled\" class=\"fa fa-fax ml-auto text-muted\" aria-hidden=\"true\" click.delegate=\"openFax(d, $event)\"></i></li></ul><ul class=\"list-group list-group-flush\"><li repeat.for=\"x of v.Xrays\" class=\"list-group-item document-item text-muted d-flex align-items-center\" click.delegate=\"xrayClicked(x, $event)\"><i class=\"fa fa-window-close mr-1 text-muted\" aria-hidden=\"true\"></i> ${x.Description} </li></ul><i click.delegate=\"toggleVisitLock(v, $event)\" class=\"fa ${v.Locked ? 'fa-lock' : 'fa-unlock-alt'} fa-3x position-absolute pt-2 pr-3 ${v.Locked ? 'lock-color' : 'unlock-color'}\" css=\"pointer-events: ${canLockVisits ? 'auto' : 'none'};\" style=\"top:0;right:0\" aria-hidden=\"true\"></i> <button if.bind=\"previousMode\" type=\"button\" class=\"btn btn-warning position-absolute mb-2 mr-3\" style=\"bottom:0;right:0\" click.delegate=\"previousVisitSelected(v, $event)\">Select</button></div></div></div></div></div></template>";});;
define('go/webSpeechCustomElement',['exports', 'aurelia-framework', './home', './globals'], function (exports, _aureliaFramework, _home, _globals) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WebSpeechCustomElement = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3;

  var WebSpeechCustomElement = exports.WebSpeechCustomElement = (_dec = (0, _aureliaFramework.inject)(_home.Home, _globals.Globals), _dec(_class = (_class2 = function () {
    WebSpeechCustomElement.prototype.textAreaChanged = function textAreaChanged(newVal, oldVal) {
      if (newVal) {}
    };

    function WebSpeechCustomElement(Home, Globals) {
      _classCallCheck(this, WebSpeechCustomElement);

      _initDefineProp(this, 'speechId', _descriptor, this);

      _initDefineProp(this, 'textArea', _descriptor2, this);

      _initDefineProp(this, 'callback', _descriptor3, this);

      this.caretPosition = 0;
      this.transcription = '';
      this.enabled = true;
      this.recognizing = false;
      this.buttonColor = "lightgrey";
      this.two_line = /\n\n/g;
      this.one_line = /\n/g;
      this.first_char = /\S/;

      this.home = Home;
      this.globals = Globals;
    }

    WebSpeechCustomElement.prototype.attached = function attached() {
      this.enabled = window.hasOwnProperty('webkit');
    };

    WebSpeechCustomElement.prototype.speechClicked = function speechClicked() {
      var self = this;

      if (self.enabled) {
        if (this.recognizing) {
          this.buttonColor = "lightgrey";
          self.stopSpeechIos();
          this.transcription = this.textArea;
          this.caretPosition = this.textArea.length;
          return;
        } else {
          this.buttonColor = "red";

          if (this.domtextarea.textLength > 0) {
            this.caretPosition = this.domtextarea.textLength;
            this.transcription = this.domtextarea.value;
          }

          if (this.domtextarea.selectionStart > 0) {
            this.caretPosition = this.domtextarea.selectionStart;
          }

          self.startSpeechIos();
        }
      }
    };

    WebSpeechCustomElement.prototype.startSpeechIos = function startSpeechIos() {
      if (this.enabled) {
        this.recognizing = true;
        var msg = { 'status': 'start', 'id': this.speechId };
        webkit.messageHandlers.dictation.postMessage(msg);
      }
    };

    WebSpeechCustomElement.prototype.stopSpeechIos = function stopSpeechIos() {
      if (this.enabled) {
        this.recognizing = false;
        var msg = { 'status': 'stop', 'id': this.speechId };
        webkit.messageHandlers.dictation.postMessage(msg);
      }
    };

    WebSpeechCustomElement.prototype.transcriptionResult = function transcriptionResult(text) {

      var txt = '';

      if (this.caretPosition == 0) {
        txt = text;
      } else if (this.caretPosition > 0 && this.caretPosition < this.transcription.length) {
        var start = this.transcription.substr(0, this.caretPosition);
        var end = this.transcription.substr(this.caretPosition, this.transcription.length - this.caretPosition);
        txt = start.concat(text, end);
      } else {
        var beginning = this.transcription.substr(0, this.caretPosition);
        beginning = beginning.concat(" ");
        txt = beginning.concat(text);
      }

      this.textArea = txt;
    };

    WebSpeechCustomElement.prototype.blurred = function blurred() {
      this.callback();
    };

    WebSpeechCustomElement.prototype.setupSpeech = function setupSpeech() {

      var self = this;

      if (!('webkitSpeechRecognition' in window)) {
        upgrade();
      } else {
        this.recognition = new webkitSpeechRecognition();

        this.recognition.continuous = true;
        this.recognition.interimResults = true;

        this.recognition.onstart = function () {
          self.recognizing = true;
        };

        this.recognition.onerror = function (event) {
          if (event.error == 'no-speech') {
            self.ignore_onend = true;
          }
          if (event.error == 'audio-capture') {
            self.ignore_onend = true;
          }
          if (event.error == 'not-allowed') {
            if (event.timeStamp - self.start_timestamp < 100) {} else {}
            self.ignore_onend = true;
          }
        };

        this.recognition.onend = function () {
          self.recognizing = false;
          if (self.ignore_onend) {
            return;
          }

          if (!self.textArea) {
            return;
          }
        };

        this.recognition.onresult = function (event) {
          var interim_transcript = '';
          if (typeof event.results == 'undefined') {
            self.recognition.onend = null;
            self.recognition.stop();

            return;
          }
          for (var i = event.resultIndex; i < event.results.length; ++i) {
            if (event.results[i].isFinal) {
              self.textArea += event.results[i][0].transcript;
            } else {
              interim_transcript += event.results[i][0].transcript;
            }
          }
          self.textArea = self.capitalize(self.textArea);
          self.textArea = self.linebreak(self.textArea);
        };
      }
    };

    WebSpeechCustomElement.prototype.linebreak = function linebreak(s) {
      return s.replace(this.two_line, '<p></p>').replace(this.one_line, '<br>');
    };

    WebSpeechCustomElement.prototype.capitalize = function capitalize(s) {
      return s.replace(this.first_char, function (m) {
        return m.toUpperCase();
      });
    };

    return WebSpeechCustomElement;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'speechId', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'textArea', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: function initializer() {
      return '';
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'callback', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: function initializer() {
      return function () {};
    }
  })), _class2)) || _class);
});;
define('text!go/webSpeechCustomElement.html',[],function(){return "<template><i class=\"fa ${enabled ? 'fa-microphone' : 'fa-microphone-slash'} fa-2x\" style=\"position:absolute;right:20px;padding:10px\" css=\"color:${buttonColor}\" aria-hidden=\"true\" click.delegate=\"speechClicked()\"></i><textarea ref=\"domtextarea\" rows=\"10\" style=\"width:100%;height:100%\" value.bind=\"textArea\" blur.trigger=\"blurred()\"></textarea></template>";});;
define('go/workflow',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'lodash', 'moment', '../data/go/data', './home', 'aurelia-dialog', './globals', './workflowHelper'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _data, _home, _aureliaDialog, _globals, _workflowHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Workflow = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var PrefButton = function () {
    function PrefButton(name, data, visible, editing) {
      _classCallCheck(this, PrefButton);

      this.name = name;
      this.data = data;
      this.selected = false;
      this.visible = visible == undefined ? false : visible;
      this.editing = editing ? editing : false;
    }

    PrefButton.prototype.select = function select() {
      this.selected = this.selected ? false : true;
    };

    return PrefButton;
  }();

  var WorkflowRow = function () {
    function WorkflowRow(patientId, name, date, result) {
      _classCallCheck(this, WorkflowRow);

      this.patientId = patientId;
      this.name = name;
      this.date = date;
      this.result = result;
      this.displayReason = false;
      this.status;
      this.reason;
    }

    WorkflowRow.prototype.toggleReason = function toggleReason() {
      this.displayReason = this.displayReason ? false : true;
    };

    return WorkflowRow;
  }();

  var Workflow = exports.Workflow = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home, _aureliaDialog.DialogService, _globals.Globals, _workflowHelper.WorkflowHelper), _dec(_class = (_class2 = function () {
    function Workflow(helper, http, Data, Home, DialogService, Globals, WorkflowHelper) {
      _classCallCheck(this, Workflow);

      this.listHeight = 0;
      this.rows = [];

      _initDefineProp(this, 'datepicker', _descriptor, this);

      _initDefineProp(this, 'flowdate', _descriptor2, this);

      this.providerPref = null;
      this.providers = [];
      this.displayPref = false;
      this.incompleteCount = 0;
      this.displaySpinner = false;

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
      this.globals = Globals;
      this.workflowHelper = WorkflowHelper;
      this.dialogService = DialogService;
    }

    Workflow.prototype.activate = function activate(model) {
      var self = this;

      var tProviders = [];
      for (var i = 0; i < model.length; i++) {
        if (i > 0) {
          tProviders.push(model[i]);
        }
      }
      self.providers = tProviders;

      if (self.home.currentProvider) {
        self.selectedProvider = self.home.currentProvider;
      }

      if (self.globals.workflowDate) {
        self.flowdate = self.globals.workflowDate;
      } else {
        self.flowdate = (0, _moment2.default)().format('MM/DD/YYYY');
      }

      self.updateWorkflow(self.selectedProvider.ProviderID);
    };

    Workflow.prototype.checkInitiateWorkflowForProvider = function checkInitiateWorkflowForProvider(providerId, callback) {
      var self = this;
      if (!self.workflowHelper.workflowInitiatedForProvider(providerId)) {
        self.workflowHelper.initWorkflowForProvider(providerId, function (success) {
          if (success) {
            self.providerPref = self.workflowHelper.preferenceObject;
            callback();
          }
        });
      } else {
        self.providerPref = self.workflowHelper.preferenceObject;
        callback();
      }
    };

    Workflow.prototype.updateWorkflow = function updateWorkflow(providerId) {
      var self = this;

      self.checkInitiateWorkflowForProvider(providerId, function () {

        var dt = null;
        if (self.flowdate) {
          dt = (0, _moment2.default)(self.flowdate).format('MM/DD/YYYY');
        } else {
          dt = (0, _moment2.default)().format('MM/DD/YYYY');
        }
        self.flowdate = dt;

        self.workflowHelper.getWorkflow(providerId, dt, dt, function (res) {
          self.rows = res.rows;
          self.home.updateWorkflowSidebarItemBadge(res.incompleteCount);
        });
      });
    };

    Workflow.prototype.providerSelected = function providerSelected() {
      var self = this;
      self.updateWorkflow(self.selectedProvider.ProviderID);
    };

    Workflow.prototype.openProviderPref = function openProviderPref() {
      var self = this;

      if (self.displayPref == true) {
        self.savePreference();
      }

      self.displayPref = self.displayPref ? false : true;
    };

    Workflow.prototype.savePreference = function savePreference() {
      var self = this;
      var url = 'workflow/pref';

      if (self.workflowHelper.workflowInitiatedForProvider(self.selectedProvider.ProviderID)) {
        var saveObj = {
          ProviderID: self.selectedProvider.ProviderID
        };
        for (var i = 0; i < self.workflowHelper.preferenceObject.prefs.length; i++) {
          var item = self.workflowHelper.preferenceObject.prefs[i];
          if (item.name == 'Document') {
            saveObj['OfficeNote'] = item.selected;
          } else {
            saveObj[item.name] = item.selected;
          }
        }

        if (self.workflowHelper.preferenceObject.providerId == 0) {
          self.data.postWithUrlAndData(url, JSON.stringify(saveObj), function (res) {});
        } else {
          self.data.putWithUrlAndData(url, saveObj, function (res) {});
        }
      }
    };

    Workflow.prototype.loadPatient = function loadPatient(row) {
      var self = this;
      self.home.loadPatientWithDate(row.patientId, row.date);
      self.home.toggleWorkflow();
    };

    Workflow.prototype.flowdateChanged = function flowdateChanged(newVal, oldVal) {
      var self = this;
      var t = newVal;
      self.globals.workflowDate = newVal;
      if (self.selectedProvider) {
        self.updateWorkflow(self.selectedProvider.ProviderID);
      }
    };

    Workflow.prototype.openCalendar = function openCalendar() {
      this.datepicker.methods.toggle();
    };

    return Workflow;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'datepicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'flowdate', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!go/workflow.html',[],function(){return "<template><require from=\"./customElements/myCheckbox\"></require><div id=\"workflow\" class=\"card h-100\" style=\"width:460px;box-shadow:2px 5px .25rem rgba(0,0,0,.3)\"><div class=\"card-header d-flex pl-3 pr-2\"><i class=\"fa fa-cubes fa-2x pr-2\" aria-hidden=\"true\"></i> <select value.bind=\"selectedProvider\" class=\"form-control\" change.delegate=\"providerSelected()\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"p of providers\" model.bind=\"p\">${p.ProviderEntity}</option></select> <i class=\"fa fa-user fa-2x px-2\" aria-hidden=\"true\" click.delegate=\"openProviderPref()\"></i><div class=\"input-group ml-auto\"><abp-datetime-picker style=\"width:120px\" icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"datepicker\" value.bind=\"flowdate\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary\" type=\"button\" click.delegate=\"openCalendar()\"><i class=\"fa fa-calendar\"></i></button></div></div></div><div if.bind=\"displayPref\" class=\"card-body\"><h4>Workflow Preference</h4><small class=\"form-text text-muted\">Select which encounter elements you wish to include in your workflow calculation.</small><div class=\"row row-cols-2\"><div repeat.for=\"h of providerPref.prefs\" class=\"col\"><my-checkbox selected.bind=\"h.selected\" value.bind=\"h.name\" editing.bind=\"h.editing\" click.delegate=\"h.select()\"></my-checkbox></div></div><button type=\"button\" class=\"btn btn-primary float-right\" click.delegate=\"openProviderPref()\">Done</button></div><div if.bind=\"!displayPref\" style=\"overflow-y:scroll\"><div repeat.for=\"r of rows\" class=\"card mx-2 mt-2 mb-0 ${r.status ? 'alert-success' : 'alert-danger'}\"><div class=\"card-body h5 mb-0 p-2\"><div class=\"d-flex align-items-center\"><div click.delegate=\"r.toggleReason()\"><i class=\"fa fa-cube pr-1\" aria-hidden=\"true\"></i> ${r.date} <i if.bind=\"!r.status\" class=\"fa fa-caret-down px-1\" aria-hidden=\"true\"></i></div><div class=\"ml-auto\" click.delegate=\"loadPatient(r)\"> ${r.name} <i class=\"fa fa-folder-open-o px-1\" aria-hidden=\"true\"></i></div></div><div if.bind=\"r.displayReason\" class=\"text-muted py-2\">${r.reason}</div></div></div><div if.bind=\"rows.length == 0\" class=\"card mx-2 mt-2 mb-0\"><div class=\"card-body h5 mb-0 p-2\"><div class=\"d-flex align-items-center justify-content-center\"><div class=\"text-secondary\">No rows found.</div></div></div></div></div><i if.bind=\"displaySpinner\" class=\"fa fa-spinner fa-pulse fa-3x fa-fw\" style=\"margin:auto\"></i></div><i class=\"fa fa-caret-left fa-3x\" style=\"position:absolute;top:280px;left:-16px\"></i></template>";});;
define('go/workflowHelper',['exports', 'aurelia-framework', 'lodash', '../data/go/data', '../helpers/helper'], function (exports, _aureliaFramework, _lodash, _data, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WorkflowHelper = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var PrefButton = function () {
    function PrefButton(name, data, visible, editing) {
      _classCallCheck(this, PrefButton);

      this.name = name;
      this.data = data;
      this.selected = false;
      this.visible = visible == undefined ? false : visible;
      this.editing = editing ? editing : false;
    }

    PrefButton.prototype.select = function select() {
      this.selected = this.selected ? false : true;
    };

    return PrefButton;
  }();

  var WorkflowRow = function () {
    function WorkflowRow(patientId, name, date, result) {
      _classCallCheck(this, WorkflowRow);

      this.patientId = patientId;
      this.name = name;
      this.date = date;
      this.result = result;
      this.displayReason = false;
      this.status;
      this.reason;
    }

    WorkflowRow.prototype.toggleReason = function toggleReason() {
      this.displayReason = this.displayReason ? false : true;
    };

    return WorkflowRow;
  }();

  var WorkflowHelper = exports.WorkflowHelper = (_dec = (0, _aureliaFramework.inject)(_data.Data, _helper.helper), _dec(_class = function () {
    function WorkflowHelper(Data, helper) {
      _classCallCheck(this, WorkflowHelper);

      this.preferenceObject = null;

      this.data = Data;
      this.helper = helper;
    }

    WorkflowHelper.prototype.workflowInitiatedForProvider = function workflowInitiatedForProvider(providerId) {
      if (this.preferenceObject == null) {
        return false;
      }
      return this.preferenceObject.providerId == providerId ? true : false;
    };

    WorkflowHelper.prototype.initWorkflowForProvider = function initWorkflowForProvider(id, callback) {
      var self = this;
      self.preferenceObject = null;
      self._getWorkflowPrefs(id, function (prefs) {
        self.preferenceObject = prefs;
        callback(prefs ? true : false);
      });
    };

    WorkflowHelper.prototype._createWorkflowPrefObject = function _createWorkflowPrefObject(prefData, initialize) {
      var self = this;
      var prefObj = {
        providerId: prefData.ProviderID,
        prefs: []
      };
      var keys = Object.keys(prefData);
      var vals = Object.values(prefData);
      for (var i = 0; i < keys.length; i++) {

        var tKey = keys[i];

        if (tKey == 'ProviderID' || tKey == 'VisitCode' || tKey == 'ReferralLetter' || tKey == 'FollowUpNote' || tKey == 'jsonDocumentPref') {
          continue;
        }

        if (tKey == 'OfficeNote') {
          tKey = 'Document';
        }

        var prefItem = new PrefButton(tKey, prefData, true, true);
        if (initialize) {
          prefItem.selected = true;
        } else {
          prefItem.selected = vals[i] == null ? false : vals[i];
        }
        prefObj.prefs.push(prefItem);
      }

      return prefObj;
    };

    WorkflowHelper.prototype._getWorkflowPrefs = function _getWorkflowPrefs(providerId, callback) {
      var self = this;
      self.data.getWithUrl('workflow/pref?providerId=' + providerId, function (res) {
        var pref = null;
        if (res != null) {
          pref = self._createWorkflowPrefObject(res);
          callback(pref);
        } else {
          self.data.getWithUrl('workflow/pref', function (res) {
            pref = self._createWorkflowPrefObject(res, true);
            callback(pref);
          });
        }
      });
    };

    WorkflowHelper.prototype.getWorkflow = function getWorkflow(providerId, fromDate, toDate, callback) {
      var self = this;
      var url = 'workflow?providerId=' + providerId + '&fromDate=' + fromDate + '&toDate=' + toDate;
      self.data.getWithUrl(url, function (res) {
        callback(self.calculateWorkflowWithResults(res));
      });
    };

    WorkflowHelper.prototype._isPrefItemSelected = function _isPrefItemSelected(name, prefObject) {
      return _.find(prefObject.prefs, function (p) {
        return p.name == name && p.selected == true;
      });
    };

    WorkflowHelper.prototype.calculateWorkflowWithResults = function calculateWorkflowWithResults(results) {
      var self = this;

      if (self.preferenceObject == null) {
        return {
          rows: [],
          incompleteCount: -1
        };
      }

      var incompleteCount = 0;
      var rows = [];

      var _loop = function _loop(i) {
        var result = results[i];
        var status = true;
        var reason = "";

        var row = _.find(rows, function (p) {
          return p.patientId == result.PATIENTID;
        });
        if (!row) {
          result['HISTORY'] = false;
          row = new WorkflowRow(result.PATIENTID, result.PATIENTNAME, moment(result.EXAMDATETIME).format('MM/DD/YYYY'), result);
          rows.push(row);
        }

        var checkPx = self._isPrefItemSelected('Procedure', self.preferenceObject);
        if (checkPx && row.result.PATIENTCPTID != true) {
          if (result.PATIENTCPTID == 0) {
            status = false;
            reason = reason.concat("No procedure.");
          } else {
            row.result.PATIENTCPTID = true;
          }
        }

        var checkDx = self._isPrefItemSelected('Diagnosis', self.preferenceObject);
        if (checkDx && row.result.PATIENTDXID != true) {
          if (result.PATIENTDXID == 0) {
            status = false;
            reason = reason.concat("No diagnosis.");
          } else {
            row.result.PATIENTDXID = true;
          }
        }

        var checkXray = self._isPrefItemSelected('XRay', self.preferenceObject);
        if (checkXray) {
          if (result.XRAYID == 0) {
            row.result.XRAYCOMPLETE = true;
          } else if (result.XRAYID != 0 && !self.helper.isStringNullOrEmpty(result.XRAYFINDING)) {
            row.result.XRAYCOMPLETE = true;
          } else {
            row.result.XRAYCOMPLETE = false;
            status = false;
            reason = reason.concat("Pending X-Ray findings.");
          }
        }
        var checkHpi = self._isPrefItemSelected('HPI', self.preferenceObject);
        if (checkHpi && row.result.CHARTNOTEHPI != true) {
          if (result.CHARTNOTEHPI == false && result.POSTOP == false) {
            status = false;
            reason = reason.concat("No HPI.");
          } else {
            row.result.CHARTNOTEHPI = true;
          }
        }

        var checkPlan = self._isPrefItemSelected('Plan', self.preferenceObject);
        if (checkPlan && row.result.PLAN != true) {
          if (!self.helper.isStringNullOrEmpty(result.CHARTNOTEPLAN) || result.PLAN == true) {
            row.result.PLAN = true;
          } else {
            status = false;
            reason = reason.concat("No Plan.");
          }
        }

        var checkExam = self._isPrefItemSelected('Exam', self.preferenceObject);
        if (checkExam && row.result.CHARTNOTEEXAM != true) {

          var isExamComplete = false;
          var ankleIsComplete = result.ANKLE;
          var cervicalIsComplete = result.CERVICAL;
          var elbowIsComplete = result.ELBOW;
          var handIsComplete = result.HAND;
          var hipIsComplete = result.HIP;
          var kneeIsComplete = result.KNEE;
          var lumbarIsComplete = result.LUMBAR;
          var shoulderIsComplete = result.SHOULDER;

          if (!self.helper.isStringNullOrEmpty(result.CHARTNOTEEXAM)) {
            isExamComplete = true;
            row.result.CHARTNOTEEXAM = true;
          }

          if (!isExamComplete) {
            if (!ankleIsComplete && !cervicalIsComplete && !elbowIsComplete && !handIsComplete && !hipIsComplete && !kneeIsComplete && !lumbarIsComplete && !shoulderIsComplete) {
              status = false;
              reason = reason.concat("No exam.");
            } else {
              row.result.CHARTNOTEEXAM = true;
            }
          }
        }

        var checkHx = self._isPrefItemSelected('History', self.preferenceObject);
        if (checkHx && row.result.HISTORY != true) {
          var phxIsComplete = result.PHX;
          var pfhxIsComplete = result.PFHX;
          var rosIsComplete = result.ROS;
          var sochxIsComplete = result.SOCHX;

          if (!phxIsComplete || !pfhxIsComplete || !rosIsComplete || !sochxIsComplete) {
            status = false;
            reason = reason.concat("No History.");
          } else {
            row.result.HISTORY = true;
          }
        }

        var checkDoc = self._isPrefItemSelected('Document', self.preferenceObject);
        if (checkDoc) {
          if (result.DOCTYPE == null) {
            status = false;
            reason = reason.concat("No Document.");
          } else {
            row.result.DOCTYPE = true;
          }
        }

        row['status'] = status;
        row['reason'] = reason;

        if (!status) {
          incompleteCount++;
        }
      };

      for (var i = 0; i < results.length; i++) {
        _loop(i);
      }

      return {
        rows: rows,
        incompleteCount: incompleteCount
      };
    };

    return WorkflowHelper;
  }()) || _class);
});;
define('go/xrayHistory',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'lodash', 'moment', '../data/go/data', './home', './popupHelper'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _data, _home, _popupHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.XrayHistory = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var XrayRow = function () {
    function XrayRow(data) {
      _classCallCheck(this, XrayRow);

      this.displayThumbnails = false;
      this.data = data;
      this.date = (0, _moment2.default)(data.ExamDateTime).format('MM/DD/YYYY');
      this.side = data.Body_Side;
      this.part = data.Body_Part;
      this.description = data.Description;
      this.altRow = false;
    }

    XrayRow.prototype.toggleThumbnails = function toggleThumbnails() {
      this.displayThumbnails = this.displayThumbnails ? false : true;
    };

    return XrayRow;
  }();

  var XrayHistory = exports.XrayHistory = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _home.Home, _popupHelper.PopupHelper), _dec(_class = function () {
    function XrayHistory(helper, http, Data, Home, PopupHelper) {
      _classCallCheck(this, XrayHistory);

      this.rows = [];
      this.dialog = null;

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.home = Home;
      this.popHelper = PopupHelper;
    }

    XrayHistory.prototype.activate = function activate(params) {
      var self = this;
      self.dialog = params.dialog;

      for (var i = 0; i < params.xrays.length; i++) {
        var xRow = new XrayRow(params.xrays[i]);
        if (i % 2 != 0) {
          xRow.altRow = true;
        }
        self.rows.push(xRow);
      }
    };

    XrayHistory.prototype.openXray = function openXray(studyId, xrayId) {
      this.popHelper.openXrayPop(studyId, xrayId);
    };

    XrayHistory.prototype.xrayChecked = function xrayChecked(row) {
      var self = this;

      row.data.Type = 'XRAY';
      self.dialog.close(true, row);
    };

    XrayHistory.prototype.attached = function attached() {
      var bodyHeight = this.xrayhx.clientHeight;
      var headerHeight = this.xheader.clientHeight;
      this.scrollHeight = bodyHeight - headerHeight;
    };

    XrayHistory.prototype.cancel = function cancel() {
      this.dialog.cancel();
    };

    XrayHistory.prototype.toggleThumbnails = function toggleThumbnails(r) {
      r.toggleThumbnails();
    };

    return XrayHistory;
  }()) || _class);
});;
define('text!go/xrayHistory.html',[],function(){return "<template><div ref=\"xrayhx\" class=\"card\"><div ref=\"xheader\" class=\"card-header\"><h4 style=\"display:inline-block;margin-bottom:0\"><i class=\"fa fa-list mr-2\"></i>Xray Priors</h4><i class=\"fa fa-close fa-2x float-right\" click.delegate=\"cancel()\"></i></div><div class=\"card-body p-0\" style=\"min-height:355px;max-height:355px;overflow-y:auto\"><template repeat.for=\"r of rows\"><div class=\"${r.altRow ? 'alert-secondary':''}\"><div class=\"d-flex flex-wrap p-2 border-bottom\"><div class=\"pr-2\"><i class=\"fa fa-plus-square\" click.delegate=\"xrayChecked(r)\"></i></div><div class=\"pr-2 font-weight-bold\">${r.date}</div><div class=\"pr-2\">${r.side} ${r.part}</div><div class=\"pr-2 text-muted text-truncate\" style=\"max-width:60%\">${r.description}</div><div class=\"pr-2 ml-auto\" click.delegate=\"toggleThumbnails(r)\"><i class=\"fa fa-angle-down\" aria-hidden=\"true\"></i></div></div><div if.bind=\"r.displayThumbnails\" class=\"card-deck\" style=\"padding-left:25px;padding-bottom:10px;padding-right:10px\"><div class=\"card text-white text-left bg-dark mini\" style=\"flex:none;margin-right:10px;margin-top:10px;margin-left:0\"><div class=\"card-img-overlay\" click.delegate=\"openXray(r.data.StudyID, r.data.XrayID)\"><h5 class=\"card-subtitle text-truncate\" style=\"margin-bottom:0\">${r.description}</h5></div></div><br><p class=\"text-muted\">${r.data.XRayFinding}</p></div></div></template></div></div></template>";});;
define('go/xrayPop',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper', '../data/go/data'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper, _data) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.XrayPopup = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var XrayPopup = exports.XrayPopup = (_dec = (0, _aureliaFramework.inject)(_http.http, _helper.helper, _aureliaDialog.DialogController, _data.Data), _dec(_class = function () {
    function XrayPopup(http, helper, DialogController, Data) {
      _classCallCheck(this, XrayPopup);

      this.popupLR = 0;
      this.popupTB = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.popupLeft = 0;
      this.popupTop = 0;
      this.mynewValue = null;
      this.canClose = false;
      this.loadPop = null;
      this.displayFindings = false;

      this.http = http;
      this.helper = helper;
      this.dialogController = DialogController;
      this.dialogController.settings.lock = false;
      this.goData = Data;
    }

    XrayPopup.prototype.cancel = function cancel() {
      var self = this;

      self.updateXray();

      self.dialogController.cancel();
    };

    XrayPopup.prototype.onFrameLoad = function onFrameLoad() {
      var self = this;
      window.setTimeout(function () {

        if (self.loadPop != null) self.loadPop.close();
      }, 4000);
    };

    XrayPopup.prototype.toggleFinding = function toggleFinding() {
      this.displayFindings = this.displayFindings ? false : true;
    };

    XrayPopup.prototype.updateXray = function updateXray() {
      var self = this;
      var url = 'xrayresult';

      var dialog = self.helper.createNoty("Updating Findings...", 3000);
      dialog.show();

      self.goData.putWithUrlAndData(url, self.xrayData, function (res) {

        dialog.close();
      });
    };

    XrayPopup.prototype.activate = function activate(obj) {
      var self = this;
      document.cookie = 'SameSite=None;';
      document.cookie = 'Secure;';

      self.url = self.goData.getXrayUrl(obj.data.studyId);

      self.popupWidth = obj.popupWidth - 73;
      self.popupHeight = obj.popupHeight;
      self.popupTop = 0;
      self.popupLeft = 0;

      var xralUrl = 'xrayresult/' + obj.data.xrayId;
      self.goData.getWithUrl(xralUrl, function (res) {
        self.xrayData = res;
      });

      self.loadPop = self.helper.createNoty("Loading viewer...", 3000);
      self.loadPop.show();
    };

    XrayPopup.prototype.attached = function attached() {
      $('ux-dialog-overlay').css('left', '70px');
      $('ux-dialog-container').css('left', '70px');
    };

    return XrayPopup;
  }()) || _class);
});;
define('text!go/xrayPop.html',[],function(){return "<template><ux-dialog style=\"background:#000;border:none\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><div><i class=\"fa fa-times fa-lg text-light\" style=\"cursor:pointer;float:right;position:relative;z-index:1000;padding:15px\" click.delegate=\"cancel()\"></i></div><ux-dialog-body style=\"position:absolute;padding:0;left:0;top:0;bottom:0;right:0\"><iframe ref=\"docframe\" load.bind=\"onFrameLoad()\" src.bind=\"url\" title=\"Xray\" width=\"100%;\" height=\"100%;\" style=\"border:none;border-radius:5px\"></iframe><div class=\"row m-0\" style=\"position:absolute;bottom:0;left:0;width:100%;right:0\"><div class=\"col-md-12\"><button type=\"button\" class=\"btn btn-outline-secondary btn-sm float-right mb-2\" click.delegate=\"toggleFinding()\">Findings</button><div if.bind=\"displayFindings\" class=\"form-group\"><textarea class=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"3\" value.bind=\"xrayData.XRayFinding\"></textarea></div></div></div></ux-dialog-body></ux-dialog></template>";});;
define('helpers/helper',['exports', 'moment'], function (exports, _moment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.helper = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var helper = exports.helper = function () {
    function helper() {
      _classCallCheck(this, helper);

      this._prepender = '';
      this._server = 'https://phoenixservices20250215203954.azurewebsites.net/';
      this._webDocsServer = 'https://lively-water-016adb510.6.azurestaticapps.net/';
      this.buildNumber = '2.89.00';

      console.log("HELPER");
      var self = this;
      self.tenantId = 'laorthowellness-com';
      self.goFileUrl = 'https://phoenixprodblob.blob.core.windows.net/';
      self.imageTenantRoot = self.tenantId + '/images/';
      self.imageTenantBaseUrl = '' + self.goFileUrl + self.imageTenantRoot;
    }

    helper.prototype.getApiUrl = function getApiUrl(resource) {
      var base = this._server;
      if (!base.endsWith('/')) base += '/';
      if (resource.startsWith('/')) resource = resource.substring(1);
      return base + this._prepender + resource;
    };

    helper.prototype.getFilewatcherUrl = function getFilewatcherUrl(resource) {
      return this._server + '/filewatcher/' + resource;
    };

    helper.prototype.isStringNullOrEmpty = function isStringNullOrEmpty(string) {
      if (string == null || string == "") {
        return true;
      }
      return false;
    };

    helper.prototype.is_today = function is_today(date) {
      var today = new Date();
      var schedule_date = new Date(date);
      if (today.getFullYear() == schedule_date.getFullYear() && today.getDate() == schedule_date.getDate() && today.getMonth() == schedule_date.getMonth()) {
        return true;
      } else {
        return false;
      }
    };

    helper.prototype.getMMDDYYYYDate = function getMMDDYYYYDate(year, month, day, divider) {

      var div = divider == undefined ? '-' : divider;

      month += 1;

      var tMonth = "";
      if (month.toString().length == 1) {
        tMonth = "0" + month;
      } else {
        tMonth = month;
      }

      var tDay = "";
      if (day.toString().length == 1) {
        tDay = "0" + day;
      } else {
        tDay = day;
      }

      return '' + tMonth + div + tDay + div + year;
    };

    helper.prototype.utcDateToTimeString = function utcDateToTimeString(utcDate) {
      var date = new Date(utcDate);
      var tz = Intl.DateTimeFormat().resolvedOptions().timeZone;

      var options = {
        timeStyle: "short",
        timeZone: tz
      };
      return new Intl.DateTimeFormat("en-US", options).format(date);
    };

    helper.prototype.parseMMDDYYDateString = function parseMMDDYYDateString(date, divider) {
      var split = date.split(divider);
      var month = parseInt(split[0]);
      month = month - 1;
      var day = parseInt(split[1]);
      var year = parseInt(split[2]);
      return new Date(year, month, day);
    };

    helper.prototype.parseSimpleDate = function parseSimpleDate(date, format) {
      var frmtUpper = format.toUpperCase();

      var divider = null;
      for (var i = 0; i < frmtUpper.length; i++) {
        var char = frmtUpper.substring(i, i + 1);
        if (char == '-' || char == '/') {
          divider = char;
          break;
        }
      }

      for (var d = 0; d < date.length; d++) {
        var char = date.substring(d, d + 1);
        if (char == " ") continue;
        var pInt = parseInt(char);
        if (isNaN(pInt)) {
          divider = char;
          break;
        }
      }

      if (divider == null) return null;

      var split = date.split(divider);
      var splitFrmt = format.split(divider);

      var month,
          day,
          year = null;

      for (var d = 0; d < splitFrmt.length; d++) {
        if (splitFrmt[d] == 'M' || splitFrmt[d] == 'MM') {
          month = parseInt(split[d]);
          month = month - 1;
        } else if (splitFrmt[d] == 'D' || splitFrmt[d] == 'DD') {
          day = parseInt(split[d]);
        } else if (splitFrmt[d].startsWith('Y')) {
          if (split[d].length == 2) {
            var today = new Date();
            var fullyear = today.getFullYear().toString();
            fullyear = fullyear.substring(0, 2) + split[d];
            year = parseInt(fullyear);
          } else {
            year = parseInt(split[d]);
          }
        }
      }

      if (month == null || day == null || year == null) {
        return null;
      }

      return new Date(year, month, day);
    };

    helper.prototype.getMMDDYYYYDateWithDate = function getMMDDYYYYDateWithDate(date, divider) {
      var year = date.getFullYear();
      var month = date.getMonth();
      var day = date.getDate();
      return this.getMMDDYYYYDate(year, month, day, divider);
    };

    helper.prototype.getMMDDYYYYDate = function getMMDDYYYYDate(year, month, day, divider) {

      var div = divider == undefined ? '-' : divider;

      var tMonth = "";

      month += 1;
      if (month.toString().length == 1) {
        tMonth = "0" + month;
      } else {
        tMonth = month.toString();
      }

      var tDay = "";
      if (day.toString().length == 1) {
        tDay = "0" + day;
      } else {
        tDay = day;
      }

      return '' + tMonth + div + tDay + div + year.toString();
    };

    helper.prototype.getMMDDYYDate = function getMMDDYYDate(year, month, day, divider) {

      var div = divider == undefined ? '-' : divider;

      var tMonth = "";
      month += 1;
      if (month.toString().length == 1) {
        tMonth = "0" + month;
      } else {
        tMonth = month;
      }

      var tDay = "";
      if (day.toString().length == 1) {
        tDay = "0" + day;
      } else {
        tDay = day;
      }

      var twoDigitYear = year.toString().substring(2);

      return '' + tMonth + div + tDay + div + twoDigitYear;
    };

    helper.prototype.createNoty = function createNoty(description, timeout, layout) {
      return new Noty({
        text: '<i class="fa fa-circle-o-notch fa-spin"></i> ' + description,
        layout: layout ? layout : 'bottomRight',
        type: 'alert',
        timeout: timeout
      });
    };

    helper.prototype.createNotySuccess = function createNotySuccess(message) {
      var n = new Noty({
        text: message,
        layout: 'bottomRight',
        type: 'success',
        timeout: 1000
      });
      n.show();
    };

    helper.prototype.updateNoty = function updateNoty(noty, text, type, millisecsToClose) {
      if (text) {
        noty.setText(text);
      }
      if (type) {
        noty.setType(type);
      }

      if (millisecsToClose) {
        this.closeNotyTimed(noty, millisecsToClose);
      }
    };

    helper.prototype.closeNotyTimed = function closeNotyTimed(noty, millseconds) {
      var timer = window.setTimeout(function () {
        window.clearTimeout(timer);
        noty.close();
      }, millseconds);
    };

    helper.prototype.notySuccess = function notySuccess(n, message) {
      n.setText(message);
      n.setType('success');
    };

    helper.prototype.notyError = function notyError(n, message) {
      n.setText(message);
      n.setType('error');
    };

    helper.prototype.getDateWithFormat = function getDateWithFormat(date, format) {
      return (0, _moment2.default)(date, "MM/DD/YYYY").format(format);
    };

    helper.prototype.getISODateToFormat = function getISODateToFormat(date, format) {
      return (0, _moment2.default)(date, _moment2.default.ISO_8601).format(format);
    };

    helper.prototype.processToken = function processToken(token, callback) {
      var splitToken = token.split('.');
      var payloadString = splitToken[1];
      var payload = atob(payloadString);

      this._user = JSON.parse(payload);

      if (this._user.RoleJson) this._user.RoleDetails = JSON.parse(this._user.RoleJson);
      this._jwt = token;
      if (callback) {
        callback();
      }
    };

    helper.prototype.openToken = function openToken(token) {
      var splitToken = token.split('.');
      var payloadString = splitToken[1];
      var payload = atob(payloadString);
      return JSON.parse(payload);
    };

    helper.prototype.jwt = function jwt() {
      if (this._jwt) {
        this._jwt = this._jwt.replace(/%22/g, "");
      }
      return this._jwt;
    };

    helper.prototype.getBoundObject = function getBoundObject() {
      var bridge = undefined;
      if (typeof bound === 'undefined') {
        if (chrome && chrome.webview && chrome.webview.hostObjects) {
          bridge = chrome.webview.hostObjects.bound;
          console.log('bridge from chrome.webview.hostObjects:', bridge);
          console.log('chrome', chrome);
        }
      } else {
        bridge = bound;
      }
      return bridge;
    };

    helper.prototype.getTenantIdDashed = function getTenantIdDashed(tenantId) {
      return tenantId.replace(".", "-");
    };

    return helper;
  }();
});;
define('helpers/http',['exports', 'aurelia-framework', './helper'], function (exports, _aureliaFramework, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.http = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var http = exports.http = (_dec = (0, _aureliaFramework.inject)(_helper.helper), _dec(_class = function () {
    function http(helper) {
      _classCallCheck(this, http);

      this.helper = helper;
      var self = this;

      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
          var config = JSON.parse(this.response);
          var server = config === null ? null : config.server;
          self.helper._server = server;
          self.helper._webDocsServer = config.webdocsServer;
        }
      };
      xhttp.open("GET", "/phxConfig.json", true);
      xhttp.send();
    }

    http.prototype.login = function login(loginUrl, model, callback, errCallback) {
      var self = this;
      var content = JSON.stringify({ username: model.Username, password: model.Password, tenantid: model.TenantId });

      console.log('BOUT TO LOGIN!', loginUrl);
      $.ajax({
        type: 'POST',
        url: loginUrl,
        data: content,
        contentType: 'application/json'
      }).done(function (data) {
        console.log('RECEIVED LOGIN DATA!', data);
        if (data != "User not found.") {
          self.helper.processToken(data);
        }
        callback(data);
      }).fail(function (data) {
        errCallback(data);
      });
    };

    http.prototype.loginOdgo = function loginOdgo(loginUrl, model, callback, errCallback) {
      var self = this;
      var content = JSON.stringify({ username: model.Username, password: model.Password, tenantid: model.TenantId });

      console.log('BOUT TO LOGIN!', loginUrl);
      $.ajax({
        type: 'POST',
        url: loginUrl,
        data: content,
        contentType: 'application/json'
      }).done(function (data) {
        callback(data);
      }).fail(function (data) {
        errCallback(data);
      });
    };

    http.prototype.post = function post(url, sendData, callback, config, errCallback, postStartedCallback) {

      var _this = this;

      var tCache = true;
      var tProcessData = true;
      var tContentType = 'application/x-www-form-urlencoded; charset=UTF-8';
      if (config) {
        if (config.cache != null) {
          tCache = config.cache == false ? false : true;
        }
        if (config.processData != null) {
          tProcessData = config.processData == false ? false : true;
        }

        tContentType = config.contentType != null ? config.contentType : tContentType;
      }

      $.ajax({
        type: 'POST',
        url: url,
        data: sendData,
        dataType: 'json',
        cache: tCache,
        processData: tProcessData,
        contentType: tContentType,
        beforeSend: function beforeSend(request) {
          request.setRequestHeader("Authorization-Token", _this.helper.jwt());
          if (postStartedCallback) {
            postStartedCallback();
          }
        }
      }).done(function (data) {
        console.log('DONE POSTING', data);
        callback(data);
      }).fail(function (data) {
        errCallback(data);
      });
    };

    http.prototype.postNoAuth = function postNoAuth(url, sendData, callback, config, errCallback, postStartedCallback) {

      var _this = this;

      var tCache = true;
      var tProcessData = true;
      var tContentType = 'application/x-www-form-urlencoded; charset=UTF-8';
      if (config) {
        if (config.cache != null) {
          tCache = config.cache == false ? false : true;
        }
        if (config.processData != null) {
          tProcessData = config.processData == false ? false : true;
        }

        tContentType = config.contentType != null ? config.contentType : tContentType;
      }

      $.ajax({
        type: 'POST',
        url: url,
        data: sendData,
        dataType: 'json',
        cache: tCache,
        processData: tProcessData,
        contentType: tContentType
      }).done(function (data) {
        console.log('DONE POSTING', data);
        callback(data);
      }).fail(function (data) {
        errCallback(data);
      });
    };

    http.prototype.put = function put(url, sendData, callback, errCallback) {

      var _this = this;

      $.ajax({
        type: 'PUT',
        url: url,
        data: sendData,
        dataType: 'json',

        beforeSend: function beforeSend(request) {
          request.setRequestHeader("Authorization-Token", _this.helper.jwt());
        }
      }).done(function (data) {
        callback(data);
      }).fail(function (err) {
        errCallback(err);
      });
    };

    http.prototype.get = function get(url, callback, errorCallback) {

      var _this = this;

      return $.ajax({
        type: 'GET',
        url: url,

        beforeSend: function beforeSend(request) {
          request.setRequestHeader("Authorization-Token", _this.helper.jwt());
        }
      }).fail(function (err) {
        if (errorCallback) {
          errorCallback(err);
        }
      }).done(function (data) {
        callback(data);
      });
    };

    http.prototype.getNoAuth = function getNoAuth(url, callback, errorCallback) {

      var _this = this;

      return $.ajax({
        type: 'GET',
        url: url
      }).fail(function (err) {
        if (errorCallback) {
          errorCallback(err);
        }
      }).done(function (data) {
        callback(data);
      });
    };

    http.prototype.del = function del(url, callback, errorCallback) {

      var _this = this;

      $.ajax({
        type: 'DELETE',
        url: url,

        beforeSend: function beforeSend(request) {
          request.setRequestHeader("Authorization-Token", _this.helper.jwt());
        }
      }).fail(function (err) {
        errorCallback(err);
      }).done(function (data) {
        callback(data);
      });
    };

    http.prototype.delNoAuth = function delNoAuth(url, callback, errorCallback) {

      var _this = this;

      $.ajax({
        type: 'DELETE',
        url: url
      }).fail(function (err) {
        errorCallback(err);
      }).done(function (data) {
        callback(data);
      });
    };

    http.prototype.mockJwt = function mockJwt() {
      return '';
    };

    return http;
  }()) || _class);
});;
define('helpers/jsBridge',['exports', 'aurelia-framework', 'aurelia-event-aggregator'], function (exports, _aureliaFramework, _aureliaEventAggregator) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JsBridge = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var JsBridge = exports.JsBridge = (_dec = (0, _aureliaFramework.inject)(_aureliaEventAggregator.EventAggregator), _dec(_class = function () {
    function JsBridge(eventAggregator) {
      _classCallCheck(this, JsBridge);

      var self = this;
      eventAggregator.subscribe('open-pdf', function (data) {
        self.openPdf(data);
      });
    }

    JsBridge.prototype.openPdf = function openPdf(pdfPath) {
      console.log('OPEN PDF!', pdfPath);
      if (typeof window.bound !== 'undefined') {
        window.bound.OpenPdf(pdfPath);
      } else {
        console.log("BOUND DOESN'T EXIST!");
      }
    };

    JsBridge.prototype.closeCurrentPdf = function closeCurrentPdf() {
      var success = false;
      console.log('CLOSE CURRENT PDF!');
      if (typeof window.bound !== 'undefined') {
        success = window.bound.CloseCurrentPdf();
      } else {
        console.log("BOUND DOESN'T EXIST!");
      }
      return success;
    };

    return JsBridge;
  }()) || _class);
});;
define('implantableDeviceLookup/devicePop',['exports', 'aurelia-dialog', '../helpers/http', 'aurelia-framework'], function (exports, _aureliaDialog, _http, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DevicePop = undefined;

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var OD_Patient_Implantable = function OD_Patient_Implantable(id, patientId, json, status) {
    _classCallCheck(this, OD_Patient_Implantable);

    this.PatientId = patientId;
    this.Id = id;
    this.Json = json;
    this.Status = status;
  };

  var DevicePop = exports.DevicePop = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http), _dec(_class = function () {
    function DevicePop(DialogController, http) {
      _classCallCheck(this, DevicePop);

      this.devices = null;
      this.deviceValue = '00698764387125';

      this.controller = DialogController;
      this.http = http;
    }

    DevicePop.prototype.activate = function activate(person) {};

    DevicePop.prototype.lookupDeviceWithDi = function lookupDeviceWithDi() {

      var url = 'https://accessgudid.nlm.nih.gov/api/v1/devices/lookup.json?di=' + this.deviceValue;
      var self = this;
      this.http.get(url, function (res) {

        console.log(res);

        if (res) {
          var aDevice = res.gudid.device;
          var d = new OD_Patient_Implantable(0, null, aDevice, "Active");
          self.devices = [];
          self.devices.push(d);
        }
      });
    };

    return DevicePop;
  }()) || _class);
});;
define('text!implantableDeviceLookup/devicePop.html',[],function(){return "<template><ux-dialog><ux-dialog-body><h2>DI Lookup</h2><div class=\"input-group mb-3\"><input type=\"text\" class=\"form-control\" value.bind=\"deviceValue\" placeholder=\"Implant DI#\" aria-label=\"Recipient's username\" aria-describedby=\"basic-addon2\"><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary\" type=\"button\" click.delegate=\"lookupDeviceWithDi()\"><i class=\"fa fa-search\"></i></button></div></div><table class=\"table table-hover\" if.bind=\"devices\"><thead><tr><th scope=\"col\">GMDN Part Name</th><th scope=\"col\">Device ID</th><th scope=\"col\">Description</th><th scope=\"col\">Brand Name</th><th scope=\"col\">Version or Model</th><th scope=\"col\">Company Name</th><th scope=\"col\">MRI Safety Info</th><th scope=\"col\">Label Rubber</th><th scope=\"col\">Lot or Batch</th><th scope=\"col\">Serial Number</th><th scope=\"col\">Expiration Date</th><th scope=\"col\">Mfg. Date</th></tr></thead><tbody repeat.for=\"d of devices\"><tr><td>${d.Json.gmdnTerms.gmdn.gmdnPTName}</td><td>${d.Json.identifiers.identifier.deviceId}</td><td>${d.Json.deviceDescription}</td><td>${d.Json.brandName}</td><td>${d.Json.versionModelNumber}</td><td>${d.Json.companyName}</td><td>${d.Json.MRISafetyStatus}</td><td>${d.Json.labeledContainsNRL}</td><td>${d.Json.lotBatch}</td><td>${d.Json.serialNumber}</td><td>${d.Json.expirationDate}</td><td>${d.Json.manufacturingDate}</td></tr></tbody></table></ux-dialog-body><ux-dialog-footer><button click.trigger=\"controller.cancel()\">Cancel</button> <button click.trigger=\"controller.ok(devices)\">Ok</button></ux-dialog-footer></ux-dialog></template>";});;
define('implantableDeviceLookup/devices',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'aurelia-dialog', './devicePop'], function (exports, _helper, _http, _aureliaFramework, _aureliaDialog, _devicePop) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Devices = undefined;

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var OD_Patient_Implantable = function OD_Patient_Implantable(id, patientId, json, status) {
    _classCallCheck(this, OD_Patient_Implantable);

    this.PatientId = patientId;
    this.Id = id;
    this.Json = json;
    this.Status = status;
    this.statusCss = this.Status === "Active" ? "btn btn-primary" : "btn btn-secondary";
  };

  var Devices = exports.Devices = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _aureliaDialog.DialogService), _dec(_class = function () {
    function Devices(helper, http, DialogService) {
      _classCallCheck(this, Devices);

      this.patientDevices = [];

      this.helper = helper;
      this.http = http;
      this.dialogService = DialogService;
    }

    Devices.prototype.activate = function activate(params) {

      console.log('window', window);

      var self = this;

      if (typeof this.helper.jwt() === 'undefined' || this.helper.jwt() == null) {
        if (params.hasOwnProperty("jwt")) {
          this.helper.processToken(params.jwt);
        }
      } else {}

      if (params.hasOwnProperty("patientid")) {
        this.patientId = params.patientid;
      }

      this.getPatientDevices();
    };

    Devices.prototype.attached = function attached() {};

    Devices.prototype.save = function save(device) {

      var self = this;

      var config = {};

      var pi = new OD_Patient_Implantable(0, this.patientId, JSON.stringify(device.Json), "Active");

      var url = 'patient/implantables';
      this.http.post(this.helper.getApiUrl(url), pi, function (res) {

        var d = res;

        self.patientDevices.push(new OD_Patient_Implantable(d.Id, d.PatientId, JSON.parse(d.Json), d.Status));
      }, config);
    };

    Devices.prototype.update = function update(device, index) {

      var self = this;

      var status = device.Status == "Active" ? "Inactive" : "Active";
      device.Status = status;

      var pi = new OD_Patient_Implantable(device.Id, this.patientId, JSON.stringify(device.Json), device.Status);
      var url = 'patient/implantables';

      this.http.put(this.helper.getApiUrl(url), pi, function (res) {

        var d = res;

        self.patientDevices.splice(index, 1);
        self.patientDevices.splice(index, 0, new OD_Patient_Implantable(d.Id, d.PatientId, JSON.parse(d.Json), d.Status));
      });
    };

    Devices.prototype.deviceLookupPop = function deviceLookupPop() {

      var self = this;

      this.dialogService.open({ viewModel: _devicePop.DevicePop, model: null, lock: false }).whenClosed(function (response) {
        if (!response.wasCancelled) {
          console.log('good - ', response.output);

          self.save(response.output[0]);
        } else {
          console.log('bad');
        }
        console.log(response.output);
      });
    };

    Devices.prototype.getPatientDevices = function getPatientDevices() {
      var self = this;
      var url = 'patient/implantables?patientId=' + self.patientId;
      self.http.get(self.helper.getApiUrl(url), function (res) {

        for (var i = 0; i < res.length; i++) {

          var d = res[i];
          var json = JSON.parse(d.Json);
          var pi = new OD_Patient_Implantable(d.Id, d.PatientId, json, d.Status);
          self.patientDevices.push(pi);
        }
      });
    };

    Devices.prototype.delete = function _delete(device, index) {

      var self = this;
      var url = 'patient/implantables?id=' + device.Id;
      self.http.del(self.helper.getApiUrl(url), function (res) {

        if (res === "true") {
          for (var i = 0; i < self.patientDevices.length; i++) {
            var d = self.patientDevices[i];
            if (d.Id == device.Id) {
              self.patientDevices.splice(i, 1);
            }
          }
        }
      });
    };

    return Devices;
  }()) || _class);
});;
define('text!implantableDeviceLookup/devices.html',[],function(){return "<template><nav class=\"navbar navbar-light bg-light justify-content-between\"><a class=\"navbar-brand\" href=\"#\">Implantable Devices</a><form class=\"form-inline\"><button class=\"btn btn-sm btn-outline-secondary\" type=\"button\" click.delegate=\"deviceLookupPop()\"><i class=\"fa fa-plus\"></i> Add</button></form></nav><table class=\"table table-hover\"><thead><tr><th scope=\"col\">Status</th><th scope=\"col\">GMDN Part Name</th><th scope=\"col\">Device ID</th><th scope=\"col\">Description</th><th scope=\"col\">Brand Name</th><th scope=\"col\">Version or Model</th><th scope=\"col\">Company Name</th><th scope=\"col\">MRI Safety Info</th><th scope=\"col\">Label Rubber</th><th scope=\"col\">Lot or Batch</th><th scope=\"col\">Serial Number</th><th scope=\"col\">Expiration Date</th><th scope=\"col\">Mfg. Date</th></tr></thead><tbody repeat.for=\"d of patientDevices\"><tr><td><button type=\"button\" class.bind=\"d.statusCss\" click.delegate=\"update(d, $index)\">${d.Status}</button></td><td>${d.Json.gmdnTerms.gmdn.gmdnPTName}</td><td>${d.Json.identifiers.identifier.deviceId}</td><td>${d.Json.deviceDescription}</td><td>${d.Json.brandName}</td><td>${d.Json.versionModelNumber}</td><td>${d.Json.companyName}</td><td>${d.Json.MRISafetyStatus}</td><td>${d.Json.labeledContainsNRL}</td><td>${d.Json.lotBatch}</td><td>${d.Json.serialNumber}</td><td>${d.Json.expirationDate}</td><td>${d.Json.manufacturingDate}</td></tr></tbody></table></template>";});;
define('implantableDeviceLookup/index',['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var Index = exports.Index = function () {
		function Index() {
			_classCallCheck(this, Index);

			console.log('implantableDeviceLookup INDEX LOADED!');
		}

		Index.prototype.configureRouter = function configureRouter(config, router) {
			config.title = 'Implantable Devices';
			config.map([{ route: 'devices', name: 'devices', moduleId: 'implantableDeviceLookup/devices', nav: true, title: 'Devices' }]);
			this.router = router;
		};

		return Index;
	}();
});;
define('text!implantableDeviceLookup/index.html',[],function(){return "<template><div class=\"container-fluid\"><router-view></router-view></div></template>";});;
define('kioskPageOrder/index',['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var Index = exports.Index = function () {
		function Index() {
			_classCallCheck(this, Index);

			this.message = 'HELLO FROM kioskPageOrder/INDEX';
			console.log('KioskPageOrder INDEX LOADED!');
		}

		Index.prototype.configureRouter = function configureRouter(config, router) {
			config.title = 'Kiosk Pages';
			config.map([{ route: 'pages', name: 'pages', moduleId: 'kioskPageOrder/pages', nav: true, title: 'Kiosk Pages' }]);
			this.router = router;
		};

		return Index;
	}();
});;
define('text!kioskPageOrder/index.html',[],function(){return "<template><router-view></router-view></template>";});;
define('kioskPageOrder/pages',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'lodash', 'moment'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Pages = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var Pages = exports.Pages = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http), _dec(_class = function () {
    function Pages(helper, http) {
      _classCallCheck(this, Pages);

      this.items = ['one', 'two', 'three'];

      this.helper = helper;
      this.http = http;
    }

    Pages.prototype.activate = function activate(params) {

      var self = this;

      if (typeof this.helper.jwt() === 'undefined' || this.helper.jwt() == null) {
        if (params.hasOwnProperty("jwt")) {
          this.helper.processToken(params.jwt);
        }
      } else {}
    };

    Pages.prototype.attached = function attached() {};

    return Pages;
  }()) || _class);
});;
define('text!kioskPageOrder/pages.html',[],function(){return "<template><nav class=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\" ref=\"navbar\"><a class=\"navbar-brand\" href=\"#\"><i class=\"fa fa-tablet fa-lg\"></i> Kiosk Check-In</a></nav><div class=\"container-fluid\" style=\"padding:0;position:fixed;top:55px\"><div class=\"row\"><div reorderable-repeat.for=\"item of items\"><div>${item}</div></div></div></div></template>";});;
define('kioskPreferences/error',['exports', 'aurelia-dialog', 'aurelia-framework'], function (exports, _aureliaDialog, _aureliaFramework) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Error = undefined;

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var _dec, _class;

	var Error = exports.Error = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController), _dec(_class = function () {
		function Error(DialogController) {
			_classCallCheck(this, Error);

			this.message = "test login message";
			this.dialogController = DialogController;
		}

		Error.prototype.okClicked = function okClicked() {
			var self = this;
			self.dialogController.close(true, null);
		};

		Error.prototype.activate = function activate(message) {
			var self = this;
			self.message = message;
			console.log('LOGIN ACTIVATE', message);
		};

		return Error;
	}()) || _class);
});;
define('text!kioskPreferences/error.html',[],function(){return "<template><ux-dialog><ux-dialog-header><div class=\"row\"><div class=\"col-sm-12\"><h4 class=\"text-danger\">Error</h4></div></div></ux-dialog-header><ux-dialog-body><div class=\"row\"><div innerhtml.bind=\"message\" class=\"col\"></div></div></ux-dialog-body><ux-dialog-footer><button click.delegate=\"okClicked()\">Ok</button></ux-dialog-footer></ux-dialog></template>";});;
define('kioskPreferences/index',['exports', '../helpers/helper', '../helpers/http', 'aurelia-event-aggregator', 'aurelia-dialog', 'aurelia-framework', '../login/login', '../kioskPreferences/error', '../kioskPreferences/rules', '../data/kiosk-preferences/data'], function (exports, _helper, _http, _aureliaEventAggregator, _aureliaDialog, _aureliaFramework, _login, _error, _rules, _data) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.Index = undefined;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var _dec, _class;

    var Index = exports.Index = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _aureliaEventAggregator.EventAggregator, _aureliaDialog.DialogService, _data.KioskPreferencesData), _dec(_class = function () {
        function Index(helper, http, EventAggregator, DialogService, KioskPreferencesData) {
            _classCallCheck(this, Index);

            this.eventAggregator = EventAggregator;
            this.dialogService = DialogService;
            this.helper = helper;
            this.http = http;
            this.message = 'hello from kiosk preferences!';
            this.configurations = [];
            this.currentConfiguration = null;
            this.availablePdfs = [];
            this.allPdfs = [];
            this.availablePages = [];
            this.allPages = [];
            this.allProviders = [];
            this.allGoForms = [];
            this.availableGoForms = [];

            this.allTypes = [{ 'Name': 'History Required', 'Type': 'KIOSK_PAGE_ORDER' }, { 'Name': 'History Current', 'Type': 'KIOSK_PAGE_ORDER' }];
            this.needsLogin = false;
            this.changesSaved = true;
            this.settingsSaved = true;
            this.data = KioskPreferencesData.data;
            this.settings = {};
            this.isKioskPrefs = true;
        }

        Index.prototype.switchSettings = function switchSettings(settingType) {
            var self = this;
            this.isKioskPrefs = settingType == 'KIOSK' ? true : false;

            if (this.isKioskPrefs) {
                this.allTypes = [{ 'Name': 'History Required', 'Type': 'KIOSK_PAGE_ORDER' }, { 'Name': 'History Current', 'Type': 'KIOSK_PAGE_ORDER' }];

                this.getGoForms('PDF');
                this.typeSelected(this.allTypes[0]);
            } else {
                self.allTypes = [{ 'Name': 'Portal Documents', 'Type': 'PORTAL_DOCUMENTS' }];
                self.availableGoForms = [];
                self.getGoForms('PDF', function () {
                    self.typeSelected(self.allTypes[0]);
                });
            }
        };

        Index.prototype.getDefaultPages = function getDefaultPages() {
            var self = this;
            console.log('GET DEFAULT PAGES');
            self.http.get(self.helper.getApiUrl('configuration/default?type=KIOSK_PAGE_ORDER'), function (data) {
                console.log('DEFAULT PAGES', data);
                var pageOrder = data.JsonData;
                var parsedPageOrder = JSON.parse(pageOrder);
                console.log('PARSED DEFAULT PAGE ORDER', parsedPageOrder);
                self.allPages = parsedPageOrder;
                self.syncAvailableItemsWithCurrentPageOrder('page', self.allPages, self.availablePages);
            });
        };

        Index.prototype.providerSelected = function providerSelected(provider) {
            var self = this;

            var providerId = null;
            if (provider) {
                providerId = provider.ProviderID;
            }

            var configurationForProvider = null;

            for (var i = 0; i < self.configurations.length; i++) {
                var configuration = self.configurations[i];
                if (configuration.ProviderId === providerId && configuration.Name === self.currentConfiguration.Name) {
                    configurationForProvider = configuration;
                    break;
                }
            }

            if (configurationForProvider) {
                self.currentConfiguration = configurationForProvider;
            } else {
                self.currentConfiguration = {
                    Name: self.currentConfiguration.Name,
                    Type: self.currentConfiguration.Type,
                    ProviderId: providerId,
                    JsonData: []
                };
            }

            self.syncAvailableItemsWithCurrentPageOrder('page', self.allPages, self.availablePages);
            self.syncAvailableItemsWithCurrentPageOrder('pdf', self.allPdfs, self.availablePdfs);
            self.syncAvailableItemsWithCurrentPageOrder('goform', self.allGoForms, self.availableGoForms);
            self.changesSaved = true;
        };

        Index.prototype.typeSelected = function typeSelected(type) {
            var self = this;
            var configurationForType = null;

            for (var i = 0; i < self.configurations.length; i++) {
                var configuration = self.configurations[i];
                if (configuration.Name === type.Name && configuration.ProviderId === self.currentConfiguration.ProviderId) {
                    configurationForType = configuration;
                    break;
                }
            }

            if (configurationForType) {
                self.currentConfiguration = configurationForType;
            } else {
                self.currentConfiguration = {
                    Name: type.Name,
                    Type: type.Type,
                    ProviderId: self.currentConfiguration.ProviderId,
                    JsonData: []
                };
            }

            self.syncAvailableItemsWithCurrentPageOrder('page', self.allPages, self.availablePages);
            self.syncAvailableItemsWithCurrentPageOrder('pdf', self.allPdfs, self.availablePdfs);
            self.syncAvailableItemsWithCurrentPageOrder('goform', self.allGoForms, self.availableGoForms);
            self.changesSaved = true;
        };

        Index.prototype.syncAvailableItemsWithCurrentPageOrder = function syncAvailableItemsWithCurrentPageOrder(type, allItems, availableItems) {
            var self = this;
            if (!allItems || allItems.length < 1) {
                return;
            }
            if (!self.currentConfiguration) {
                return;
            }

            var pushAllToAvailable = false;

            if (!self.currentConfiguration.JsonData || self.currentConfiguration.JsonData.length < 1) {
                if (!self.currentConfiguration.JsonData) {
                    self.currentConfiguration.JsonData = [];
                }
                pushAllToAvailable = true;
            } else {
                var typeCount = 0;
                for (var i = 0; i < self.currentConfiguration.JsonData.length; i++) {
                    var currentPageOrderItem = self.currentConfiguration.JsonData[i];
                    if (type === 'page' && (currentPageOrderItem.type === 'page' || currentPageOrderItem.type === 'parent' || currentPageOrderItem.type === 'child-page')) {
                        typeCount++;
                        break;
                    }
                    if (type === 'pdf' && currentPageOrderItem.type === 'pdf') {
                        typeCount++;
                        break;
                    }
                    if (type === 'goform' && currentPageOrderItem.type === 'goform') {
                        typeCount++;
                        break;
                    }
                }
                if (typeCount === 0) {
                    pushAllToAvailable = true;
                }
            }

            if (pushAllToAvailable === true) {
                while (availableItems.length > 0) {
                    availableItems.pop();
                }

                for (var _i = 0; _i < allItems.length; _i++) {
                    availableItems.push(allItems[_i]);
                }

                return;
            }

            for (var _i2 = 0; _i2 < self.currentConfiguration.JsonData.length; _i2++) {
                var _currentPageOrderItem = self.currentConfiguration.JsonData[_i2];
                var process = false;
                if (type === 'page' && (_currentPageOrderItem.type === 'page' || _currentPageOrderItem.type === 'parent' || _currentPageOrderItem.type === 'child-page')) {
                    process = true;
                }
                if (type === 'pdf' && _currentPageOrderItem.type === 'pdf') {
                    process = true;
                }
                if (type === 'goform' && _currentPageOrderItem.type === 'goform') {
                    process = true;
                }
                if (process === false) {
                    continue;
                }
                for (var ii = 0; ii < availableItems.length; ii++) {
                    var currentItem = availableItems[ii];
                    var shouldRemove = false;
                    switch (type) {
                        case 'pdf':
                            if (_currentPageOrderItem.pdfTemplate && currentItem.TemplateID === _currentPageOrderItem.pdfTemplate.TemplateID) {
                                shouldRemove = true;
                            }
                            break;
                        case 'goform':
                            if (_currentPageOrderItem.goForm && currentItem.Id === _currentPageOrderItem.goForm.Id) {
                                shouldRemove = true;
                            }
                            break;
                        default:
                            if (currentItem.name === _currentPageOrderItem.name && currentItem.type === _currentPageOrderItem.type) {
                                shouldRemove = true;
                            }
                            break;
                    }
                    if (shouldRemove) {
                        availableItems.splice(ii, 1);
                        break;
                    }
                }
            }

            for (var _i3 = 0; _i3 < allItems.length; _i3++) {
                var _currentItem = allItems[_i3];
                var isInAvailableItems = false;
                var isInCurrentConfiguration = false;
                for (var _ii = 0; _ii < availableItems.length; _ii++) {
                    var currentAvailableItem = availableItems[_ii];
                    switch (type) {
                        case 'pdf':
                            if (currentAvailableItem.TemplateID === _currentItem.TemplateID) {
                                isInAvailableItems = true;
                            }
                            break;
                        case 'goform':
                            if (currentAvailableItem.Id === _currentItem.Id) {
                                isInAvailableItems = true;
                            }
                            break;
                        default:
                            if (currentAvailableItem.name === _currentItem.name && currentAvailableItem.type === _currentItem.type) {
                                isInAvailableItems = true;
                            }
                            break;
                    }
                    if (isInAvailableItems) {
                        break;
                    }
                }
                for (var _ii2 = 0; _ii2 < self.currentConfiguration.JsonData.length; _ii2++) {
                    var _currentPageOrderItem2 = self.currentConfiguration.JsonData[_ii2];
                    var _process = false;
                    if (type === 'page' && (_currentPageOrderItem2.type === 'page' || _currentPageOrderItem2.type === 'parent' || _currentPageOrderItem2.type === 'child-page')) {
                        _process = true;
                    }
                    if (type === 'pdf' && _currentPageOrderItem2.type === 'pdf') {
                        _process = true;
                    }
                    if (type === 'goform' && _currentPageOrderItem2.type === 'goform') {
                        _process = true;
                    }
                    if (_process === false) {
                        continue;
                    }
                    switch (type) {
                        case 'pdf':
                            if (_currentPageOrderItem2.pdfTemplate && _currentPageOrderItem2.pdfTemplate.TemplateID === _currentItem.TemplateID) {
                                isInCurrentConfiguration = true;
                            }
                            break;
                        case 'goform':
                            if (_currentPageOrderItem2.goForm && _currentPageOrderItem2.goForm.Id === _currentItem.Id) {
                                isInCurrentConfiguration = true;
                            }
                            break;
                        default:
                            if (_currentItem.name === _currentPageOrderItem2.name && _currentItem.type === _currentPageOrderItem2.type) {
                                isInCurrentConfiguration = true;
                            }
                            break;
                    }
                    if (isInCurrentConfiguration) {
                        break;
                    }
                }
                if (!isInAvailableItems && !isInCurrentConfiguration) {
                    availableItems.push(_currentItem);
                }
            }
        };

        Index.prototype.getPdfTemplates = function getPdfTemplates() {
            var self = this;
            self.http.get(self.helper.getApiUrl('pdftemplates?type=Kiosk&providerId=0&state='), function (data) {
                self.allPdfs = data;
                console.log('PDFS!', self.allPdfs);
                self.syncAvailableItemsWithCurrentPageOrder('pdf', self.allPdfs, self.availablePdfs);
            });
        };

        Index.prototype.getGoForms = function getGoForms(type, callback) {
            var self = this;
            self.http.get(self.helper.getApiUrl('goforms?type=' + type), function (data) {
                self.allGoForms = data;
                console.log('GOFORMS!', self.allGoForms);
                self.syncAvailableItemsWithCurrentPageOrder('goform', self.allGoForms, self.availableGoForms);

                if (callback) {
                    callback();
                }
            });
        };

        Index.prototype.removeClicked = function removeClicked(pageOrderItem, itemIndex) {
            var self = this;

            self.currentConfiguration.JsonData.splice(itemIndex, 1);

            var itemCount = 0;

            while (itemCount < self.currentConfiguration.JsonData.length) {
                var currentItem = self.currentConfiguration.JsonData[itemCount];
                console.log('EXAMINING ITEM:', currentItem);
                if (currentItem.parent && currentItem.parent !== '' && currentItem.parent === pageOrderItem.name) {
                    self.currentConfiguration.JsonData.splice(itemCount, 1);
                } else {
                    itemCount++;
                }
            }

            switch (pageOrderItem.type) {
                case 'pdf':
                    self.syncAvailableItemsWithCurrentPageOrder('pdf', self.allPdfs, self.availablePdfs);
                    break;
                case 'goform':
                    self.syncAvailableItemsWithCurrentPageOrder('goform', self.allGoForms, self.availableGoForms);
                    break;
                default:
                    self.syncAvailableItemsWithCurrentPageOrder('page', self.allPages, self.availablePages);
                    break;
            }
            self.changesSaved = false;
        };

        Index.prototype.addClicked = function addClicked(item, type) {
            var self = this;

            switch (type) {
                case 'pdf':
                    var pdfPage = { name: item.Name, icon: 'file-pdf-o', selected: '', parent: '', isNavigable: true, initial: '', pdfTemplate: item, enabled: true, type: 'pdf' };
                    self.currentConfiguration.JsonData.push(pdfPage);
                    self.syncAvailableItemsWithCurrentPageOrder('pdf', self.allPdfs, self.availablePdfs);
                    break;
                case 'goform':
                    var goFormObj = { 'Id': item.Id, 'Description': item.Description, 'ProviderId': item.ProviderId, 'Type': item.Type, 'MaturityDays': item.MaturityDays };
                    var aGoForm = { name: item.Description, icon: 'list-alt', selected: '', parent: '', isNavigable: true, initial: '', goForm: goFormObj, enabled: true, type: 'goform' };
                    self.currentConfiguration.JsonData.push(aGoForm);
                    self.syncAvailableItemsWithCurrentPageOrder('goform', self.allGoForms, self.availableGoForms);
                    break;
                default:
                    self.currentConfiguration.JsonData.push(item);
                    self.syncAvailableItemsWithCurrentPageOrder('page', self.allPages, self.availablePages);
                    break;
            }
            self.changesSaved = false;
        };

        Index.prototype.getInitialPageOrders = function getInitialPageOrders() {
            var self = this;
            self.http.get(self.helper.getApiUrl('configuration/all?type=KIOSK_PAGE_ORDER,PORTAL_DOCUMENTS'), function (data) {
                self.configurations = data;
                if (!data || data.length < 1) {
                    return;
                }
                for (var i = 0; i < self.configurations.length; i++) {
                    var configuration = self.configurations[i];
                    var pageOrder = configuration.JsonData;
                    var parsedPageOrder = JSON.parse(pageOrder);
                    configuration.JsonData = parsedPageOrder;
                    if (self.currentConfiguration && configuration.Id === self.currentConfiguration.Id) {
                        self.currentConfiguration = configuration;
                    }
                }
                if (!self.currentConfiguration) {
                    self.currentConfiguration = self.configurations[0];
                }
                console.log('CURRENT CONFIGURATION', self.currentConfiguration);
                self.syncAvailableItemsWithCurrentPageOrder('pdf', self.allPdfs, self.availablePdfs);
                self.syncAvailableItemsWithCurrentPageOrder('page', self.allPages, self.availablePages);
                self.syncAvailableItemsWithCurrentPageOrder('goform', self.allGoForms, self.availableGoForms);
            });
        };

        Index.prototype.orderChanged = function orderChanged(item, change) {
            var self = this;
            console.log('ORDER CHANGED');
            console.log('ITEM', item);
            console.log('CHANGE', change);
            console.log('CURRENT ORDER', self.currentConfiguration.JsonData);
            self.changesSaved = false;
        };

        Index.prototype.checkLayoutValid = function checkLayoutValid() {
            var self = this;
            var isValid = true;

            for (var i = 0; i < self.currentConfiguration.JsonData.length; i++) {
                var currentPageOrderItem = self.currentConfiguration.JsonData[i];
                if (i === self.currentConfiguration.JsonData.length - 1) {
                    if (currentPageOrderItem.name != 'End' && currentPageOrderItem.name != 'Pay') {
                        isValid = false;
                        break;
                    }
                }
            }

            return isValid;
        };

        Index.prototype.saveClicked = function saveClicked() {
            var self = this;


            if (self.isKioskPrefs && !self.checkLayoutValid()) {
                self.dialogService.open({ viewModel: _error.Error, model: "Layout Not Valid.<br \><br \>'End' or 'Pay' must be the last page of the layout" }).whenClosed(function (response) {
                    console.log('DIALOG RETURN VALUE:', response);
                });
                return;
            }

            console.log('AFTER THE CHECK LAYOUT VALID STUFF!');

            var url = 'configuration';
            var finalUrl = self.helper.getApiUrl(url);
            var data = {
                Id: self.currentConfiguration.Id,
                Name: self.currentConfiguration.Name,
                Type: self.currentConfiguration.Type,
                ProviderId: self.currentConfiguration.ProviderId,
                JsonData: JSON.stringify(self.currentConfiguration.JsonData)
            };
            var formattedData = JSON.stringify(data);

            self.http.post(finalUrl, formattedData, function (results) {

                var existingConfigurationIndex = -1;
                for (var i = 0; i < self.configurations.length; i++) {
                    var configuration = self.configurations[i];
                    if (configuration.ProviderId === results.ProviderId && configuration.Name === results.Name) {
                        existingConfigurationIndex = i;
                        break;
                    }
                }

                console.log('SAVE DATA RETURNED');
                var parsedPageOrder = JSON.parse(results.JsonData);
                results.JsonData = parsedPageOrder;

                if (existingConfigurationIndex > -1) {
                    console.log('SAVE: configuration already exists');
                    self.configurations[existingConfigurationIndex] = results;
                } else {
                    console.log('SAVE: adding configuration', results);
                    self.configurations.push(results);
                }
                self.changesSaved = true;
            }, { contentType: 'application/json' });
        };

        Index.prototype.saveSettingsClicked = function saveSettingsClicked() {
            var self = this;

            if (!self.settings) {
                return;
            }

            var url = 'configuration';
            var finalUrl = self.helper.getApiUrl(url);
            var data = {
                Id: self.settings.Id,
                Name: self.settings.Name,
                Type: self.settings.Type,
                ProviderId: null,
                JsonData: JSON.stringify(self.settings.JsonData)
            };
            var formattedData = JSON.stringify(data);
            self.http.post(finalUrl, formattedData, function (results) {

                var parsedPageOrder = JSON.parse(results.JsonData);
                results.JsonData = parsedPageOrder;

                console.log('SETTINGS SAVE DATA RETURNED', results);

                self.settings = results;

                self.settingsSaved = true;
            }, { contentType: 'application/json' });
        };

        Index.prototype.getProviders = function getProviders() {
            var self = this;
            var url = "providers";
            self.http.get(self.helper.getApiUrl(url), function (providers) {
                self.allProviders = providers;
            });
        };

        Index.prototype.getInitialSettings = function getInitialSettings() {
            var self = this;
            self.http.get(self.helper.getApiUrl('configuration/all?type=KIOSK_SETTINGS'), function (data) {
                var firstConfiguration = data[0];

                var parsedSettings = JSON.parse(firstConfiguration.JsonData);

                firstConfiguration.JsonData = parsedSettings;

                console.log('PARSED SETTINGS', firstConfiguration);

                self.settings = firstConfiguration;
            });
        };

        Index.prototype.getSetting = function getSetting(settingName) {
            var self = this;

            if (!self.settings || !self.settings.JsonData) {
                return null;
            }

            var settings = self.settings.JsonData;

            var setting = null;

            for (var i = 0; i < settings.length; i++) {
                var currentSetting = settings[i];
                if (currentSetting.Type === settingName) {
                    setting = currentSetting;
                    break;
                }
            }

            return setting;
        };

        Index.prototype.setupData = function setupData() {
            var self = this;
            self.getPdfTemplates();

            self.getGoForms('PDF');
            self.getInitialPageOrders();
            self.getDefaultPages();
            self.getProviders();
            self.getInitialSettings();
        };

        Index.prototype.openRulesDialog = function openRulesDialog(pdfTemplate) {
            var self = this;
            console.log('PDFTEMPLATE', pdfTemplate);
            self.dialogService.open({ viewModel: _rules.Rules, model: pdfTemplate, lock: false, overlayDismiss: true }).whenClosed(function (response) {
                console.log('RULES DIALOG RETURN VALUE:', response);
                self.getPdfTemplates();
                self.getInitialPageOrders();
            });
        };

        Index.prototype.parseRuleValue = function parseRuleValue(rule) {
            switch (rule.Name) {
                case 'DAYS':
                    return rule.Value;
                    break;
                case 'PROCEDURE':
                    var parsedProcedureRule = JSON.parse(rule.Value);
                    return 'Code: ' + parsedProcedureRule.ProcedureCode + '<br />From: ' + parsedProcedureRule.RangeLower + ', To: ' + parsedProcedureRule.RangeUpper;
                    break;
            }
        };

        Index.prototype.attached = function attached() {
            var self = this;
            console.log('KIOSKPREFERENCES INDEX ATTACHED!');
            var tooltip = $('[data-toggle="tooltip"]');
            console.log('TOOLTIP', tooltip);
            tooltip.tooltip();
            var popover = $('[data-toggle="popover"]');
            popover.popover();
            console.log('POPOVER', tooltip);

            console.log('POPOVER INITIALIZED!');
            if (!self.needsLogin) {
                return;
            }
            self.dialogService.open({ viewModel: _login.Login, model: {} }).whenClosed(function (response) {
                console.log('DIALOG RETURN VALUE:', response);
                self.setupData();
            });
        };

        Index.prototype.activate = function activate(params) {
            var self = this;
            if (params.hasOwnProperty("jwt")) {
                self.helper.processToken(params.jwt);
                self.setupData();
            } else {
                self.needsLogin = true;
            }
            console.log('PARAMS', params);
        };

        _createClass(Index, [{
            key: 'currentProviderName',
            get: function get() {
                var self = this;

                if (!self.currentConfiguration || !self.currentConfiguration.ProviderId) {
                    return 'All Providers';
                }

                var currentProvider = null;

                for (var i = 0; i < self.allProviders.length; i++) {
                    var provider = self.allProviders[i];
                    if (self.currentConfiguration.ProviderId == provider.ProviderID) {
                        currentProvider = provider;
                        break;
                    }
                }

                return currentProvider.NameLast.trim() + ', ' + currentProvider.NameFirst.trim();
            }
        }, {
            key: 'daysPatientHistoryValid',
            set: function set(value) {
                var self = this;
                var setting = self.getSetting('DAYS_PATIENT_HISTORY_VALID');

                setting.Value = value;
                self.settingsSaved = false;
            },
            get: function get() {
                var self = this;

                var setting = self.getSetting('DAYS_PATIENT_HISTORY_VALID');

                return setting ? setting.Value : null;
            }
        }]);

        return Index;
    }()) || _class);
});;
define('text!kioskPreferences/index.html',[],function(){return "<template><style type=\"text/css\">.section-list-item{color:#fff;line-height:30px;padding:5px;cursor:pointer;font-weight:700;font-size:16px}</style><div class=\"row\"><div class=\"col\"><nav class=\"navbar navbar-light bg-light d-flex\"><div class=\"dropdown\"><button class=\"btn btn-link dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><h5 style=\"display:inline\"><span if.bind=\"isKioskPrefs\">Kiosk Preferences </span><span if.bind=\"!isKioskPrefs\">Portal Preferences</span></h5><i style=\"padding:0 5px 0 0;cursor:pointer\" class=\"fa fa-question-circle text-primary\" data-toggle=\"popover\" data-trigger=\"hover\" data-placement=\"bottom\" title=\"Configure Kiosk\" data-content=\"${data.pageInstructions}\"></i></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"switchSettings('KIOSK')\">Kiosk</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"switchSettings('PORTAL')\">Portal</a></div></div><div class=\"dropdown p-2\"><a class=\"btn btn-secondary dropdown-toggle\" href=\"#\" role=\"button\" id=\"providerDropdownMenu\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"></a><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\"><a class=\"dropdown-item\" click.delegate=\"providerSelected(null)\">All Providers</a> <a class=\"dropdown-item\" click.delegate=\"providerSelected(provider)\" repeat.for=\"provider of allProviders\">${provider.NameLast}, ${provider.NameFirst}</a></div></div><div class=\"p-2\"><h6 style=\"display:inline\">Current Provider:</h6><i style=\"padding:0 5px 0 5px;cursor:pointer\" class=\"fa fa-question-circle text-primary\" data-toggle=\"popover\" data-trigger=\"hover\" data-placement=\"bottom\" title=\"Select a Provider\" data-content=\"${data.providerDropdownInstructions}\"></i><div>${currentProviderName}</div></div><div class=\"dropdown p-2\"><a class=\"btn btn-secondary dropdown-toggle\" href=\"#\" role=\"button\" id=\"typeDropdownMenu\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"></a><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\"><a class=\"dropdown-item\" click.delegate=\"typeSelected(type)\" repeat.for=\"type of allTypes\">${type.Name}</a></div></div><div class=\"p-2\"><h6 style=\"display:inline\">Current Type:</h6><i style=\"padding:0 5px 0 5px;cursor:pointer\" class=\"fa fa-question-circle text-primary\" data-toggle=\"popover\" data-trigger=\"hover\" data-placement=\"bottom\" title=\"Select a Layout Type\" data-content=\"${data.typeDropdownInstructions}\"></i><div>${currentConfiguration ? currentConfiguration.Name : ''}</div></div><div if.bind=\"isKioskPrefs\" class=\"p-2\"><div><span>Days Patient History Valid:</span> <i style=\"padding:0 5px 0 0;cursor:pointer\" class=\"fa fa-question-circle text-primary\" data-toggle=\"popover\" data-trigger=\"hover\" data-placement=\"bottom\" title=\"Days Patient History Valid\" data-content=\"${data.patientHistoryValidInstructions}\"></i></div><input type=\"text\" value.bind=\"daysPatientHistoryValid\"></div><div if.bind=\"isKioskPrefs\" class=\"p-2\"><button disabled.bind=\"settingsSaved\" click.delegate=\"saveSettingsClicked()\" class=\"btn btn-primary\">Save Settings</button></div><div class=\"p-2 ml-auto text-right\"><button disabled.bind=\"changesSaved\" class=\"btn btn-primary\" click.delegate=\"saveClicked()\">Save Layout</button><div if.bind=\"!changesSaved\" class=\"text-danger\">Changes not saved!</div></div></nav></div></div><div class=\"row\"><div class=\"col-4 p-5\"><div if.bind=\"isKioskPrefs\" class=\"row pb-2\"><div class=\"col\"><div class=\"card\"><div class=\"card-header\"><h3><i class=\"fa fa-file-pdf-o\" aria-hidden=\"true\"></i> PDFs</h3></div><div class=\"card-body\"><ul class=\"list-group\"><li class=\"list-group-item\" repeat.for=\"pdf of availablePdfs\"><h5> ${pdf.Name} </h5><div><span class=\"btn btn-success pointer-event\" click.delegate=\"addClicked(pdf, 'pdf')\">Add</span></div><template if.bind=\"pdf.OD_PDF_Template_Rules && pdf.OD_PDF_Template_Rules.length > 0\"><div class=\"row\"><div class=\"col font-weight-bold\">PDF Rules:</div></div><div class=\"row p-2\"><template repeat.for=\"rule of pdf.OD_PDF_Template_Rules\"><div class=\"col border-bottom border-dark\"><div>${rule.Name}:</div><small innerhtml.bind=\"parseRuleValue(rule)\"></small></div></template></div></template><div><button class=\"mt-1 btn btn-primary pointer-event\" click.delegate=\"openRulesDialog(pdf)\">Edit Rules</button></div></li></ul></div></div></div></div><div if.bind=\"isKioskPrefs\" class=\"row pb-2\"><div class=\"col\"><div class=\"card\"><div class=\"card-header\"><h3><i class=\"fa fa-file-o\" aria-hidden=\"true\"></i> Pages</h3></div><div class=\"card-body\"><ul class=\"list-group\"><li class=\"list-group-item d-flex ${page.type === 'child-page' ? 'list-group-item-secondary' : ''}\" repeat.for=\"page of availablePages\"><span class=\"mr-auto\" style=\"${page.type === 'child-page' ? 'margin-left: 20px' : ''}\"><template if.bind=\"page.type === 'child-page'\"><h6> ${page.name} </h6><span class=\"text-muted\">child of: ${page.parent} </span></template><template if.bind=\"page.type !== 'child-page'\"><span><i style=\"padding:0 5px 0 0\" class=\"fa fa-${page.icon} fa-2x\"></i></span><h4 style=\"display:inline\"> ${page.name} </h4></template></span><div><span class=\"btn btn-success pointer-event\" click.delegate=\"addClicked(page, 'page')\">Add</span></div></li></ul></div></div></div></div><div class=\"row\"><div class=\"col\"><div class=\"card\"><div class=\"card-header\"><h3><i class=\"fa fa-list-alt\" aria-hidden=\"true\"></i> Forms</h3></div><div class=\"card-body\"><ul class=\"list-group\"><li repeat.for=\"form of availableGoForms\" class=\"list-group-item d-flex align-items-center\"><h5 class=\"d-inline-block\"> ${form.Description} </h5><span class=\"btn btn-success pointer-event ml-auto\" click.delegate=\"addClicked(form, 'goform')\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></span></li></ul></div></div></div></div></div><div class=\"col-8 p-5\"><div class=\"row\"><div class=\"col p-2\"><span class=\"p-2\"><h5 class=\"p-2\" style=\"display:inline\">Page order for the \"${currentProviderName}\" \"${currentConfiguration.Name}\" layout</h5><i style=\"padding:0 5px 0 0;cursor:pointer\" class=\"fa fa-question-circle text-primary\" data-toggle=\"popover\" data-trigger=\"hover\" data-placement=\"bottom\" title=\"Page Order\" data-content=\"${data.layoutInstructions}\"></i></span></div></div><div class=\"row\"><div class=\"col\"><form><div class=\"form-group\"><template if.bind=\"currentConfiguration && currentConfiguration.JsonData\"><ul class=\"list-group\"><li class=\"list-group-item ${item.type === 'pdf' ? 'list-group-item-info' : ''} ${item.type === 'child-page' ? 'list-group-item-secondary' : ''}\" style=\"cursor:pointer\" reorderable-repeat.for=\"item of currentConfiguration.JsonData\" reorderable-after-reordering=\"orderChanged\"><span class=\"d-flex\"><span class=\"mr-auto\" style=\"${item.type === 'child-page' ? 'margin-left: 20px' : ''}\"><template if.bind=\"item.type === 'child-page'\"><h6> ${item.name} </h6><span class=\"text-muted\">child of: ${item.parent} </span></template><template if.bind=\"item.type !== 'child-page'\"><span><i style=\"padding:0 5px 0 0\" class=\"fa fa-${item.icon} fa-2x\"></i></span><h4 style=\"display:inline\"> ${item.name} </h4></template><template if.bind=\"item.type === 'pdf'\"><template if.bind=\"item.pdfTemplate.OD_PDF_Template_Rules && item.pdfTemplate.OD_PDF_Template_Rules.length > 0\"><div class=\"row\"><div class=\"col font-weight-bold\">PDF Rules:</div></div><div class=\"row\"><template repeat.for=\"rule of item.pdfTemplate.OD_PDF_Template_Rules\"><div class=\"col border-right border-dark\"><div>${rule.Name}</div><small innerhtml.bind=\"parseRuleValue(rule)\"></small></div></template></div></template><div><button class=\"mt-1 btn btn-primary pointer-event\" click.delegate=\"openRulesDialog(item.pdfTemplate)\">Edit Rules</button></div></template></span><span><span if.bind=\"item.name != 'End' && item.name != 'Pay'\" class=\"btn btn-danger pointer-event\" click.delegate=\"removeClicked(item, $index)\"><i class=\"fa fa-trash\" aria-hidden=\"true\"></i></span></span></span></li></ul></template></div></form></div></div></div></div></template>";});;
define('kioskPreferences/portal',['exports', '../helpers/helper', '../helpers/http', 'aurelia-event-aggregator', 'aurelia-dialog', 'aurelia-framework', '../login/login', '../kioskPreferences/error', '../kioskPreferences/rules', '../data/kiosk-preferences/data'], function (exports, _helper, _http, _aureliaEventAggregator, _aureliaDialog, _aureliaFramework, _login, _error, _rules, _data) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.Portal = undefined;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _dec, _class;

    var Portal = exports.Portal = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _aureliaEventAggregator.EventAggregator, _aureliaDialog.DialogService, _data.KioskPreferencesData), _dec(_class = function () {
        function Portal(helper, http, EventAggregator, DialogService, KioskPreferencesData) {
            _classCallCheck(this, Portal);

            this.eventAggregator = EventAggregator;
            this.dialogService = DialogService;
            this.helper = helper;
            this.http = http;
            this.message = 'hello from kiosk preferences!';

            this.allGoForms = [];
            this.availableGoForms = [];
        }

        Portal.prototype.getGoForms = function getGoForms() {
            var self = this;
            self.http.get(self.helper.getApiUrl('goforms?type=KIOSK'), function (data) {
                self.allGoForms = data;
            });
        };

        Portal.prototype.addClicked = function addClicked(item, type) {
            var self = this;

            switch (type) {
                case 'pdf':
                    var pdfPage = { name: item.Name, icon: 'file-pdf-o', selected: '', parent: '', isNavigable: true, initial: '', pdfTemplate: item, enabled: true, type: 'pdf' };
                    self.currentConfiguration.JsonData.push(pdfPage);
                    self.syncAvailableItemsWithCurrentPageOrder('pdf', self.allPdfs, self.availablePdfs);
                    break;
                case 'goform':
                    var goFormObj = { 'Id': item.Id, 'Description': item.Description, 'ProviderId': item.ProviderId, 'Type': item.Type };
                    var aGoForm = { name: item.Description, icon: 'list-alt', selected: '', parent: '', isNavigable: true, initial: '', goForm: goFormObj, enabled: true, type: 'goform' };
                    self.currentConfiguration.JsonData.push(aGoForm);
                    self.syncAvailableItemsWithCurrentPageOrder('goform', self.allGoForms, self.availableGoForms);
                    break;
                default:
                    self.currentConfiguration.JsonData.push(item);
                    self.syncAvailableItemsWithCurrentPageOrder('page', self.allPages, self.availablePages);
                    break;
            }
            self.changesSaved = false;
        };

        Portal.prototype.getInitialPageOrders = function getInitialPageOrders() {
            var self = this;
            self.http.get(self.helper.getApiUrl('configuration/all?type=KIOSK_PAGE_ORDER'), function (data) {
                self.configurations = data;
                if (!data || data.length < 1) {
                    return;
                }
                for (var i = 0; i < self.configurations.length; i++) {
                    var configuration = self.configurations[i];
                    var pageOrder = configuration.JsonData;
                    var parsedPageOrder = JSON.parse(pageOrder);
                    configuration.JsonData = parsedPageOrder;
                    if (self.currentConfiguration && configuration.Id === self.currentConfiguration.Id) {
                        self.currentConfiguration = configuration;
                    }
                }
                if (!self.currentConfiguration) {
                    self.currentConfiguration = self.configurations[0];
                }
                console.log('CURRENT CONFIGURATION', self.currentConfiguration);
                self.syncAvailableItemsWithCurrentPageOrder('pdf', self.allPdfs, self.availablePdfs);
                self.syncAvailableItemsWithCurrentPageOrder('page', self.allPages, self.availablePages);
                self.syncAvailableItemsWithCurrentPageOrder('goform', self.allGoForms, self.availableGoForms);
            });
        };

        Portal.prototype.syncAvailableItemsWithCurrentPageOrder = function syncAvailableItemsWithCurrentPageOrder(type, allItems, availableItems) {
            var self = this;
            if (!allItems || allItems.length < 1) {
                return;
            }
            if (!self.currentConfiguration) {
                return;
            }

            var pushAllToAvailable = false;

            if (!self.currentConfiguration.JsonData || self.currentConfiguration.JsonData.length < 1) {
                if (!self.currentConfiguration.JsonData) {
                    self.currentConfiguration.JsonData = [];
                }
                pushAllToAvailable = true;
            } else {
                var typeCount = 0;
                for (var i = 0; i < self.currentConfiguration.JsonData.length; i++) {
                    var currentPageOrderItem = self.currentConfiguration.JsonData[i];
                    if (type === 'page' && (currentPageOrderItem.type === 'page' || currentPageOrderItem.type === 'parent' || currentPageOrderItem.type === 'child-page')) {
                        typeCount++;
                        break;
                    }
                    if (type === 'pdf' && currentPageOrderItem.type === 'pdf') {
                        typeCount++;
                        break;
                    }
                    if (type === 'goform' && currentPageOrderItem.type === 'goform') {
                        typeCount++;
                        break;
                    }
                }
                if (typeCount === 0) {
                    pushAllToAvailable = true;
                }
            }

            if (pushAllToAvailable === true) {
                while (availableItems.length > 0) {
                    availableItems.pop();
                }

                for (var _i = 0; _i < allItems.length; _i++) {
                    availableItems.push(allItems[_i]);
                }

                return;
            }

            for (var _i2 = 0; _i2 < self.currentConfiguration.JsonData.length; _i2++) {
                var _currentPageOrderItem = self.currentConfiguration.JsonData[_i2];
                var process = false;
                if (type === 'page' && (_currentPageOrderItem.type === 'page' || _currentPageOrderItem.type === 'parent' || _currentPageOrderItem.type === 'child-page')) {
                    process = true;
                }
                if (type === 'pdf' && _currentPageOrderItem.type === 'pdf') {
                    process = true;
                }
                if (type === 'goform' && _currentPageOrderItem.type === 'goform') {
                    process = true;
                }
                if (process === false) {
                    continue;
                }
                for (var ii = 0; ii < availableItems.length; ii++) {
                    var currentItem = availableItems[ii];
                    var shouldRemove = false;
                    switch (type) {
                        case 'pdf':
                            if (_currentPageOrderItem.pdfTemplate && currentItem.TemplateID === _currentPageOrderItem.pdfTemplate.TemplateID) {
                                shouldRemove = true;
                            }
                            break;
                        case 'goform':
                            if (_currentPageOrderItem.goForm && currentItem.Id === _currentPageOrderItem.goForm.Id) {
                                shouldRemove = true;
                            }
                            break;
                        default:
                            if (currentItem.name === _currentPageOrderItem.name && currentItem.type === _currentPageOrderItem.type) {
                                shouldRemove = true;
                            }
                            break;
                    }
                    if (shouldRemove) {
                        availableItems.splice(ii, 1);
                        break;
                    }
                }
            }

            for (var _i3 = 0; _i3 < allItems.length; _i3++) {
                var _currentItem = allItems[_i3];
                var isInAvailableItems = false;
                var isInCurrentConfiguration = false;
                for (var _ii = 0; _ii < availableItems.length; _ii++) {
                    var currentAvailableItem = availableItems[_ii];
                    switch (type) {
                        case 'pdf':
                            if (currentAvailableItem.TemplateID === _currentItem.TemplateID) {
                                isInAvailableItems = true;
                            }
                            break;
                        case 'goform':
                            if (currentAvailableItem.Id === _currentItem.Id) {
                                isInAvailableItems = true;
                            }
                            break;
                        default:
                            if (currentAvailableItem.name === _currentItem.name && currentAvailableItem.type === _currentItem.type) {
                                isInAvailableItems = true;
                            }
                            break;
                    }
                    if (isInAvailableItems) {
                        break;
                    }
                }
                for (var _ii2 = 0; _ii2 < self.currentConfiguration.JsonData.length; _ii2++) {
                    var _currentPageOrderItem2 = self.currentConfiguration.JsonData[_ii2];
                    var _process = false;
                    if (type === 'page' && (_currentPageOrderItem2.type === 'page' || _currentPageOrderItem2.type === 'parent' || _currentPageOrderItem2.type === 'child-page')) {
                        _process = true;
                    }
                    if (type === 'pdf' && _currentPageOrderItem2.type === 'pdf') {
                        _process = true;
                    }
                    if (type === 'goform' && _currentPageOrderItem2.type === 'goform') {
                        _process = true;
                    }
                    if (_process === false) {
                        continue;
                    }
                    switch (type) {
                        case 'pdf':
                            if (_currentPageOrderItem2.pdfTemplate && _currentPageOrderItem2.pdfTemplate.TemplateID === _currentItem.TemplateID) {
                                isInCurrentConfiguration = true;
                            }
                            break;
                        case 'goform':
                            if (_currentPageOrderItem2.goForm && _currentPageOrderItem2.goForm.Id === _currentItem.Id) {
                                isInCurrentConfiguration = true;
                            }
                            break;
                        default:
                            if (_currentItem.name === _currentPageOrderItem2.name && _currentItem.type === _currentPageOrderItem2.type) {
                                isInCurrentConfiguration = true;
                            }
                            break;
                    }
                    if (isInCurrentConfiguration) {
                        break;
                    }
                }
                if (!isInAvailableItems && !isInCurrentConfiguration) {
                    availableItems.push(_currentItem);
                }
            }
        };

        Portal.prototype.setupData = function setupData() {
            var self = this;

            self.getGoForms();
        };

        Portal.prototype.attached = function attached() {
            var self = this;


            if (!self.needsLogin) {
                return;
            }
            self.dialogService.open({ viewModel: _login.Login, model: {} }).whenClosed(function (response) {
                console.log('DIALOG RETURN VALUE:', response);
                self.setupData();
            });
        };

        Portal.prototype.activate = function activate(params) {
            var self = this;
            if (params.hasOwnProperty("jwt")) {
                self.helper.processToken(params.jwt);
                self.setupData();
            } else {
                self.needsLogin = true;
            }
            console.log('PARAMS', params);
        };

        return Portal;
    }()) || _class);
});;
define('text!kioskPreferences/portal.html',[],function(){return "<template><style type=\"text/css\">.section-list-item{color:#fff;line-height:30px;padding:5px;cursor:pointer;font-weight:700;font-size:16px}</style><div class=\"row\"><div class=\"col\"><nav class=\"navbar navbar-light bg-light d-flex\"><div class=\"p-2\"><h5 class=\"p-2\" style=\"display:inline\">Portal Preferences</h5><i style=\"padding:0 5px 0 0;cursor:pointer\" class=\"fa fa-question-circle text-primary\" data-toggle=\"popover\" data-trigger=\"hover\" data-placement=\"bottom\" title=\"Configure Portal\"></i></div><div class=\"p-2 ml-auto text-right\"><button disabled.bind=\"changesSaved\" class=\"btn btn-primary\">Save Layout</button></div></nav></div></div><div class=\"row\"><div class=\"col-4 p-5\"><div class=\"row\"><div class=\"col\"><div class=\"card\"><div class=\"card-header\"><h3><i class=\"fa fa-list-alt\" aria-hidden=\"true\"></i> Go Forms</h3></div><div class=\"card-body\"><ul class=\"list-group\"><li repeat.for=\"form of availableGoForms\" class=\"list-group-item\"><h5> ${form.Description} </h5><div><span class=\"btn btn-success pointer-event\" click.delegate=\"addClicked(form, 'goform')\">Add</span></div></li></ul></div></div></div></div></div><div class=\"col-8 p-5\"><div class=\"row\"><div class=\"col\"><form><div class=\"form-group\"><template if.bind=\"currentConfiguration && currentConfiguration.JsonData\"><ul class=\"list-group\"><li class=\"list-group-item ${item.type === 'pdf' ? 'list-group-item-info' : ''} ${item.type === 'child-page' ? 'list-group-item-secondary' : ''}\" style=\"cursor:pointer\" reorderable-repeat.for=\"item of currentConfiguration.JsonData\" reorderable-after-reordering=\"orderChanged\"><span class=\"d-flex\"><span class=\"mr-auto\" style=\"${item.type === 'child-page' ? 'margin-left: 20px' : ''}\"><template if.bind=\"item.type === 'child-page'\"><h6> ${item.name} </h6><span class=\"text-muted\">child of: ${item.parent} </span></template><template if.bind=\"item.type !== 'child-page'\"><span><i style=\"padding:0 5px 0 0\" class=\"fa fa-${item.icon} fa-2x\"></i></span><h4 style=\"display:inline\"> ${item.name} </h4></template></span><span><span if.bind=\"item.name != 'End' && item.name != 'Pay'\" class=\"btn btn-danger pointer-event\" click.delegate=\"removeClicked(item, $index)\">Remove</span></span></span></li></ul></template></div></form></div></div></div></div></template>";});;
define('kioskPreferences/rules',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Rules = undefined;

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var _dec, _class;

	var Rules = exports.Rules = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
		function Rules(DialogController, http, helper) {
			_classCallCheck(this, Rules);

			this.message = "test login message";
			this.dialogController = DialogController;
			this.http = http;
			this.helper = helper;
			this.activeRule = 'DAYS';
			this.saving = false;
			this.errorMessage = '';
		}

		Rules.prototype.setActiveRule = function setActiveRule(ruleName) {
			this.activeRule = ruleName;
		};

		Rules.prototype.saveClicked = function saveClicked() {
			var self = this;
			self.errorMessage = '';
			self.saving = true;
			var value = null;
			switch (self.activeRule) {
				case 'DAYS':
					value = self.daysValue;
					break;
				case 'PROCEDURE':
					var ruleProcedure = {
						ProcedureCode: self.procedureValue,
						RangeLower: self.procedureFromValue,
						RangeUpper: self.procedureToValue
					};
					value = JSON.stringify(ruleProcedure);
					break;
			}
			var fullUrl = self.helper.getApiUrl('pdftemplaterules');
			var data = {
				name: self.activeRule,
				value: value,
				templateId: self.pdfTemplate.TemplateID,
				providerId: 0
			};
			console.log('FULL LOGIN URL:', fullUrl);
			self.http.post(fullUrl, data, function (returnData) {
				console.log('RETURN DATA', returnData);

				self.saving = false;
			}, null, function () {
				self.saving = false;
				self.setupRule(self.activeRule);
				self.errorMessage = 'Error Saving Rule';
			});
		};

		Rules.prototype.deleteClicked = function deleteClicked() {
			var self = this;
			self.errorMessage = '';
			self.saving = true;
			var fullUrl = self.helper.getApiUrl('pdftemplaterules?name=' + self.activeRule + '&templateId=' + self.pdfTemplate.TemplateID + '&providerId=0');
			console.log('FULL LOGIN URL:', fullUrl);
			self.http.del(fullUrl, function (returnData) {
				console.log('RETURN DATA', returnData);

				self.clearRule(self.activeRule);
				self.saving = false;
			}, function () {
				self.setupRule(self.activeRule);
				self.saving = false;
				self.errorMessage = 'Error Deleting Rule';
			});
		};

		Rules.prototype.clearRule = function clearRule(ruleToClear) {

			var self = this;

			if (ruleToClear === 'DAYS') {
				self.daysValue = null;
			}
			if (ruleToClear === 'PROCEDURE') {
				self.procedureValue = null;
				self.procedureToValue = null;
				self.procedureFromValue = null;
			}
		};

		Rules.prototype.setupRule = function setupRule(ruleToSetup) {

			var self = this;
			var rules = self.pdfTemplate.OD_PDF_Template_Rules;

			for (var i = 0; i < rules.length; i++) {
				var currentRule = rules[i];
				if (ruleToSetup === 'DAYS' && currentRule.Name === 'DAYS') {
					self.daysValue = currentRule.Value;
					break;
				}
				if (ruleToSetup === 'PROCEDURE' && currentRule.Name === 'PROCEDURE') {
					var procedureValue = JSON.parse(currentRule.Value);
					self.procedureValue = procedureValue.ProcedureCode;
					self.procedureFromValue = procedureValue.RangeLower;
					self.procedureToValue = procedureValue.RangeUpper;
					break;
				}
			}
		};

		Rules.prototype.activate = function activate(model) {
			var self = this;
			self.pdfTemplate = model;
			self.setupRule('DAYS');
			self.setupRule('PROCEDURE');
			console.log('RULES ACTIVATE', model);
		};

		Rules.prototype.attached = function attached() {
			var res = $(this.rulesdialog).closest('ux-dialog-container');
			var uxDx = res[0];
			uxDx.style.setProperty("z-index", "5001", "important");
		};

		return Rules;
	}()) || _class);
});;
define('text!kioskPreferences/rules.html',[],function(){return "<template><ux-dialog ref=\"rulesdialog\"><ux-dialog-header><div class=\"row\"><div class=\"col-sm-12\"><h4>Rules for ${pdfTemplate.Name}</h4></div></div><div class=\"row\"><div class=\"col-sm-12\"><ul class=\"nav nav-pills mb-3\" id=\"pills-tab\" role=\"tablist\"><li class=\"nav-item\"><a class=\"nav-link active\" id=\"pills-home-tab\" data-toggle=\"pill\" href=\"#pills-days\" role=\"tab\" aria-controls=\"pills-home\" aria-selected=\"true\" click.delegate=\"setActiveRule('DAYS')\">Days</a></li><li class=\"nav-item\"><a class=\"nav-link\" id=\"pills-profile-tab\" data-toggle=\"pill\" href=\"#pills-procedures\" role=\"tab\" aria-controls=\"pills-profile\" aria-selected=\"false\" click.delegate=\"setActiveRule('PROCEDURE')\">Procedures</a></li></ul></div></div><template if.bind=\"errorMessage\"><div class=\"row\"><div class=\"col-sm-12\"><span class=\"text-danger\">${errorMessage}</span></div></div></template></ux-dialog-header><ux-dialog-body><div class=\"tab-content\" id=\"pills-tabContent\"><div class=\"tab-pane fade show active\" id=\"pills-days\" role=\"tabpanel\" aria-labelledby=\"pills-home-tab\"><form><div class=\"form-group\"><label for=\"inputDaysPdfValid\">Days PDF Valid</label> <input value.bind=\"daysValue\" type=\"number\" class=\"form-control\" id=\"inputDaysPdfValid\" aria-describedby=\"emailHelp\" placeholder=\"Enter days\"> <small id=\"daysPdfValidHelp\" class=\"form-text text-muted\">Enter how many days this PDF will be valid before being displayed to the patient again.</small></div><button click.delegate=\"saveClicked()\" disabled.bind=\"saving\" class=\"btn btn-outline-secondary\">Save</button> <button click.delegate=\"deleteClicked()\" disabled.bind=\"saving\" class=\"btn btn-outline-secondary\">Delete</button></form></div><div class=\"tab-pane fade\" id=\"pills-procedures\" role=\"tabpanel\" aria-labelledby=\"pills-profile-tab\"><form><div class=\"form-group\"><label for=\"inputProcedureCode\">Show PDF For Procedure Code</label> <input value.bind=\"procedureValue\" type=\"text\" class=\"form-control\" id=\"inputProcedureCode\" aria-describedby=\"emailHelp\" placeholder=\"Enter Procedure Code\"> <small id=\"procedureInputHelp\" class=\"form-text text-muted\">If the patient has undergone this procedure within the below range of weeks, this PDF will be displayed.</small></div><label for=\"inputFrom\">Weeks Since Procedure:</label><div class=\"form-row\"><div class=\"form-group col-sm-6\"><label for=\"inputFrom\">From</label> <input value.bind=\"procedureFromValue\" type=\"number\" class=\"form-control\" id=\"inputFrom\" placeholder=\"Enter Weeks From\"></div><div class=\"form-group col-sm-6\"><label for=\"inputTo\">To</label> <input value.bind=\"procedureToValue\" type=\"number\" class=\"form-control\" id=\"inputTo\" placeholder=\"Enter Weeks To\"></div></div><button click.delegate=\"saveClicked()\" disabled.bind=\"saving\" class=\"btn btn-outline-secondary\">Save</button> <button click.delegate=\"deleteClicked()\" disabled.bind=\"saving\" class=\"btn btn-outline-secondary\">Delete</button></form></div></div></ux-dialog-body></ux-dialog></template>";});;
define('login/forgotPassword',['exports', 'aurelia-framework', '../helpers/http', '../helpers/helper', 'aurelia-router', '../data/go/data'], function (exports, _aureliaFramework, _http, _helper, _aureliaRouter, _data) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ForgotPassword = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var ForgotPassword = exports.ForgotPassword = (_dec = (0, _aureliaFramework.inject)(_http.http, _helper.helper, _aureliaRouter.Router, _data.Data), _dec(_class = function () {
    function ForgotPassword(http, helper, Router, Data) {
      _classCallCheck(this, ForgotPassword);

      this.email = null;

      this.http = http;
      this.helper = helper;
      this.router = Router;
      this.goData = Data;
    }

    ForgotPassword.prototype.resetClick = function resetClick() {
      var self = this;
      var forgotPassData = {
        'Email': self.email
      };
      self.goData.postWithUrlAndData('go/forgotpassword', JSON.stringify(forgotPassData), function (res) {
        self.router.navigateToRoute('updatepassword');
      });
    };

    return ForgotPassword;
  }()) || _class);
});;
define('text!login/forgotPassword.html',[],function(){return "<template><style>.form-signin{width:100%;padding:15px;margin:auto}.form-signin .checkbox{font-weight:400}.form-signin .form-control{position:relative;box-sizing:border-box;height:auto;padding:10px;font-size:16px}.form-signin .form-control:focus{z-index:2}.form-signin input[type=text]{margin-bottom:-1px;border-bottom-right-radius:0;border-bottom-left-radius:0}.form-signin input[type=password]{margin-bottom:10px;border-top-left-radius:0;border-top-right-radius:0}</style><div class=\"container-fluid\" style=\"position:fixed;top:25%\"><div class=\"row\"><div class=\"col-sm-2 col-md-3 col-lg-4\"></div><div class=\"col-sm-10 col-md-6 col-lg-4\"><div class=\"card\"><div class=\"card-header\">Forgot Password</div><div class=\"card-body\"><form class=\"form-signin py-0\"><div class=\"row\">Enter users email to send reset request...</div><div class=\"row mb-3\"><input value.bind=\"email\" type=\"email\" class=\"form-control\" placeholder=\"Email\"></div><div class=\"row\"><button class=\"btn btn-primary w-100\" click.delegate=\"resetClick()\">Send Request</button></div></form></div></div></div><div class=\"col-sm-2 col-md-3 col-lg-4\"></div></div></div></template>";});;
define('login/login',['exports', 'aurelia-framework', '../helpers/http', '../helpers/helper', 'aurelia-router'], function (exports, _aureliaFramework, _http, _helper, _aureliaRouter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Login = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var Login = exports.Login = (_dec = (0, _aureliaFramework.inject)(_http.http, _helper.helper, _aureliaRouter.Router), _dec(_class = function () {
    function Login(http, helper, Router) {
      _classCallCheck(this, Login);

      this.loginFailed = false;
      this.loginPath = 'go/home';
      this.httpConfigComplete = false;
      this.configInterval = null;

      this.message = "test login message";

      this.http = http;
      this.helper = helper;
      this.router = Router;
    }

    Login.prototype.loginClicked = function loginClicked() {
      var _this = this;

      var self = this;
      var fullUrl = self.helper.getApiUrl('login');

      if (self.userName === undefined || self.password === undefined) {
        return;
      }

      var n = self.helper.createNoty("loading users...", 10000);
      n.show();

      self.http.login(fullUrl, { Username: self.userName, Password: self.password }, function (jwt) {

        if (jwt == "User not found.") {

          self.loginFailed = true;


          self.helper.notyError(n, "Incorrect Username or Password");
          n.close();
        } else {

          self.helper.notySuccess(n, "Login Success");
          n.close();

          self.helper.processToken(jwt, function (res) {});

          var url = "#/" + _this.loginPath + "?jwt=" + self.helper.jwt();
          self.router.navigate(url);
        }
      }, function () {
        console.log('ERROR GETTING JWT');

        alert("Login failed");

        self.helper.notyError(n, "Error Retrieving Token");
        n.close();
      });
    };

    Login.prototype.activate = function activate(model) {
      var self = this;
      self.configInterval = setInterval(function () {

        if (self.helper._server != null && self.helper._server.length > 0) {
          self.httpConfigComplete = true;
          clearInterval(self.configInterval);
        }
      }, 1000);
    };

    Login.prototype.forgotPasswordClick = function forgotPasswordClick() {
      this.router.navigate('forgotpassword');
    };

    return Login;
  }()) || _class);
});;
define('text!login/login.html',[],function(){return "<template><style>.form-signin{width:100%;padding:15px;margin:auto}.form-signin .checkbox{font-weight:400}.form-signin .form-control{position:relative;box-sizing:border-box;height:auto;padding:10px;font-size:16px}.form-signin .form-control:focus{z-index:2}.form-signin input[type=text]{margin-bottom:-1px;border-bottom-right-radius:0;border-bottom-left-radius:0}.form-signin input[type=password]{margin-bottom:10px;border-top-left-radius:0;border-top-right-radius:0}.btn-login{color:#212529;background-color:#d7d7d7;border-color:#c1c1c1}.btn-link{color:#009fb0}</style><div class=\"container-fluid\" style=\"position:fixed;top:25%\"><div class=\"row\"><div class=\"col-sm-2 col-md-3 col-lg-4\"></div><div class=\"col-sm-10 col-md-6 col-lg-4\"><div class=\"card\"><div class=\"card-header\" style=\"background-color:#5cb3bc;height:150px\"><svg width=\"100%\" height=\"100%\" viewBox=\"0 0 13542 3125\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2\"><g><rect x=\"-11.934\" y=\"-1.195\" width=\"13552.3\" height=\"3142.7\" style=\"fill:#5cb3bb\"/><path d=\"M11749.2,1053.92l222.612,-0l-99.217,726.197c-19.454,143.406 -39.464,238.453 -60.03,285.143c-32.238,72.259 -86.432,132.15 -162.581,179.674c-76.15,47.524 -171.753,71.286 -286.811,71.286c-95.603,-0 -178.84,-18.482 -249.708,-55.445c-70.869,-36.963 -123.813,-84.626 -158.83,-142.988l190.929,-100.05c57.251,60.585 131.733,90.878 223.445,90.878c53.36,0 99.495,-9.727 138.403,-29.181c38.909,-19.454 69.202,-45.717 90.879,-78.789c21.678,-33.073 36.963,-82.125 45.856,-147.158c-80.596,71.703 -172.03,107.554 -274.304,107.554c-71.147,0 -136.874,-17.925 -197.182,-53.777c-60.308,-35.851 -107.693,-86.293 -142.155,-151.325c-34.461,-65.033 -51.692,-137.292 -51.692,-216.776c-0,-89.489 22.511,-173.559 67.534,-252.21c45.022,-78.65 106.303,-141.043 183.842,-187.177c77.539,-46.134 158.552,-69.201 243.038,-69.201c51.137,-0 97.549,10.005 139.237,30.015c41.687,20.01 82.541,53.638 122.561,100.884l14.174,-107.554Zm-264.299,186.76c-80.596,0 -148.547,28.348 -203.852,85.043c-55.306,56.695 -82.959,126.452 -82.959,209.271c0,67.256 20.566,121.172 61.698,161.748c41.132,40.576 96.159,60.864 165.083,60.864c51.692,0 99.494,-12.506 143.405,-37.519c43.911,-25.012 78.651,-60.864 104.219,-107.554c25.568,-46.69 38.353,-96.993 38.353,-150.909c-0,-63.365 -21.122,-116.03 -63.366,-157.996c-42.243,-41.965 -96.437,-62.948 -162.581,-62.948Z\" style=\"fill:#fff;fill-rule:nonzero\"/><path d=\"M12626.3,1030.57c80.596,-0 153.827,18.62 219.693,55.861c65.867,37.241 117.142,90.045 153.827,158.413c36.685,68.367 55.028,145.073 55.028,230.115c-0,141.182 -50.303,261.381 -150.909,360.598c-100.606,99.216 -225.113,148.824 -373.521,148.824c-128.953,0 -231.783,-39.047 -308.488,-117.142c-76.705,-78.094 -115.058,-180.229 -115.058,-306.403c0,-152.299 51.971,-278.751 155.912,-379.357c103.941,-100.606 225.113,-150.909 363.516,-150.909Zm-15.842,210.939c-91.156,-0 -161.053,32.655 -209.688,97.966c-48.636,65.31 -72.953,136.04 -72.953,212.189c-0,67.812 19.871,122.423 59.613,163.833c39.742,41.409 92.685,62.114 158.83,62.114c93.936,0 165.499,-31.544 214.691,-94.631c49.191,-63.087 73.787,-135.206 73.787,-216.358c-0,-66.7 -20.844,-120.894 -62.532,-162.582c-41.687,-41.687 -95.603,-62.531 -161.748,-62.531Z\" style=\"fill:#fff;fill-rule:nonzero\"/><g transform=\"matrix(5.9289,0,0,5.9289,-2418.69,-977.8)\"><g transform=\"matrix(288,0,0,288,1092.83,499.618)\"><path d=\"M0.077,-0.531l0.068,-0l0,0.097c0.027,-0.037 0.058,-0.065 0.093,-0.083c0.035,-0.019 0.075,-0.028 0.118,-0.028c0.075,0 0.14,0.027 0.194,0.082c0.054,0.054 0.08,0.119 0.08,0.196c0,0.078 -0.026,0.144 -0.079,0.199c-0.054,0.054 -0.118,0.082 -0.193,0.082c-0.042,-0 -0.081,-0.009 -0.117,-0.027c-0.035,-0.017 -0.067,-0.043 -0.096,-0.078l0,0.285l-0.068,0l0,-0.725Zm0.274,0.052c-0.06,-0 -0.11,0.021 -0.15,0.062c-0.041,0.041 -0.061,0.093 -0.061,0.154c0,0.041 0.009,0.077 0.027,0.109c0.018,0.032 0.044,0.058 0.078,0.077c0.034,0.019 0.069,0.028 0.107,0.028c0.036,0 0.071,-0.009 0.103,-0.028c0.033,-0.019 0.059,-0.046 0.078,-0.08c0.019,-0.034 0.029,-0.07 0.029,-0.108c-0,-0.037 -0.01,-0.073 -0.029,-0.107c-0.019,-0.034 -0.045,-0.06 -0.077,-0.079c-0.032,-0.019 -0.067,-0.028 -0.105,-0.028Z\" style=\"fill:#a00022;fill-rule:nonzero\"/></g><g transform=\"matrix(288,0,0,288,1289.28,499.618)\"><path d=\"M0.076,-0.736l0.069,-0l-0,0.3c0.027,-0.036 0.058,-0.064 0.091,-0.082c0.033,-0.018 0.069,-0.027 0.108,-0.027c0.039,0 0.075,0.01 0.105,0.03c0.031,0.021 0.054,0.048 0.069,0.082c0.014,0.034 0.022,0.087 0.022,0.16l-0,0.273l-0.069,-0l0,-0.253c0,-0.062 -0.002,-0.102 -0.007,-0.123c-0.009,-0.035 -0.024,-0.062 -0.046,-0.079c-0.023,-0.018 -0.052,-0.027 -0.088,-0.027c-0.041,0 -0.078,0.014 -0.111,0.041c-0.033,0.027 -0.054,0.061 -0.065,0.102c-0.006,0.026 -0.009,0.074 -0.009,0.144l-0,0.195l-0.069,0l0,-0.736Z\" style=\"fill:#a00022;fill-rule:nonzero\"/></g><g transform=\"matrix(288,0,0,288,1464.92,499.618)\"><path d=\"M0.328,-0.545c0.081,0 0.149,0.03 0.203,0.089c0.049,0.054 0.073,0.118 0.073,0.192c0,0.074 -0.026,0.139 -0.077,0.194c-0.052,0.056 -0.118,0.084 -0.199,0.084c-0.082,-0 -0.148,-0.028 -0.2,-0.084c-0.051,-0.055 -0.077,-0.12 -0.077,-0.194c-0,-0.074 0.024,-0.138 0.073,-0.192c0.054,-0.059 0.122,-0.089 0.204,-0.089Zm-0,0.067c-0.057,-0 -0.106,0.021 -0.146,0.063c-0.041,0.042 -0.061,0.093 -0.061,0.152c-0,0.039 0.009,0.075 0.027,0.108c0.019,0.033 0.044,0.059 0.076,0.077c0.031,0.018 0.066,0.027 0.104,0.027c0.037,-0 0.072,-0.009 0.104,-0.027c0.031,-0.018 0.056,-0.044 0.075,-0.077c0.018,-0.033 0.028,-0.069 0.028,-0.108c-0,-0.059 -0.021,-0.11 -0.062,-0.152c-0.04,-0.042 -0.089,-0.063 -0.145,-0.063Z\" style=\"fill:#a00022;fill-rule:nonzero\"/></g><g transform=\"matrix(288,0,0,288,1653.5,499.618)\"><path d=\"M0.523,-0.176l0.058,0.03c-0.019,0.037 -0.041,0.067 -0.065,0.09c-0.025,0.023 -0.053,0.04 -0.084,0.052c-0.031,0.012 -0.066,0.018 -0.105,0.018c-0.086,-0 -0.154,-0.029 -0.203,-0.086c-0.049,-0.056 -0.073,-0.121 -0.073,-0.192c-0,-0.068 0.02,-0.128 0.062,-0.18c0.052,-0.067 0.122,-0.101 0.21,-0.101c0.091,0 0.163,0.034 0.217,0.103c0.038,0.049 0.058,0.109 0.059,0.182l-0.478,-0c0.001,0.062 0.021,0.112 0.059,0.152c0.038,0.039 0.085,0.059 0.141,0.059c0.027,0 0.054,-0.005 0.079,-0.014c0.026,-0.009 0.047,-0.022 0.065,-0.038c0.018,-0.015 0.038,-0.04 0.058,-0.075Zm0,-0.143c-0.009,-0.037 -0.022,-0.066 -0.039,-0.088c-0.018,-0.022 -0.041,-0.039 -0.069,-0.052c-0.029,-0.014 -0.059,-0.02 -0.091,-0.02c-0.052,-0 -0.097,0.016 -0.134,0.05c-0.027,0.024 -0.048,0.061 -0.062,0.11l0.395,-0Z\" style=\"fill:#a00022;fill-rule:nonzero\"/></g><g transform=\"matrix(288,0,0,288,1840.67,499.618)\"><path d=\"M0.076,-0.531l0.069,-0l-0,0.095c0.027,-0.036 0.057,-0.064 0.09,-0.082c0.034,-0.018 0.07,-0.027 0.109,-0.027c0.039,0 0.075,0.01 0.105,0.03c0.031,0.021 0.054,0.048 0.069,0.082c0.014,0.034 0.022,0.087 0.022,0.16l-0,0.273l-0.068,-0l-0,-0.253c-0,-0.062 -0.003,-0.102 -0.008,-0.123c-0.008,-0.035 -0.024,-0.062 -0.046,-0.079c-0.022,-0.018 -0.052,-0.027 -0.088,-0.027c-0.041,0 -0.078,0.014 -0.111,0.041c-0.033,0.027 -0.054,0.061 -0.065,0.102c-0.006,0.026 -0.009,0.074 -0.009,0.144l-0,0.195l-0.069,0l0,-0.531Z\" style=\"fill:#a00022;fill-rule:nonzero\"/></g><g transform=\"matrix(288,0,0,288,2016.32,499.618)\"><path d=\"M0.1,-0.75c0.016,0 0.029,0.006 0.04,0.017c0.011,0.011 0.017,0.024 0.017,0.04c-0,0.015 -0.006,0.028 -0.017,0.039c-0.011,0.011 -0.024,0.017 -0.04,0.017c-0.015,-0 -0.028,-0.006 -0.039,-0.017c-0.012,-0.011 -0.017,-0.024 -0.017,-0.039c-0,-0.016 0.005,-0.029 0.017,-0.04c0.011,-0.011 0.024,-0.017 0.039,-0.017Zm-0.034,0.219l0.069,-0l-0,0.531l-0.069,-0l-0,-0.531Z\" style=\"fill:#a00022;fill-rule:nonzero\"/></g><path d=\"M1115.05,343.807c-1.552,-0 -2.811,1.258 -2.811,2.811l0,208.969c0,1.552 1.259,2.811 2.811,2.811l19.547,-0c1.553,-0 2.811,-1.259 2.811,-2.811l0,-74.839c7.215,7.593 15.1,13.499 23.645,17.733c10.598,5.25 22.216,7.885 34.857,7.885c22.44,0 41.605,-8.13 57.488,-24.402c15.854,-16.242 23.792,-35.995 23.792,-59.268c-0,-22.801 -8.005,-42.304 -24.015,-58.507c-16.022,-16.216 -35.299,-24.32 -57.828,-24.32c-12.952,0 -24.684,2.79 -35.202,8.341c-8.343,4.403 -15.927,10.549 -22.736,18.453c-0.001,0 -0.001,-20.045 -0.001,-20.045c0,-1.553 -1.258,-2.811 -2.811,-2.811l-19.547,-0Zm0,2.811l19.547,-0l0,28.125c7.782,-10.688 16.735,-18.703 26.86,-24.047c10.125,-5.344 21.422,-8.016 33.89,-8.016c21.75,0 40.36,7.828 55.828,23.485c15.469,15.656 23.204,34.5 23.204,56.531c-0,22.5 -7.664,41.602 -22.993,57.305c-15.328,15.703 -33.82,23.554 -55.476,23.554c-12.188,0 -23.391,-2.531 -33.61,-7.593c-10.218,-5.063 -19.453,-12.61 -27.703,-22.641l0,82.266l-19.547,-0l0,-208.969Zm78.75,15.047c-17.062,-0 -31.429,5.953 -43.101,17.859c-11.672,11.906 -17.508,26.719 -17.508,44.438c0,11.625 2.602,22.078 7.805,31.359c5.203,9.281 12.656,16.641 22.359,22.078c9.703,5.438 19.945,8.156 30.727,8.156c10.593,0 20.554,-2.742 29.883,-8.226c9.328,-5.485 16.757,-13.149 22.289,-22.992c5.531,-9.844 8.296,-20.157 8.296,-30.938c0,-10.875 -2.742,-21.187 -8.226,-30.937c-5.484,-9.75 -12.867,-17.321 -22.149,-22.711c-9.281,-5.391 -19.406,-8.086 -30.375,-8.086Zm0,2.811c10.459,-0 20.114,2.566 28.964,7.706c8.848,5.139 15.881,12.362 21.11,21.658c5.24,9.316 7.865,19.168 7.865,29.559c0,10.302 -2.651,20.154 -7.936,29.561c-5.278,9.393 -12.362,16.712 -21.263,21.946c-8.884,5.223 -18.369,7.838 -28.458,7.838c-10.3,0 -20.083,-2.603 -29.353,-7.797c-9.232,-5.174 -16.33,-12.17 -21.281,-21.001c-4.975,-8.873 -7.446,-18.87 -7.446,-29.984c0,-16.931 5.552,-31.094 16.704,-42.47c11.127,-11.351 24.828,-17.016 41.094,-17.016Z\" style=\"fill:#a00022\"/><path d=\"M1311.22,284.744c-1.552,0 -2.811,1.259 -2.811,2.811l0,212.063c0,1.552 1.259,2.811 2.811,2.811l19.688,-0c1.552,-0 2.811,-1.259 2.811,-2.811l-0,-56.11c-0,-19.907 0.883,-33.553 2.726,-40.932c2.852,-11.044 8.759,-20.304 17.711,-27.786c8.892,-7.432 18.953,-11.158 30.189,-11.158c9.676,0 17.521,2.302 23.492,7.053c5.978,4.756 10.036,11.882 12.306,21.306c1.379,5.798 2.032,17.347 2.032,34.642c-0,0 -0,72.985 -0,72.985c-0,1.552 1.258,2.811 2.811,2.811l19.687,-0c1.553,-0 2.812,-1.259 2.812,-2.811l-0,-78.75c-0,-21.416 -2.236,-37.131 -6.558,-47.167c-4.442,-10.315 -11.328,-18.532 -20.657,-24.652c-9.309,-6.108 -19.968,-9.18 -31.987,-9.18c-11.639,0 -22.446,2.719 -32.422,8.147c-7.902,4.3 -15.289,10.338 -22.142,18.134c-0,0 -0,-78.595 -0,-78.595c-0,-1.552 -1.259,-2.811 -2.811,-2.811l-19.688,0Zm0,2.811l19.688,0l-0,86.485c7.969,-10.5 16.734,-18.352 26.297,-23.555c9.562,-5.203 19.922,-7.805 31.078,-7.805c11.437,0 21.586,2.907 30.445,8.719c8.86,5.813 15.399,13.617 19.617,23.414c4.219,9.797 6.328,25.149 6.328,46.055l0,78.75l-19.687,-0l-0,-72.985c-0,-17.625 -0.703,-29.39 -2.109,-35.296c-2.438,-10.125 -6.868,-17.743 -13.289,-22.852c-6.422,-5.109 -14.836,-7.664 -25.243,-7.664c-11.906,-0 -22.57,3.937 -31.992,11.812c-9.422,7.875 -15.633,17.625 -18.633,29.25c-1.875,7.5 -2.812,21.375 -2.812,41.625l-0,56.11l-19.688,-0l0,-212.063Z\" style=\"fill:#a00022\"/><path d=\"M1559.28,339.869c-24.468,0 -44.707,8.895 -60.728,26.662c-14.543,16.095 -21.818,35.097 -21.818,57.009c0,22.104 7.676,41.423 23.042,57.953c15.395,16.561 35.221,24.873 59.504,24.873c24.187,0 43.967,-8.311 59.363,-24.873c15.366,-16.53 23.042,-35.849 23.042,-57.953c-0,-22.008 -7.277,-41.057 -21.819,-57.151c-0.001,-0.001 -0.003,-0.002 -0.004,-0.003c-16.02,-17.671 -36.211,-26.517 -60.582,-26.517Zm-0,2.811c23.531,0 43.031,8.532 58.5,25.594c14.062,15.563 21.094,33.984 21.094,55.266c-0,21.375 -7.43,40.054 -22.289,56.039c-14.86,15.984 -33.961,23.976 -57.305,23.976c-23.438,0 -42.586,-7.992 -57.445,-23.976c-14.86,-15.985 -22.29,-34.664 -22.29,-56.039c0,-21.188 7.032,-39.563 21.094,-55.125c15.469,-17.157 35.016,-25.735 58.641,-25.735Zm-0,19.266c-16.313,-0 -30.328,6.047 -42.047,18.141c-11.719,12.093 -17.578,26.718 -17.578,43.875c-0,11.062 2.672,21.375 8.015,30.937c5.344,9.563 12.563,16.945 21.657,22.149c9.093,5.203 19.078,7.804 29.953,7.804c10.875,0 20.859,-2.601 29.953,-7.804c9.094,-5.204 16.312,-12.586 21.656,-22.149c5.344,-9.562 8.016,-19.875 8.016,-30.937c-0,-17.157 -5.883,-31.782 -17.649,-43.875c-11.765,-12.094 -25.757,-18.141 -41.976,-18.141Zm-0,2.811c15.443,0 28.759,5.775 39.962,17.29c11.239,11.553 16.852,25.526 16.852,41.915c-0,10.572 -2.552,20.427 -7.659,29.566c-5.084,9.098 -11.946,16.129 -20.598,21.08c-8.669,4.96 -18.19,7.433 -28.557,7.433c-10.368,0 -19.888,-2.473 -28.557,-7.433c-8.653,-4.951 -15.514,-11.982 -20.599,-21.08c-5.106,-9.139 -7.658,-18.994 -7.658,-29.566c-0,-16.391 5.59,-30.365 16.786,-41.919c11.157,-11.515 24.496,-17.286 40.028,-17.286Z\" style=\"fill:#a00022\"/><path d=\"M1805.56,446.364c-1.321,-0.694 -2.954,-0.235 -3.72,1.045c-5.808,9.711 -11.179,16.766 -16.17,21.122c-4.915,4.289 -10.885,7.718 -17.899,10.309c-7.044,2.602 -14.29,3.904 -21.737,3.904c-15.32,0 -28.195,-5.402 -38.616,-16.224c-9.896,-10.277 -15.244,-23.301 -16.12,-39.044c-0,-0 134.611,-0 134.611,-0c0.75,-0 1.469,-0.3 1.996,-0.832c0.528,-0.533 0.822,-1.255 0.815,-2.004c-0.194,-21.599 -6.052,-39.598 -17.48,-54.03c-16.115,-20.481 -37.657,-30.741 -64.644,-30.741c-26.241,0 -47.177,10.028 -62.824,30.049c-12.302,15.692 -18.456,33.567 -18.456,53.622c0,21.304 7.248,40.411 21.774,57.309c14.582,16.964 34.772,25.517 60.631,25.517c11.626,0 22.039,-1.783 31.243,-5.319c9.238,-3.55 17.553,-8.726 24.943,-15.533c7.346,-6.767 13.838,-15.649 19.445,-26.668c0.697,-1.371 0.163,-3.048 -1.198,-3.763l-16.594,-8.719Zm-1.307,2.488l16.593,8.719c-5.437,10.687 -11.718,19.312 -18.843,25.875c-7.125,6.562 -15.141,11.555 -24.047,14.977c-8.907,3.421 -18.985,5.132 -30.235,5.132c-24.937,0 -44.437,-8.179 -58.5,-24.539c-14.062,-16.359 -21.093,-34.851 -21.093,-55.476c-0,-19.407 5.953,-36.703 17.859,-51.891c15.094,-19.312 35.297,-28.969 60.609,-28.969c26.063,0 46.875,9.891 62.438,29.672c11.062,13.969 16.687,31.406 16.875,52.313l-137.531,-0c0.375,17.812 6.046,32.414 17.015,43.804c10.969,11.391 24.516,17.086 40.641,17.086c7.781,0 15.351,-1.359 22.711,-4.078c7.359,-2.719 13.617,-6.328 18.773,-10.828c5.156,-4.5 10.735,-11.766 16.735,-21.797Zm-0,-41.203c-2.625,-10.5 -6.446,-18.891 -11.461,-25.172c-5.016,-6.281 -11.649,-11.344 -19.899,-15.187c-8.25,-3.844 -16.922,-5.766 -26.015,-5.766c-15,0 -27.891,4.828 -38.672,14.484c-7.875,7.032 -13.828,17.579 -17.86,31.641l113.907,0Zm-3.669,-2.811l-106.44,0c3.802,-11.686 9.082,-20.615 15.934,-26.733c0.001,-0.001 0.002,-0.002 0.003,-0.003c10.257,-9.186 22.526,-13.767 36.797,-13.767c8.678,0 16.954,1.834 24.828,5.503c7.827,3.646 14.131,8.434 18.889,14.393c4.229,5.297 7.543,12.173 9.989,20.607l0,0Z\" style=\"fill:#a00022\"/><path d=\"M1862.61,343.807c-1.553,-0 -2.811,1.258 -2.811,2.811l-0,153c-0,1.552 1.258,2.811 2.811,2.811l19.687,-0c1.553,-0 2.812,-1.259 2.812,-2.811l-0,-56.11c-0,-19.805 0.883,-33.449 2.724,-40.925c2.855,-11.053 8.762,-20.312 17.713,-27.793c8.892,-7.432 18.952,-11.158 30.189,-11.158c9.681,0 17.552,2.306 23.57,7.059c6.013,4.75 10.044,11.868 12.223,21.28c0.004,0.019 0.009,0.038 0.014,0.058c1.47,5.79 2.163,17.326 2.163,34.604c0,0 0,72.985 0,72.985c0,1.552 1.259,2.811 2.811,2.811l19.547,-0c1.553,-0 2.811,-1.259 2.811,-2.811l0,-78.75c0,-21.318 -2.234,-37.009 -6.555,-47.092c-4.443,-10.365 -11.33,-18.607 -20.659,-24.727c-9.31,-6.108 -19.969,-9.18 -31.988,-9.18c-11.734,0 -22.587,2.72 -32.562,8.147c-7.883,4.289 -15.223,10.308 -22.001,18.075c-0,0 -0,-19.473 -0,-19.473c-0,-1.553 -1.259,-2.811 -2.812,-2.811l-19.687,-0Zm-0,2.811l19.687,-0l0,27.422c7.875,-10.5 16.594,-18.352 26.157,-23.555c9.562,-5.203 19.968,-7.805 31.218,-7.805c11.438,0 21.586,2.907 30.446,8.719c8.859,5.813 15.398,13.641 19.617,23.484c4.219,9.844 6.328,25.172 6.328,45.985l0,78.75l-19.547,-0l0,-72.985c0,-17.625 -0.75,-29.39 -2.25,-35.296c-2.344,-10.125 -6.75,-17.743 -13.219,-22.852c-6.468,-5.109 -14.906,-7.664 -25.312,-7.664c-11.906,-0 -22.57,3.937 -31.992,11.812c-9.422,7.875 -15.633,17.625 -18.633,29.25c-1.875,7.594 -2.813,21.469 -2.813,41.625l0,56.11l-19.687,-0l-0,-153Z\" style=\"fill:#a00022\"/><path d=\"M2035.3,343.807c-1.552,-0 -2.811,1.258 -2.811,2.811l0,153c0,1.552 1.259,2.811 2.811,2.811l19.829,-0c1.552,-0 2.811,-1.259 2.811,-2.811l-0,-153c-0,-1.553 -1.259,-2.811 -2.811,-2.811l-19.829,-0Zm0,2.811l19.829,-0l-0,153l-19.829,-0l0,-153Zm9.844,-65.811c-5.173,-0 -9.636,1.862 -13.378,5.604c-3.737,3.737 -5.605,8.244 -5.605,13.519c0,5.174 1.862,9.636 5.605,13.379c3.742,3.742 8.205,5.604 13.378,5.604c5.276,0 9.782,-1.867 13.519,-5.604c3.743,-3.743 5.605,-8.205 5.605,-13.379c-0,-5.275 -1.868,-9.782 -5.605,-13.519c-3.737,-3.736 -8.243,-5.604 -13.519,-5.604Zm0,2.811c4.5,-0 8.344,1.594 11.531,4.781c3.188,3.188 4.782,7.031 4.782,11.531c-0,4.407 -1.594,8.203 -4.782,11.391c-3.187,3.187 -7.031,4.781 -11.531,4.781c-4.406,0 -8.203,-1.594 -11.39,-4.781c-3.188,-3.188 -4.782,-6.984 -4.782,-11.391c0,-4.5 1.594,-8.343 4.782,-11.531c3.187,-3.187 6.984,-4.781 11.39,-4.781Z\" style=\"fill:#a00022\"/><g transform=\"matrix(288,0,0,288,2073.97,499.618)\"><path d=\"M0.016,-0.531l0.082,-0l0.14,0.197l0.141,-0.197l0.082,-0l-0.182,0.252l0.205,0.279l-0.083,-0l-0.163,-0.223l-0.16,0.223l-0.081,-0l0.201,-0.279l-0.182,-0.252Z\" style=\"fill:#a00022;fill-rule:nonzero\"/></g><path d=\"M2078.47,343.807c-1.055,-0 -2.022,0.591 -2.502,1.53c-0.481,0.94 -0.395,2.07 0.223,2.926l51.266,71.058c0,-0 -56.751,78.652 -56.751,78.652c-0.617,0.856 -0.703,1.986 -0.223,2.925c0.481,0.94 1.448,1.531 2.503,1.531l23.484,-0c0.906,-0 1.756,-0.436 2.284,-1.172l43.859,-61.108c-0,0 44.539,61.124 44.539,61.124c0.529,0.726 1.373,1.156 2.271,1.156l23.907,-0c1.059,-0 2.029,-0.596 2.507,-1.541c0.479,-0.945 0.386,-2.079 -0.241,-2.933l-57.713,-78.65c-0,-0 51.119,-71.045 51.119,-71.045c0.616,-0.856 0.701,-1.985 0.22,-2.924c-0.481,-0.939 -1.447,-1.529 -2.502,-1.529l-23.625,-0c-0.907,-0 -1.759,0.438 -2.287,1.176l-38.213,53.472c0,-0 -38.213,-53.472 -38.213,-53.472c-0.527,-0.738 -1.379,-1.176 -2.287,-1.176l-23.625,-0Zm0,2.811l23.625,-0l40.5,56.672l40.5,-56.672l23.625,-0l-52.312,72.703l58.922,80.297l-23.907,-0l-46.828,-64.266l-46.125,64.266l-23.484,-0l57.937,-80.297l-52.453,-72.703Z\" style=\"fill:#a00022\"/></g><g><path d=\"M2637.41,460.658c-352.948,-16.074 -689.951,81.061 -968.17,204.16c-423.496,187.377 -898.237,540.493 -898.237,540.493c-0,0 385.105,-38.71 505.985,33.645c406.198,243.139 -847.67,395.234 -847.67,395.234c0,-0 1029.07,297.256 1349.24,404.809c205.91,69.172 337.481,358.493 -280.932,301.024c126.032,112.641 539.295,347.504 1037.12,374.824c621.769,34.122 1150.1,-453.703 1178.42,-1075.76c28.331,-622.061 -453.703,-1150.1 -1075.76,-1178.43Z\" style=\"fill:#952615\"/><path d=\"M2833.11,2198.26c-117.968,-4.352 -223.978,-33.835 -315.439,-73.299c-113.926,-49.157 -205.279,-113.798 -269.057,-164.641c-121.364,-96.751 -413.739,-377.987 -594.205,-457.088c138.583,-70.398 505.946,-238.041 704.417,-293.621c127.644,-35.746 216.837,-207.975 -161.841,-192.204c80.317,-64.724 339.489,-194.993 643.739,-196.145c379.996,-1.437 686.793,312.313 684.692,692.306c-2.101,379.992 -312.565,698.698 -692.306,684.692Z\" style=\"fill:#fff\"/></g></g></svg></div><div class=\"card-body\"><form class=\"form-signin pb-0\"><div class=\"row\"><input value.bind=\"userName\" type=\"text\" class=\"form-control ${loginFailed ? 'is-invalid' : ''}\" placeholder=\"Username\"></div><div class=\"row\"><input value.bind=\"password\" type=\"password\" class=\"form-control ${loginFailed ? 'is-invalid' : ''}\" placeholder=\"Password\" aria-describedby=\"validationServer03Feedback\"><div id=\"validationServer03Feedback\" class=\"invalid-feedback\">Incorrect Username or password</div></div><div if.bind=\"missingTenantIdCookie\" class=\"row mb-3\"><input value.bind=\"tenantId\" type=\"text\" class=\"form-control\" placeholder=\"Clinic Code\"></div><div class=\"row\"><button class=\"btn btn-login w-100\" disabled.bind=\"!httpConfigComplete\" click.delegate=\"loginClicked()\">Login</button> <button type=\"button\" class=\"btn btn-link btn-sm pl-0\" click.delegate=\"forgotPasswordClick()\">Forgot Password</button></div></form></div></div><div class=\"text-muted\" style=\"text-align:center\"><small>v${helper.buildNumber}</small></div></div><div class=\"col-sm-2 col-md-3 col-lg-4\"></div></div></div></template>";});;
define('login/updatePassword',['exports', 'aurelia-framework', '../helpers/http', '../helpers/helper', 'aurelia-router', '../data/go/data'], function (exports, _aureliaFramework, _http, _helper, _aureliaRouter, _data) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.UpdatePassword = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2;

  var UpdatePassword = exports.UpdatePassword = (_dec = (0, _aureliaFramework.inject)(_http.http, _helper.helper, _aureliaRouter.Router, _data.Data), _dec(_class = (_class2 = function () {
    UpdatePassword.prototype.passwordChanged = function passwordChanged(newValue, oldValue) {
      this.validate(newValue);
    };

    UpdatePassword.prototype.passwordConfirmChanged = function passwordConfirmChanged(newValue, oldValue) {
      this.validate(newValue);
    };

    function UpdatePassword(http, helper, Router, Data) {
      _classCallCheck(this, UpdatePassword);

      _initDefineProp(this, 'password', _descriptor, this);

      _initDefineProp(this, 'passwordConfirm', _descriptor2, this);

      this.hasError = false;
      this.verified = false;

      this.http = http;
      this.helper = helper;
      this.router = Router;
      this.goData = Data;
    }

    UpdatePassword.prototype.activate = function activate(params) {
      if (params.hasOwnProperty('userId') && params.hasOwnProperty('verificationGuid')) {
        this.userId = params.userId;
        this.verificationGuid = params.verificationGuid;
      }
    };

    UpdatePassword.prototype.attached = function attached() {
      var self = this;
      if (self.userId && self.verificationGuid) {
        var url = 'users/verifyPassword?userId=' + self.userId + '&verificationGuid=' + self.verificationGuid;
        self.goData.getWithUrl(url, function (jwt) {
          if (jwt) {
            self.verified = true;
            self.helper.processToken(jwt);
          }
        });
      }
    };

    UpdatePassword.prototype.updateClick = function updateClick() {
      var self = this;

      var passwordReset = {
        'UserID': self.userId,
        'Password': self.passwordConfirm
      };

      self.goData.putWithUrlAndData('users/resetpassword', passwordReset, function (res) {
        self.router.navigateToRoute('login');
      });
    };

    UpdatePassword.prototype.validate = function validate(value) {
      var regEx = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/gm;
      var validated = regEx.test(value);

      if (this.password != this.passwordConfirm || !validated) {
        this.hasError = true;
      } else {
        this.hasError = false;
      }
    };

    return UpdatePassword;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'password', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'passwordConfirm', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  })), _class2)) || _class);
});;
define('text!login/updatePassword.html',[],function(){return "<template><style>.form-signin{width:100%;padding:15px;margin:auto}.form-signin .checkbox{font-weight:400}.form-signin .form-control{position:relative;box-sizing:border-box;height:auto;padding:10px;font-size:16px}.form-signin .form-control:focus{z-index:2}.form-signin input[type=text]{margin-bottom:-1px;border-bottom-right-radius:0;border-bottom-left-radius:0}.form-signin input[type=password]{margin-bottom:10px;border-top-left-radius:0;border-top-right-radius:0}</style><div class=\"container-fluid\" style=\"position:fixed;top:25%\"><div class=\"row\"><div class=\"col-sm-2 col-md-3 col-lg-4\"></div><div class=\"col-sm-10 col-md-6 col-lg-4\"><div class=\"card\"><div class=\"card-header\">Reset Password</div><div if.bind=\"verified\" class=\"card-body\"><form class=\"form-signin py-0\"><div class=\"row\"><input value.bind=\"password\" type=\"password\" class=\"form-control ${hasError ? 'is-invalid' : ''}\" placeholder=\"Password\"></div><div class=\"row mb-3\"><input value.bind=\"passwordConfirm\" type=\"password\" class=\"form-control ${hasError ? 'is-invalid' : ''}\" placeholder=\"Confirm Password\" aria-describedby=\"validationServer03Feedback\"><div id=\"validationServer03Feedback\" class=\"invalid-feedback\">Password must contain at least 8 characters, 1 uppercase letter, 1 lowercase letter, and 1 number.</div></div><div class=\"row\"><button class=\"btn btn-primary w-100\" disabled.bind=\"hasError\" click.delegate=\"updateClick()\">Reset</button></div></form></div></div></div><div class=\"col-sm-2 col-md-3 col-lg-4\"></div></div></div></template>";});;
define('main',['exports', './environment', 'aurelia-pal', 'bootstrap'], function (exports, _environment, _aureliaPal) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.configure = configure;

  var _environment2 = _interopRequireDefault(_environment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function configure(aurelia) {
    aurelia.use.standardConfiguration().developmentLogging().plugin(_aureliaPal.PLATFORM.moduleName('aurelia-dialog'), function (config) {
      config.useDefaults();
    }).plugin(_aureliaPal.PLATFORM.moduleName('aurelia-bootstrap-datetimepicker', function (config) {
      config.extra.iconBase = 'font-awesome';
      config.extra.withDateIcon = true;

      config.options.allowInputToggle = true;

      config.options.keepOpen = true;

      config.extra.bootstrapVersion = 4;

      config.extra.buttonClass = 'btn btn-outline-secondary';
    })).plugin(_aureliaPal.PLATFORM.moduleName('bcx-aurelia-reorderable-repeat')).plugin(_aureliaPal.PLATFORM.moduleName('aurelia-hammer')).plugin(_aureliaPal.PLATFORM.moduleName("aurelia-animator-css")).globalResources([_aureliaPal.PLATFORM.moduleName('./chatbot/floating-chatbot'), _aureliaPal.PLATFORM.moduleName('./chatbot/chatbot-overlay'), _aureliaPal.PLATFORM.moduleName('./chatbot/assistance-header'), _aureliaPal.PLATFORM.moduleName('./chatbot/action-buttons'), _aureliaPal.PLATFORM.moduleName('./chatbot/detail-view'), _aureliaPal.PLATFORM.moduleName('./chatbot/chat-input'), _aureliaPal.PLATFORM.moduleName('./chatbot/office-visits-expanded'), _aureliaPal.PLATFORM.moduleName('./chatbot/office-visits-detail')]);

    if (_environment2.default.debug) {
      aurelia.use.developmentLogging();
    }

    if (_environment2.default.testing) {
      console.log('ENVIRONMENT IS SET TO TESTING');
    }

    aurelia.start().then(function () {
      return aurelia.setRoot();
    });
  }
});;
define('odgo/dialogs/addLicense',['exports', 'aurelia-framework', '../../data/go/data', 'aurelia-dialog'], function (exports, _aureliaFramework, _data, _aureliaDialog) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AddLicense = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor;

  var AddLicense = exports.AddLicense = (_dec = (0, _aureliaFramework.inject)(_data.Data, _aureliaDialog.DialogController), _dec(_class = (_class2 = function () {
    function AddLicense(Data, DialogController) {
      _classCallCheck(this, AddLicense);

      this.licenseTypes = ['PRO', 'MID', 'NOREV'];
      this.selectedLicenseType = null;
      this.expireDays = null;

      _initDefineProp(this, 'datepicker', _descriptor, this);

      this.goData = Data;
      this.dialogController = DialogController;
    }

    AddLicense.prototype.cancel = function cancel() {
      this.dialogController.cancel();
    };

    AddLicense.prototype.close = function close() {
      this.dialogController.close(true, { 'licenseType': this.selectedLicenseType, 'expireDays': this.expireDays });
    };

    AddLicense.prototype.activate = function activate(model) {
      var self = this;
    };

    AddLicense.prototype.attached = function attached() {
      var res = $(this.addLicense).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");
    };

    AddLicense.prototype.openCalendar = function openCalendar() {
      this.datepicker.methods.toggle();
    };

    return AddLicense;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'datepicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!odgo/dialogs/addLicense.html',[],function(){return "<template><div ref=\"addLicense\" class=\"card\" style=\"box-shadow:0 5px 15px rgba(0,0,0,.5)\"><div class=\"card-header\"><h4 style=\"display:inline-block;margin-bottom:0\"><i class=\"fa fa-key mr-2\"></i>New License</h4><i class=\"fa fa-close fa-2x float-right\" click.delegate=\"cancel()\"></i></div><div class=\"card-body\"><div class=\"form-row\"><div class=\"form-group col-md-6\"><label>Expire Days</label> <input type=\"number\" class=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Expiration days...\" value.bind=\"expireDays\"></div><div class=\"form-group col-md-6\"><label>License Type</label> <select value.bind=\"selectedLicenseType\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"t of licenseTypes\" model.bind=\"t\">${t}</option></select></div></div></div><div class=\"card-footer\"><button type=\"button\" class=\"btn btn-primary float-right\" click.delegate=\"close()\">OK</button></div></div></template>";});;
define('odgo/dialogs/addTenant',['exports', 'aurelia-framework', '../../data/go/data', 'aurelia-dialog'], function (exports, _aureliaFramework, _data, _aureliaDialog) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AddTenant = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var AddTenant = exports.AddTenant = (_dec = (0, _aureliaFramework.inject)(_data.Data, _aureliaDialog.DialogController), _dec(_class = function () {
    function AddTenant(Data, DialogController) {
      _classCallCheck(this, AddTenant);

      this.dbNames = [];

      this.goData = Data;
      this.dialogController = DialogController;
    }

    AddTenant.prototype.cancel = function cancel() {
      this.dialogController.cancel();
    };

    AddTenant.prototype.close = function close() {
      this.dialogController.close(true, { 'tenantId': this.tenantId, 'database': this.selectedDatabase });
    };

    AddTenant.prototype.activate = function activate(model) {
      var self = this;
      self.dbNames = model.dbNames;
    };

    return AddTenant;
  }()) || _class);
});;
define('text!odgo/dialogs/addTenant.html',[],function(){return "<template><div class=\"card\"><div class=\"card-header\"><h4 style=\"display:inline-block;margin-bottom:0\"><i class=\"fa fa-server mr-2\"></i>New Tenant</h4><i class=\"fa fa-close fa-2x float-right\" click.delegate=\"cancel()\"></i></div><div class=\"card-body\"><div class=\"form-row\"><div class=\"form-group col-md-6\"><label>TenantId</label> <input type=\"text\" class=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"domain.com\" value.bind=\"tenantId\"></div><div class=\"form-group col-md-6\"><label>Database</label> <select value.bind=\"selectedDatabase\" class=\"form-control\"><option model.bind=\"null\">Choose...</option><option repeat.for=\"t of dbNames\" model.bind=\"t\">${t}</option></select></div></div></div><div class=\"card-footer\"><button type=\"button\" class=\"btn btn-primary float-right\" click.delegate=\"close()\">Add</button></div></div></template>";});;
define('odgo/dialogs/updateUser',['exports', 'aurelia-framework', '../../data/go/data', 'aurelia-dialog'], function (exports, _aureliaFramework, _data, _aureliaDialog) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.UpdateUser = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var UpdateUser = exports.UpdateUser = (_dec = (0, _aureliaFramework.inject)(_data.Data, _aureliaDialog.DialogController), _dec(_class = function () {
    function UpdateUser(Data, DialogController) {
      _classCallCheck(this, UpdateUser);

      this.verified = null;

      this.goData = Data;
      this.dialogController = DialogController;
    }

    UpdateUser.prototype.cancel = function cancel() {
      this.dialogController.cancel();
    };

    UpdateUser.prototype.close = function close() {
      this.dialogController.close(true, { 'newPassword': this.newPassword, 'verified': this.verified });
    };

    UpdateUser.prototype.activateAcct = function activateAcct() {
      this.verified = this.verified ? false : true;
    };

    UpdateUser.prototype.activate = function activate(model) {
      var self = this;

      self.verified = model.User.Verified;
    };

    UpdateUser.prototype.attached = function attached() {
      var res = $(this.updateUser).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");
    };

    return UpdateUser;
  }()) || _class);
});;
define('text!odgo/dialogs/updateUser.html',[],function(){return "<template><div class=\"card\" ref=\"updateUser\"><div class=\"card-header\"><h4 style=\"display:inline-block;margin-bottom:0\"><i class=\"fa fa-user mr-2\"></i>Update User</h4><i class=\"fa fa-close fa-2x float-right\" click.delegate=\"cancel()\"></i></div><div class=\"card-body\"><div class=\"form-row\"><div class=\"form-group col-md-12\"><label>New Password</label> <input type=\"text\" class=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"new password...\" value.bind=\"newPassword\"></div></div><div class=\"form-row\"><div class=\"form-group col-md-12\"><button type=\"button\" class=\"btn btn-outline-secondary\" click.delegate=\"activateAcct()\"><span if.bind=\"!verified\">Activate</span><span if.bind=\"verified\">Deactivate</span> Account</button></div></div></div><div class=\"card-footer\"><button type=\"button\" class=\"btn btn-primary float-right\" click.delegate=\"close()\">OK</button></div></div></template>";});;
define('odgo/home',['exports', '../helpers/helper', '../helpers/http', '../data/go/data', 'aurelia-framework', 'jquery', 'lodash', 'moment', 'aurelia-dialog', './login', '../go/popupHelper', './dialogs/addTenant'], function (exports, _helper, _http, _data, _aureliaFramework, _jquery, _lodash, _moment, _aureliaDialog, _login, _popupHelper, _addTenant) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Home = undefined;

  var _jquery2 = _interopRequireDefault(_jquery);

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Tenant = function Tenant(id, data) {
    _classCallCheck(this, Tenant);

    this.tenantId = id;
    this.selected = false;
    this.data = data;
  };

  var Page = function Page(name, path) {
    _classCallCheck(this, Page);

    this.name = name;
    this.path = path;
    this.selected = false;
    this.disabled = true;
  };

  var Home = exports.Home = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _aureliaDialog.DialogService, _data.Data, _popupHelper.PopupHelper), _dec(_class = function () {
    function Home(helper, http, dialogService, data, PopupHelper) {
      _classCallCheck(this, Home);

      this.tenants = [];
      this.pages = [];
      this.selectedPage = null;
      this.selectedTenant = null;
      this.databaseNames = [];
      this.tenantScrollHeight = 0;

      this.helper = helper;
      this.http = http;
      this.dialogService = dialogService;
      this.data = data;
      this.popupHelper = PopupHelper;
    }

    Home.prototype.attached = function attached() {

      var self = this;
      self.dialogService.open({ viewModel: _login.Login, model: { url: self.urlPrepender } }).whenClosed(function (response) {
        var token = self.parseToken(response.output);
        var admin = token.Admin == 'True' ? true : false;
        self.setup(admin, token.TenantId);
      });

      var container = document.getElementById("odgoContainer");
      self.tenantScrollHeight = container.clientHeight - 42 - 20;
    };

    Home.prototype.parseToken = function parseToken(token) {
      var splitToken = token.split('.');
      var payloadString = splitToken[1];
      var payload = atob(payloadString);

      return JSON.parse(payload);
    };

    Home.prototype.setup = function setup(isAdmin, tenantId) {
      var self = this;

      var dbPage = new Page("Database", "./pages/database");
      dbPage.selected = true;
      self.selectedPage = dbPage;
      self.pages.push(dbPage);

      if (isAdmin) {
        var licPage = new Page("License", "./pages/license");
        self.pages.push(licPage);
      }

      var watcherPage = new Page("File Watchers", "./pages/filewatcher");
      self.pages.push(watcherPage);

      var portalUsersPage = new Page("Portal Users", "./pages/portalUsers");
      self.pages.push(portalUsersPage);

      self.data.getWithUrl('tenants', function (res) {
        if (isAdmin) {
          for (var i = 0; i < res.length; i++) {
            var tenant = res[i];

            var aTenant = new Tenant(tenant.TenantId, tenant);
            self.tenants.push(aTenant);
          }
        } else {
          var t = _.find(res, function (t) {
            return t.TenantId.toLowerCase() == tenantId;
          });
          var aTenant = new Tenant(t.TenantId, t);
          self.tenants.push(aTenant);
        }
      });

      self.data.getWithUrl('database/all', function (res) {
        self.databaseNames = res;
      });
    };

    Home.prototype.activate = function activate(model) {};

    Home.prototype.tenantClicked = function tenantClicked(t) {
      this.selectedTenant = t;


      if (this.selectedTenant.tenantId == 'odgo') {
        this.pages[1].disabled = true;
        this.pages[2].disabled = true;
        this.pages[3].disabled = true;
      } else {
        this.pages[1].disabled = false;
        this.pages[2].disabled = false;
        this.pages[3].disabled = false;
      }

      this.pageClick(this.pages[0]);
      for (var i = 0; i < this.tenants.length; i++) {
        var aTenant = this.tenants[i];
        if (aTenant.tenantId == t.tenantId) {
          aTenant.selected = true;
        } else {
          aTenant.selected = false;
        }
      }
    };

    Home.prototype.pageClick = function pageClick(page) {
      this.selectedPage = page;
      for (var i = 0; i < this.pages.length; i++) {
        var aPage = this.pages[i];

        if (aPage.name == page.name) {
          aPage.selected = true;
        } else {
          aPage.selected = false;
        }
      }
    };

    Home.prototype.openAddTenant = function openAddTenant(callback) {
      var self = this;
      self.dialogService.open({ viewModel: _addTenant.AddTenant, model: { "dbNames": self.databaseNames } }).whenClosed(function (response) {
        if (!response.wasCancelled) {
          callback(response.output);
        }
      });
    };

    Home.prototype.newTenantClick = function newTenantClick() {
      var self = this;

      self.openAddTenant(function (res) {
        if (res.tenantId && res.database) {
          var found = _.find(self.tenants, function (t) {
            return t.tenantId == res.tenantId;
          });
          if (found) {
            self.popupHelper.openGenericMessagePop("TenantId exists!", 'Tenant Exists', ['OK'], false, function (res) {
              return;
            });
          } else {
            self.data.getWithUrl('tenant', function (tenant) {

              tenant.TenantId = res.tenantId;
              tenant.DatabaseName = res.database;

              self.data.postWithUrlAndData('tenant', JSON.stringify(tenant), function (newTenant) {
                var aTenant = new Tenant(newTenant.TenantId, newTenant);
                self.tenants.push(aTenant);
              });
            });
          }
        }
      });
    };

    return Home;
  }()) || _class);
});;
define('text!odgo/home.html',[],function(){return "<template><nav class=\"navbar navbar-expand-lg navbar-light bg-light\"><a class=\"navbar-brand\" href=\"#\"><i class=\"fa fa-cog mr-2\" aria-hidden=\"true\"></i>GO Manager</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span class=\"navbar-toggler-icon\"></span></button></nav><div id=\"odgoContainer\" class=\"row px-2 py-2\" style=\"height:inherit\"><div class=\"col-md-3\"><div class=\"d-flex align-items-center\" style=\"height:42px\"><h4 class=\"ml-1\">Tenants</h4><i class=\"fa fa-plus fa-2x ml-auto text-primary\" aria-hidden=\"true\" click.delegate=\"newTenantClick()\"></i></div><div class=\"list-group\" css=\"height:${tenantScrollHeight}px;\" style=\"overflow-y:auto\"><button repeat.for=\"t of tenants\" type=\"button\" class=\"list-group-item list-group-item-action ${t.selected ? 'active' : ''}\" aria-current=\"true\" click.delegate=\"tenantClicked(t)\"> ${t.tenantId} </button></div></div><div class=\"col-md-9\"><ul class=\"nav nav-tabs\"><li repeat.for=\"p of pages\" class=\"nav-item\"><a class=\"nav-link ${p.selected ? 'active' : ''} ${p.disabled ? 'disabled': ''}\" href=\"#\" click.delegate=\"pageClick(p)\">${p.name}</a></li></ul><compose ref=\"adm\" view-model.bind=\"selectedPage.path\" model.bind=\"$this\" containerless></compose></div></div></template>";});;
define('odgo/index',['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var Index = exports.Index = function () {
		function Index() {
			_classCallCheck(this, Index);

			this.message = 'HELLO FROM odgo/index';
			console.log('ODGO INDEX LOADED!');
		}

		Index.prototype.configureRouter = function configureRouter(config, router) {
			config.title = 'ODGO Manager';
			config.map([{ route: 'home', name: 'home', moduleId: 'odgo/home', nav: true, title: 'Home' }]);
			this.router = router;
		};

		return Index;
	}();
});;
define('text!odgo/index.html',[],function(){return "<template><div class=\"container-fluid\" style=\"padding:0\"><router-view></router-view></div></template>";});;
define('odgo/login',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Login = undefined;

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var _dec, _class;

	var Login = exports.Login = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
		function Login(DialogController, http, helper) {
			_classCallCheck(this, Login);

			this.userName = '';
			this.password = '';

			this.message = "test login message";
			this.dialogController = DialogController;
			this.http = http;
			this.helper = helper;
		}

		Login.prototype.loginClicked = function loginClicked() {
			var self = this;
			console.log('UserName', self.userName);
			console.log('Password', self.password);
			self.http.loginOdgo(self.helper.getApiUrl("login/odgo"), { Username: self.userName, Password: self.password }, function (data) {
				if (data != "User not found.") {
					self.dialogController.close(true, data);
				} else {
					alert("Incorrect Password");
				}
			}, function () {
				console.log('ERROR GETTING JWT');
			});
		};

		Login.prototype.activate = function activate(model) {
			var self = this;
			console.log('LOGIN ACTIVATE', model);
		};

		Login.prototype.attached = function attached() {
			var res = $(this.gologin).closest('ux-dialog-container');
			var uxDx = res[0];
			uxDx.style.setProperty("z-index", "5001", "important");
			var style = {
				'z-index': 5001
			};

			$('ux-dialog-overlay').css(style);
		};

		return Login;
	}()) || _class);
});;
define('text!odgo/login.html',[],function(){return "<template><ux-dialog ref=\"gologin\"><ux-dialog-header><div class=\"row\"><div class=\"col-sm-12\"><h4>Login</h4></div></div></ux-dialog-header><ux-dialog-body><form><div class=\"form-group\"><label>UserName:</label> <input value.bind=\"userName\" type=\"text\" class=\"form-control\" placeholder=\"Enter UserName\"></div><div class=\"form-group\"><label>Password:</label> <input value.bind=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Password\"></div></form></ux-dialog-body><ux-dialog-footer><button click.delegate=\"loginClicked()\">Login</button></ux-dialog-footer></ux-dialog></template>";});;
define('odgo/pages/database',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', 'lodash', 'moment', 'aurelia-dialog', '../../data/go/data', '../../go/popupHelper'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _aureliaDialog, _data, _popupHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Database = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var Database = exports.Database = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _aureliaDialog.DialogService, _data.Data, _popupHelper.PopupHelper), _dec(_class = function () {
    function Database(helper, http, dialogService, Data, PopupHelper) {
      _classCallCheck(this, Database);

      this.home = null;
      this.displayTenantIdEdit = false;

      this.helper = helper;
      this.http = http;
      this.dialogService = dialogService;
      this.goData = Data;
      this.popupHelper = PopupHelper;
    }

    Database.prototype.attached = function attached() {};

    Database.prototype.activate = function activate(model) {
      var self = this;
      self.home = model;
    };

    Database.prototype.save = function save() {
      var self = this;

      var alert = self.helper.createNoty('Saving ' + self.home.selectedTenant.tenantId, 3000);
      alert.show();

      self.goData.putWithUrlAndData('tenant', self.home.selectedTenant.data, function (res) {
        if (res) {
          alert.setType('success');
          alert.setText(self.home.selectedTenant.tenantId + ' was successfully saved!');
        } else {
          alert.setType('error');
          alert.setText(self.home.selectedTenant.tenantId + ' could not be saved!');
        }
        alert.close();
      });
    };

    Database.prototype.delete = function _delete() {
      var self = this;
      var msg = 'Are you sure you wish to delete ' + self.home.selectedTenant.tenantId + '?';
      self.popupHelper.openGenericMessagePop(msg, 'Delete Tenant?', ['YES', 'NO'], false, function (res) {
        var r = res.result;
        if (r == 'YES') {
          var alert = self.helper.createNoty('Deleting ' + self.home.selectedTenant.tenantId, 3000);
          alert.show();

          var url = 'tenant?id=' + self.home.selectedTenant.data.Id;

          self.goData.deleteWithUrl(url, function (res) {
            if (res) {
              alert.setType('success');
              alert.setText(self.home.selectedTenant.tenantId + ' was successfully deleted!');
              var indexToDelete = _.findIndex(self.home.tenants, function (t) {
                return t.tenantId == self.home.selectedTenant.tenantId;
              });
              self.home.tenants.splice(indexToDelete, 1);
              self.home.selectedTenant = null;
            } else {
              alert.setType('error');
              alert.setText(self.home.selectedTenant.tenantId + ' failed to delete!');
            }
          });
        }
      });
    };

    Database.prototype.editTenantClick = function editTenantClick() {
      this.displayTenantIdEdit = this.displayTenantIdEdit ? false : true;
    };

    return Database;
  }()) || _class);
});;
define('text!odgo/pages/database.html',[],function(){return "<template><style>.card-radius{border-top-left-radius:0;border-top-right-radius:0;border:1px solid #dee2e6}</style><div class=\"card border-top-0 card-radius\"><div class=\"card-body\"><form><fieldset disabled.bind=\"home.selectedPage.disabled\"><h4 class=\"mb-2\">${home.selectedTenant.data.TenantId}<i if.bind=\"!home.selectedPage.disabled\" class=\"fa fa-pencil-square-o ml-2 text-muted\" aria-hidden=\"true\" click.delegate=\"editTenantClick()\"></i></h4><div if.bind=\"displayTenantIdEdit\" class=\"form-group border rounded p-2 bg-warning\"><label for=\"formGroupExampleInput\">Make sure you know what you're doing!</label> <input type=\"text\" class=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"TenantId\" value.bind=\"home.selectedTenant.data.TenantId\"></div><div class=\"form-group\"><label for=\"formGroupExampleInput\">Database Name</label> <input type=\"text\" class=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"Database Name\" value.bind=\"home.selectedTenant.data.DatabaseName\"></div><div class=\"form-group\"><label for=\"formGroupExampleInput2\">Portal Domain</label> <input type=\"text\" class=\"form-control\" id=\"formGroupExampleInput2\" placeholder=\"Portal Domain url...\" value.bind=\"home.selectedTenant.data.PortalDomain\"></div><div class=\"form-group\"><label for=\"formGroupExampleInput2\">Root Path</label> <input type=\"text\" class=\"form-control\" id=\"formGroupExampleInput2\" placeholder=\"Root folder path...\" value.bind=\"home.selectedTenant.data.RootPath\"></div><div class=\"form-check\"><input class=\"form-check-input\" type=\"checkbox\" value.bind=\"home.selectedTenant.data.SelfHosted\" id=\"defaultCheck1\"> <label class=\"form-check-label\" for=\"defaultCheck1\">Self Hosted</label></div></fieldset></form></div><div class=\"card-footer\"><button type=\"button\" disabled.bind=\"home.selectedPage.disabled\" class=\"btn btn-danger\" click.delegate=\"delete()\">Delete <i class=\"fa fa-trash\" aria-hidden=\"true\"></i></button> <button type=\"button\" disabled.bind=\"home.selectedPage.disabled\" class=\"btn btn-primary float-right\" click.delegate=\"save()\">Save</button></div></div></template>";});;
define('odgo/pages/filewatcher',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', 'lodash', 'moment', 'aurelia-dialog', '../../data/go/data', '../dialogs/addLicense'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _aureliaDialog, _data, _addLicense) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Filewatcher = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var FWObject = function FWObject(description, inbound, processed, running, id, type) {
    _classCallCheck(this, FWObject);

    this.description = description;
    this.inboundPath = inbound;
    this.processedPath = processed;
    this.running = running;
    this.id = id;
    this.type = type;
  };

  var LogItem = function () {
    function LogItem(data) {
      _classCallCheck(this, LogItem);

      this.name = data.Data;
      this.type = data.Type;
      this.status = data.Status;
      this.confidence = data.Confidence;
      this.log = JSON.stringify(JSON.parse(data.JobLog), null, 2);
      this.displayLog = false;
      this.color = this.getColor("background", data.Confidence);
      this.textColor = this.getColor("text", data.Confidence);
      this.message = this.getDestinationFolder(data.JobLog);
    }

    LogItem.prototype.getDestinationFolder = function getDestinationFolder(jobLog) {
      var obj = JSON.parse(jobLog);
      var logMessage = _.find(obj.LogMessages, function (l) {
        return l.Message.indexOf('Moved to:') > -1;
      });
      return logMessage ? logMessage.Message : "";
    };

    LogItem.prototype.getColor = function getColor(colorType, confidence) {
      var tClass = "";
      if (confidence == 'High') {
        tClass = 'success';
      } else if (confidence == 'Medium') {
        tClass = 'warning';
      } else if (confidence == 'Low') {
        tClass = 'danger';
      } else {
        tClass = 'secondary';
      }
      if (confidence == null) {
        return colorType == 'background' ? 'table-' + tClass : 'text-dark';
      } else {
        return colorType == 'background' ? 'table-' + tClass : 'text-' + tClass;
      }
    };

    LogItem.prototype.view = function view() {
      this.displayLog = this.displayLog ? false : true;
    };

    return LogItem;
  }();

  var Filewatcher = exports.Filewatcher = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _aureliaDialog.DialogService, _data.Data), _dec(_class = (_class2 = function () {
    Filewatcher.prototype.filterDateChanged = function filterDateChanged(newVal, oldVal) {
      var self = this;
      self.getLog(self.filterDate, 1, self.home.selectedTenant.data.Id);
    };

    Filewatcher.prototype.logPageSizeChanged = function logPageSizeChanged(newVal, oldVal) {
      var self = this;
      self.logPageNumber = 1;
      self.getLog(self.filterDate, 1, self.home.selectedTenant.data.Id);
    };

    Filewatcher.prototype.createDescriptionChanged = function createDescriptionChanged(newVal, oldVal) {
      if (this.createDescription != null && this.createInboundPath != null && this.createProcessedPath != null && this.createDescription.length > 0 && this.createInboundPath.length > 0 && this.createProcessedPath.length > 0) {
        this.createDisabled = false;
      } else {
        this.createDisabled = true;
      }
    };

    Filewatcher.prototype.createInboundPathChanged = function createInboundPathChanged(newVal, oldVal) {
      if (this.createInboundPath != null && this.createInboundPath.length > 0 && this.selectedFilewatcherType != null) {
          this.createDisabled = false;
        } else {
        this.createDisabled = true;
      }
    };

    Filewatcher.prototype.createProcessedPathChanged = function createProcessedPathChanged(newVal, oldVal) {
      if (this.createDescription != null && this.createInboundPath != null && this.createProcessedPath != null && this.createDescription.length > 0 && this.createInboundPath.length > 0 && this.createProcessedPath.length > 0) {
        this.createDisabled = false;
      } else {
        this.createDisabled = true;
      }
    };

    _createClass(Filewatcher, [{
      key: 'filewatcherStatusButton',
      get: function get() {
        if (this.selectedFilewatcher) {
          return this.selectedFilewatcher.running ? "Stop" : "Start";
        }
      }
    }, {
      key: 'filewatcherStatus',
      get: function get() {
        if (this.selectedFilewatcher) {
          return this.selectedFilewatcher.running ? "Running" : "Stopped";
        }
      }
    }, {
      key: 'rowColor',
      get: function get() {
        if (this.selectedFilewatcher) {
          return this.selectedFilewatcher.running ? "table-success" : "table-secondary";
        }
      }
    }]);

    function Filewatcher(helper, http, dialogService, Data) {
      _classCallCheck(this, Filewatcher);

      this.home = null;
      this.logItems = [];
      this.filewatchers = [];
      this.selectedFilewatcher = null;
      this.selectedFilewatcherType = null;
      this.filewatcherTypeList = ['fax', 'scan'];

      _initDefineProp(this, 'createDescription', _descriptor, this);

      _initDefineProp(this, 'createInboundPath', _descriptor2, this);

      _initDefineProp(this, 'createProcessedPath', _descriptor3, this);

      this.createDisabled = true;

      _initDefineProp(this, 'filterDate', _descriptor4, this);

      _initDefineProp(this, 'datepicker', _descriptor5, this);

      this.logPageSizes = [25, 50, 100];

      _initDefineProp(this, 'logPageSize', _descriptor6, this);

      this.bodyHeight = 0;
      this.scrollHeight = 0;

      this.helper = helper;
      this.http = http;
      this.dialogService = dialogService;
      this.goData = Data;
    }

    Filewatcher.prototype.attached = function attached() {
      var testthis = "TEST";
      this.maxCardWidth = this.filewatchercard.clientWidth;
      var container = document.getElementById("odgoContainer");
      this.bodyHeight = container.clientHeight - 42 - 20;
    };

    Filewatcher.prototype.activate = function activate(model) {
      var self = this;
      self.home = model;

      self.filterDate = (0, _moment2.default)().format("MM-DD-YYYY");
      self.logPageSize = self.logPageSizes[0];

      var n = self.helper.createNoty("Loading filewatchers...", 30000);
      n.show();

      var fwUrl = 'filewatchers?tenantId=' + self.home.selectedTenant.data.Id;
      self.goData.getWithFaxUrl(fwUrl, function (res) {

        for (var i = 0; i < res.length; i++) {
          var aFw = new FWObject(res[i].Description, res[i].Path, res[i].ProcessPath, res[i].EnableRaisingEvents, res[i].Id, res[i].FilewatcherType);
          self.filewatchers.push(aFw);
          self.selectedFilewatcher = aFw;
        }

        self.helper.updateNoty(n, "Filewatchers loaded!!", "success", 3000);

        self.getLog(self.filterDate, self.home.selectedTenant.data.Id);
      });
    };

    Filewatcher.prototype.statusButtonClick = function statusButtonClick() {
      var self = this;
      switch (self.filewatcherStatusButton) {
        case 'Start':
          self.startService();
          break;

        case 'Stop':
          self.stopService();
          break;
      }
    };

    Filewatcher.prototype.startService = function startService() {
      var self = this;
      var url = 'inboundfaxfilewatcher/start?id=' + self.home.selectedTenant.data.Id;

      self.goData.postWithFaxUrlAndData(url, null, function (res) {
        if (res) {
          self.selectedFilewatcher.running = true;
        } else {}
      });
    };

    Filewatcher.prototype.stopService = function stopService() {
      var self = this;
      var url = 'inboundfaxfilewatcher/stop?id=' + self.home.selectedTenant.data.Id;

      self.goData.postWithFaxUrlAndData(url, null, function (res) {
        if (res) {
          self.selectedFilewatcher.running = false;
        } else {}
      });
    };

    Filewatcher.prototype.deleteService = function deleteService() {
      var self = this;
      var url = 'inboundfaxfilewatcher/delete?id=' + self.home.selectedTenant.data.Id;

      self.goData.deleteWithFaxUrl(url, function (res) {
        if (res) {
          self.selectedFilewatcher = null;
        } else {}
      });
    };

    Filewatcher.prototype.deleteButtonClick = function deleteButtonClick() {
      this.deleteService();
    };

    Filewatcher.prototype.newWatcher = function newWatcher() {
      this.selectedFilewatcher = null;
    };

    Filewatcher.prototype.createClick = function createClick() {
      var self = this;

      var n = self.helper.createNoty("Creating filewatcher...", 30000);
      n.show();

      self.goData.getWithFaxUrl('inboundfaxfilewatcher/new', function (filewatcher) {

        var tenant = self.home.selectedTenant.data;
        filewatcher.Description = self.selectedFilewatcherType;
        filewatcher.InboundPath = self.createInboundPath;
        filewatcher.ProcessedPath = self.createInboundPath;
        filewatcher.TenantIdFK = tenant.Id;
        filewatcher.Type = self.selectedFilewatcherType;

        self.goData.postWithFaxUrlAndData('inboundfaxfilewatcher/create', JSON.stringify(filewatcher), function (res) {

          if (res.Error != null) {
            self.helper.updateNoty(n, "Filewatcher failed: " + res.Error, "error", 3000);
          } else {
            self.helper.updateNoty(n, "Filewatcher created!!", "success", 3000);
          }

          if (res.Watcher) {
            self.selectedFilewatcher = new FWObject(res.Watcher.Description, res.Watcher.Path, res.Watcher.ProcessPath, res.Watcher.EnableRaisingEvents, res.Watcher.Id, self.selectedFilewatcherType);
          }
        });
      });
    };

    Filewatcher.prototype.getPagedLog = function getPagedLog(pageSize, pageNumber, date, tenantId) {
      var self = this;
      var url = 'jobqueue/getallpagedbydate?pagesize=' + pageSize + '&pageNumber=' + pageNumber + '&date=' + date + '&tenantfk=' + tenantId;
      self.goData.getWithFaxUrl(url, function (res) {
        self.logItems = [];
        for (var i = 0; i < res.length; i++) {
          self.logItems.push(new LogItem(res[i]));
        }
      });
    };

    Filewatcher.prototype.clearLog = function clearLog() {
      var self = this;
      var url = 'jobqueue/clear?tenantfk=' + self.home.selectedTenant.data.Id;
      self.goData.getWithFaxUrl(url, function (success) {
        if (success) {
          self.totalLogPages = 0;
          self.logPageNumber = 0;
          self.logItems = [];
        }
      });
    };

    Filewatcher.prototype.getLog = function getLog(date, pageNumber, tenantId) {
      var self = this;
      self.getTotalLogCountWithDate(date, tenantId, function (count) {
        if (count == 0) {
          self.totalLogPages = 0;
          return;
        } else if (count > self.logPageSize) {
          self.totalLogPages = Math.ceil(count / self.logPageSize);
        } else {
          self.totalLogPages = 1;
        }
        self.logPageNumber = pageNumber;

        self.getPagedLog(self.logPageSize, pageNumber, self.filterDate, self.home.selectedTenant.data.Id);
      });
    };

    Filewatcher.prototype.getTotalLogCountWithDate = function getTotalLogCountWithDate(date, tenantId, callback) {
      var self = this;
      var url = 'jobqueue/gettotalbydate?date=' + date + '&tenantfk=' + tenantId;
      self.goData.getWithFaxUrl(url, function (count) {
        callback(count);
      });
    };

    Filewatcher.prototype.pageClicked = function pageClicked(number) {
      var self = this;
      if (self.home.selectedTenant) {
        self.getLog(self.filterDate, number + 1, self.home.selectedTenant.data.Id);
      }
    };

    return Filewatcher;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'createDescription', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'createInboundPath', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'createProcessedPath', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, 'filterDate', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, 'datepicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, 'logPageSize', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!odgo/pages/filewatcher.html',[],function(){return "<template><style>.card-radius{border-top-left-radius:0;border-top-right-radius:0;border:1px solid #dee2e6}.table td,.table th{padding:.75rem;vertical-align:top;border-top:none}</style><div ref=\"filewatchercard\" class=\"card border-top-0 card-radius\" css=\"height: ${bodyHeight}px;\"><div class=\"card-body\" style=\"display:flex;flex-flow:column;justify-content:space-around\"><form if.bind=\"!selectedFilewatcher\"><div class=\"form-group\"><label>Type</label><div class=\"input-group\"><select class=\"form-control\" value.bind=\"selectedFilewatcherType\" required><option model.bind=\"null\">Select...</option><option repeat.for=\"v of filewatcherTypeList\" model.bind=\"v\"> ${v} </option></select></div></div><div class=\"form-group\"><label for=\"formGroupExampleInput\">Directory Path</label> <input type=\"text\" class=\"form-control\" id=\"formGroupExampleInput\" placeholder=\"path\\to\\watched\\files\" value.bind=\"createInboundPath\"> <small id=\"inboundHelp\" class=\"form-text text-muted\">Path must exist and have proper permissions.</small></div><button type=\"button\" class=\"btn btn-primary\" disabled.bind=\"createDisabled\" click.delegate=\"createClick()\">Create</button></form><div if.bind=\"selectedFilewatcher\"><label>Filewatcher</label><div class=\"input-group\"><select class=\"form-control\" value.bind=\"selectedFilewatcher\"><option model.bind=\"null\">Select...</option><option repeat.for=\"v of filewatchers\" model.bind=\"v\"> ${v.description} </option></select><div class=\"input-group-append\"><button class=\"btn btn-outline-primary\" type=\"button\" click.delegate=\"newWatcher()\"><i class=\"fa fa-plus mr-2 text-primary\"></i>New</button></div></div><table class=\"table\"><thead><tr><th scope=\"col\"></th><th scope=\"col\">Description</th><th scope=\"col\">Inbound</th><th scope=\"col\">Processed</th><th scope=\"col\">Status</th><th scope=\"col\"></th></tr></thead><tbody><tr class=\"${rowColor}\"><td scope=\"row\"><button type=\"button\" class=\"btn btn-light\" click.delegate=\"statusButtonClick()\">${filewatcherStatusButton}</button></td><td>${selectedFilewatcher.description}</td><td>${selectedFilewatcher.inboundPath}</td><td>${selectedFilewatcher.processedPath}</td><td>${filewatcherStatus}</td><td scope=\"row\"><button type=\"button\" class=\"btn btn-danger\" click.delegate=\"deleteButtonClick()\">Delete</button></td></tr></tbody></table></div><div class=\"row\"><div class=\"col-md-12\"><strong class=\"mr-2\">Log date</strong><abp-datetime-picker class=\"pr-2\" style=\"width:120px;display:inline-block\" icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"datepicker\" value.bind=\"filterDate\" options.bind=\"{ format: 'MM-DD-YYYY' }\"></abp-datetime-picker><strong class=\"mr-2\">Logs per page</strong> <select value.bind=\"logPageSize\" class=\"form-control mr-2\" style=\"display:inline-block;width:auto\"><option repeat.for=\"size of logPageSizes\" value.bind=\"size\">${size}</option></select><nav aria-label=\"Page navigation example\" class=\"d-inline-block\"><ul class=\"pagination\"><li repeat.for=\"page of totalLogPages\" class=\"page-item ${logPageNumber == (page + 1) ? 'active' : ''}\"><a class=\"page-link\" href=\"#\" click.delegate=\"pageClicked(page)\">${page + 1}</a></li></ul></nav><button type=\"button\" class=\"btn btn-danger mr-2 float-right\" click.delegate=\"clearLog()\">Clear Log</button></div></div><div style=\"overflow-y:auto;height:100%\"><template repeat.for=\"l of logItems\"><div class=\"d-flex align-items-center border-bottom\"><div class=\"mr-2 p-2\"><i class=\"fa fa-file-code-o\" aria-hidden=\"true\" click.delegate=\"l.view()\"></i></div><div class=\"mr-2 p-2\">${l.name}</div><div class=\"ml-auto mr-2 p-2 text-muted\">${l.message}</div><div class=\"${l.textColor} mr-2 p-2\"><strong>${l.confidence}</strong></div></div><pre if.bind=\"l.displayLog\" class=\"mb-2\" style=\"background-color:#f7f7f9\" css=\"max-width: ${maxCardWidth}px;\">${l.log}</pre></template></div></div></div></template>";});;
define('odgo/pages/license',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', 'lodash', 'moment', 'aurelia-dialog', '../../data/go/data', '../../go/popupHelper', '../dialogs/addLicense'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _aureliaDialog, _data, _popupHelper, _addLicense) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.License = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var LicenseObject = function () {
    function LicenseObject(data) {
      _classCallCheck(this, LicenseObject);

      this.data = data;
      this.licenseDisplay = this.getLicenseDisplay(data.License);
      this.showClaims = false;
      this.claims = null;
      this.expireDateString = 'N/A';
      this.expireDays = 0;
    }

    LicenseObject.prototype.getLicenseDisplay = function getLicenseDisplay(license) {
      if (license == null) {
        return 'License unclaimed';
      } else {
        return license.substring(0, 50) + "...";
      }
    };

    return LicenseObject;
  }();

  var License = exports.License = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _aureliaDialog.DialogService, _data.Data, _popupHelper.PopupHelper), _dec(_class = function () {
    function License(helper, http, dialogService, Data, PopupHelper) {
      _classCallCheck(this, License);

      this.home = null;
      this.licenses = [];
      this.licenseTypes = ['PRO', 'MID', 'NOREV'];
      this.bodyHeight = 0;

      this.helper = helper;
      this.http = http;
      this.dialogService = dialogService;
      this.goData = Data;
      this.popupHelper = PopupHelper;
    }

    License.prototype.attached = function attached() {
      var container = document.getElementById("odgoContainer");
      this.bodyHeight = container.clientHeight - 42 - 20;
    };

    License.prototype.activate = function activate(model) {
      var self = this;
      self.home = model;
      var licUrl = 'license?tenantId=' + self.home.selectedTenant.tenantId;
      self.goData.getWithUrl(licUrl, function (res) {
        for (var i = 0; i < res.length; i++) {
          self.licenses.push(new LicenseObject(res[i]));
        }
      });
    };

    License.prototype.saveLicense = function saveLicense(data) {
      var self = this;
      self.goData.getWithUrl('license', function (lic) {
        lic.LicenseType = data.licenseType;
        lic.ExpireDays = data.expireDays;

        self.goData.postWithUrlAndData('license', JSON.stringify(lic), function (res) {

          if (res) {
            self.licenses.push(new LicenseObject(res));
          }
        });
      });
    };

    License.prototype.openLicensePop = function openLicensePop(callback) {
      var self = this;
      self.dialogService.open({ viewModel: _addLicense.AddLicense, model: self }).whenClosed(function (response) {
        if (!response.wasCancelled) {
          callback(response.output);
        }
      });
    };

    License.prototype.addLicenseClick = function addLicenseClick() {
      var self = this;
      self.openLicensePop(function (res) {
        self.saveLicense(res);
      });
    };

    License.prototype.deleteClicked = function deleteClicked(license) {
      var self = this;
      var message = 'Do you wish to delete this license?';
      var header = 'Delete License!';
      var options = ['YES', 'NO'];
      self.popupHelper.openGenericMessagePop(message, header, options, false, function (res) {
        if (res.result == 'NO') {
          return;
        } else {
          self.goData.deleteWithUrl('license?id=' + license.data.Id, function (res) {
            if (res == true) {
              var indexToRemove = _.findIndex(self.licenses, function (l) {
                return l.data.Id == license.data.Id;
              });
              self.licenses.splice(indexToRemove, 1);

              var userId = self.getUserIdFromToken(license.data.License);

              self.goData.getWithUrl('users/' + userId, function (res) {
                res.License = null;
                self.goData.putWithUrlAndData('users', res, function (updated) {});
              });
            } else {}
          });
        }
      });
    };

    License.prototype.getUserIdFromToken = function getUserIdFromToken(token) {
      var splitToken = token.split('.');
      var payloadString = splitToken[1];
      var payload = atob(payloadString);

      var t = JSON.parse(payload);
      return t.UserID;
    };

    License.prototype.showKey = function showKey(license) {
      var self = this;

      if (license.showClaims) {
        license.showClaims = false;
        return;
      } else if (license.claims != null) {
        license.showClaims = true;
        return;
      }

      self.goData.getWithUrl('license/claims?licenseId=' + license.data.Id, function (res) {
        if (res) {
          license.showClaims = true;
          license.claims = res;

          if (res.hasOwnProperty('ExpireDays')) {
            license.expireDays = res.ExpireDays;
          }
          if (res.hasOwnProperty('ExpireDate')) {
            var date = _moment2.default.unix(res.ExpireDate);
            license.expireDateString = date.format("MM/DD/YYYY");
          }
        }
      });
    };

    return License;
  }()) || _class);
});;
define('text!odgo/pages/license.html',[],function(){return "<template><style>.card-radius{border-top-left-radius:0;border-top-right-radius:0;border:1px solid #dee2e6}</style><div class=\"card border-top-0 card-radius\" css=\"height: ${bodyHeight}px;\" style=\"overflow-y:auto\"><div class=\"card-body pt-0\"><div class=\"d-flex align-items-center py-2\"><i class=\"fa fa-plus fa-2x ml-auto text-primary\" aria-hidden=\"true\" click.delegate=\"addLicenseClick()\"></i></div><table class=\"table\"><thead><tr><th scope=\"col\"></th><th scope=\"col\">Type</th><th scope=\"col\">License</th><th scope=\"col\"></th></tr></thead><tbody><template repeat.for=\"l of licenses\"><tr><th scope=\"row\"><button if.bind=\"l.data.License != null\" type=\"button\" class=\"btn btn-outline-primary\" click.delegate=\"showKey(l)\">Details <i class=\"fa fa-key\" aria-hidden=\"true\"></i></button></th><td>${l.data.LicenseType}</td><td>${l.licenseDisplay}</td><td><button type=\"button\" class=\"btn btn-danger\" click.delegate=\"deleteClicked(l)\">Delete <i class=\"fa fa-trash\" aria-hidden=\"true\"></i></button></td></tr><tr if.bind=\"l.showClaims\"><td colspan=\"4\"><div class=\"card w-100 mb-2\"><div class=\"card-body\"><p class=\"card-text\">${l.claims.FirstName} ${l.claims.LastName} </p><p class=\"card-text\">License Type : ${l.claims.LicenseType} </p><p class=\"card-text\">TenantId : ${l.claims.TenantId} </p><p class=\"card-text\">UserId : ${l.claims.UserID} </p><p class=\"card-text\">Audience : ${l.claims.aud} </p><p class=\"card-text\">Expiration : ${l.expireDateString} </p></div></div></td></tr></template></tbody></table></div></div></template>";});;
define('odgo/pages/portalUsers',['exports', '../../helpers/helper', '../../helpers/http', 'aurelia-framework', 'lodash', 'moment', 'aurelia-dialog', '../../data/go/data', '../../go/popupHelper', '../dialogs/updateUser'], function (exports, _helper, _http, _aureliaFramework, _lodash, _moment, _aureliaDialog, _data, _popupHelper, _updateUser) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PortalUsers = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var PortalUsers = exports.PortalUsers = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _aureliaDialog.DialogService, _data.Data, _popupHelper.PopupHelper), _dec(_class = function () {
    function PortalUsers(helper, http, dialogService, Data, PopupHelper) {
      _classCallCheck(this, PortalUsers);

      this.home = null;
      this.users = [];
      this.searchTxt = null;
      this.foundUser = null;

      this.helper = helper;
      this.http = http;
      this.dialogService = dialogService;
      this.goData = Data;
      this.popupHelper = PopupHelper;
    }

    PortalUsers.prototype.attached = function attached() {};

    PortalUsers.prototype.activate = function activate(model) {
      var self = this;
      self.home = model;
    };

    PortalUsers.prototype.searchUser = function searchUser() {
      var self = this;

      var nameSplit = self.searchTxt.split(',');
      var firstName = null;
      var lastName = null;
      var url = 'portaluser/search?tid=' + self.home.selectedTenant.tenantId + '&lastname=';
      if (nameSplit.length == 2) {
        lastName = nameSplit[0].trim();
        firstName = nameSplit[1].trim();
        url += lastName + '&firstname=' + firstName;
      } else if (nameSplit.length == 1) {
        lastName = nameSplit[0].trim();
        url += lastName + '&firstname=';
      } else {
        return;
      }

      self.goData.getWithUrl(url, function (users) {

        self.users = users;
      });
    };

    PortalUsers.prototype.updateUser = function updateUser(data) {
      var self = this;
      self.goData.putWithUrlAndData('portaluser', data, function (usr) {

        var res = usr;

        var usrIndex = _.findIndex(self.users, function (u) {
          return u.User.ID == usr.ID;
        });
        self.users[usrIndex].User.Verified = usr.Verified;
      });
    };

    PortalUsers.prototype.openUserPop = function openUserPop(user) {
      var self = this;
      self.dialogService.open({ viewModel: _updateUser.UpdateUser, model: user }).whenClosed(function (response) {
        if (!response.wasCancelled) {
          var userObj = {
            'Password': response.output.newPassword,
            'Email': user.User.Email,
            'Id': user.User.ID,
            'Verify': response.output.verified != null ? response.output.verified : user.User.Verified
          };
          self.updateUser(userObj);
        }
      });
    };

    return PortalUsers;
  }()) || _class);
});;
define('text!odgo/pages/portalUsers.html',[],function(){return "<template><style>.card-radius{border-top-left-radius:0;border-top-right-radius:0;border:1px solid #dee2e6}</style><div class=\"card border-top-0 card-radius\"><div class=\"card-body\"><div class=\"input-group mb-3\"><input type=\"text\" class=\"form-control\" value.bind=\"searchTxt\" placeholder=\"lastname, firstname\" aria-label=\"Portal username\" aria-describedby=\"basic-addon2\"><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary\" type=\"button\" click.delegate=\"searchUser()\">Search</button></div></div><table class=\"table\"><thead><tr><th scope=\"col\"></th><th scope=\"col\">LastName</th><th scope=\"col\">FirstName</th><th scope=\"col\">PatientID</th><th scope=\"col\">Email</th></tr></thead><tbody><template repeat.for=\"u of users\"><tr><th scope=\"row\"><button type=\"button\" class=\"btn btn-outline-primary\" click.delegate=\"openUserPop(u)\">Edit</button></th><td>${u.NameLast}</td><td>${u.NameFirst}</td><td>${u.User.PatientID}</td><td>${u.User.Email}</td><td><i class=\"fa ${ u.User.Verified ? 'fa-check-circle' : 'fa-times-circle'} ${ u.User.Verified ? 'text-success' : 'text-danger'} fa-2x\" aria-hidden=\"true\"></i></td></tr></template></tbody></table></div></div></template>";});;
define('pages/index',['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var Index = exports.Index = function () {
		function Index() {
			_classCallCheck(this, Index);

			this.message = 'WHAT UP FROM INDEX!!!';
		}

		Index.prototype.configureRouter = function configureRouter(config, router) {
			config.title = 'Phoenix Data Grid';
			config.map([{ route: 'patient-info', name: 'patient-info', moduleId: 'pages/patient-info', nav: true, title: 'Patient Info' }, { route: 'patient-info-editor', name: 'patient-info-editor', moduleId: 'pages/patient-info-editor', nav: true, title: 'Patient Info Editor' }]);
			this.router = router;
		};

		return Index;
	}();
});;
define('text!pages/index.html',[],function(){return "<template><div class=\"container-fluid\" style=\"padding:0\"><router-view></router-view></div></template>";});;
define('pages/patient-info',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'aurelia-templating-resources', '../data/patient-info/options'], function (exports, _helper, _http, _aureliaFramework, _aureliaTemplatingResources, _options) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.PatientInfo = undefined;

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var _dec, _class;

	var PatientInfo = exports.PatientInfo = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _aureliaTemplatingResources.BindingSignaler, _options.PatientInfoOptions), _dec(_class = function () {
		function PatientInfo(helper, http, bindingSignaler, patientInfoOptions) {
			_classCallCheck(this, PatientInfo);

			this.message = 'WHAT UP FROM PATIENT INFO!';
			this.helper = helper;
			this.http = http;
			this.patientId = '';
			this.patient = {};
			this.providerId = null;
			this.employer = {};
			this.paymentGroups = [];
			this.options = patientInfoOptions.data;
			this.signaler = bindingSignaler;
			this.paymentInfo = {};
		}

		PatientInfo.prototype.refreshPage = function refreshPage() {
			console.log('REFRESH PAGE');
			this.signaler.signal('update-options');
		};

		PatientInfo.prototype.shouldShowPaymentGroups = function shouldShowPaymentGroups(options) {
			var paymentGroupsOption = null;
			for (var i = 0; i < options.length; i++) {
				var currentOption = options[i];
				console.log('CURRENT OPTION:', currentOption);
				if (currentOption.name === 'paymentGroups') {
					paymentGroupsOption = currentOption;
					break;
				}
			}
			var show = paymentGroupsOption.showThis;
			return show;
		};

		PatientInfo.prototype.shouldShowOption = function shouldShowOption(option) {
			if (option.showName === false) {
				return false;
			}
			var show = option.showThis;
			var currentData = self[option.entity];
			if (option.columns && option.columns.length > 0) {
				for (var i = 0; i < option.columns.length; i++) {
					var column = option.columns[i];
					var fullPath = column.split('.');
				}
			}
			return show;
		};

		PatientInfo.prototype.getFormattedValue = function getFormattedValue(option) {
			var self = this;
			var currentData = self[option.entity];

			var blalue = null;

			for (var i = 0; i < option.columns.length; i++) {
				var column = option.columns[i];
				var fullPath = column.split('.');
				var value = self.getValueRecurse(fullPath, currentData);
				if (blalue !== null) {
					blalue = blalue + ' ';
				} else {
					blalue = '';
				}
				blalue += value;
			}
			if (option.transform) {
				blalue = option.transform(blalue);
			}
			if (blalue === '' || blalue === null || blalue === 'null') {
				return null;
			}
			return blalue;
		};

		PatientInfo.prototype.getValueRecurse = function getValueRecurse(fullPath, data) {
			var self = this;
			var currentPath = fullPath.splice(0, 1);
			if (data && data.hasOwnProperty(currentPath)) {
				if (fullPath.length > 0) {
					return this.getValueRecurse(fullPath, data[currentPath]);
				}

				return data[currentPath];
			}

			return null;
		};

		PatientInfo.prototype.getEmployer = function getEmployer(employerId) {
			var self = this;
			var url = self.helper.getApiUrl('employer?id=' + employerId);
			self.http.get(url, function (data) {
				self.employer = data;
				self.refreshPage();
			});
		};

		PatientInfo.prototype.getPatient = function getPatient() {
			var self = this;
			var url = self.helper.getApiUrl('patients/' + self.patientId);
			self.http.get(url, function (data) {
				console.log('PATIENT', data);

				self.patient = data;
				self.refreshPage();
				self.getEmployer(data.EmployerID);
			});
			self.loadAmounts(false);
		};

		PatientInfo.prototype.loadAmounts = function loadAmounts(demo) {
			var self = this;

			if (demo === true) {
				self.paymentGroups = [{ name: 'Co Pay', amount: null }, { name: 'Balance', amount: null }];
				var min = 25000;
				var max = 50000;
				for (var i = 0; i < self.paymentGroups.length; i++) {
					var group = self.paymentGroups[i];
					group.amount = Math.floor(Math.random() * (max - min) + min) / 100;
				}
				return;
			} else {
				self.getPaymentInfo();
			}
		};

		PatientInfo.prototype.getPaymentInfo = function getPaymentInfo() {
			var self = this;
			var patientId = self.patientId;
			var url = self.helper.getApiUrl('practicemanagement?patientId=' + patientId);
			console.log('PRACTICE MANAGEMENT URL', url);
			self.http.get(url, function (data) {
				console.log('PRACTICE MANAGEMENT DATA', data);
				console.log('FOR PATIENTID', patientId);
				self.paymentInfo = data;

				if (data.kiosk_copay_formatted && data.kiosk_copay_formatted > 0) {
					var kioskCopayGroup = {
						name: 'Kiosk Copay',
						amount: data.kiosk_copay_formatted,
						payThis: true
					};
					self.paymentGroups.push(kioskCopayGroup);
				}
				if (data.balance.patient_balance && data.balance.patient_balance > 0) {
					var balanceGroup = {
						name: 'Patient Balance',
						amount: data.balance.patient_balance,
						payThis: true
					};
					self.paymentGroups.push(balanceGroup);
				}
				if (data.insurance_profile && data.insurance_profile.primary && data.insurance_profile.primary.copay && data.insurance_profile.primary.copay > 0) {
					var insuranceCopayGroup = {
						name: 'Insurance Copay',
						amount: data.insurance_profile.primary.copay,
						payThis: true
					};
					self.paymentGroups.push(insuranceCopayGroup);
				}
			});
		};

		PatientInfo.prototype.setOptions = function setOptions(configurationObject) {
			var self = this;
			try {
				var parsedData = JSON.parse(configurationObject.JsonData);

				self.options = parsedData;
			} catch (e) {
				console.log(e);
			}
		};

		PatientInfo.prototype.getConfiguration = function getConfiguration() {
			var self = this;
			var providerIdString = self.providerId ? '&providerId=' + self.providerId : '';
			var resourceUrl = 'configuration/?type=patient-info' + providerIdString;
			var url = self.helper.getApiUrl(resourceUrl);
			self.http.get(url, function (data) {
				if (data != null) {
					self.setOptions(data);
				}
				self.getPatient();
			});
		};

		PatientInfo.prototype.activate = function activate(params, arg2) {
			var self = this;
			if (params.hasOwnProperty("jwt")) {
				self.helper.processToken(params.jwt);
			}
			console.log('PARAMS', params);
			self.patientId = params.patientId;
			self.providerId = params.providerId;

			self.getPatient();
		};

		return PatientInfo;
	}()) || _class);
});;
define('pages/patient-info-editor',['exports', '../helpers/helper', '../helpers/http', 'aurelia-templating-resources', 'aurelia-framework', '../data/patient-info/options'], function (exports, _helper, _http, _aureliaTemplatingResources, _aureliaFramework, _options) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.PatientInfoEditor = undefined;

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var _dec, _class;

	var PatientInfoEditor = exports.PatientInfoEditor = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _aureliaTemplatingResources.BindingSignaler, _options.PatientInfoOptions), _dec(_class = function () {
		function PatientInfoEditor(helper, http, signaler, patientInfoOptions) {
			_classCallCheck(this, PatientInfoEditor);

			this.helper = helper;
			this.http = http;
			this.signaler = signaler;
			this.options = patientInfoOptions.data;
			this.providerId = null;
		}

		PatientInfoEditor.prototype.save = function save() {
			var self = this;
			var optionsString = JSON.stringify(self.options);
			var data = {
				ProviderId: self.providerId,
				Type: 'patient-info',
				JsonData: optionsString
			};
			console.log('SAVE', data);
			var url = self.helper.getApiUrl('configuration');
			self.http.post(url, data, function (returnData) {
				console.log('SAVED CONFIGURATION:', returnData);
				if (returnData != null) {
					self.setOptions(returnData);
				}
			});
		};

		PatientInfoEditor.prototype.checkChanged = function checkChanged() {
			var self = this;
			console.log('CHECK CHANGED', option);
		};

		PatientInfoEditor.prototype.getKey = function getKey(object) {
			var keyNames = Object.keys(object);
			console.log('KEY NAMES:', keyNames);
		};

		PatientInfoEditor.prototype.setOptions = function setOptions(configurationObject) {
			var self = this;
			try {
				var parsedData = JSON.parse(configurationObject.JsonData);
				self.options = parsedData.data;
			} catch (e) {
				console.log(e);
			}
		};

		PatientInfoEditor.prototype.getConfiguration = function getConfiguration() {
			var self = this;
			var providerIdString = self.providerId ? '&providerId=' + self.providerId : '';
			var resourceUrl = 'configuration/?type=patient-info' + providerIdString;
			var url = self.helper.getApiUrl(resourceUrl);
			self.http.get(url, function (data) {
				console.log('CONFIGURATION:', data);
				if (data != null) {
					self.setOptions(data);
				}
			});
		};

		PatientInfoEditor.prototype.activate = function activate(params, arg2) {
			var self = this;
			if (params.hasOwnProperty("jwt")) {
				self.helper.processToken(params.jwt);
			}
			if (params.hasOwnProperty("providerId")) {
				self.providerId = params.providerId;
			}
			self.getConfiguration();
		};

		PatientInfoEditor.prototype.attached = function attached() {
			var self = this;
		};

		return PatientInfoEditor;
	}()) || _class);
});;
define('text!pages/patient-info-editor.html',[],function(){return "<template><require from=\"../value-converters/keys\"></require><div class=\"row\" style=\"padding:10px\"><div class=\"col\" change.delegate=\"save()\"><div class=\"row\" repeat.for=\"option of options\"><div class=\"col\"><div class=\"form-group\"><div class=\"form-check\"><input checked.bind=\"option.showThis\" class=\"form-check-input\" type=\"checkbox\"> <label class=\"form-check-label\"> ${option.friendlyName} </label></div></div></div></div></div></div></template>";});;
define('text!pages/patient-info.html',[],function(){return "<template><div class=\"row\" style=\"padding:10px\"><div class=\"col-12\"><div class=\"row\" repeat.for=\"option of options\"><template if.bind=\"option.showName && option.showThis\"><input type=\"hidden\" value.bind=\"$root\"><div class=\"col-12\"><b>${option.friendlyName}:</b> <span if.bind=\"shouldShowOption(option) & signal: 'update-options'\">${getFormattedValue(option) & signal: 'update-options'}</span></div></template></div><template if.bind=\"shouldShowPaymentGroups(options) === true\"><template repeat.for=\"group of paymentGroups\"><div class=\"row\"><div class=\"col-12\"><b>${group.name}:</b> ${group.amount} </div></div></template></template><template if.bind=\"paymentInfo && paymentInfo.insurance_profile && paymentInfo.insurance_profile.primary && paymentInfo.insurance_profile.primary.product_name\"><div class=\"row\"><div class=\"col-12\"><b>Product Name:</b> ${paymentInfo.insurance_profile.primary.product_name} </div></div></template><template if.bind=\"paymentInfo && paymentInfo.insurance_profile && paymentInfo.insurance_profile.primary && paymentInfo.insurance_profile.primary.insurance_name\"><div class=\"row\"><div class=\"col-12\"><b>Insurance Name:</b> ${paymentInfo.insurance_profile.primary.insurance_name} </div></div></template></div></div></template>";});;
define('phxCheckinDashboard/data',['exports', 'moment', 'lodash', '../helpers/helper', '../helpers/http', 'aurelia-framework'], function (exports, _moment, _lodash, _helper, _http, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Data = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Column = function Column(name, visible, index, id, userId) {
    _classCallCheck(this, Column);

    this.Name = name;
    this.Visible = visible;
    this.ColumnIndex = index;
    this.Id = id != 0 ? id : 0;
    this.UserId = userId;
  };

  var Row = function () {
    function Row() {
      _classCallCheck(this, Row);

      this.cells = [];
      this.checkinData;
      this.checkinTimerInterval;
      this.selected = false;
    }

    Row.prototype.AddCell = function AddCell(c) {
      this.cells.push(c);
    };

    Row.prototype.startCheckinTimer = function startCheckinTimer() {
      var self = this;
      self.checkinTimerInterval = setInterval(function () {
        if (self.checkinData.CheckinStartTime == null) {
          self.stopCheckinTimer();
          return;
        }

        var timeDiff = self.getCheckinTimeDuration(self.checkinData.CheckinStartTime, self.checkinData.CheckinEndTime);

        var checkinTimeCell = self.getCellByName('Progress');

        checkinTimeCell.value = timeDiff.formattedTime;

        if (timeDiff.duration.hours() > 0 || timeDiff.duration.minutes() > 12) {
          var statusCell = self.getCellByName('Status');
          statusCell.image = 'fa fa-exclamation-triangle';
          statusCell.cssStyle = 'red';
        }
      }, 1000);
    };

    Row.prototype.getCheckinTimeDuration = function getCheckinTimeDuration(startTime, endTime) {
      var now = endTime == null ? (0, _moment2.default)().local() : (0, _moment2.default)(endTime).local();
      var timeDiff = (0, _moment2.default)(startTime).local();
      var duration = _moment2.default.duration(now.diff(timeDiff));
      var final = (0, _moment2.default)().set({ 'hour': duration.hours(), 'minute': duration.minutes(), 'second': duration.seconds() });

      return {
        formattedTime: duration.hours() > 0 ? final.format("hh:mm:ss") : final.format("mm:ss"),
        duration: duration
      };
    };

    Row.prototype.stopCheckinTimer = function stopCheckinTimer() {
      clearInterval(this.checkinTimerInterval);
    };

    Row.prototype.getCellByName = function getCellByName(name) {
      return _.find(this.cells, ['name', name]);
    };

    Row.prototype.setStatus = function setStatus(status) {
      var cell = this.getCellByName('Status');
      if (status.toUpperCase() == 'READY') {
        cell.image = 'fa fa-check fa-lg';
        cell.cssStyle = 'green';

        if (this.checkinTimerInterval) {
          this.stopCheckinTimer();
        }
      } else if (status.toUpperCase() == 'KIOSK') {
        cell.image = 'fa fa-tablet fa-lg';
        cell.cssStyle = 'blue';
      } else if (status.toUpperCase() == 'PENDING') {
        cell.image = 'fa fa-ban fa-lg';
        cell.cssStyle = 'orange';
      } else {
        cell.image = 'fa fa-ban fa-lg';
        cell.cssStyle = 'orange';
      }
    };

    return Row;
  }();

  var Cell = function Cell(name, value) {
    _classCallCheck(this, Cell);

    this.value = value;
    this.cssStyle;
    this.visible = true;
    this.image;
    this.name = name;
  };

  var Provider = function Provider(name, id) {
    _classCallCheck(this, Provider);

    this.name = name;
    this.id = id;
    this.selected = false;
  };

  var CheckinData = function CheckinData(date, time, patient, status) {
    _classCallCheck(this, CheckinData);

    this.Date = date;
    this.Time = time;
    this.Patient = patient;
    this.Provider;
    this.Status = status;
    this.CheckinStartTime;
  };

  var Data = exports.Data = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http), _dec(_class = function () {
    function Data(helper, http) {
      _classCallCheck(this, Data);

      this.providers = [];

      this.helper = helper;
      this.http = http;
    }

    Data.prototype.updateScheduleStatus = function updateScheduleStatus(s, row) {

      var self = this;
      row.setStatus(s.Status);

      var getUrl = 'schedule/' + s.ScheduleID;
      self.http.get(self.helper.getApiUrl(getUrl), function (sched) {

        var url = 'schedule';
        var obj = {
          "PatientID": sched.PatientID,
          "ScheduleID": sched.ScheduleID,
          "Status": sched.Status,
          "StatusKiosk": s.Status,
          "CheckinEndTime": (0, _moment2.default)().format("MM-DD-YYYY hh:mm:ss a"),
          "Time": sched.Time,
          "Date": sched.Date,
          "Patient_Name": sched.Patient_Name,
          "Reason_for_Visit": sched.Reason_for_Visit,
          "Pod": sched.Pod,
          "Room": sched.Room,
          "ProviderID": sched.ProviderID,
          "Type": sched.Type,
          "UserID": sched.UserID,
          "StatusCache": sched.StatusCache,
          "HL7ID": sched.HL7ID,
          "PatientLocation": sched.PatientLocation,
          "GroupID": sched.GroupID,
          "EmailSent": sched.EmailSent,
          "HxComplete": sched.HxComplete,
          "CheckinStartTime": sched.CheckinStartTime
        };

        self.http.put(self.helper.getApiUrl(url), obj, function (res) {}, function (err) {

          var e = err;
        });
      });
    };

    Data.prototype.updateUserColumns = function updateUserColumns(cols, callback) {

      var url = "checkin";
      var tCols = {
        "Columns": []
      };
      for (var i = 0; i < cols.length; i++) {
        var aCol = cols[i];
        var c = {
          "Name": aCol.Name,
          "Visible": aCol.Visible,
          "ColumnIndex": aCol.ColumnIndex,
          "Id": aCol.Id,
          "UserId": aCol.UserId
        };
        tCols.Columns.push(c);
      }

      this.http.post(this.helper.getApiUrl(url), tCols, function (res) {
        callback(res);
      }, function (err) {

        var e = err;
      });
    };

    Data.prototype.getUserColumns = function getUserColumns(userId, callback) {
      var url = "checkin/columns/user/" + userId;
      this.http.get(this.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.getCheckin = function getCheckin(date, callback) {
      var self = this;
      var url = "checkin/date/" + date;

      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.getProviders = function getProviders(date, callback) {
      var self = this;
      self.providers = [];
      var url = "providers?date=" + date;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        for (var i = 0; i < json.length; i++) {
          var p = new Provider(json[i].ProviderEntity, json[i].ProviderID);
          self.providers.push(p);
        }
        callback(self.providers);
      });
    };

    Data.prototype.createRow = function createRow(columns, rowData) {

      var insProviders = ['BCBS', 'AETNA', 'Texas Health', 'Cigna'];
      var insIndex = Math.floor(Math.random() * insProviders.length);
      var insurance = insProviders[insIndex];

      var copays = ['$40.00', '$45.00', '$50.00', '$55.00', '$60.00', '$65.00', '$70.00', '$75.00', '$80.00'];
      var balances = ['$240.00', '$345.00', '$500.00', '$555.00', '$1000.00', '$400.00', '$650.00', '$450.00', '$1200.00', '$2000.00'];
      var payments = ['1', '2', '3', '4', '5'];

      var runCheckinTimer = false;

      var row = new Row();
      row.checkinData = rowData;

      var cells = [];
      for (var i = 0; i < columns.length; i++) {
        var aCol = columns[i];

        var cell = null;
        if (aCol.Name == "Name") {
          var patientName = rowData.Patient.NameLast + "," + rowData.Patient.NameFirst;
          cell = new Cell(aCol.Name, patientName);
        } else if (aCol.Name == "Date") {
          var tDate = this.helper.getISODateToFormat(rowData.Date, "MM/DD/YY");
          cell = new Cell(aCol.Name, tDate);
        } else if (aCol.Name == "Time") {
          var tTime = this.helper.getISODateToFormat(rowData.Time, 'h:mm a');
          cell = new Cell(aCol.Name, tTime);
        } else if (aCol.Name == "Provider") {
          var pro = _.find(this.providers, ['id', rowData.Provider.ProviderID]);
          cell = new Cell(aCol.Name, pro.name);
        } else if (aCol.Name == "Status") {
          cell = new Cell(aCol.Name, null);
          if (rowData.Status.toUpperCase() == 'READY') {
            cell.image = 'fa fa-check fa-lg';
            cell.cssStyle = 'green';
          } else if (rowData.Status.toUpperCase() == 'READYPORTAL') {
            cell.image = 'fa fa-check fa-lg';
            cell.cssStyle = 'blue';
          } else if (rowData.Status.toUpperCase() == 'KIOSK') {
            cell.image = 'fa fa-tablet fa-lg';
            cell.cssStyle = 'blue';
            runCheckinTimer = true;
          } else if (rowData.Status.toUpperCase() == 'PENDING') {
            cell.image = 'fa fa-ban fa-lg';
            cell.cssStyle = 'orange';
          } else {
            cell.image = 'fa fa-ban fa-lg';
            cell.cssStyle = 'orange';
          }
        } else if (aCol.Name == "Insurance") {
          cell = new Cell(aCol.Name, rowData.Insurance != null ? rowData.Insurance.Name : '');
        } else if (aCol.Name == "Copay") {
          cell = new Cell(aCol.Name, "$" + rowData.Copay);
        } else if (aCol.Name == "Balance") {
          cell = new Cell(aCol.Name, "$" + rowData.Balance);
        } else if (aCol.Name == "DOB") {
          cell = new Cell(aCol.Name, rowData.Patient.DOB);
        } else if (aCol.Name == "Age") {
          var now = (0, _moment2.default)();
          var age = now.diff(rowData.Patient.DOB, 'years');
          cell = new Cell(aCol.Name, age);
        } else if (aCol.Name == "Progress") {
          var progressTime = "";
          if (rowData.CheckinStartTime != null && rowData.CheckinEndTime != null) {
            progressTime = row.getCheckinTimeDuration(rowData.CheckinStartTime, rowData.CheckinEndTime);
          }
          cell = new Cell(aCol.Name, progressTime.formattedTime);
        } else if (aCol.Name == "Payments") {
          cell = new Cell(aCol.Name, "$" + rowData.Payments);
        }

        if (cell != null) {
          cell.visible = aCol.Visible;
          row.AddCell(cell);
        }
      }

      if (runCheckinTimer) row.startCheckinTimer();

      return row;
    };

    Data.prototype.getColumns = function getColumns(userId, callback) {

      var self = this;

      self.getUserColumns(userId, function (res) {

        var cols = [];

        if (res.length > 0) {
          cols = res;
        } else {
          var col1 = new Column("Name", true, 2, 0, userId);
          var col2 = new Column("Date", true, 1, 0, userId);
          var col3 = new Column("Time", true, 0, 0, userId);
          var col4 = new Column("Provider", true, 3, 0, userId);
          var col5 = new Column("Status", true, 4, 0, userId);
          var col6 = new Column("Insurance", false, 5, 0, userId);
          var col7 = new Column("Copay", false, 6, 0, userId);
          var col8 = new Column("Balance", false, 7, 0, userId);
          var col9 = new Column("DOB", false, 8, 0, userId);
          var col10 = new Column("Age", false, 9, 0, userId);
          var col11 = new Column("Progress", true, 10, 0, userId);
          var col12 = new Column("Payments", true, 11, 0, userId);
          cols.push(col1);
          cols.push(col2);
          cols.push(col3);
          cols.push(col4);
          cols.push(col5);
          cols.push(col6);
          cols.push(col7);
          cols.push(col8);
          cols.push(col9);
          cols.push(col10);
          cols.push(col11);
          cols.push(col12);
        }

        cols = _.orderBy(cols, ['ColumnIndex'], ['asc']);
        callback(cols);
      });
    };

    return Data;
  }()) || _class);
});;
define('phxCheckinDashboard/home',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', './data', 'lodash', 'moment'], function (exports, _helper, _http, _aureliaFramework, _data, _lodash, _moment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Home = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor;

  var Home = exports.Home = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data), _dec(_class = (_class2 = function () {
    function Home(helper, http, Data) {
      _classCallCheck(this, Home);

      this.columns = [];
      this.rows = [];
      this.filteredRows = [];
      this.sidebarVisible = false;
      this.isDragging = false;
      this.itemToDrag = null;
      this.selectedProvider = null;
      this.providers = [];

      _initDefineProp(this, 'datepicker', _descriptor, this);

      this.nearestRowIndex = 0;
      this.dropdownMaxHeight = 200;
      this.dialogController = null;
      this.displayCloseButton = false;

      this.helper = helper;
      this.http = http;
      this.data = Data;
    }

    Home.prototype.closeWithDialog = function closeWithDialog() {
      this.dialogController.cancel();
    };

    Home.prototype.toggleSidebar = function toggleSidebar() {
      this.sidebarVisible = this.sidebarVisible ? false : true;
    };

    Home.prototype.drag = function drag(ev) {
      ev.dataTransfer.setData("text", ev.target.id);
    };

    Home.prototype.drop = function drop(i, ev) {

      var self = this;
      this.isDragging = false;
      ev.preventDefault();

      var dropIndex = i.c.ColumnIndex;

      var dragIndex = this.itemToDrag.ColumnIndex;

      var tItmAr = this.columns.splice(dragIndex, 1);
      var tItm = tItmAr[0];

      this.columns.splice(dropIndex, 0, tItm);

      for (var i = 0; i < this.columns.length; i++) {
        var c = this.columns[i];
        c.ColumnIndex = i;
      }

      var tCols = _.orderBy(this.columns, ['ColumnIndex'], ['asc']);
      this.columns = tCols;

      for (var r = 0; r < this.rows.length; r++) {
        var row = this.rows[r];

        var cellAr = row.cells.splice(dragIndex, 1);
        var cellToMove = cellAr[0];
        row.cells.splice(dropIndex, 0, cellToMove);
      }

      this.itemToDrag = null;

      this.data.updateUserColumns(this.columns, function (res) {
        self.columns = res;

        self.gridColumnCss = self.calculateGridColumnCss(res);
      });
    };

    Home.prototype.calculateGridColumnCss = function calculateGridColumnCss(cols) {
      var css = '';
      for (var i = 0; i < cols.length; i++) {
        if (cols[i].Visible) {
          css += '1fr ';
        }
      }
      return css.trim();
    };

    Home.prototype.allowDrop = function allowDrop(i, ev) {

      if (!this.isDragging) {
        this.itemToDrag = i.c;
      }

      this.isDragging = true;
      ev.preventDefault();
      console.log(i.c.index);
    };

    Home.prototype.activate = function activate(params) {

      var self = this;

      if (typeof this.helper.jwt() === 'undefined' || this.helper.jwt() == null) {
        if (params.hasOwnProperty("jwt")) {
          this.helper.processToken(params.jwt);
        }
      } else {}

      if (params.hasOwnProperty("dialog")) {
        this.dialogController = params.dialog;
        this.displayCloseButton = true;
      }

      if (params.hasOwnProperty("userid")) {

        var userid = params.userid;
      }

      if (params.hasOwnProperty("date")) {
        self.selectedDate = self.helper.getDateWithFormat(params.date, 'MM-DD-YYYY');
      }
      var aDate = self.selectedDate;

      self.data.getProviders(aDate, function (res) {
        self.providers = res;
      });

      self.refreshInterval = window.setInterval(function () {
        self.refreshGrid(self);
      }, 30000);

      window.onresize = function (event) {
        self.calculateTableHeight();
      };
    };

    Home.prototype.resizeProviderDropdown = function resizeProviderDropdown() {
      var navHeight = this.navbar.clientHeight;
      var windowHeight = window.innerHeight;
      this.dropdownMaxHeight = windowHeight - navHeight - 20;
    };

    Home.prototype.attached = function attached() {

      var self = this;

      self.resizeProviderDropdown();

      var aDate = self.selectedDate;
      self.data.getColumns(self.helper._user.UserID, function (res) {
        self.columns = res;

        self.gridColumnCss = self.calculateGridColumnCss(res);

        self.loadGrid(aDate);
      });

      self.calculateTableHeight();
    };

    Home.prototype.detached = function detached() {
      window.clearInterval(this.refreshInterval);
    };

    Home.prototype.refreshGrid = function refreshGrid(self) {
      self.loadGrid();
    };

    Home.prototype.loadGrid = function loadGrid(date, reload) {

      if (date === undefined) {
        date = this.helper.getDateWithFormat(this.selectedDate, "MM-DD-YYYY");
      }

      var self = this;

      if (reload) self.rows = [];

      var currentMinutesFromNow = null;

      this.data.getCheckin(date, function (data) {

        self.nearestRowIndex = 0;

        for (var i = 0; i < data.length; i++) {
          var patId = data[i].Patient.PatientID;
          var aRow = self.doesPatientRowExist(patId);
          if (aRow) {
            if (aRow.checkinTimerInterval) {
              if (data[i].Status.toUpperCase() != "KIOSK") {
                aRow.stopCheckinTimer();
                aRow.setStatus(data[i].Status);
              }
            } else {
              if (data[i].Status.toUpperCase() == "KIOSK") {
                aRow.checkinData.Status = data[i].Status;
                aRow.checkinData.CheckinStartTime = data[i].CheckinStartTime;

                aRow.startCheckinTimer();
                aRow.setStatus(data[i].Status);
              }
            }
            self.rows[i] = aRow;
          } else {
            aRow = self.data.createRow(self.columns, data[i]);
            self.rows.push(aRow);
          }

          var schedTime = (0, _moment2.default)(aRow.checkinData.Time);
          var now = (0, _moment2.default)();
          var minsFromNow = Math.abs(now.diff(schedTime, 'minutes'));
          if (currentMinutesFromNow == null || minsFromNow < currentMinutesFromNow) {
            currentMinutesFromNow = minsFromNow;
            self.nearestRowIndex = i;
          }
        }

        self.deselectAllRows(self.rows);
        if (self.rows.length > 0) self.rows[self.nearestRowIndex].selected = true;

        self.filterByProvider();
      });
    };

    Home.prototype.deselectAllRows = function deselectAllRows(rows) {
      for (var i = 0; i < rows.length; i++) {
        rows[i].selected = false;
      }
    };

    Home.prototype.doesPatientRowExist = function doesPatientRowExist(patientId) {
      return _.find(this.rows, ['checkinData.Patient.PatientID', patientId]);
    };

    Home.prototype.showPicker = function showPicker() {
      this.datepicker.methods.show();
    };

    Home.prototype.statusIconClick = function statusIconClick(e, row, cell) {
      if (row.checkinData.Status.toUpperCase() == 'KIOSK' && cell.image == 'fa fa-exclamation-triangle') {

        var schedule = row.checkinData.Schedule;
        schedule.Status = 'Ready';
        this.data.updateScheduleStatus(schedule, row);
      }
    };

    Home.prototype.updateDisplayedRowCells = function updateDisplayedRowCells() {

      var self = this;

      for (var i = 0; i < self.columns.length; i++) {
        var c = self.columns[i];
        for (var r = 0; r < self.rows.length; r++) {
          var row = self.rows[r];
          row.cells[i].visible = c.Visible;
        }
      }

      self.data.updateUserColumns(self.columns, function (res) {
        self.columns = res;
      });
    };

    Home.prototype.dateChanged = function dateChanged(e) {

      var self = this;
      var aDate = e.date.format("MM-DD-YYYY");
      self.data.getProviders(aDate, function (res) {
        self.providers = res;
        self.resizeProviderDropdown();
        self.loadGrid(aDate, true);
      });
    };

    Home.prototype.datepickerChanged = function datepickerChanged() {
      var _this = this;

      this.datepicker.events.onChange = function (e) {
        return _this.dateChanged(e);
      };
    };

    Home.prototype.calculateTableHeight = function calculateTableHeight() {
      var tNavbar = this.navbar;
      var windowHeight = document.documentElement.clientHeight;
      this.tableHeight = windowHeight - tNavbar.clientHeight;
    };

    Home.prototype.scrollToRow = function scrollToRow(isLast) {
      if (isLast) {
        if (this.filteredRows.length > 0) {
          var rowId = this.nearestRowIndex;

          var tb = $('#myTable');

          var ypos = $('#myTable tr:eq(' + rowId + ')').offset().top;

          $('.tableFixHead').animate({
            scrollTop: $('.tableFixHead').scrollTop() + ypos
          }, 500);
        }
      }
    };

    Home.prototype.scrollToGridDiv = function scrollToGridDiv(isLast) {
      if (isLast) {
        if (this.filteredRows.length > 0) {
          var rowId = this.nearestRowIndex;

          var tb = $('#tableGrid');

          var tblGridDiv = $('#outerTableGrid div:eq(' + rowId + ')');
          var off = tblGridDiv.offset();

          var ypos = $('#outerTableGrid div:eq(' + rowId + ')').offset().top;

          $('#outerTableGrid').animate({
            scrollTop: $('#outerTableGrid').scrollTop() + ypos
          }, 500);
        }
      }
    };

    Home.prototype.filterByProvider = function filterByProvider() {
      this.filteredRows = [];
      var currentMinutesFromNow = null;
      this.nearestRowIndex = 0;

      var selectedProviders = _.filter(this.providers, { 'selected': true });
      if (selectedProviders.length == 0) {
        this.filteredRows = this.rows;
      } else {

        var tNearestRowIndex = -1;

        for (var fPro = 0; fPro < selectedProviders.length; fPro++) {
          var tFpro = selectedProviders[fPro];

          for (var i = 0; i < this.rows.length; i++) {
            var r = this.rows[i];
            for (var c = 0; c < r.cells.length; c++) {
              var cell = r.cells[c];
              if (cell.name == 'Provider' && cell.value == tFpro.name) {
                var schedTime = (0, _moment2.default)(r.checkinData.Time);
                var now = (0, _moment2.default)();
                var minsFromNow = Math.abs(now.diff(schedTime, 'minutes'));
                if (currentMinutesFromNow == null || minsFromNow < currentMinutesFromNow) {
                  currentMinutesFromNow = minsFromNow;
                  tNearestRowIndex++;
                  this.nearestRowIndex = tNearestRowIndex;
                }

                this.filteredRows.push(r);
              }
            }
          }
        }
        this.filteredRows = _.orderBy(this.filteredRows, ['checkinData.Time'], ['asc']);

        this.deselectAllRows(this.filteredRows);
        if (this.filteredRows.length > 0) this.filteredRows[this.nearestRowIndex].selected = true;
      }
    };

    return Home;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'datepicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!phxCheckinDashboard/home.html',[],function(){return "<template><div class=\"row\"><div class=\"col\"><nav class=\"navbar navbar-expand-lg navbar-light bg-light\" ref=\"navbar\"><a class=\"navbar-brand\" href=\"#\"><i class=\"fa fa-tablet fa-lg\"></i> Kiosk Check-In</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span class=\"navbar-toggler-icon\"></span></button><div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"><ul class=\"navbar-nav ml-auto\"><li class=\"nav-item dropdown\"><a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Providers</a><div class=\"dropdown-menu\" style=\"height:auto;overflow-y:auto\" css=\"max-height: ${dropdownMaxHeight}px; \" aria-labelledby=\"navbarDropdown\"><form class=\"form-inline\" style=\"padding-left:10px\"><template repeat.for=\"p of providers\"><div class=\"form-check dropdown-item\"><input type=\"checkbox\" class=\"form-check-input\" checked.bind=\"p.selected\" change.delegate=\"filterByProvider()\"> <label class=\"form-check-label\"> ${p.name} </label></div></template></form></div></li></ul><form class=\"form-inline my-2 my-lg-0\"><div class=\"input-group\"><abp-datetime-picker element.bind=\"datepicker\" value.bind=\"selectedDate\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary\" type=\"button\" click.delegate=\"showPicker()\"><i class=\"fa fa-calendar\"></i></button></div></div></form><div class=\"dropdown\"><button class=\"btn btn-light dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"fa fa-cog fa-lg\" style=\"color:#d3d3d3\"></i></button><div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"dropdownMenuButton\" style=\"padding:10px 0 10px 20px\"><template repeat.for=\"c of columns\"><div class=\"dropper\" id=\"1\" dragover.delegate=\"allowDrop($this, $event)\" drop.delegate=\"drop($this, $event)\"><div class=\"form-check\" style=\"justify-content:flex-start;padding-left:10px\" draggable=\"true\" id=\"2\"><input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"${c.Name}\" checked.bind=\"c.Visible\" change.delegate=\"updateDisplayedRowCells()\"> <label class=\"form-check-label\" for=\"${c.Name}\"> ${c.Name} </label></div></div></template></div></div><i if.bind=\"displayCloseButton\" class=\"fa fa-times fa-2x float-right\" style=\"cursor:pointer\" click.delegate=\"closeWithDialog()\"></i></div></nav><div class=\"container-fluid\" style=\"padding:0;top:55px\"><div class=\"row\"><div class=\"col-3\" if.bind=\"sidebarVisible\"><ul class=\"list-group\"><li class=\"list-group-item\">Item 1</li><li class=\"list-group-item\">Item 2</li><li class=\"list-group-item\">Item 3</li><li class=\"list-group-item\">Item 4</li><li class=\"list-group-item\">Item 5</li><li class=\"list-group-item\">Item 6</li></ul></div><div class=\"${sidebarVisible ? 'col-9' : 'col-12'}\"><div class=\"tableFixHead\" css=\"height: ${tableHeight}px;\"><table class=\"table table-sm table-striped\" id=\"myTable\"><thead ref=\"tableheader\"><tr style=\"background-color:grey;color:#fff\"><template repeat.for=\"c of columns\"><th scope=\"col\" if.bind=\"c.Visible\">${c.Name}</th></template></tr></thead><tbody ref=\"tablebody\"><template repeat.for=\"r of filteredRows\"><tr data-testlast.bind=\"scrollToRow($last)\" css=\"background-color: ${r.selected ? 'antiquewhite' : ''}\"><template repeat.for=\"cell of r.cells\"><td if.bind=\"cell.visible\"><span if.bind=\"cell.value\">${cell.value}</span><i else.bind=\"cell.image\" class.bind=\"cell.image\" css=\"color: ${cell.cssStyle};\" click.delegate=\"statusIconClick($event, r, cell)\"></i></td></template></tr></template></tbody></table></div></div></div></div></div></div></template>";});;
define('phxCheckinDashboard/index',['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var Index = exports.Index = function () {
		function Index() {
			_classCallCheck(this, Index);

			this.message = 'HELLO FROM phxCheckinDashboard/INDEX';
			console.log('Checkin INDEX LOADED!');
		}

		Index.prototype.configureRouter = function configureRouter(config, router) {
			config.title = 'Checkin';
			config.map([{ route: 'home', name: 'home', moduleId: 'phxCheckinDashboard/home', nav: true, title: 'Checkin' }]);
			this.router = router;
		};

		return Index;
	}();
});;
define('text!phxCheckinDashboard/index.html',[],function(){return "<template><router-view></router-view></template>";});;
define('phxFlow/data',['exports', 'moment'], function (exports, _moment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Data = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Block = function () {
    function Block(name) {
      _classCallCheck(this, Block);

      this.steps = [];
      this.data = [];
      this.name = name;
      this.cls;
      this.collapsed = false;
      this.icon;
      this.headerCls;
      this.type;
      this.createdAt;
      this.workflowType;
      this.from;
      this.description;
      this.patientId;
    }

    Block.prototype.getTime = function getTime() {
      var m = (0, _moment2.default)(this.createdAt);
      return m.format("HH:mm:ss");
    };

    return Block;
  }();

  var BodyData = function BodyData(name) {
    _classCallCheck(this, BodyData);

    this.name = name;
    this.detail;
  };

  var Step = function () {
    function Step(type) {
      _classCallCheck(this, Step);

      this.complete = false;
      this.type = type;
      this.cls = 'btn btn-outline-secondary float-right';
      this.indicatorColor = 'ghostwhite';
    }

    Step.prototype.toggleStepState = function toggleStepState() {
      this.complete = this.complete ? false : true;
      this.cls = this.complete ? 'btn btn-success float-right' : 'btn btn-outline-secondary float-right';
      this.indicatorColor = this.complete ? 'lawngreen' : 'ghostwhite';
    };

    return Step;
  }();

  var Data = exports.Data = function () {
    function Data() {
      _classCallCheck(this, Data);
    }

    Data.prototype.randomName = function randomName() {
      var lastNames = ['McCune', 'Jenkins', 'Baggins', 'Hersey', 'Black', 'Choncho', 'Kent', 'Wayne'];
      var firstNames = ['Paul', 'Bilbo', 'Jimmy', 'Willy', 'Steve', 'Bingo', 'Bruce', 'Clark', 'Monty', 'Abram'];
      var firstIndex = Math.floor(Math.random() * firstNames.length);
      var lastIndex = Math.floor(Math.random() * lastNames.length);
      return lastNames[lastIndex] + ", " + firstNames[firstIndex];
    };

    Data.prototype.createBlock = function createBlock(type, steps) {

      var stepTypes = ['Exam', 'Plan', 'HPI', 'DX', 'PX', 'History', 'XRay', 'Lab', 'RX', 'Other'];
      var workflowTypes = ['New Patient', 'Established Patient', 'Follow Up', 'Work Comp', 'Consultation', 'Post Op'];

      var dummyData = {
        hpi: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.",
        plan: "posed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).",
        exam: "aking it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of 'de Finibus Bonorum et Malorum' (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very"
      };
      var name;

      if (type == 'patient') {
        name = this.randomName();
      }

      var b = new Block(name);
      b.createdAt = (0, _moment2.default)();
      b.type = type;
      b.patientId = "PAT1000000007";

      if (type === "task") {
        b.icon = "fa fa-tasks";
        b.headerCls = 'card-header bg-warning';
        b.from = this.randomName() + ":";
        b.description = "Review this awesome task";
      } else if (type === 'patient') {
        b.icon = "fa fa-user";
        b.headerCls = 'card-header bg-success';

        var tStep = steps.toString();
        tStep = tStep.charAt(2);
        var iSteps = parseInt(tStep);
        for (var i = 0; i < iSteps; i++) {
          b.steps.push(new Step(stepTypes[i]));
        }
      } else {
        b.icon = "fa fa-comment";
        b.headerCls = 'card-header bg-info';
        b.description = "You want to get lunch today? It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum'";
        b.from = this.randomName() + ":";
      }

      if (type == 'patient') {
        b.workflowType = workflowTypes[Math.floor(Math.random() * workflowTypes.length)];

        var hpi = new BodyData("HPI");
        hpi.detail = dummyData.hpi;

        var plan = new BodyData("Plan");
        plan.detail = dummyData.plan;

        var exam = new BodyData("Exam");
        exam.detail = dummyData.exam;

        b.data.push(hpi);
        b.data.push(plan);
        b.data.push(exam);
      } else {
        var d = new BodyData(type);
        d.detail = b.description;
        b.data.push(d);
      }

      return b;
    };

    return Data;
  }();
});;
define('phxFlow/datagrid',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', './datagridHelper'], function (exports, _helper, _http, _aureliaFramework, _datagridHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Datagrid = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var Datagrid = exports.Datagrid = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _datagridHelper.DatagridHelper), _dec(_class = function () {
    function Datagrid(helper, http, DatagridHelper) {
      _classCallCheck(this, Datagrid);

      this.helper = helper;
      this.http = http;
      this.datagridHelper = DatagridHelper;
    }

    Datagrid.prototype.activate = function activate(params) {

      console.log('window', window);

      var self = this;

      if (typeof this.helper.jwt() === 'undefined' || this.helper.jwt() == null) {
        if (params.hasOwnProperty("jwt")) {
          this.helper.processToken(params.jwt);
        }
      } else {}

      this.datagridHelper.activate();
    };

    Datagrid.prototype.attached = function attached() {
      console.log("XRAY LOADED");
      this.datagridLoaded();
    };

    Datagrid.prototype.datagridLoaded = function datagridLoaded() {
      if (typeof bound !== 'undefined') {
        bound.phxDataGrid_loaded();
      }
    };

    Datagrid.prototype.rowRightClick = function rowRightClick(value, rowIndex) {
      var self = this;

      if (typeof bound !== 'undefined') {
        bound.phxDataGrid_rightClick(value, self.datagridHelper.rows[rowIndex].data, rowIndex);
      }
    };

    Datagrid.prototype.rowClicked = function rowClicked(value, row, colIndex, rowIndex) {
      var self = this;
      self.datagridHelper.selectRow(row);

      if (typeof window.bound !== 'undefined') {
        window.bound.phxDataGrid_click(value, row.data, rowIndex, colIndex);
      }
    };

    Datagrid.prototype.rowDoubleClicked = function rowDoubleClicked(value, rowIndex) {
      var self = this;
      if (typeof bound !== 'undefined') {
        bound.phxDataGrid_doubleClick(value, self.datagridHelper.rows[rowIndex].data, rowIndex);
      }
    };

    return Datagrid;
  }()) || _class);
});;
define('text!phxFlow/datagrid.html',[],function(){return "<template><div id=\"myDataGrid\"><table class=\"table table-sm table-hover table-bordered\"><thead class=\"thead-light\" style=\"font-weight:700;background-color:#f1f1f1\"><tr><template repeat.for=\"c of datagridHelper.columns\"><td if.bind=\"c.visible\">${c.header}</td></template></tr></thead><tbody><tr repeat.for=\"r of datagridHelper.rows\" style.bind=\"r.selected ? r.selectedStyleString : r.styleString\"><template repeat.for=\"c of datagridHelper.columns\"><td if.bind=\"c.visible\" click.delegate=\"rowClicked(r.cells[$index], r, $index, $parent.$index)\" dblclick.delegate=\"rowDoubleClicked(r.cells[$index], $parent.$index)\" contextmenu.delegate=\"rowRightClick(r.cells[$index], $parent.$index)\" innerhtml=\"${r.cells[$index]}\"></td></template></tr></tbody></table></div></template>";});;
define('phxFlow/datagridHelper',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework'], function (exports, _helper, _http, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DatagridHelper = undefined;

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Row = function Row() {
    _classCallCheck(this, Row);

    this.cells = [];
    this.data;
    this.selected = false;
    this.styleString = "background-color: white";
    this.selectedStyleString = "background-color: rgb(187,209,233)";
  };

  var Column = function Column(header) {
    _classCallCheck(this, Column);

    this.header = header;
    this.visible = true;
  };

  var DatagridHelper = exports.DatagridHelper = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http), _dec(_class = function () {
    function DatagridHelper(helper, http) {
      _classCallCheck(this, DatagridHelper);

      this.rows = [];
      this.columns = [];

      this.helper = helper;
      this.http = http;
    }

    DatagridHelper.prototype.selectRow = function selectRow(row) {
      var self = this;
      for (var i = 0; i < self.rows.length; i++) {
        var aRow = self.rows[i];
        aRow.selected = false;
      }
      row.selected = true;
    };

    DatagridHelper.prototype.columnExists = function columnExists(header) {
      for (var i = 0; i < this.columns.length; i++) {
        if (this.columns[i].header === header) {
          return true;
        }
      }
      return false;
    };

    DatagridHelper.prototype.activate = function activate() {
      var self = this;
      self.columns.push(new Column("Date"));
      self.columns.push(new Column("Side"));
      self.columns.push(new Column("Part"));
      self.columns.push(new Column("Description"));
      self.columns.push(new Column("Finding"));
      self.columns.push(new Column("Instructions"));
      self.columns[5].visible = false;

      console.log("DATAGRIDHELPER ACTIVATE");
    };

    DatagridHelper.prototype.setColumnVisibility = function setColumnVisibility(columnIndex, visibility) {
      this.columns[columnIndex].visible = visibility;
    };

    DatagridHelper.prototype.newRowFromXray = function newRowFromXray(xray) {
      var self = this;
      var aRow = new Row();
      var aDate = self.helper.getISODateToFormat(xray.ExamDateTime, "MM/DD/YYYY");
      aRow.cells.push(aDate);
      aRow.cells.push(xray.Body_Side);
      aRow.cells.push(xray.Body_Part);
      aRow.cells.push(xray.Description);
      aRow.cells.push(xray.XRayFinding);

      if (xray.Instructions != null && xray.Instructions.length > 0) {
        aRow.cells.push(xray.Instructions);
        self.columns[5].visible = true;
      }

      if (xray.Type != null && xray.Type.toUpperCase() == "OUTSIDE") {
        aRow.styleString = "background-color: rgb(255,222,173)";
        aRow.selectedStyleString = "background-color: rgb(244,164,96)";
      }

      aRow.data = xray;
      return aRow;
    };

    DatagridHelper.prototype.clear = function clear() {
      var self = this;
      self.rows.splice(0, self.rows.length);
    };

    DatagridHelper.prototype.addRows = function addRows(data, refresh) {

      var self = this;

      if (refresh) {
        self.rows.splice(0, self.rows.length);
      }

      if (data.length > 0) {

        for (var i = 0; i < data.length; i++) {
          var xray = data[i];

          var aRow = self.newRowFromXray(xray);

          self.rows.push(aRow);

          if (i == 0) {
            self.selectRow(aRow);
          }
        }
      }
    };

    DatagridHelper.prototype.removeRowByIndex = function removeRowByIndex(index) {
      var self = this;
      for (var i = 0; i < self.rows.length; i++) {
        if (i == index) {
          self.rows.splice(index, 1);
          break;
        }
      }
    };

    DatagridHelper.prototype.updateRowByIndexAndXray = function updateRowByIndexAndXray(index, xray) {
      var row = this.newRowFromXray(xray);
      row.selected = true;


      this.rows.splice(index, 1, row);
    };

    DatagridHelper.prototype.getXrays = function getXrays(patientId, date) {
      var self = this;

      self.rows = [];

      var aDate = self.helper.getDateWithFormat(date, "YYYY-MM-DD");
      var url = "xrayresult/view/patients/" + patientId + "/date/" + aDate;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json.length > 0) {

          for (var i = 0; i < json.length; i++) {
            var xray = json[i];
            var aRow = new Row();

            if (i == 0) {
              aRow.selected = true;
            }
            var aDate = self.helper.getISODateToFormat(xray.ExamDateTime, "MM/DD/YYYY");
            aRow.cells.push(aDate);
            aRow.cells.push(xray.Body_Side);
            aRow.cells.push(xray.Body_Part);
            aRow.cells.push(xray.Description);
            aRow.cells.push(xray.XRayFinding);

            if (xray.Instructions != null && xray.Instructions.length > 0) {
              aRow.cells.push(xray.Instructions);
              self.columns[5].visible = true;
            }

            aRow.data = xray;
            self.rows.push(aRow);
          }
        }
      });
    };

    return DatagridHelper;
  }()) || _class);
});;
define('phxFlow/home',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', './data', 'lodash', 'moment'], function (exports, _helper, _http, _aureliaFramework, _data, _lodash, _moment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Home = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var Home = exports.Home = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data), _dec(_class = function () {
    function Home(helper, http, Data) {
      _classCallCheck(this, Home);

      this.blocks = [];
      this.sidebarVisible = false;
      this.totalFlowObjects = 10;

      this.helper = helper;
      this.http = http;
      this.data = Data;
    }

    Home.prototype.toggleSidebar = function toggleSidebar() {
      this.sidebarVisible = this.sidebarVisible ? false : true;
    };

    Home.prototype.toggleBlock = function toggleBlock(b) {
      for (var i = 0; i < this.blocks.length; i++) {
        this.blocks[i].collapsed = false;
      }
      b.collapsed = b.collapsed ? false : true;
    };

    Home.prototype.sortTime = function sortTime() {
      this.blocks = _.sortBy(this.blocks, ['createdAt']);
    };

    Home.prototype.sortFlow = function sortFlow() {
      var s = _.sortBy(this.blocks, ['type']);

      var pats = _.remove(s, function (b) {
        return b.type == 'patient';
      });

      var final = _.concat(pats, s);
      this.blocks = final;
    };

    Home.prototype.completeBlock = function completeBlock(index) {
      this.blocks.splice(index, 1);
    };

    Home.prototype.activate = function activate(params) {

      if (params.hasOwnProperty("userid")) {

        var userid = params.userid;
      }

      this.setupBlocks();
    };

    Home.prototype.setupBlocks = function setupBlocks() {
      var _this = this;

      this.setupFlowTimer = setInterval(function (_) {
        _this.addFlowElement(_this);
      }, 1000);
    };

    Home.prototype.addFlowElement = function addFlowElement(t) {

      var self = t;

      var r = Math.random();
      var type = "task";
      if (r <= 0.3) {
        type = "task";
      } else if (r > 0.3 && r <= 0.6) {
        type = "patient";
      } else {
        type = "message";
      }
      var block = self.data.createBlock(type, r);
      self.blocks.push(block);

      if (self.blocks.length >= self.totalFlowObjects) {
        clearInterval(self.setupFlowTimer);

        self.sortFlow();
      }
    };

    Home.prototype.launchItem = function launchItem(item) {

      item.toggleStepState();

      if (typeof bound !== 'undefined') {
        bound.phxflow_launchItem(item.type, item.patientId);
      }
    };

    return Home;
  }()) || _class);
});;
define('text!phxFlow/home.html',[],function(){return "<template><nav class=\"navbar navbar-light bg-light\"><a class=\"navbar-brand\" href=\"#\" click.delegate=\"toggleSidebar()\"><i class=\"fa fa-align-justify\"></i> Flow</a><form class=\"form-inline\"><button class=\"btn btn-outline-success float-right\" type=\"button\" click.delegate=\"sortFlow()\">Type</button> <button class=\"btn btn-outline-info float-right\" type=\"button\" click.delegate=\"sortTime()\">Time</button></form></nav><div class=\"row\"><div class=\"col-3\" if.bind=\"sidebarVisible\"><ul class=\"list-group\"><li class=\"list-group-item\">Item 1</li><li class=\"list-group-item\">Item 2</li><li class=\"list-group-item\">Item 3</li><li class=\"list-group-item\">Item 4</li><li class=\"list-group-item\">Item 5</li><li class=\"list-group-item\">Item 6</li></ul></div><div class=\"${sidebarVisible ? 'col-9' : 'col-12'}\"><template repeat.for=\"b of blocks\"><div class=\"row\" style=\"padding-bottom:2px\"><div class=\"col\"><div class=\"card\"><div class.bind=\"b.headerCls\" click.delegate=\"toggleBlock(b)\"><span style=\"width:80px;display:inline-block\">${b.getTime()}</span><i class.bind=\"b.icon\"></i> <span style=\"padding-right:2px\"><b>${b.from}</b></span><span class=\"d-inline-block text-truncate\" style=\"padding-right:2px;max-width:75%;top:6px;position:relative;font-weight:lighter\">${b.description}</span><span style=\"padding-right:2px\"><b>${b.name}</b></span><template repeat.for=\"s of b.steps\"><i class=\"fa fa-circle float-right\" css=\"padding-right:2px; color:${s.indicatorColor}\"></i></template><span style=\"position:absolute;display:flex;right:22px;top:28px;font-size:small\">${b.workflowType}</span><i if.bind=\"b.type == 'task'\" class=\"fa fa-check-square fa-lg float-right\" style=\"color:#fff;top:7px;position:relative\" click.delegate=\"completeBlock($index)\"></i></div><div class=\"card-body\" style=\"overflow-y:auto;max-height:300px\" if.bind=\"b.collapsed\"><template repeat.for=\"s of b.steps\"><button class.bind=\"s.cls\" type=\"button\" click.delegate=\"launchItem(s)\" style=\"margin-right:2px\">${s.type}</button></template><template repeat.for=\"d of b.data\"><h5 class=\"card-title\">${d.name}</h5><p class=\"card-text\" style=\"font-size:small\">${d.detail}</p><div if.bind=\"b.type == 'message'\" class=\"form-group\"><label for=\"exampleFormControlTextarea1\">Response</label> <textarea class=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"3\"></textarea></div></template><i class=\"fa fa-times fa-lg float-right\" style=\"color:#696969\" click.delegate=\"completeBlock($index)\"></i></div></div></div></div></template></div></div></template>";});;
define('phxFlow/index',['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var Index = exports.Index = function () {
		function Index() {
			_classCallCheck(this, Index);

			this.message = 'HELLO FROM phxFlow/INDEX';
			console.log('PhxFlow INDEX LOADED!');
		}

		Index.prototype.configureRouter = function configureRouter(config, router) {
			config.title = 'Phoenix Flow';
			config.map([{ route: 'home', name: 'home', moduleId: 'phxFlow/home', nav: true, title: 'Flow' }]);
			this.router = router;
		};

		return Index;
	}();
});;
define('text!phxFlow/index.html',[],function(){return "<template><div class=\"container-fluid\" style=\"padding:0\"><router-view></router-view></div></template>";});;
define('phxTelemed/block',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework'], function (exports, _helper, _http, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Block = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var Block = exports.Block = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http), _dec(_class = function () {
    function Block(helper, http) {
      _classCallCheck(this, Block);

      this.widthList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];

      this.helper = helper;
      this.http = http;
    }

    Block.prototype.activate = function activate(model) {
      this.data = model;
    };

    Block.prototype.deleteBlock = function deleteBlock() {
      this.data.row.deleteBlock(this.data);
    };

    Block.prototype.setWidth = function setWidth(width) {
      this.data.width = width;
    };

    return Block;
  }()) || _class);
});;
define('text!phxTelemed/block.html',[],function(){return "<template><div class=\"col-sm-12 col-md-${data.width} pl-2 pt-2 pr-0\"><div if.bind=\"data.editing\" class=\"col position-absolute w-100 h-100\" style=\"z-index:1000;background-color:rgba(255,255,255,.8)\"><button type=\"button\" class=\"btn btn-danger btn-sm float-right\" click.delegate=\"deleteBlock()\"><i class=\"fa fa-trash\" aria-hidden=\"true\"></i></button><div class=\"dropdown\"><button class=\"btn btn-secondary btn-sm dropdown-toggle float-right mr-2\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"fa fa-arrows-h\" aria-hidden=\"true\"></i>${data.width} </button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><a repeat.for=\"w of widthList\" class=\"dropdown-item\" href=\"#\" click.delegate=\"setWidth(w)\">${w}</a></div></div></div><compose view-model=\"./${data.blockType}\" model.bind=\"data\" containerless></compose></div></template>";});;
define('phxTelemed/createVisitPopup',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper', 'moment', 'lodash'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper, _moment, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CreateVisitPopup = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var CreateVisitPopup = exports.CreateVisitPopup = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper, _aureliaDialog.DialogService), _dec(_class = function () {
    function CreateVisitPopup(DialogController, http, helper, DialogService) {
      _classCallCheck(this, CreateVisitPopup);

      this.visitTypes = ["New Patient", "Established Patient", "Pt Visit", "Work Comp Visit"];
      this.bodyParts = ["Cervical", "Thoracic", "Lumbar", "Shoulder", "Elbow", "Wrist", "Hand", "Hip", "Knee", "Ankle", "Foot"];
      this.bodySides = ["Right", "Left", "Bilateral"];
      this.popupLR = 0;
      this.popupTB = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.visitObject = null;

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
      this.dialogService = DialogService;
    }

    CreateVisitPopup.prototype.close = function close() {
      var self = this;
      self.visitObject.visitType = self.selectedVisitType;
      self.visitObject.bodypart = self.selectedBodypart;
      self.visitObject.bodyside = self.selectedBodyside;
      self.dialogController.close(true, { 'visitObject': self.visitObject });
    };

    CreateVisitPopup.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    CreateVisitPopup.prototype.activate = function activate(obj) {
      var self = this;

      self.visitObject = obj.visitObject;

      self.popupWidth = obj.popupWidth * .8;
      self.popupHeight = (obj.popupHeight - 75) * .8;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;
    };

    return CreateVisitPopup;
  }()) || _class);
});;
define('text!phxTelemed/createVisitPopup.html',[],function(){return "<template><ux-dialog><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\">Create Visit</h4><i class=\"fa fa-times fa-lg\" style=\"cursor:pointer;float:right\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body><form><div class=\"form-row\"><div class=\"form-group col-md-4\"><label for=\"visittype\">Visit Type</label> <select id=\"visittype\" class=\"form-control\" value.bind=\"selectedVisitType\" required><option model.bind=\"null\">Select...</option><option repeat.for=\"v of visitTypes\" model.bind=\"v\"> ${v} </option></select></div><div class=\"form-group col-md-4\"><label for=\"bodypart\">Body Part</label> <select id=\"bodypart\" class=\"form-control\" value.bind=\"selectedBodypart\" required><option model.bind=\"null\">Select...</option><option repeat.for=\"b of bodyParts\" model.bind=\"b\"> ${b} </option></select></div><div class=\"form-group col-md-4\"><label for=\"bodyside\">Body Side</label> <select id=\"bodyside\" class=\"form-control\" value.bind=\"selectedBodyside\" required><option model.bind=\"null\">Select...</option><option repeat.for=\"s of bodySides\" model.bind=\"s\"> ${s} </option></select></div></div></form></ux-dialog-body><ux-dialog-footer><button click.delegate=\"close()\">OK</button></ux-dialog-footer></ux-dialog></template>";});;
define('phxTelemed/data',['exports', 'moment', 'lodash', '../helpers/helper', '../helpers/http', 'aurelia-framework'], function (exports, _moment, _lodash, _helper, _http, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Data = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var CreateVisit = function CreateVisit(visitType, bodyPart, bodySide, date) {
    _classCallCheck(this, CreateVisit);

    this.visitType = visitType;
    this.bodypart = bodyPart;
    this.bodyside = bodySide;
    this.date = date;
  };

  var ExamData = function ExamData(exam, hpi, plan) {
    _classCallCheck(this, ExamData);

    this.exam = exam;
    this.plan = plan;
    this.hpi = hpi;
  };

  var Provider = function Provider(name, id) {
    _classCallCheck(this, Provider);

    this.name = name;
    this.id = id;
    this.selected = false;
  };

  var DxRow = function DxRow(id, code, desc, date, data) {
    _classCallCheck(this, DxRow);

    this.id = id;
    this.code = code;
    this.description = desc;
    this.date = date;
    this.data = data;
    this.selected = false;
  };

  var ScheduleRow = function ScheduleRow(id, name, time, patientId, isNewPatient, latestVisit, data) {
    _classCallCheck(this, ScheduleRow);

    this.id = id;
    this.name = name;
    this.time = time;
    this.patientId = patientId;
    this.isNewPatient = isNewPatient;
    this.latestVisitDate = latestVisit ? (0, _moment2.default)(latestVisit.ExamDateTime).format('MM-DD-YYYY') : null;
    this.latestVisitBodyPart = latestVisit ? latestVisit.VisitBodyPart : null;
    this.latestVisitDateMoment = latestVisit ? (0, _moment2.default)(latestVisit.ExamDateTime) : null;
    this.data = data;
  };

  var OrderRow = function OrderRow(id, date, description, data) {
    _classCallCheck(this, OrderRow);

    this.id = id;
    this.date = date;
    this.description = description;
    this.data = data;
  };

  var EncounterCode = function EncounterCode(code, description, physicianCode) {
    _classCallCheck(this, EncounterCode);

    this.code = code;
    this.description = description;
    this.physicianCode = physicianCode;
  };

  var MedRow = function MedRow(id, description, lastRefill, status) {
    _classCallCheck(this, MedRow);

    this.id = id;
    this.description = description;
    this.lastRefill = lastRefill;
    this.status = status;
  };

  var AllergyRow = function AllergyRow(id, description, date, reaction) {
    _classCallCheck(this, AllergyRow);

    this.id = id;
    this.description = description;
    this.date = date;
    this.reaction = reaction;
  };

  var Patient = function () {
    function Patient(patient) {
      _classCallCheck(this, Patient);

      this.data = patient.Patient;
      console.log('Patient:', this.data);
      this.latestVisitDate = patient.Visit ? (0, _moment2.default)(patient.Visit.ExamDateTime).format('MM-DD-YYYY') : null;
      if (patient.Patient.Photo === undefined || patient.Patient.Photo === null || patient.Patient.Photo.length == 0) {
        this.imagepath = '/images/Photos/blank.png';
      } else {
        this.imagepath = '/images/Photos/' + patient.Patient.Photo;
      }
    }

    Patient.prototype.PatientName = function PatientName() {
      return this.data.NameLast + ", " + this.data.NameFirst;
    };

    return Patient;
  }();

  var Data = exports.Data = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http), _dec(_class = function () {
    function Data(helper, http) {
      _classCallCheck(this, Data);

      this.helper = helper;
      this.http = http;
    }

    Data.prototype.getNewCreateVisitObject = function getNewCreateVisitObject(visitType, bodyPart, bodySide) {
      return new CreateVisit(visitType, bodyPart, bodySide);
    };

    Data.prototype.getProviders = function getProviders(date, callback) {
      var self = this;
      var providers = [];
      var url = "providers?date=" + date;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        for (var i = 0; i < json.length; i++) {
          var p = new Provider(json[i].ProviderEntity, json[i].ProviderID);
          providers.push(p);
        }
        callback(self.providers);
      });
    };

    Data.prototype.getLatestVisitCodeForPatient = function getLatestVisitCodeForPatient(patientId, callback) {
      var self = this;
      var url = 'visitcode/patient/' + patientId + '/latest';
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.getAllVisitCodeForPatient = function getAllVisitCodeForPatient(patientId, callback) {
      var self = this;
      var url = 'visitcode/patient/' + patientId + '/all';
      self.http.get(self.helper.getApiUrl(url), function (json) {
        var sorted = _.orderBy(json, ['ExamDateTime'], ['desc']);

        callback(sorted);
      });
    };

    Data.prototype.getVisitCodeObject = function getVisitCodeObject(callback) {
      var self = this;
      var url = 'visitcode';
      self.http.get(self.helper.getApiUrl(url), function (json) {
        callback(json);
      });
    };

    Data.prototype.createVisitCode = function createVisitCode(visitCode, callback) {
      var self = this;
      var url = 'visitcode';
      self.http.post(self.helper.getApiUrl(url), JSON.stringify(visitCode), function (schedule) {
        callback(schedule);
      }, { contentType: "application/json" });
    };

    Data.prototype.getScheduledProviders = function getScheduledProviders(date, callback) {
      var self = this;
      var today = (0, _moment2.default)().format('MM/DD/YYYY');
      var url = 'providers?date=' + today;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {
          callback(json);
        }
      });
    };

    Data.prototype.getSchedule = function getSchedule(providerId, filterByTelemed, callback) {
      var self = this;
      var date = (0, _moment2.default)().format("MM-DD-YYYY");
      var schedule = [];
      var types = [];
      filterByTelemed ? types.push('Telemed') : types.push('Office');
      var qObject = {
        'ProviderId': providerId,
        'Date': date,
        'Types': types
      };

      var url = 'schedule/withisnew';
      self.http.post(self.helper.getApiUrl(url), JSON.stringify(qObject), function (json) {

        var final = json;

        for (var i = 0; i < final.length; i++) {
          var r = final[i];
          var row = new ScheduleRow(r.Schedule.ScheduleID, r.Schedule.Patient_Name, r.Schedule.Time, r.Schedule.PatientID, r.IsNewPatient, r.LatestVisit, r);
          schedule.push(row);
        }

        callback(schedule);
      }, { contentType: "application/json" });
    };

    Data.prototype.getPatientEmpty = function getPatientEmpty() {
      var patient = { 'data': {} };
      patient.imagepath = _helper.helper.goFileUrl + 'images/blank.png';
      patient.data.PatientID = "";
      return patient;
    };

    Data.prototype.getPatient = function getPatient(patientId, callback) {
      var self = this;

      var url = 'patients/withvisit?patientId=' + patientId;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        var patient = new Patient(json);
        console.log('PATIIENT:', patient);
        callback(patient);
      });
    };

    Data.prototype.getPatientAllergies = function getPatientAllergies(patientId, callback) {
      var self = this;
      var url = "patientallergies/query";
      var data = { 'PatientId': patientId,
        'Status': ["Active", "A"] };

      self.http.post(self.helper.getApiUrl(url), JSON.stringify(data), function (res) {

        console.log('GOT ALLERGIES', res);

        if (res == undefined || res == null) return;

        var list = [];
        for (var i = 0; i < res.length; i++) {
          var m = res[i];
          var aMed = new AllergyRow(m.AllergyID, m.Substance, "", m.Reaction);
          list.push(aMed);
        }
        callback(list);
      }, { contentType: "application/json" }, function (err) {
        var e = 'oops';
      });
    };

    Data.prototype.getPatientSurgeries = function getPatientSurgeries(patientId, callback) {
      var self = this;
      var url = 'patientprocedure/Query';
      var qObject = {
        'PatientId': patientId,
        'ProcedureTypes': ["Surgery"]
      };

      self.http.post(self.helper.getApiUrl(url), JSON.stringify(qObject), function (res) {

        if (res == undefined || res == null) return;

        var list = [];
        for (var i = 0; i < res.length; i++) {
          var m = res[i];
          var surgDate = m.SurgeryDate != null ? self.helper.getISODateToFormat(m.SurgeryDate, "MM/DD/YY") : '';
          var aMed = new ScheduleRow(m.PatientCPTID, m.CodeDescr, surgDate);
          list.push(aMed);
        }
        callback(list);
      }, { contentType: "application/json" }, function (err) {
        var e = 'oops';
      });
    };

    Data.prototype.getPatientMeds = function getPatientMeds(patientId, callback) {
      var self = this;
      var url = "rxs?patientId=" + patientId;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        var list = [];
        for (var i = 0; i < json.length; i++) {
          var m = json[i];
          var aMed = new MedRow(m.RXPatientID, m.RX_Sig, self.helper.getISODateToFormat(m.LastRefill, "MM/DD/YY"), m.RX_Status);
          list.push(aMed);
        }
        callback(list);
      });
    };

    Data.prototype.getDiagnosis = function getDiagnosis(patientId, callback) {
      var self = this;
      var url = 'patientdiagnosis?patientId=' + patientId + "&status=A";
      self.http.get(self.helper.getApiUrl(url), function (res) {

        if (res == undefined || res == null) return;

        console.log('Diagnoses', res);

        var list = [];
        for (var i = 0; i < res.length; i++) {
          var m = res[i];
          var aDx = new DxRow(m.PatientDXID, m.PatientDxCode, m.PatientDxDescription, self.helper.getISODateToFormat(m.DateCreated, "MM/DD/YY"), m);
          list.push(aDx);
        }
        callback(list);
      });
    };

    Data.prototype.saveAddedDiagnoses = function saveAddedDiagnoses(diagnoses, callback) {

      var self = this;
      var url = 'patientdiagnosis/list';
      var stringifiedContent = JSON.stringify(diagnoses);
      self.http.post(self.helper.getApiUrl(url), stringifiedContent, function (returnData) {
        callback(returnData);
      }, { contentType: 'application/json' });
    };

    Data.prototype.getWebDocsWithProviderID = function getWebDocsWithProviderID(providerId, callback) {
      var self = this;
      var url = "webdoc/provider/" + providerId;
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.getDocumentsForPatientAndDate = function getDocumentsForPatientAndDate(patientId, date, callback) {
      var self = this;
      var url = "documents?patientId=" + patientId + "&date=" + date;
      self.http.get(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    Data.prototype.getOrders = function getOrders(patientId, callback) {
      var self = this;
      var url = 'laborder/query';
      var qObject = {
        'PatientId': patientId,
        'Types': ["DME", "IMAGE", "XRAY", "Injection"]
      };

      self.http.post(self.helper.getApiUrl(url), JSON.stringify(qObject), function (res) {

        if (res == undefined || res == null) return;

        var list = [];
        for (var i = 0; i < res.length; i++) {
          var m = res[i];
          var aMed = new OrderRow(m.LabReqID, self.helper.getISODateToFormat(m.DateCreated, "MM/DD/YY"), m.TestOrdered, m);
          list.push(aMed);
        }
        callback(list);
      }, { contentType: "application/json" }, function (err) {
        var e = 'oops';
      });
    };

    Data.prototype.getFollowUpPref = function getFollowUpPref(providerId, part, type, callback) {
      var self = this;
      var url = "examfollowup/preferences?providerId=" + providerId + "&part=" + part + "&type=" + type;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        var list = [];
        for (var i = 0; i < json.length; i++) {
          var m = json[i];
          list.push(m);
        }
        callback(list);
      });
    };

    Data.prototype.getQuickOrderPrefs = function getQuickOrderPrefs(providerId, callback) {
      var self = this;
      var url = "laborder/prefs?providerId=" + providerId + "&type=quick";
      self.http.get(self.helper.getApiUrl(url), function (json) {
        var list = [];
        for (var i = 0; i < json.length; i++) {
          var m = json[i];
          list.push(m);
        }
        callback(list);
      });
    };

    Data.prototype.getNewOrder = function getNewOrder(callback) {
      var self = this;
      var url = "laborder";
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {
          callback(json);
        }
      });
    };

    Data.prototype.getNewExam = function getNewExam(callback) {
      var self = this;
      var url = "examfollowup";
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {
          callback(json);
        }
      });
    };

    Data.prototype.getNewHpi = function getNewHpi(callback) {
      var self = this;
      var url = "hpi";
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {
          callback(json);
        }
      });
    };

    Data.prototype.getNewPlan = function getNewPlan(callback) {
      var self = this;
      var url = "plan";
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {
          callback(json);
        }
      });
    };

    Data.prototype.getPopulatedPreference = function getPopulatedPreference(prefData, callback) {
      var self = this;
      var url = 'examfollowup/preferences/populate?preferenceId=' + prefData.preferenceId + '&providerId=' + prefData.providerId + '&patientId=' + prefData.patientId + '&examDateTime=' + prefData.examDateTime;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {
          callback(json);
        }
      }, function (error) {
        if (error.status === 412 && error.statusText === 'No Visit Created') {
          alert('You must create a visit for this patient before you can apply a preference.');
        }
      });
    };

    Data.prototype.getPreviousExamData = function getPreviousExamData(patientId, bodypart, date, callback) {
      var self = this;
      var url = 'examfollowup/previous/patients/' + patientId + '/bodypart/' + bodypart + '/date/' + date;
      var data = new ExamData(null, null, null);
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {
          var exam = {
            PostOpID: 0,
            PatientID: patientId,
            UserID: json.UserID,
            ProviderID: json.ProviderID,
            ExamDateTime: date,
            DateSurgery: json.DateSurgery,
            CaseID: json.CaseID,
            PostOpDays: json.PostOpDays,
            Surgeron: json.Surgeron,
            PreOpDiag: json.PreOpDiag,
            PostOpDiag: json.PostOpDiag,
            Procedure: json.Procedure,
            Timeframe: json.Timeframe,
            TYPE: json.TYPE,
            IsComplete: json.IsComplete,
            DateCreated: json.DateCreated,
            DateModified: json.DateModified,
            BodyPart: json.BodyPart,
            ChartNoteExam: json.ChartNoteExam
          };
          data.exam = exam;

          var plan = {
            PlanID: 0,
            PlanText: json.PlanText,
            PatientID: patientId,
            UserID: json.UserID,
            ProviderID: json.ProviderID,
            ExamDateTime: date,
            BodyPart: json.BodyPart
          };

          data.plan = plan;

          var hpi = {
            HPIID: 0,
            BodyPart: json.BodyPart,
            BodySide: json.BodySide,
            VisitDate: date,
            HpiText: json.HpiText,
            PatientID: patientId,
            UserID: json.UserID,
            ProviderID: json.ProviderID
          };

          data.hpi = hpi;
        }
        callback(data);
      });
    };

    Data.prototype.getExamData = function getExamData(patientId, providerId, date, callback) {
      var self = this;
      var url = "examfollowup/patients/" + patientId + "/providers/" + providerId + "/date/" + date;
      var data = new ExamData(null, null, null);
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {
          data.exam = json;
        }

        url = "hpis/patients/" + patientId + "/providers/" + providerId + "/date/" + date;
        self.http.get(self.helper.getApiUrl(url), function (json) {
          if (json != null) {
            if (json.length > 0) {
              data.hpi = json[0];
            }
          }

          url = "plans/patients/" + patientId + "/providers/" + providerId + "/date/" + date;
          self.http.get(self.helper.getApiUrl(url), function (json) {
            if (json != null) {
              if (json.length > 0) {
                data.plan = json[0];
              }
            }

            callback(data);
          });
        });
      });
    };

    Data.prototype.deleteExamData = function deleteExamData(examData, planData, historyData, callback) {
      var self = this;
      console.log('DELETE EXAM DATA', examData);
      if (examData && examData.PostOpID > 0) {
        var examFollowupUrl = 'examfollowup?id=' + examData.PostOpID;
        self.http.del(self.helper.getApiUrl(examFollowupUrl), function (returnData) {
          if (returnData === true) {
            examData = null;
          }
          if (callback) callback();
        }, function (error) {
          alert(error.responseText);
        });
      } else {
        if (callback) callback();
      }
      if (historyData && historyData.HPIID > 0) {
        var hpiUrl = 'hpis?id=' + historyData.HPIID;
        self.http.del(self.helper.getApiUrl(hpiUrl), function (returnData) {
          if (returnData === true) {
            historyData = null;
          }
          if (callback) callback();
        }, function (error) {
          alert(error.responseText);
        });
      } else {
        if (callback) callback();
      }
      if (planData && planData.PlanID > 0) {
        var plansUrl = 'plans/' + planData.PlanID;
        self.http.del(self.helper.getApiUrl(plansUrl), function (returnData) {
          if (returnData === true) {
            planData = null;
          }
          if (callback) callback();
        }, function (error) {
          alert(error.responseText);
        });
      } else {
        if (callback) callback();
      }
    };

    Data.prototype.saveExamData = function saveExamData(examData, planData, historyData, providerId, examDateTime, patientId, bodyPart, examType, callback) {
      var self = this;
      var userId = self.helper._user.UserID;
      var examFollowupUrl = 'examfollowup';
      var hpiUrl = 'hpis';
      var plansUrl = 'plans';

      if (examData && (!examData.PostOpID || examData.PostOpID === 0)) {
        examData.PatientID = patientId;
        examData.ExamDateTime = examDateTime;
        examData.ProviderID = providerId;
        examData.UserID = userId;
        examData.BodyPart = bodyPart;
        examData.TYPE = examType;

        self.http.post(self.helper.getApiUrl(examFollowupUrl), examData, function (returnData) {
          examData.PostOpID = returnData.PostOpID;
          if (callback) callback();
        }, null, function (error) {
          alert(error.responseText);
        });
      } else if (examData && examData.PostOpID > 0) {
        examData.TYPE = examType;

        self.http.put(self.helper.getApiUrl(examFollowupUrl), examData, function (returnData) {
          if (callback) callback();
        }, function (error) {
          alert(error.responseText);
        });
      } else {
        if (callback) callback();
      }

      var hpiData = historyData;
      if (hpiData && (!hpiData.HPIID || hpiData.HPIID === 0)) {
        hpiData.PatientID = patientId;
        hpiData.VisitDate = examDateTime;
        hpiData.ProviderID = providerId;
        hpiData.UserID = userId;
        hpiData.BodyPart = bodyPart;
        hpiData.IsOrigin = false;
        hpiData.HpiType = examType;

        self.http.post(self.helper.getApiUrl(hpiUrl), hpiData, function (returnData) {
          hpiData.HPIID = returnData.HPIID;
          if (callback) callback();
        }, null, function (error) {
          alert(error.responseText);
        });
      } else if (hpiData && hpiData.HPIID > 0) {
        hpiData.HpiType = examType;

        self.http.put(self.helper.getApiUrl(hpiUrl), hpiData, function (returnData) {
          if (callback) callback();
        }, function (error) {
          alert(error.responseText);
        });
      } else {
        if (callback) callback();
      }

      var plansData = planData;
      if (plansData && (!plansData.PlanID || plansData.PlanID === 0)) {

        plansData.PatientID = patientId;
        plansData.ExamDateTime = examDateTime;
        plansData.ProviderID = providerId;
        plansData.UserID = userId;
        plansData.BodyPart = bodyPart;
        plansData.IsOrigin = false;
        plansData.PlanType = examType;

        self.http.post(self.helper.getApiUrl(plansUrl), plansData, function (returnData) {
          plansData.PlanID = returnData.PlanID;
          if (callback) callback();
        }, null, function (error) {
          alert(error.responseText);
        });
      } else if (plansData && plansData.PlanID > 0) {
        plansData.PlanType = examType;

        self.http.put(self.helper.getApiUrl(plansUrl), plansData, function (returnData) {
          if (callback) callback();
        }, function (error) {
          alert(error.responseText);
        });
      } else {
        if (callback) callback();
      }
    };

    Data.prototype.checkForProcedureCode = function checkForProcedureCode(providerId, examDate, patientId, callback) {
      var self = this;

      var url = 'patientprocedures/patients/' + patientId + '/providers/' + providerId + '/date/' + examDate;
      self.http.get(self.helper.getApiUrl(url), function (res) {
        if (res != null && res.length > 0) {
          var found = _.find(res, function (data) {
            return data.BodyPart != null && data.Type != null && data.BodyPart.toLowerCase() == 'all' && data.Type.toLowerCase() == 'visit';
          });
          callback(found);
        } else {
          callback(null);
        }
      });
    };

    Data.prototype.updateSelectedCode = function updateSelectedCode(patientPx, callback) {
      var self = this;
      var url = 'patientprocedures';
      self.http.put(self.helper.getApiUrl(url), patientPx, function (returnData) {
        callback(returnData);
      }, function (error) {
        alert(error.responseText);
      });
    };

    Data.prototype.saveSelectedCode = function saveSelectedCode(patientPx, callback) {
      var self = this;
      var url = 'patientprocedures';

      self.http.post(self.helper.getApiUrl(url), patientPx, function (returnData) {
        callback(returnData);
      }, null, function (error) {
        alert(error.responseText);
      });
    };

    Data.prototype.savePreference = function savePreference(preference, callback) {
      var self = this;
      var url = 'examfollowup/preferences';
      var stringifiedData = JSON.stringify(preference);
      self.http.post(self.helper.getApiUrl(url), stringifiedData, function (returnData) {
        callback(returnData);
      }, { contentType: 'application/json' });
    };

    Data.prototype.updatePreference = function updatePreference(preference, callback) {
      var self = this;
      var url = 'examfollowup/preferences';
      self.http.put(self.helper.getApiUrl(url), preference, function (returnData) {
        if (callback) callback();
      }, function (error) {
        alert(error.responseText);
      });
    };

    return Data;
  }()) || _class);
});;
define('phxTelemed/dialogView',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper', 'aurelia-router', 'lodash'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper, _aureliaRouter, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DialogView = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var DialogView = exports.DialogView = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper, _aureliaRouter.Router), _dec(_class = function () {
    function DialogView(DialogController, http, helper, Router) {
      _classCallCheck(this, DialogView);

      this.popupLR = 0;
      this.popupTB = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
      this.router = Router;
    }

    DialogView.prototype.close = function close() {
      var self = this;
      self.dialogController.close(true, null);
    };

    DialogView.prototype.activate = function activate(obj) {
      var self = this;

      self.url = obj.url;
      self.popupWidth = obj.popupWidth * .8;
      self.popupHeight = (obj.popupHeight - 75) * .8;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;

      window.open(self.url, "_blank");
    };

    return DialogView;
  }()) || _class);
});;
define('text!phxTelemed/dialogView.html',[],function(){return "<template><ux-dialog css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><button click.delegate=\"close()\">OK</button></ux-dialog-header><ux-dialog-body style=\"position:absolute;width:100%;height:70%\"><div class=\"tableFixHeadLight\" css=\"height: ${popupHeight - 198}px;\"></div></ux-dialog-body></ux-dialog></template>";});;
define('phxTelemed/documentPopup',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DocumentPopup = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var DocumentPopup = exports.DocumentPopup = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
    function DocumentPopup(DialogController, http, helper) {
      _classCallCheck(this, DocumentPopup);

      this.popupLR = 0;
      this.popupTB = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
    }

    DocumentPopup.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    DocumentPopup.prototype.onFrameLoad = function onFrameLoad() {
      var self = this;

      window.setTimeout(function () {
        var res = $(self.docframe).contents().find('head');
        console.log(res);
      }, 4000);
    };

    DocumentPopup.prototype.activate = function activate(obj) {
      var self = this;

      self.url = obj.documentUrl;

      self.popupWidth = obj.popupWidth * .8;
      self.popupHeight = obj.popupHeight - 75;
      self.popupTop = 50;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;
    };

    return DocumentPopup;
  }()) || _class);
});;
define('text!phxTelemed/documentPopup.html',[],function(){return "<template><ux-dialog css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><i class=\"fa fa-times fa-lg\" style=\"cursor:pointer;float:right;margin-top:-6px\" click.delegate=\"cancel()\"></i></ux-dialog-header><ux-dialog-body style=\"position:absolute;padding:0;left:0;top:35px;bottom:0;right:0\"><iframe ref=\"docframe\" load.bind=\"onFrameLoad()\" src.bind=\"url\" title=\"Document\" width=\"100%;\" height=\"100%;\"></iframe></ux-dialog-body></ux-dialog></template>";});;
define('phxTelemed/dxSearch',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DxSearch = undefined;

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Dx = function Dx(id, code, desc, data) {
    _classCallCheck(this, Dx);

    this.id = id;
    this.selected = false;
    this.code = code;
    this.description = desc;
    this.data = data;
  };

  var DxSearch = exports.DxSearch = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
    function DxSearch(DialogController, http, helper) {
      _classCallCheck(this, DxSearch);

      this.selectedDx = null;
      this.searchResults = [];
      this.searchString = "";
      this.bodypart = "";
      this.sortByUsage = true;
      this.distinct = true;

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
    }

    DxSearch.prototype.close = function close() {
      var self = this;
      self.dialogController.close(true, self.selectedDx);
    };

    DxSearch.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    DxSearch.prototype.activate = function activate(obj) {
      var self = this;
      self.bodypart = obj.bodypart;

      self.search();
    };

    DxSearch.prototype.searchClicked = function searchClicked() {

      this.bodypart = "";
      this.search();
    };

    DxSearch.prototype.search = function search() {
      var self = this;
      self.searchResults = [];

      var url = 'Diagnosis/search?query=' + this.searchString + "&icd10=true&bodypart=" + self.bodypart + "&sortByUsage=" + self.sortByUsage + "&distinct=" + self.distinct;
      self.http.get(self.helper.getApiUrl(url), function (res) {
        for (var i = 0; i < res.length; i++) {
          var dx = res[i];
          self.searchResults.push(new Dx(dx.Id, dx.Icd10Code, dx.Description, dx));
        }
      });
    };

    DxSearch.prototype.rowClicked = function rowClicked(r) {
      this.selectedDx = r;
      for (var i = 0; i < this.searchResults.length; i++) {
        if (this.searchResults[i].id == r.id) {
          this.searchResults[i].selected = true;
        } else {
          this.searchResults[i].selected = false;
        }
      }
    };

    return DxSearch;
  }()) || _class);
});;
define('text!phxTelemed/dxSearch.html',[],function(){return "<template><ux-dialog style=\"width:75%\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\">Diagnosis</h4></ux-dialog-header><ux-dialog-body><div class=\"input-group mb-3\"><input type=\"text\" class=\"form-control\" placeholder=\"search code or description...\" aria-label=\"search code or description...\" aria-describedby=\"button-addon2\" value.bind=\"searchString\"><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" click.delegate=\"searchClicked()\">Search</button></div></div><div class=\"tableFixHeadLight\"><table class=\"table table-sm\"><thead><tr><th scope=\"col\">Code</th><th scope=\"col\">Desc</th></tr></thead><tbody><template repeat.for=\"s of searchResults\"><tr click.delegate=\"rowClicked(s)\" class.bind=\"s.selected ? 'table-primary' : 'table-light'\"><td>${s.code}</td><td>${s.description}</td></tr></template></tbody></table></div></ux-dialog-body><ux-dialog-footer><button click.delegate=\"close()\">OK</button> <button click.delegate=\"cancel()\">Cancel</button></ux-dialog-footer></ux-dialog></template>";});;
define('phxTelemed/home',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', './data', 'lodash', 'moment', '../ptdaysheet/alertPopup', '../phxTelemed/dxSearch', 'aurelia-dialog', './preferenceBuilder', '../phxTelemed/pxSearch', '../phxTelemed/patientSearch', '../phxTelemed/task', '../phxTelemed/dialogView', '../phxTelemed/createVisitPopup', '../phxTelemed/documentPopup', 'aurelia-router'], function (exports, _helper, _http, _aureliaFramework, _data, _lodash, _moment, _alertPopup, _dxSearch, _aureliaDialog, _preferenceBuilder, _pxSearch, _patientSearch, _task, _dialogView, _createVisitPopup, _documentPopup, _aureliaRouter) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Home = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _dec2, _dec3, _dec4, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3;

  var Home = exports.Home = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _data.Data, _aureliaDialog.DialogService, _aureliaRouter.Router), _dec2 = (0, _aureliaFramework.observable)({ changeHandler: 'examChanged' }), _dec3 = (0, _aureliaFramework.observable)({ changeHandler: 'planChanged' }), _dec4 = (0, _aureliaFramework.observable)({ changeHandler: 'historyChanged' }), _dec(_class = (_class2 = function () {
    function Home(helper, http, Data, DialogService, Router) {
      _classCallCheck(this, Home);

      this.displaySchedule = false;
      this.displayVideo = false;
      this.mainScreenClass = 'col-md-12';
      this.appClass = '';
      this.schedule = [];
      this.meds = [];
      this.allergies = [];
      this.surgery = [];
      this.orders = [];
      this.patient = null;
      this.visitDates = [];
      this.patientDocuments = [];
      this.date = null;

      _initDefineProp(this, 'examData', _descriptor, this);

      _initDefineProp(this, 'planData', _descriptor2, this);

      _initDefineProp(this, 'historyData', _descriptor3, this);

      this.webdocs = [];
      this.followupPrefs = [];
      this.quickOrderPrefs = [];
      this.selectedFollowUpPref = null;
      this.selectedQuickOrderPref = null;
      this.lapsedTime = 0;
      this.lapsedTimeDisplay = null;
      this.billableTimer = null;
      this.billingCode = null;
      this.patientId = null;
      this.displayMeds = true;
      this.selectedBodyPart = 'knee';
      this.bodyparts = [];
      this.providers = [];
      this.selectedProvider = null;
      this.filterScheduleByTelemed = true;
      this.selectedCode = null;
      this.patientDxs = [];
      this.macros = [];
      this.caratPosition = -1;
      this.selectedTextarea = null;
      this.middleColumnRowHeight = 0;
      this.isAttached = false;
      this.needsSavingFollowup = false;
      this.needsSavingDx = false;
      this.needsSavingPx = false;
      this.followupSaveTimeout = null;
      this.scheduleHeight = 0;
      this.prefTypeButtonText = 'Telemed';
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.refreshHistoryTree = false;
      this.loadRequirements = [];
      this.desktopVersion = true;
      this.containerTop = 56;
      this.windowHeight = 0;
      this.dropdownHeight = 0;

      this.helper = helper;
      this.http = http;
      this.data = Data;
      this.dialogService = DialogService;
      this.router = Router;
    }

    Home.prototype.activate = function activate(params) {

      var self = this;

      self.patient = new self.data.getPatientEmpty();

      self.bodyparts.push('Ankle', 'Knee', 'Hip', 'Wrist', 'Elbow', 'Shoulder', 'Cervical', 'Lumbar');
      self.macros.push("[he/she]", '[his/her]', '[him/her]', '[patient]', '[side]', '[postopdays]', '[age]', '[gender]', '[current provider]', '[hand dominance]');

      if (typeof this.helper.jwt() === 'undefined' || this.helper.jwt() == null) {
        if (params.hasOwnProperty("jwt")) {
          this.helper.processToken(params.jwt);
        }

        if (params.hasOwnProperty("date")) {
          self.date = params.date;
        }

        if (params.hasOwnProperty("bodypart")) {
          self.selectedBodyPart = params.bodypart;
        } else {
          self.selectedBodyPart = 'Knee';
        }
        var bp = self.selectedBodyPart;

        self.refreshScheduledProviders(function () {});

        if (params.hasOwnProperty("providerid")) {
          self.provider = params.providerid;

          self.data.getSchedule(params.providerid, true, function (r) {
            self.schedule = r;

            var sProvider = _.find(self.providers, function (p) {
              return p.ProviderID == params.providerid;
            });
            self.selectedProvider = sProvider;

            self.filterExamPref(params.providerid);
            self.checkLoadRequirements('schedules');
          });
        }

        if (params.hasOwnProperty("patientid")) {
          self.patientId = params.patientid;
        }

        self.loadDataForSelectedSchedule(self.patientId, self.date, self.provider);

        self.data.checkForProcedureCode(self.provider, self.date, self.patientId, function (foundCode) {
          if (foundCode) {

            var px = {
              "id": foundCode.PatientCPTID,
              "selected": false,
              "code": foundCode.CptCode,
              "description": foundCode.CodeDescr,
              "data": foundCode
            };
            self.selectedCode = px;
          }
        });
      } else {}

      window.addEventListener('resize', function (event) {
        self.resize();
      }, true);

      document.addEventListener('load', function (event) {
        self.resize();
      }, true);

      self.getDrFirstUrl();
    };

    Home.prototype.examChanged = function examChanged(newValue, oldValue) {

      if (newValue && newValue.hasOwnProperty("loading")) return;

      if (newValue && !newValue.hasOwnProperty("PostOpID")) return;

      var save = false;

      if (newValue != null && newValue != undefined) {
        if (oldValue = null || oldValue == undefined) {
          save = true;
        } else if (newValue.ChartNoteExam != oldValue.ChartNoteExam) {
          save = true;
        }
      }

      if (save) {
        this.examData.ChartNoteExam = newValue.ChartNoteExam;

        this.saveFollowup(this.examData, null, null);
      }
    };

    Home.prototype.planChanged = function planChanged(newValue, oldValue) {

      if (newValue && newValue.hasOwnProperty("loading")) return;

      if (newValue && !newValue.hasOwnProperty("PlanID")) return;

      var save = false;

      if (newValue != null && newValue != undefined) {
        if (oldValue = null || oldValue == undefined) {
          save = true;
        } else if (newValue.PlanText != oldValue.PlanText) {
          save = true;
        }
      }

      if (save) {
        this.planData.PlanText = newValue.PlanText;

        this.saveFollowup(null, this.planData, null);
      }
    };

    Home.prototype.historyChanged = function historyChanged(newValue, oldValue) {

      if (newValue && newValue.hasOwnProperty("loading")) return;

      if (newValue && !newValue.hasOwnProperty("HPIID")) return;

      var save = false;

      if (newValue != null && newValue != undefined) {
        if (oldValue = null || oldValue == undefined) {
          save = true;
        } else if (newValue.HpiText != oldValue.HpiText) {
          save = true;
        }
      }

      if (save) {
        this.historyData.HpiText = newValue.HpiText;

        this.saveFollowup(null, null, this.historyData);
      }
    };

    Home.prototype.getDrFirstUrl = function getDrFirstUrl() {
      var self = this;
      var patId = self.patient.data.PatientID;
      var screen = patId == "" ? "message" : "patient";
      var url = "drfirst/url?screen=" + screen + "&userId=" + self.helper._user.ErxUserID + "&patientId=" + patId;
      self.http.get(self.helper.getApiUrl(url), function (res) {
        if (webkit != undefined) {

          var url = { 'url': res };

          webkit.messageHandlers.launchDrFirst.postMessage(url);
        }
      }, function (err) {});
    };

    Home.prototype.hidetoolbar = function hidetoolbar() {
      this.desktopVersion = false;
      this.contentBodyHeight = this.contentBodyHeight + this.containerTop;
      this.containerTop = 0;
      this.appClass = 'ipad';
      this.resize();
    };

    Home.prototype.refreshScheduledProviders = function refreshScheduledProviders(callback) {
      var self = this;
      self.loadScheduledProviders(function () {
        if (callback) {
          callback();
        }
      });
    };

    Home.prototype.checkLoadRequirements = function checkLoadRequirements(requirement) {
      var self = this;

      self.loadRequirements.push(requirement);

      if (self.loadRequirements.indexOf('providers') > -1 && self.loadRequirements.indexOf('schedules') > -1) {

        self.loadDataForSelectedSchedule(self.patientId, self.date, self.provider);
      }
    };

    Home.prototype.togglePrefTypeClicked = function togglePrefTypeClicked(optionalType) {
      var self = this;

      if (optionalType != undefined) {
        self.prefTypeButtonText = optionalType;
      } else {
        if (self.prefTypeButtonText === 'Telemed') {
          self.prefTypeButtonText = 'Follow';
        } else {
          self.prefTypeButtonText = 'Telemed';
        }
      }
      self.filterExamPref();
    };

    Home.prototype.formatDate = function formatDate(date) {
      if (date === null) return "";

      console.log('FORMAT DATE', date);
      return (0, _moment2.default)(date).format("MM-DD-YYYY");
    };

    Home.prototype.medsTabClicked = function medsTabClicked(medsClicked) {
      this.displayMeds = medsClicked;
    };

    Home.prototype.loadPatientFromVisitCode = function loadPatientFromVisitCode(vc) {
      var dt = this.formatDate(vc.ExamDateTime);
      this.loadDataForSelectedSchedule(vc.PatientID, dt, vc.ProviderID);
    };

    Home.prototype.loadDataForSelectedSchedule = function loadDataForSelectedSchedule(patientId, date, providerId) {
      var self = this;

      self.visitDates = [];
      self.meds = [];
      self.surgery = [];
      self.allergies = [];
      self.orders = [];


      self.examData = null;
      self.planData = null;
      self.historyData = null;

      self.selectedCode = null;
      self.patientDxs = [];

      self.provider = providerId == undefined ? self.selectedProvider.ProviderID : providerId;
      self.patientId = patientId;
      self.data.getPatient(self.patientId, function (p) {
        self.patient = p;
        self.date = date;
        self.resize();

        self.data.getAllVisitCodeForPatient(self.patient.data.PatientID, function (vcs) {
          self.visitDates = vcs;
        });

        self.data.getDocumentsForPatientAndDate(self.patient.data.PatientID, date, function (docs) {
          self.patientDocuments = docs;
        });

        self.data.getPatientMeds(self.patient.data.PatientID, function (res) {
          self.meds = res;
        });
        self.data.getPatientSurgeries(self.patient.data.PatientID, function (res) {
          self.surgery = res;
        });
        self.data.getPatientAllergies(self.patient.data.PatientID, function (res) {
          self.allergies = res;
        });
        self.data.getOrders(self.patient.data.PatientID, function (res) {
          self.orders = res;
        });

        if (self.provider != null || self.provider != undefined) {
          self.data.getExamData(self.patient.data.PatientID, self.provider, date, function (res) {
            var examType = res.exam.TYPE.toUpperCase();

            if (examType != 'TELEMED' && examType != 'FOLLOW') {
              examType = 'FOLLOW';
            }
            self.togglePrefTypeClicked(examType);

            var loadingExam = res.exam;
            loadingExam['loading'] = true;

            var loadingPlan = res.plan;
            loadingPlan['loading'] = true;

            var loadingHx = res.hpi;
            loadingHx['loading'] = true;

            self.examData = loadingExam;
            self.planData = loadingPlan;
            self.historyData = loadingHx;

            self.resize();
          });

          self.data.checkForProcedureCode(self.provider, self.date, self.patientId, function (foundCode) {
            if (foundCode) {
              var px = {
                "id": foundCode.PatientCPTID,
                "selected": false,
                "code": foundCode.CptCode,
                "description": foundCode.CodeDescr,
                "data": foundCode,
                "modifier": foundCode.Modifier
              };
              self.selectedCode = px;
            } else {
              self.selectedCode = null;
            }
          });
        }

        self.data.getDiagnosis(self.patient.data.PatientID, function (res) {
          self.patientDxs = res;
        });
      });
    };

    Home.prototype.resize = function resize() {
      var self = this;

      if (!self.isAttached) {
        return;
      }

      var pr = self.patientRow;
      var er = self.examRow;
      var nb = self.navbar;
      self.windowHeight = window.innerHeight;
      self.dropdownHeight = Math.floor(window.innerHeight * .4);
      var windowHeight = window.innerHeight;
      var navHeight = nb.clientHeight;

      var boxMargin = 10;
      var boxHeaderHeight = 44;

      if (nb.clientHeight == 0) {
        var mHead = self.medHead;
        var dHead = self.dxHead;

        var usableHeight = windowHeight - boxMargin * 4 - mHead.clientHeight - dHead.clientHeight - 3;
        this.middleColumnRowHeight = usableHeight / 3;
      } else {
        this.middleColumnRowHeight = windowHeight / 3 - boxMargin * 2 - boxHeaderHeight;
      }

      self.scheduleHeight = windowHeight - 125;

      if (nb.clientHeight == 0) {
        this.contentBodyHeight = windowHeight + navHeight;
      } else {
        this.contentBodyHeight = windowHeight - navHeight;
      }

      var diff = this.contentBodyHeight - pr.clientHeight;
      this.examScrollBodyHeight = diff - 5;

      var eHead = self.examHead;
      var eLable = self.examLable;
      var eBody = self.examBody;
      var usableExamHeight = eBody.clientHeight - eLable.clientHeight * 3 - eHead.clientHeight;
      self.examTextareaHeight = usableExamHeight / 3;
    };

    Home.prototype.attached = function attached() {
      var self = this;
      self.isAttached = true;

      self.resize();
    };

    Home.prototype.detached = function detached() {};

    Home.prototype.timerClicked = function timerClicked() {
      if (this.billableTimer != null) {
        window.clearInterval(this.billableTimer);
        this.billableTimer = null;
      } else {
        this.billableTimer = window.setInterval(this.timerTick, 1000, this);
      }
    };

    Home.prototype.timerTick = function timerTick(a) {
      a.lapsedTime += 1;

      var duration = _moment2.default.duration(a.lapsedTime * 1000);
      var dSec = duration.get('seconds');
      var dMin = duration.get('minutes');
      var dHr = duration.get('hours');
      var time = (0, _moment2.default)().set({ 'hour': dHr, 'minute': dMin, 'second': dSec });
      var format = "";
      if (dHr > 0) {
        format = "hh:";
      }
      if (dMin > 0) {
        format += "mm:";
      }

      format += dMin > 0 ? "ss" : ":ss";

      a.lapsedTimeDisplay = time.format(format);
      a.calculateBillingCodeByTime("PRO");
    };

    Home.prototype.calculateBillingCodeByTime = function calculateBillingCodeByTime(providerLicenseType) {
      var duration = _moment2.default.duration(this.lapsedTime * 1000);
      var dMin = duration.get('minutes');
      if (dMin > 4 && dMin < 11) {
        this.billingCode = providerLicenseType == "PRO" ? 99441 : 98966;
      }
      if (dMin > 10 && dMin < 21) {
        this.billingCode = providerLicenseType == "PRO" ? 99442 : 98967;
      }
      if (dMin > 21) {
        this.billingCode = providerLicenseType == "PRO" ? 99443 : 98968;
      }
    };

    Home.prototype.insertQuickOrderPref = function insertQuickOrderPref() {
      var p = this.selectedQuickOrderPref;
      var self = this;

      self.data.getNewOrder(function (oRes) {

        var o = oRes;
        o.DateCollect = self.date;
        o.PatientID = self.patient.data.PatientID;
        o.ProviderID = self.provider;

        self.orders.push();
      });
    };

    Home.prototype.insertFollowUpPref = function insertFollowUpPref() {

      var p = this.selectedFollowUpPref;
      var self = this;

      var prefData = {
        preferenceId: p.PostOpID,
        patientId: self.patient.data.PatientID,
        providerId: self.selectedProvider.ProviderID,
        examDateTime: self.date
      };

      self.data.getPopulatedPreference(prefData, function (populatedPreferenceData) {

        self.data.getNewExam(function (eRes) {
          var newExam = eRes;

          if (self.examData && self.examData.PostOpID > 0) {
            newExam = self.examData;
          }
          newExam.ChartNoteExam = populatedPreferenceData.NoteExam;

          self.examData = newExam;

          self.data.getNewHpi(function (hRes) {
            var newHpi = hRes;
            if (self.historyData && self.historyData.HPIID > 0) {
              newHpi = self.historyData;
            }

            newHpi.HpiText = populatedPreferenceData.NoteHistory;
            self.historyData = newHpi;

            self.data.getNewPlan(function (pRes) {
              var newPlan = pRes;
              if (self.planData && self.planData.PlanID > 0) {
                newPlan = self.planData;
              }

              newPlan.PlanText = populatedPreferenceData.NotePlan;
              self.planData = newPlan;

              self.refreshHistoryTree = true;
            });
          });
        });
      });
    };

    Home.prototype.toggleSchedule = function toggleSchedule() {
      this.displaySchedule = this.displaySchedule ? false : true;
      if (this.displaySchedule) {
        this.displayVideo = false;
      }
      this.mainScreenClass = this.displaySchedule ? 'col-md-9' : 'col-md-12';

      this.refreshScheduledProviders();

      this.resize();
    };

    Home.prototype.saveFollowup = function saveFollowup(examData, planData, historyData) {
      var self = this;
      var conditionCounter = 0;

      var proId = self.provider;
      if (proId == null || proId == undefined) {
        proId = self.selectedProvider.ProviderID;
      }

      self.data.saveExamData(examData, planData, historyData, proId, self.date, self.patient.data.PatientID, self.selectedBodyPart, self.prefTypeButtonText, function () {
        conditionCounter++;
        if (conditionCounter === 3) {
          if (self.refreshHistoryTree) {
            self.refreshHistoryTree = false;
            var bridge = self.getBoundObject();
            if (typeof bridge !== 'undefined') {
              setTimeout(function () {
                bridge.phxTelemed_refreshHistoryTree(self.patientId);
              }, 10);
            }
          }
        }
      });
    };

    Home.prototype.saveDiagnoses = function saveDiagnoses(callback) {
      var self = this;
      var selectedDiagnoses = self.patientDxs.filter(function (item) {
        return item.selected === true;
      });

      console.log('SELECTED DIAGNOSES', selectedDiagnoses);

      var formattedDate = (0, _moment2.default)(self.date).format();
      console.log('self.date formatted', formattedDate);
      console.log('self.date', self.date);

      var addedDiagnoses = [];
      for (var i = 0; i < selectedDiagnoses.length; i++) {
        var current = selectedDiagnoses[i];

        var patientDx = {};

        if (current.data.PatientDxCode) {

          patientDx = {
            PatientDxDescription: current.data.PatientDxDescription,
            PatientDxCode: current.data.PatientDxCode,
            ExamDateTime: formattedDate,
            PatientID: self.patient.data.PatientID,
            ProviderID: self.selectedProvider.ProviderID,
            UserID: self.helper._user.UserID,
            Status: 'A',
            FromIcd10First: 0,
            DateCreated: (0, _moment2.default)().format(),
            DateModified: (0, _moment2.default)().format()
          };
        } else {

          patientDx = {
            PatientDxDescription: current.data.Description,
            PatientDxCode: current.data.DxKey,
            ExamDateTime: formattedDate,
            PatientID: self.patient.data.PatientID,
            ProviderID: self.selectedProvider.ProviderID,
            UserID: self.helper._user.UserID,
            Status: 'A',
            FromIcd10First: 0,
            DateCreated: (0, _moment2.default)().format(),
            DateModified: (0, _moment2.default)().format()
          };
        }

        addedDiagnoses.push(patientDx);
      }

      self.data.saveAddedDiagnoses(addedDiagnoses, function (returnData) {
        for (var _i = 0; _i < self.patientDxs.length; _i++) {
          var _current = self.patientDxs[_i];
          _current.selected = false;
          self.needsSavingDx = false;
        }
        self.helper.createNotySuccess('Added Diagnoses Saved Successfully!');
        if (callback) callback();
      });
    };

    Home.prototype.deleteExamData = function deleteExamData() {
      var self = this;

      var result = confirm('Are you sure you want to delete the exam data?');
      console.log('CONFIRM', result);

      if (!result) {
        return;
      }

      if (self.examData.PostOpID == 0 && self.historyData.HPIID == 0 && self.planData.PlanID == 0) {
        self.examData = null;
        self.historyData = null;
        self.planData = null;
        return;
      }

      var conditionCounter = 0;
      self.data.deleteExamData(self.examData, self.planData, self.historyData, function () {
        conditionCounter++;
        if (conditionCounter === 3) {
          self.helper.createNotySuccess('Deleted exam data.');
          self.examData = null;
          self.historyData = null;
          self.planData = null;
          var bridge = self.getBoundObject();
          if (typeof bridge !== 'undefined') {
            console.log('CALLING REFRESH HISTORY TREE!');
            bridge.phxTelemed_refreshHistoryTree(self.patientId);
          }
        }
      });
    };

    Home.prototype.deleteExamDataNoConfirm = function deleteExamDataNoConfirm() {};

    Home.prototype.saveProcedure = function saveProcedure(callback) {
      var self = this;

      var tPatCptID = 0;
      if (self.selectedCode.data && self.selectedCode.data.PatientCPTID) {
        tPatCptID = self.selectedCode.data.PatientCPTID;
      }

      var patientPx = {
        CptCode: self.selectedCode.code,
        CodeDescr: self.selectedCode.description,
        PatientID: self.patient.data.PatientID,
        ProviderID: self.selectedProvider.ProviderID,
        ExamDateTime: (0, _moment2.default)(self.date).format(),
        UserID: self.helper._user.UserID,
        Type: 'Visit',
        BodyPart: 'ALL',
        Modifier: self.selectedCode.modifier,
        PatientCPTID: tPatCptID,
        ProcedureID: self.selectedCode.id
      };

      if (patientPx.PatientCPTID == 0) {
        self.data.saveSelectedCode(patientPx, function (returnData) {
          self.needsSavingPx = false;

          var px = {
            "id": returnData.PatientCPTID,
            "selected": false,
            "code": returnData.CptCode,
            "description": returnData.CodeDescr,
            "modifier": returnData.Modifier,
            "data": returnData
          };
          self.selectedCode = px;

          self.helper.createNotySuccess('Procedure Saved Successfully!');
          if (callback) callback();
        });
      } else {
        self.data.updateSelectedCode(patientPx, function (returnData) {
          self.needsSavingPx = false;

          var px = {
            "id": returnData.PatientCPTID,
            "selected": false,
            "code": returnData.CptCode,
            "description": returnData.CodeDescr,
            "modifier": returnData.Modifier,
            "data": returnData
          };
          self.selectedCode = px;

          self.helper.createNotySuccess('Procedure Updated Successfully!');
          if (callback) callback();
        });
      }
      console.log('SAVE PROCEDURE');
    };

    Home.prototype.getBoundObject = function getBoundObject() {
      var self = this;

      var bridge = undefined;
      if (typeof bound === 'undefined') {
        if (chrome && chrome.webview && chrome.webview.hostObjects) {
          bridge = chrome.webview.hostObjects.bound;
          console.log('bridge from chrome.webview.hostObjects:', bridge);
          console.log('chrome', chrome);
        }
      } else {
        bridge = bound;
      }
      return bridge;
    };

    Home.prototype.launchVideo = function launchVideo() {
      var self = this;

      var bridge = self.getBoundObject();

      if (typeof bridge !== 'undefined') {
        var providerIdString = '';
        if (self.selectedProvider) {
          providerIdString = self.selectedProvider.ProviderID.toString();
        } else {
          providerIdString = self.providers[0].ProviderID.toString();
        }
        var dateString = self.date.toString();
        var patientIdString = '';
        if (self.patient && self.patient.data) {
          patientIdString = self.patient.data.PatientID.toString();
        } else {
          patientIdString = self.patientId;
        }
        bridge.phxTelemed_openVideo(providerIdString, dateString, patientIdString);
      } else {
        var url = "https://backline-health.com/";

        window.open(url, "_blank");
      }
    };

    Home.prototype.toggleVideo = function toggleVideo() {
      var self = this;
      self.displayVideo = !self.displayVideo;
      if (self.displaySchedule) {
        self.displaySchedule = false;
        self.mainScreenClass = self.displaySchedule ? 'col-md-9' : 'col-md-12';
      }
    };

    Home.prototype.startFollowupSaveProcess = function startFollowupSaveProcess() {
      var self = this;

      if (self.followupSaveTimeout) {
        clearTimeout(self.followupSaveTimeout);
      }

      self.followupSaveTimeout = setTimeout(function () {
        self.saveFollowup(self.examData, self.planData, self.historyData);
        self.followupSaveTimeout = null;
      }, 1500);
    };

    Home.prototype.followupTextChange = function followupTextChange(event) {
      var self = this;

      self.startFollowupSaveProcess();
    };

    Home.prototype.populateExamWithPreference = function populateExamWithPreference(pref) {
      var self = this;

      self.data.getNewExam(function (newExam) {
        newExam.ChartNoteExam = pref.NoteExam;
        self.examData = newExam;
      });
      self.data.getNewHpi(function (newHpi) {
        newHpi.HpiText = pref.NoteHistory;
        self.historyData = newHpi;
      });
      self.data.getNewPlan(function (newPlan) {
        newPlan.PlanText = pref.NotePlan;
        self.planData = newPlan;
      });
    };

    Home.prototype.scheduleRowClick = function scheduleRowClick(schedule, createVisit) {
      var self = this;

      if (schedule.isNewPatient) {
        alert('Telemed visits for new patients are not supported.');
        return;
      }

      self.locationId = schedule.data.Schedule.LocationID;

      if (!createVisit && schedule.latestVisitBodyPart && typeof schedule.latestVisitBodyPart !== 'undefined') {
        self.selectedBodyPart = schedule.latestVisitBodyPart;
      }

      self.filterExamPref();

      console.log('SCHEDULE CLICKED', schedule);
      var dateToLoad = createVisit ? (0, _moment2.default)().format('MM-DD-YYYY') : schedule.latestVisitDateMoment.format('MM-DD-YYYY');

      self.loadDataForSelectedSchedule(schedule.patientId, dateToLoad);

      var bridge = self.getBoundObject();
      if (typeof bridge !== 'undefined') {
        bridge.phxTelemed_scheduleDoubleClick(schedule.id, createVisit, self.selectedBodyPart);
        if (createVisit) {
          schedule.latestVisitDate = dateToLoad;
        }
      } else {

        if (!createVisit) return;

        schedule.latestVisitDate = dateToLoad;
        schedule.latestVisitDateMoment = (0, _moment2.default)(dateToLoad);

        self.data.getLatestVisitCodeForPatient(schedule.patientId, function (res) {

          if (res != null) {
            var latestDate = (0, _moment2.default)(res.ExamDateTime).format('MM/DD/YYYY');
            if (latestDate === dateToLoad) {
              self.displayVisitCreatePopup(new self.data.getNewCreateVisitObject(res.Visit_Type, res.VisitBodyPart, res.VisitBodySide, dateToLoad));
            } else {
              var vo = new self.data.getNewCreateVisitObject();
              vo.date = dateToLoad;
              self.displayVisitCreatePopup(vo);
            }
          } else {
            var vo = new self.data.getNewCreateVisitObject();
            vo.date = dateToLoad;
            self.displayVisitCreatePopup(vo);
          }
        });
      }
    };

    Home.prototype.displayVisitCreatePopup = function displayVisitCreatePopup(createVisitObj) {
      var self = this;
      var windowHeight = window.innerHeight / 2;
      var windowWidth = window.innerWidth / 2;

      self.dialogService.open({ viewModel: _createVisitPopup.CreateVisitPopup, model: { popupWidth: windowWidth, popupHeight: windowHeight, visitObject: createVisitObj } }).whenClosed(function (response) {
        var res = response.output;
        if (res != null) {
          self.createVisit(self.patientId, res, self.selectedProvider.ProviderID, self.helper._user.UserID, self.locationId);
        }
      });
    };

    Home.prototype.createVisit = function createVisit(patientId, vObject, providerId, userId, locationId) {
      var self = this;

      self.data.getVisitCodeObject(function (vc) {
        vc.PatientID = patientId;
        vc.ProviderID = providerId;
        vc.UserID = userId;
        vc.LocationID = locationId;
        vc.Visit_Type = vObject.visitObject.visitType;
        vc.VisitBodyPart = vObject.visitObject.bodypart;
        vc.VisitBodySide = vObject.visitObject.bodyside;
        vc.ExamDateTime = vObject.visitObject.date;

        self.data.createVisitCode(vc, function (res) {});
      });
    };

    Home.prototype.filterExamPref = function filterExamPref(providerId) {
      var self = this;
      var proId = providerId == undefined ? self.selectedProvider.ProviderID : providerId;

      self.data.getFollowUpPref(proId, self.selectedBodyPart, self.prefTypeButtonText, function (res) {
        self.followupPrefs = res;
      });
    };

    Home.prototype.loadScheduledProviders = function loadScheduledProviders(callback) {
      var self = this;
      self.data.getScheduledProviders(self.date, function (res) {
        self.providers = res;

        var all = {
          "ProviderEntity": "All",
          "ProviderID": 0
        };

        self.providers.splice(0, 0, all);

        callback();
      });
    };

    Home.prototype.loadScheduleByProvider = function loadScheduleByProvider() {
      var self = this;
      self.data.getSchedule(self.selectedProvider.ProviderID, self.filterScheduleByTelemed, function (r) {
        self.schedule = r;
        self.filterExamPref();
        self.data.getWebDocsWithProviderID(self.selectedProvider.ProviderID, function (res) {
          self.webdocs = res;

          var document = {
            "Description": "Documents",
            "Id": 0
          };
          self.selectedWebdoc = document;
        });
      });
    };

    Home.prototype.toggleScheduleFilter = function toggleScheduleFilter() {
      var self = this;

      self.filterScheduleByTelemed = self.filterScheduleByTelemed ? false : true;
      self.loadScheduleByProvider();
    };

    Home.prototype.codeSelected = function codeSelected(code) {
      var self = this;

      if (self.selectedCode != null) {
        self.selectedCode.code = code.code;
        self.selectedCode.description = code.description;
        self.selectedCode.modifier = code.modifier;
        self.selectedCode.id = code.id;
      } else {
        self.selectedCode = code;
      }
      self.saveProcedure();
    };

    Home.prototype.setSelectedWebdoc = function setSelectedWebdoc(doc) {
      this.selectedWebdoc = doc;
    };

    Home.prototype.openDocument = function openDocument(document) {
      var url = this.helper._server + "/webdocuments/#document?";

      url = url.concat("docid=", document.Id);
      url = url.concat("&locked=", "true");
      url = url.concat("&print=", "false");
      url = url.concat("&jwt=", this.helper._jwt);

      this.displayDocumentPopup(url);
    };

    Home.prototype.createDxObject = function createDxObject(dx) {
      var self = this;
      var aDx = {
        "id": 0,
        "code": dx.code,
        "description": dx.description,
        "date": self.helper.getDateWithFormat(self.date, "MM/DD/YYYY"),
        "data": dx.data,
        "selected": true
      };
      return aDx;
    };

    Home.prototype.displayTaskForm = function displayTaskForm() {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.dialogService.open({ viewModel: _task.Task, model: { popupWidth: windowWidth, popupHeight: windowHeight } }).whenClosed(function (response) {
        var res = response.output;
        if (res != null && res.launchPatientId != null) {
          self.loadDataForSelectedSchedule(res.launchPatientId, (0, _moment2.default)());
        }
      });
    };

    Home.prototype.displayPatientSearch = function displayPatientSearch() {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.dialogService.open({ viewModel: _patientSearch.PatientSearch, model: { popupWidth: windowWidth, popupHeight: windowHeight } }).whenClosed(function (response) {
        var aPat = response.output;
        if (aPat != null) {
          self.loadDataForSelectedSchedule(aPat.id, (0, _moment2.default)());
        }
      });
    };

    Home.prototype.displayDocumentPopup = function displayDocumentPopup(url) {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.dialogService.open({ viewModel: _documentPopup.DocumentPopup, model: { popupWidth: windowWidth, popupHeight: windowHeight, documentUrl: url } }).whenClosed(function (response) {});
    };

    Home.prototype.displayChat = function displayChat(dialogViewUrl) {
      var self = this;

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.dialogService.open({ viewModel: _dialogView.DialogView, model: { popupWidth: windowWidth, popupHeight: windowHeight, url: dialogViewUrl } }).whenClosed(function (response) {});
    };

    Home.prototype.displayDxPop = function displayDxPop() {
      var self = this;

      if (!self.isTimeDiffAllowed()) {
        return;
      }

      self.dialogService.open({ viewModel: _dxSearch.DxSearch, model: { "bodypart": self.selectedBodyPart } }).whenClosed(function (response) {
        var dx = response.output;
        if (dx != null) {
          var aDx = self.createDxObject(dx);

          self.patientDxs.splice(0, 0, aDx);

          self.saveDiagnoses();
        }
      });
    };

    Home.prototype.displayPxPop = function displayPxPop() {
      var self = this;

      if (!self.isTimeDiffAllowed()) {
        return;
      }

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      self.dialogService.open({ viewModel: _pxSearch.PxSearch, model: { popupWidth: windowWidth, popupHeight: windowHeight } }).whenClosed(function (response) {
        var px = response.output;
        if (px != null) {

          px.modifier = px.modifier == 'NONE' ? null : px.modifier;

          self.codeSelected(px);
        }
      });
    };

    Home.prototype.isTimeDiffAllowed = function isTimeDiffAllowed() {
      var self = this;
      var currentExamDate = (0, _moment2.default)(self.date);
      var now = (0, _moment2.default)();
      var timeDiff = now.diff(currentExamDate, 'days');

      if (timeDiff > 7) {
        alert('Modifying visits older than 7 days is not allowed in the Telemed screen');
        return false;
      }
      return true;
    };

    Home.prototype.dxChecked = function dxChecked(dx) {
      var self = this;

      if (!self.isTimeDiffAllowed()) {
        return;
      }

      if (dx.selected) {
        for (var i = 0; i < self.patientDxs.length; i++) {
          var aDx = self.patientDxs[i];
          if (aDx.id == dx.id) {
            self.patientDxs.splice(i, 1);
          }
        }
      } else {
        var aDx = self.createDxObject(dx);
        aDx.selected = true;
        self.patientDxs.splice(0, 0, aDx);
        console.log('INSERTED DX');
      }
      console.log('DX CHECKED!');
      self.saveDiagnoses();
    };

    Home.prototype.macroClicked = function macroClicked(m) {
      var self = this;
      var mcro = m;
      if (self.selectedTextarea != null && self.caratPosition > -1) {
        var txt = self.selectedTextarea.value;
        var splitTxt = [txt.slice(0, self.caratPosition), txt.slice(self.caratPosition)];
        self.selectedTextarea.value = splitTxt[0] + " " + m + " " + splitTxt[1];

        if (self.selectedTextarea.id == 'exam') {
          self.examData.ChartNoteExam = self.selectedTextarea.value;
        }
        if (self.selectedTextarea.id == 'hpi') {
          self.historyData.HpiText = self.selectedTextarea.value;
        }
        if (self.selectedTextarea.id == 'plan') {
          self.planData.PlanText = self.selectedTextarea.value;
        }
      }
    };

    Home.prototype.getPreferenceWithId = function getPreferenceWithId(id) {
      var self = this;
      var p = _.find(self.followupPrefs, function (data) {
        return data.PostOpID == id;
      });

      return p ? p : null;
    };

    Home.prototype.createPreferenceClicked = function createPreferenceClicked() {
      var self = this;

      var pref = self.selectedFollowUpPref;

      self.dialogService.open({ viewModel: _preferenceBuilder.PreferenceBuilder, model: pref, lock: false }).whenClosed(function (response) {

        if (response.wasCancelled) {
          return;
        }

        var dataFromDialog = response.output;

        var preference = {
          ProviderID: self.selectedProvider.ProviderID,
          BodyPart: dataFromDialog.bodyPart,
          Type: self.prefTypeButtonText,
          PostOpProcedure: dataFromDialog.preferenceName,
          NoteHistory: dataFromDialog.hpiText,
          NoteExam: dataFromDialog.examText,
          NotePlan: dataFromDialog.planText,
          Timeframe: '',
          visitCode: '',
          PostOpID: dataFromDialog.id
        };

        if (preference.PostOpID == 0) {
          self.data.savePreference(preference, function () {
            self.helper.createNotySuccess('Preference Saved Successfully!');
            self.data.getFollowUpPref(self.selectedProvider.ProviderID, self.selectedBodyPart, self.prefTypeButtonText, function (res) {
              self.followupPrefs = res;
            });
          });
        } else {
          self.data.updatePreference(preference, function () {
            self.helper.createNotySuccess('Preference Updated Successfully!');
            self.data.getFollowUpPref(self.selectedProvider.ProviderID, self.selectedBodyPart, self.prefTypeButtonText, function (res) {
              self.followupPrefs = res;
            });
          });
        }
      });
    };

    Home.prototype.setSelectedTextarea = function setSelectedTextarea(e) {
      this.selectedTextarea = e.target;
      this.caratPosition = e.target.selectionStart;
    };

    Home.prototype.getPreviousExam = function getPreviousExam() {
      var self = this;
      self.data.getPreviousExamData(self.patient.data.PatientID, self.selectedBodyPart, self.date, function (res) {
        if (self.examData != null) {
          res.exam.PostOpID = self.examData.PostOpID;
        }
        if (self.historyData != null) {
          res.hpi.HPIID = self.historyData.HPIID;
        }
        if (self.planData != null) {
          res.plan.PlanID = self.planData.PlanID;
        }

        res.plan.ProviderID = self.selectedProvider.ProviderID;
        res.exam.ProviderID = self.selectedProvider.ProviderID;
        res.hpi.ProviderID = self.selectedProvider.ProviderID;

        self.examData = res.exam;
        self.planData = res.plan;
        self.historyData = res.hpi;

        self.resize();
      });
    };

    return Home;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'examData', [_dec2], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'planData', [_dec3], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'historyData', [_dec4], {
    enumerable: true,
    initializer: function initializer() {
      return null;
    }
  })), _class2)) || _class);
});;
define('text!phxTelemed/home.html',[],function(){return "<template><style type=\"text/css\">.form-item{margin-right:10px}</style><nav class=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\" ref=\"navbar\" style=\"border-bottom:2px solid rgba(0,0,0,.4)\" show.bind=\"desktopVersion\"><a class=\"navbar-brand\" href=\"#\"><i class=\"fa fa-phone fa-lg\"></i> Telemed / Follow Up</a> <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span class=\"navbar-toggler-icon\"></span></button><div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"><i id=\"schedule-button\" style=\"cursor:pointer\" class=\"fa fa-list fa-lg ml-auto\" click.delegate=\"toggleSchedule()\"></i> <i class=\"fa fa-comments fa-lg\" style=\"padding-left:10px;cursor:pointer\" click.delegate=\"toggleVideo()\"></i> <i class=\"fa fa-camera fa-lg\" style=\"padding-left:10px;cursor:pointer\" click.delegate=\"launchVideo()\"></i> <i id=\"toolbar-hide\" style=\"display:none\" click.delegate=\"hidetoolbar()\"></i> <i if.bind=\"!desktopVersion\" id=\"show-taskform\" class=\"fa fa-tasks fa-lg ml-2\" click.delegate=\"displayTaskForm()\"></i></div></nav><div class.bind=\"appClass\"><div class=\"container-fluid\" style=\"position:fixed;background-image:linear-gradient(to bottom right,#bad2e6,rgba(186,210,230,.05));overflow-y:scroll\" ref=\"contentbody\" css=\"height:${contentBodyHeight}px;, top:${containerTop}px;\"><div class=\"row\" style=\"height:100%\"><div class.bind=\"mainScreenClass\" style=\"height:100%\"><div class=\"row\" style=\"height:100%\"><div class=\"col-md-6\" style=\"height:100%\"><div class=\"row\" style=\"padding-top:10px\" ref=\"patientRow\"><div class=\"col pr-0\"><div class=\"card mb-2\" style=\"box-shadow:3px 3px 7px 0 rgba(0,0,0,.3)\"><div class=\"card-header\" style=\"padding-left:10px;padding-top:2px;padding-bottom:2px\"><div class=\"dropdown\" style=\"display:inline-block\"><button class=\"btn btn-light dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><span style=\"font-size:large;font-weight:600\">${patient.PatientName()}</span></button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton1\"><a class=\"dropdown-item\" href=\"#\">Home: ${patient.data.PhoneHome}</a><a class=\"dropdown-item\" href=\"#\">Cell: ${patient.data.PhoneCell}</a><a class=\"dropdown-item\" href=\"#\">Email: ${patient.data.Email}</a></div></div><div class=\"dropdown\" style=\"display:inline-block\"><button class=\"btn btn-light dropdown-toggle\" type=\"button\" id=\"dropdownDateButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"fa fa-calendar fa-lg pr-1\"></i>${date} </button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownDateButton\"><a class=\"dropdown-item\" repeat.for=\"v of visitDates\" model.bind=\"v\" click.delegate=\"loadPatientFromVisitCode(v)\" href=\"#\"><i class=\"fa fa-calendar pr-1\"></i>${formatDate(v.ExamDateTime)}</a></div></div></div><div class=\"card-body\" style=\"padding:0\"><div class=\"row m-0 py-2\"><div if.bind=\"!desktopVersion\" class=\"col-sm-2\" style=\"padding:0\"><img src.bind=\"patient.imagepath\" class=\"card-img img-fluid\" style=\"border-radius:0 0 0 calc(.25rem - 1px)\" alt=\"...\"></div><div class=\"col pl-2\"><div class=\"dropdown\" style=\"display:inline-block\"><a class=\"btn btn-outline-primary\" href=\"#\" click.delegate=\"displayPxPop()\"><span if.bind=\"selectedCode\"> ${selectedCode.code} ${selectedCode.modifier} </span><span if.bind=\"!selectedCode\">Code </span><i class=\"fa fa-search\"></i></a></div><button type=\"button\" class=\"btn btn-outline-secondary mr-auto ml-2\"><i class=\"fa fa-history\" click.delegate=\"timerClicked()\"></i></button> ${lapsedTimeDisplay} ${billingCode} </div></div></div></div></div><div if.bind=\"!desktopVersion\" class=\"col-md-6 pl-2 pr-0 pb-2\"><div class=\"card mb-2 h-100\" style=\"box-shadow:3px 3px 7px 0 rgba(0,0,0,.3)\"><div class=\"card-header px-2 py-1\"><div class=\"btn-toolbar\" role=\"toolbar\"><div class=\"dropdown\"><button class=\"btn dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"fa fa-file-text-o pr-1\"></i>${selectedWebdoc.Description} </button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><a class=\"dropdown-item\" repeat.for=\"d of webdocs\" model.bind=\"d\" click.delegate=\"setSelectedWebdoc(d)\" href=\"#\"><i class=\"fa fa-file-text-o pr-1\"></i>${d.Description}</a></div></div><button type=\"button\" class=\"btn btn-outline-primary\"><i class=\"fa fa-plus pr-1\"></i></button></div></div><div class=\"card-body p-2\"><div class=\"row h-100\"><div class=\"col-sm-12\"><button type=\"button\" class=\"btn btn-outline-primary mr-1 mb-1\" repeat.for=\"d of patientDocuments\" click.delegate=\"openDocument(d)\"><i class=\"fa fa-file-text-o p-1\"></i>${d.Name}</button></div></div></div></div></div></div><div class=\"row\" ref=\"examRow\" css=\"height:${examScrollBodyHeight}px;\"><div class=\"col-md-12 pr-0\" style=\"height:100%\"><div class=\"card\" style=\"box-shadow:3px 3px 7px 0 rgba(0,0,0,.3);height:100%\"><div class=\"card-header\" style=\"display:inline-block;padding-top:0;padding-bottom:0\" ref=\"examHead\"><form><div class=\"form-row align-items-center\"><div class=\"col-auto my-1\"><label class=\"col-form-label pr-2\" for=\"examToggleButton\"><b>Exam</b></label><div class=\"btn-group\"><button type=\"button\" class=\"btn btn-secondary\" id=\"examToggleButton\" style=\"background-color:#fff;color:#000;border-color:#ced4da\" click.delegate=\"togglePrefTypeClicked()\">${prefTypeButtonText}</button> <button type=\"button\" style=\"background-color:#fff;border-color:#ced4da\" class=\"btn btn-secondary dropdown-toggle dropdown-toggle-split caret\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"></button><div class=\"dropdown-menu\" css=\"height: ${dropdownHeight}px;\" style=\"overflow-y:scroll\"><a class=\"dropdown-item\" repeat.for=\"p of followupPrefs\" model.bind=\"p\" click.delegate=\"populateExamWithPreference(p)\" href=\"#\">${p.PostOpProcedure}</a></div></div></div><div class=\"col-auto my-1\"><select class=\"form-item form-control\" value.bind=\"selectedBodyPart\" change.delegate=\"filterExamPref()\"><option model.bind=\"null\">Bodypart...</option><option repeat.for=\"b of bodyparts\" model.bind=\"b\"> ${b} </option></select></div><div class=\"col-auto my-1\"><div class=\"btn-group\"><button type=\"button\" class=\"btn btn-secondary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"fa fa-cog\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"createPreferenceClicked()\"><i class=\"fa fa-male fa-lg text-success\" style=\"padding-right:5px\"></i>Save Pref</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"deleteExamData()\"><i class=\"fa fa-ban fa-lg text-danger\" style=\"padding-right:5px\"></i>Delete</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"getPreviousExam()\"><i class=\"fa fa-arrow-left\" style=\"padding-right:5px\"></i>Prior</a></div></div></div></div></form></div><div class=\"card-body\" style=\"overflow-y:scroll;padding-top:0\" ref=\"examBody\"><form><div class=\"form-group\" style=\"margin-bottom:0\"><label for=\"hpi\" ref=\"examLable\" style=\"padding-top:5px\">History</label> <textarea class=\"form-control\" id=\"hpi\" rows=\"3\" css=\"height:${examTextareaHeight}px;\" value.bind=\"historyData.HpiText\" click.delegate=\"setSelectedTextarea($event)\" ref=\"hpitext\" keyup.delegate=\"followupTextChange($event)\"></textarea></div><div class=\"form-group\" style=\"margin-bottom:0\"><label for=\"exam\" style=\"padding-top:5px\">Exam</label> <textarea class=\"form-control\" id=\"exam\" rows=\"3\" css=\"height:${examTextareaHeight}px;\" value.bind=\"examData.ChartNoteExam\" click.delegate=\"setSelectedTextarea($event)\" ref=\"examtext\" keyup.delegate=\"followupTextChange($event)\"> </textarea></div><div class=\"form-group\" style=\"margin-bottom:0\"><label for=\"plan\" style=\"padding-top:5px\">Plan</label> <textarea class=\"form-control\" id=\"plan\" rows=\"3\" css=\"height:${examTextareaHeight}px;\" value.bind=\"planData.PlanText\" click.delegate=\"setSelectedTextarea($event)\" ref=\"plantext\" keyup.delegate=\"followupTextChange($event)\"></textarea></div></form></div></div></div></div></div><div class=\"col-md-6\" style=\"height:100%\"><div class=\"row\" style=\"margin-bottom:10px;margin-top:10px\" ref=\"medrow\"><div class=\"col-md-12\"><div class=\"card\" style=\"box-shadow:3px 3px 7px 0 rgba(0,0,0,.3)\"><div class=\"card-header\" style=\"padding-top:4px\" ref=\"medHead\"><ul class=\"nav nav-tabs card-header-tabs\"><li class=\"nav-item\"><a class=\"nav-link active\" class.bind=\"displayMeds ? 'active' : ''\" href=\"#\" click.delegate=\"medsTabClicked(true)\">Meds</a></li><li class=\"nav-item\"><a class=\"nav-link\" href=\"#\" class.bind=\"!displayMeds ? 'active' : ''\" click.delegate=\"medsTabClicked(false)\">Allergies</a></li></ul></div><div class=\"card-body\" style=\"padding:0\"><div if.bind=\"displayMeds\" class=\"tableFixHead\" css=\"height: ${middleColumnRowHeight}px;\"><table class=\"table table-striped table-sm\"><thead><tr><th scope=\"col\" style=\"background:#f7f7f7;border-top:none\">Med</th><th scope=\"col\" style=\"background:#f7f7f7;width:25%\">Last Refill</th><th scope=\"col\" style=\"background:#f7f7f7\">Status</th></tr></thead><tbody><template repeat.for=\"m of meds\"><tr><td>${m.description}</td><td>${m.lastRefill}</td><td>${m.status}</td></tr></template></tbody></table></div><div if.bind=\"!displayMeds\" class=\"tableFixHeadLight\"><table class=\"table table-striped table-sm\"><thead><tr><th scope=\"col\">Allergy</th><th scope=\"col\">Reaction</th></tr></thead><tbody><template repeat.for=\"a of allergies\"><tr><td>${a.description}</td><td>${a.reaction}</td></tr></template></tbody></table></div></div></div></div></div><div class=\"row\" style=\"margin-bottom:10px\" ref=\"surgeryrow\"><div class=\"col-md-12\"><div class=\"card\" style=\"box-shadow:3px 3px 7px 0 rgba(0,0,0,.3)\"><div class=\"card-body\" style=\"padding:0\"><div class=\"tableFixHeadLight\" css=\"height: ${middleColumnRowHeight}px;\"><table class=\"table table-striped table-sm\"><thead><tr><th scope=\"col\" style=\"padding-left:12px\">Surgery</th><th scope=\"col\">Date</th></tr></thead><tbody><template repeat.for=\"s of surgery\"><tr><td>${s.name}</td><td>${s.time}</td></tr></template></tbody></table></div></div></div></div></div><div class=\"row\" ref=\"dxrow\" css=\"height:${orderScrollbodyHeight}px;\"><div class=\"col-md-12\"><div class=\"card\" style=\"box-shadow:3px 3px 7px 0 rgba(0,0,0,.3)\"><div class=\"card-header\" style=\"display:inline-flex;padding-left:4px;padding-top:2px;padding-bottom:2px\" ref=\"dxHead\"><span style=\"padding:9px\"><b>Diagnosis</b> </span><a class=\"btn btn-default btn-sm\" href=\"#\" style=\"padding:9px 0 0 0\"><i class=\"fa fa-search fa-lg text-primary\" click.delegate=\"displayDxPop()\"></i></a></div><div class=\"card-body\" style=\"padding:0\"><div class=\"tableFixHeadLight\" css=\"height: ${middleColumnRowHeight}px;\"><table class=\"table table-striped table-sm\"><thead><tr><th scope=\"col\"></th><th scope=\"col\">Date</th><th scope=\"col\">Code</th><th scope=\"col\">Desc</th></tr></thead><tbody><template repeat.for=\"s of patientDxs\"><tr class=\"${s.selected ? 'table-success' : 'table-light'}\"><td><i class=\"fa ${s.selected ? 'fa-minus-square' : 'fa-plus-square'}\" click.delegate=\"dxChecked(s)\"></i></td><td>${s.date}</td><td>${s.code}</td><td>${s.description}</td></tr></template></tbody></table></div></div></div></div></div></div></div></div><div class=\"col-md-3\" show.bind=\"displaySchedule\" style=\"background-color:#fff;border-radius:0 0 0 5px;border-left:2px solid rgba(0,0,0,.4);border-bottom:2px solid rgba(0,0,0,.4);padding-left:0;padding-right:0\"><div style=\"display:inline-flex;width:100%;background-color:#f7f7f7;position:relative;padding:10px\"><span class=\"fa-stack fa-lg\" style=\"width:1.5em\"><i class=\"fa fa-calendar-o fa-stack-1x\"></i> <i class=\"fa fa-clock-o fa-stack-1x\" style=\"font-size:small;padding-top:3px\"></i> </span><span style=\"line-height:2.5em;padding-right:5px\"><button if.bind=\"filterScheduleByTelemed\" type=\"button\" class=\"btn btn-light\" style=\"padding:4px\" click.delegate=\"toggleScheduleFilter()\"><b>Telemed</b></button> <button if.bind=\"!filterScheduleByTelemed\" type=\"button\" class=\"btn btn-light\" style=\"padding:4px\" click.delegate=\"toggleScheduleFilter()\"><b>Office</b></button></span><form class=\"form-inline\"><div class=\"form-group\" style=\"align-items:normal\"><select value.bind=\"selectedProvider\" change.delegate=\"loadScheduleByProvider()\" style=\"max-width:200px\"><option model.bind=\"null\">Provider...</option><option repeat.for=\"p of providers\" model.bind=\"p\"> ${p.ProviderEntity} </option></select></div></form><a class=\"btn btn-default btn-sm\" href=\"#\" style=\"padding:9px 0 0 10px\"><i class=\"fa fa-search fa-lg text-primary\" click.delegate=\"displayPatientSearch()\"></i></a></div><div css=\"background-color: white; overflow: hidden; overflow-y: scroll; height: ${scheduleHeight}px;\"><table class=\"table table-hover table-sm\"><thead><tr><th scope=\"col\">Time</th><th scope=\"col\">Patient</th><th scope=\"col\"></th></tr></thead><tbody css=\"height: ${scheduleHeight}px;\"><template repeat.for=\"s of schedule\"><tr style=\"cursor:pointer\"><td>${s.time}</td><td dblclick.delegate=\"scheduleRowClick(s, false)\">${s.name}</td><td><span class=\"fa-stack fa-lg\" style=\"line-height:1.25em\" click.delegate=\"scheduleRowClick(s, true)\"><i class=\"fa fa-folder-o fa-stack-1x\"></i> <i class=\"fa fa-plus fa-stack-1x text-primary\" style=\"font-size:x-small\"></i></span></td></tr></template></tbody></table></div></div><div class=\"\" show.bind=\"displayVideo\" style=\"position:absolute;top:0;bottom:0;right:0;left:50%;z-index:1000;background-color:#fff;border-radius:0 0 0 5px;border-left:2px solid rgba(0,0,0,.4);border-bottom:2px solid rgba(0,0,0,.4)\"><iframe style=\"width:100%;height:100%\" src=\"https://backline-health.com/\"></iframe></div></div></div></div></template>";});;
define('phxTelemed/index',['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var Index = exports.Index = function () {
		function Index() {
			_classCallCheck(this, Index);

			this.message = 'HELLO FROM phxTelemed/INDEX';
			console.log('Telemed INDEX LOADED!');
		}

		Index.prototype.configureRouter = function configureRouter(config, router) {
			config.title = 'Telemed';
			config.map([{ route: 'home', name: 'home', moduleId: 'phxTelemed/home', nav: true, title: 'Telemed' }, { route: 'ipad', name: 'ipadHome', moduleId: 'phxTelemed/ipadHome', nav: true, title: 'Phoenix iPad' }]);
			this.router = router;
		};

		return Index;
	}();
});;
define('text!phxTelemed/index.html',[],function(){return "<template><router-view></router-view></template>";});;
define('phxTelemed/ipadHome',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', './testBlockData', 'lodash', 'moment', '../ptdaysheet/alertPopup', '../phxTelemed/dxSearch', 'aurelia-dialog', './preferenceBuilder', '../phxTelemed/pxSearch', '../phxTelemed/patientSearch', '../phxTelemed/task', '../phxTelemed/dialogView', 'aurelia-router', '../phxTelemed/home'], function (exports, _helper, _http, _aureliaFramework, _testBlockData, _lodash, _moment, _alertPopup, _dxSearch, _aureliaDialog, _preferenceBuilder, _pxSearch, _patientSearch, _task, _dialogView, _aureliaRouter, _home) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.iPadHome = undefined;

  var _ = _interopRequireWildcard(_lodash);

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var iPadHome = exports.iPadHome = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _testBlockData.TestBlockData, _aureliaDialog.DialogService, _aureliaRouter.Router, _home.Home), _dec(_class = function () {
    function iPadHome(helper, http, TestBlockData, DialogService, Router, Home) {
      _classCallCheck(this, iPadHome);

      this.examVisible = true;
      this.medVisible = false;
      this.surgeryVisible = false;
      this.dxVisible = false;
      this.editing = false;
      this.boards = [];

      this.helper = helper;
      this.http = http;
      this.data = TestBlockData;
      this.dialogService = DialogService;
      this.router = Router;
      this.home = Home;
    }

    iPadHome.prototype.activate = function activate(params) {
      this.boards = this.data.setupSampleData();
      this.currentBoard = this.boards[0];
    };

    iPadHome.prototype.loadBoard = function loadBoard(board) {
      this.currentBoard = board;
    };

    iPadHome.prototype.sidebarClick = function sidebarClick(item) {

      this.examVisible = false;
      this.medVisible = false;
      this.surgeryVisible = false;
      this.dxVisible = false;

      if (item === 'exam') {
        this.examVisible = true;
      } else if (item == 'meds') {
        this.medVisible = true;
      } else if (item == 'surgery') {
        this.surgeryVisible = true;
      } else if (item == 'dx') {
        this.dxVisible = true;
      } else if (item == 'edit') {
        this.toggleEditingMode();
      }
    };

    iPadHome.prototype.addRow = function addRow(board) {
      this.data.addRow(board);
    };

    iPadHome.prototype.addBlock = function addBlock(row, type) {
      this.data.addBlock(row, type);
    };

    iPadHome.prototype.deleteRow = function deleteRow(board, index) {
      this.data.deleteRow(board, index);
    };

    iPadHome.prototype.toggleEditingMode = function toggleEditingMode() {

      this.editing = this.editing ? false : true;

      for (var i = 0; i < this.currentBoard.rows.length; i++) {
        var aRow = this.currentBoard.rows[i];
        for (var b = 0; b < aRow.blocks.length; b++) {
          var aBlock = aRow.blocks[b];
          aBlock.toggleEditing();
        }
      }
    };

    return iPadHome;
  }()) || _class);
});;
define('text!phxTelemed/ipadHome.html',[],function(){return "<template><div style=\"position:absolute;top:0;bottom:0;width:100%\"><div class=\"d-flex flex-column flex-shrink-0 bg-light\" style=\"width:4.5rem;height:100%\"><div class=\"dropdown border-top\"><a href=\"#\" class=\"d-flex align-items-center justify-content-center p-3 link-dark text-decoration-none\" data-toggle=\"dropdown\" id=\"dropdownUser3\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"><img src=\"https://github.com/mdo.png\" alt=\"mdo\" width=\"50\" height=\"50\" class=\"rounded\"></a><ul class=\"dropdown-menu text-small shadow\" aria-labelledby=\"dropdownUser3\"><li><a class=\"dropdown-item\" href=\"#\">New project...</a></li><li><a class=\"dropdown-item\" href=\"#\">Settings</a></li><li><a class=\"dropdown-item\" href=\"#\">Profile</a></li><li><hr class=\"dropdown-divider\"></li><li><a class=\"dropdown-item\" href=\"#\">Sign out</a></li></ul></div><ul class=\"nav nav-pills nav-flush flex-column mb-auto text-center\"><li class=\"nav-item\" style=\"height:65px\"><div class=\"dropdown border-top\"><a href=\"#\" class=\"d-flex align-items-center justify-content-center p-3 link-dark text-decoration-none border-bottom\" data-toggle=\"dropdown\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-clipboard fa-2x\"></i></a><ul class=\"dropdown-menu text-small shadow\" aria-labelledby=\"dropdownUser3\"><li><a repeat.for=\"b of boards\" class=\"dropdown-item\" href=\"#\" click.delegate=\"loadBoard(b)\">${b.description}</a></li></ul></div><i if.bind=\"examVisible\" class=\"fa fa-caret-left fa-2x\" style=\"position:relative;top:-45px;left:42px\"></i></li><li style=\"height:65px\"><a href=\"#\" click.delegate=\"sidebarClick('meds')\" class=\"nav-link py-3 border-bottom\" title=\"\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\" data-bs-original-title=\"Dashboard\"><i class=\"fa fa-stethoscope fa-2x\"></i> </a><i if.bind=\"medVisible\" class=\"fa fa-caret-left fa-2x\" style=\"position:relative;top:-45px;left:42px\"></i></li><li style=\"height:65px\"><a href=\"#\" click.delegate=\"sidebarClick('surgery')\" class=\"nav-link py-3 border-bottom\" title=\"\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\" data-bs-original-title=\"Orders\"><i class=\"fa fa-medkit fa-2x\"></i> </a><i if.bind=\"surgeryVisible\" class=\"fa fa-caret-left fa-2x\" style=\"position:relative;top:-45px;left:42px\"></i></li><li style=\"height:65px\"><a href=\"#\" click.delegate=\"sidebarClick('dx')\" class=\"nav-link py-3 border-bottom\" title=\"\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\" data-bs-original-title=\"Products\"><i class=\"fa fa-heartbeat fa-2x\"></i> </a><i if.bind=\"dxVisible\" class=\"fa fa-caret-left fa-2x\" style=\"position:relative;top:-45px;left:42px\"></i></li><li style=\"height:65px\"><a href=\"#\" click.delegate=\"sidebarClick('edit')\" class=\"nav-link py-3 border-bottom\" title=\"\" data-bs-toggle=\"tooltip\" data-bs-placement=\"right\" data-bs-original-title=\"Products\"><i class=\"fa fa-cog fa-2x text-secondary\"></i></a></li></ul></div><div style=\"background-color:#dedede;height:100%;position:absolute;top:0;left:80px;right:0;border-left:1px solid #000\"><div class=\"container-fluid d-flex flex-column h-100 pb-2 pr-4 overflow-auto\"><div class=\"row flex-fill\" repeat.for=\"r of currentBoard.rows\"><compose repeat.for=\"b of r.blocks\" view-model=\"./block\" model.bind=\"b\" containerless></compose><div class=\"row position-relative\" style=\"z-index:1000;bottom:35px;left:5px;height:0\" if.bind=\"editing\"><div class=\"col\"><div class=\"btn-toolbar\" role=\"toolbar\"><div class=\"dropdown\"><button class=\"btn btn-secondary dropdown-toggle ml-2 mt-2 btn-sm\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i> Block</button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><a class=\"dropdown-item\" repeat.for=\"t of data.blockTypes\" href=\"#\" click.delegate=\"addBlock(r, t)\">${t}</a></div></div><button type=\"button\" class=\"btn btn-danger float-right ml-2 mt-2 btn-sm\" click.delegate=\"deleteRow(currentBoard, $index)\"><i class=\"fa fa-trash\" aria-hidden=\"true\"></i> Row</button></div></div></div></div><div if.bind=\"editing\" class=\"row pt-2\"><div class=\"col\"><button type=\"button\" class=\"btn btn-outline-primary float-right\" click.delegate=\"addRow(currentBoard)\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i> Row</button></div></div></div></div></div></template>";});;
define('phxTelemed/medAllergy',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework'], function (exports, _helper, _http, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MedAllergy = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var MedAllergy = exports.MedAllergy = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http), _dec(_class = function () {
    function MedAllergy(helper, http) {
      _classCallCheck(this, MedAllergy);

      this.helper = helper;
      this.http = http;
    }

    MedAllergy.prototype.activate = function activate(model) {
      this.data = model;
    };

    return MedAllergy;
  }()) || _class);
});;
define('text!phxTelemed/medAllergy.html',[],function(){return "<template><div class=\"card h-100\"><div class=\"card-header pt-1\"><span class=\"d-inline float-left pt-2\">Med Allergy</span><div if.bind=\"data.editing\" class=\"dropdown\"><button type=\"button\" class=\"btn btn-outline-danger float-right\" click.delegate=\"deleteBlock()\"><i class=\"fa fa-trash\" aria-hidden=\"true\"></i></button> <button class=\"btn btn-secondary dropdown-toggle float-right mr-2\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"fa fa-arrows-h\" aria-hidden=\"true\"></i>${data.width} </button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><a repeat.for=\"w of widthList\" class=\"dropdown-item\" href=\"#\" click.delegate=\"setWidth(w)\">${w}</a></div></div><ul class=\"nav nav-tabs card-header-tabs justify-content-end\"><li class=\"nav-item\"><a class=\"nav-link active\" href=\"#\">Active</a></li><li class=\"nav-item\"><a class=\"nav-link\" href=\"#\">Link</a></li><li class=\"nav-item\"><a class=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</a></li></ul></div><div class=\"card-body\"><table class=\"table\"><thead><tr><th scope=\"col\">#</th><th scope=\"col\">First</th><th scope=\"col\">Last</th><th scope=\"col\">Handle</th></tr></thead><tbody><tr><th scope=\"row\">1</th><td>Mark</td><td>Otto</td><td>@mdo</td></tr><tr><th scope=\"row\">2</th><td>Jacob</td><td>Thornton</td><td>@fat</td></tr><tr><th scope=\"row\">3</th><td>Larry</td><td>the Bird</td><td>@twitter</td></tr></tbody></table></div></div></template>";});;
define('phxTelemed/patientSearch',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PatientSearch = undefined;

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Pat = function Pat(id, name) {
    _classCallCheck(this, Pat);

    this.id = id;
    this.name = name;
    this.selected = false;
  };

  var PatientSearch = exports.PatientSearch = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
    function PatientSearch(DialogController, http, helper) {
      _classCallCheck(this, PatientSearch);

      this.selectedPatient = null;
      this.searchResults = [];
      this.searchString = "";
      this.popupLR = 0;
      this.popupTB = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
    }

    PatientSearch.prototype.close = function close() {
      var self = this;
      self.dialogController.close(true, self.selectedPatient);
    };

    PatientSearch.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    PatientSearch.prototype.activate = function activate(obj) {
      var self = this;


      self.popupWidth = obj.popupWidth * .8;
      self.popupHeight = (obj.popupHeight - 75) * .8;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;
    };

    PatientSearch.prototype.searchClicked = function searchClicked() {

      this.search();
    };

    PatientSearch.prototype.search = function search() {
      var self = this;

      var n = self.helper.createNoty("searching...", 10000);
      n.show();

      self.searchResults = [];
      var url = 'patients/search?search=' + self.searchString;
      self.http.get(self.helper.getApiUrl(url), function (res) {
        for (var i = 0; i < res.length; i++) {
          var aPat = res[i];
          var lastFirst = aPat.NameLast + ", " + aPat.NameFirst;
          self.searchResults.push(new Pat(aPat.PatientID, lastFirst));
        }

        self.helper.notySuccess(n, "search complete");
        n.close();
      });
    };

    PatientSearch.prototype.rowClicked = function rowClicked(r) {
      this.selectedPatient = r;
      for (var i = 0; i < this.searchResults.length; i++) {
        if (this.searchResults[i].id == r.id) {
          this.searchResults[i].selected = true;
        } else {
          this.searchResults[i].selected = false;
        }
      }
    };

    return PatientSearch;
  }()) || _class);
});;
define('text!phxTelemed/patientSearch.html',[],function(){return "<template><ux-dialog css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\">Patient Search</h4></ux-dialog-header><ux-dialog-body style=\"position:absolute;width:100%;height:70%\"><div class=\"input-group mb-3\"><input type=\"text\" class=\"form-control\" placeholder=\"search patient...\" aria-label=\"search patient...\" aria-describedby=\"button-addon2\" value.bind=\"searchString\"><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" click.delegate=\"searchClicked()\">Search</button></div></div><div class=\"tableFixHeadLight\" css=\"height: ${popupHeight - 198}px;\"><table class=\"table table-sm\"><thead><tr><th scope=\"col\">ID</th><th scope=\"col\">Name</th></tr></thead><tbody><template repeat.for=\"s of searchResults\"><tr click.delegate=\"rowClicked(s)\" class.bind=\"s.selected ? 'table-primary' : 'table-light'\"><td>${s.id}</td><td>${s.name}</td></tr></template></tbody></table></div></ux-dialog-body><ux-dialog-footer style=\"position:absolute;width:100%;bottom:0;padding-right:15px\"><button click.delegate=\"close()\">OK</button> <button click.delegate=\"cancel()\">Cancel</button></ux-dialog-footer></ux-dialog></template>";});;
define('phxTelemed/plan',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework'], function (exports, _helper, _http, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Plan = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var Plan = exports.Plan = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http), _dec(_class = function () {
    function Plan(helper, http) {
      _classCallCheck(this, Plan);

      this.helper = helper;
      this.http = http;
    }

    Plan.prototype.activate = function activate(model) {
      this.data = model;
    };

    return Plan;
  }()) || _class);
});;
define('text!phxTelemed/plan.html',[],function(){return "<template><div class=\"card h-100\"><div class=\"card-header\"><h6 class=\"float-left mb-0\">Plan</h6></div><div class=\"card-body\"><textarea rows=\"10\" style=\"width:100%;height:100%\"></textarea></div></div></template>";});;
define('phxTelemed/preferenceBuilder',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
    'use strict';

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PreferenceBuilder = undefined;

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _dec, _class;

    var PreferenceBuilder = exports.PreferenceBuilder = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
        function PreferenceBuilder(DialogController, http, helper) {
            _classCallCheck(this, PreferenceBuilder);

            this.bodyparts = [];
            this.macros = [];
            this.hpiText = null;
            this.examText = null;
            this.planText = null;
            this.preferenceName = null;
            this.prefId = 0;
            this.selectedBodyPart = null;
            this.selectedTextarea = null;
            this.caratPosition = -1;
            this.showNameError = false;
            this.showBodyPartError = false;

            var self = this;
            self.dialogController = DialogController;
            self.http = http;
            self.helper = helper;
            self.bodyparts.push('Ankle', 'Knee', 'Hip', 'Wrist', 'Elbow', 'Shoulder', 'Cervical', 'Lumbar');
            self.macros.push("[he/she]", '[his/her]', '[him/her]', '[patient]', '[side]', '[postopdays]', '[age]', '[gender]', '[current provider]', '[hand dominance]');
        }

        PreferenceBuilder.prototype.activate = function activate(model) {
            var self = this;
            console.log('PREFERENCE BUILDER ACTIVATE', model);

            if (model == null) return;

            self.pref = model;

            model.NoteHistory ? self.hpiText = model.NoteHistory : self.hpiText = null;
            model.NoteExam ? self.examText = model.NoteExam : self.examText = null;
            model.NotePlan ? self.planText = model.NotePlan : self.planText = null;
            model.PostOpProcedure ? self.preferenceName = model.PostOpProcedure : self.preferenceName = null;
            model.BodyPart ? self.selectedBodyPart = model.BodyPart : self.selectedBodyPart = null;
            model.PostOpID ? self.prefId = model.PostOpID : self.prefId = 0;
        };

        PreferenceBuilder.prototype.attached = function attached() {};

        PreferenceBuilder.prototype.setSelectedTextarea = function setSelectedTextarea(event) {
            this.selectedTextarea = event.target;
            this.caratPosition = event.target.selectionStart;
        };

        PreferenceBuilder.prototype.macroClicked = function macroClicked(m) {
            var self = this;
            var mcro = m;
            if (self.selectedTextarea != null && self.caratPosition > -1) {
                var txt = self.selectedTextarea.value;
                var splitTxt = [txt.slice(0, self.caratPosition), txt.slice(self.caratPosition)];
                self.selectedTextarea.value = splitTxt[0] + " " + m + " " + splitTxt[1];

                if (self.selectedTextarea.id == 'exam') {
                    self.examText = self.selectedTextarea.value;
                }
                if (self.selectedTextarea.id == 'hpi') {
                    self.hpiText = self.selectedTextarea.value;
                }
                if (self.selectedTextarea.id == 'plan') {
                    self.planText = self.selectedTextarea.value;
                }
            }
        };

        PreferenceBuilder.prototype.close = function close() {
            var self = this;

            if (!self.preferenceName) {
                self.showNameError = true;
            } else {
                self.showNameError = false;
            }
            if (!self.selectedBodyPart) {
                self.showBodyPartError = true;
            } else {
                self.showBodyPartError = false;
            }
            if (self.showNameError || self.showBodyPartError) {
                return;
            }
            self.dialogController.close(true, { preferenceName: self.preferenceName, bodyPart: self.selectedBodyPart, hpiText: self.hpiText, examText: self.examText, planText: self.planText, id: self.prefId });
        };

        PreferenceBuilder.prototype.cancel = function cancel() {
            var self = this;
            self.dialogController.cancel();
        };

        return PreferenceBuilder;
    }()) || _class);
});;
define('text!phxTelemed/preferenceBuilder.html',[],function(){return "<template><ux-dialog style=\"width:650px\"><style type=\"text/css\">.form-item{margin:10px}.inline{display:inline}.error-message{color:red;font-size:small}</style><ux-dialog-header><h3>Preference Builder</h3><div><form class=\"form-inline needs-validation\" ref=\"optionsForm\" style=\"display:inline-block\" novalidate><div class=\"form-group\" style=\"align-items:normal\"><div class=\"form-item inline\"><input id=\"preferenceName\" value.bind=\"preferenceName\" class=\"form-control\" type=\"text\" placeholder=\"Preference Name\" required><div if.bind=\"showNameError\" class=\"error-message\">Provide a name.</div></div><div class=\"form-item inline\"><select id=\"bodyPart\" class=\"form-control\" value.bind=\"selectedBodyPart\" required><option model.bind=\"null\">Bodypart...</option><option repeat.for=\"b of bodyparts\" model.bind=\"b\"> ${b} </option></select><div if.bind=\"showBodyPartError\" class=\"error-message\">Select a body part.</div></div><div class=\"btn-group form-item inline\"><button type=\"button\" class=\"btn btn-secondary dropdown-toggle dropdown-toggle-split\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><span>macros</span></button><div class=\"dropdown-menu\"><template repeat.for=\"m of macros\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"macroClicked(m)\">${m}</a></template></div></div><div class=\"form-item inline\"><button class=\"btn btn-success\" click.delegate=\"close()\">Save</button></div></div></form></div></ux-dialog-header><ux-dialog-body><div class=\"card-body\" style=\"overflow-y:scroll\"><form><div class=\"form-group\"><label for=\"hpi\">History</label> <textarea class=\"form-control\" id=\"hpi\" rows=\"3\" value.bind=\"hpiText\" click.delegate=\"setSelectedTextarea($event)\"></textarea></div><div class=\"form-group\"><label for=\"exam\">Exam</label> <textarea class=\"form-control\" id=\"exam\" rows=\"3\" value.bind=\"examText\" click.delegate=\"setSelectedTextarea($event)\"></textarea></div><div class=\"form-group\"><label for=\"plan\">Plan</label> <textarea class=\"form-control\" id=\"plan\" rows=\"3\" value.bind=\"planText\" click.delegate=\"setSelectedTextarea($event)\"></textarea></div></form></div></ux-dialog-body></ux-dialog></template>";});;
define('phxTelemed/pxSearch',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper', 'lodash', '../data/go/data'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper, _lodash, _data) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PxSearch = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var PxSearch = exports.PxSearch = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper, _data.Data), _dec(_class = function () {
    function PxSearch(DialogController, http, helper, Data) {
      _classCallCheck(this, PxSearch);

      this.P = null;
      this.searchResults = [];
      this.searchString = "";
      this.modifiers = ['NONE', '95'];
      this.selectedModifier = null;
      this.popupLR = 0;
      this.popupTB = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
      this.goData = Data;
    }

    PxSearch.prototype.close = function close() {
      var self = this;
      self.dialogController.close(true, self.selectedPx);
    };

    PxSearch.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    PxSearch.prototype.activate = function activate(obj) {
      var self = this;

      console.log('PXSEARCH SETTINGS', obj);

      self.popupWidth = obj.popupWidth * .8;
      self.popupHeight = (obj.popupHeight - 75) * .8;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;

      console.log('WIDTH & HEIGHT', self.popupWidth, self.popupHeight);
      console.log('TOP & LEFT', self.popupTB, self.popupLR);

      this.search();
    };

    PxSearch.prototype.searchClicked = function searchClicked() {
      this.search();
    };

    PxSearch.prototype.setSelectedModifier = function setSelectedModifier(px, mod) {
      px.modifier = mod;
    };

    PxSearch.prototype.search = function search() {
      var self = this;
      self.searchResults = [];
      var url = 'procedures/search?searchTerm=' + this.searchString;
      self.http.get(self.helper.getApiUrl(url), function (res) {

        if (res != null && res.length > 0) {
          var filteredRes = _.filter(res, function (item) {
            return item.Body_Part != null && item.Body_Part.toLowerCase() == 'all' && item.Type.toLowerCase() == 'visit';
          });

          for (var i = 0; i < filteredRes.length; i++) {
            var r = filteredRes[i];
            self.searchResults.push(new self.goData.getNewPx(r.ProcedureID, r.CptKey, r.Description, r));
          }
        }
      });
    };

    PxSearch.prototype.rowClicked = function rowClicked(r) {
      this.selectedPx = r;
      for (var i = 0; i < this.searchResults.length; i++) {
        if (this.searchResults[i].id == r.id) {
          this.searchResults[i].selected = true;
        } else {
          this.searchResults[i].selected = false;
        }
      }
    };

    return PxSearch;
  }()) || _class);
});;
define('text!phxTelemed/pxSearch.html',[],function(){return "<template><ux-dialog css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\">Procedure</h4></ux-dialog-header><ux-dialog-body style=\"position:absolute;width:100%;height:70%\"><div class=\"input-group mb-3\"><input type=\"text\" class=\"form-control\" placeholder=\"search code or description...\" aria-label=\"search code or description...\" aria-describedby=\"button-addon2\" value.bind=\"searchString\"><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" click.delegate=\"searchClicked()\">Search</button></div></div><div class=\"tableFixHeadLight\" css=\"height: ${popupHeight - 198}px;\"><table class=\"table table-sm\"><thead><tr><th scope=\"col\">Code</th><th scope=\"col\">Desc</th><th scope=\"col\"></th></tr></thead><tbody><template repeat.for=\"s of searchResults\"><tr click.delegate=\"rowClicked(s)\" class.bind=\"s.selected ? 'table-primary' : 'table-light'\"><td>${s.code}</td><td>${s.description}</td><td><div class=\"dropdown\"><button class=\"btn btn-sm btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><span if.bind=\"s.modifier\">${s.modifier}</span><span if.bind=\"!s.modifier\">MOD</span></button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><template repeat.for=\"m of modifiers\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"setSelectedModifier(s, m)\">${m}</a></template></div></div></td></tr></template></tbody></table></div></ux-dialog-body><ux-dialog-footer style=\"position:absolute;width:100%;bottom:0;padding-right:15px\"><button click.delegate=\"close()\">OK</button> <button click.delegate=\"cancel()\">Cancel</button></ux-dialog-footer></ux-dialog></template>";});;
define('phxTelemed/task',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper', 'moment', '../phxTelemed/userSearch', './pxSearch', 'lodash'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper, _moment, _userSearch, _pxSearch, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Task = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var OD_Task = function OD_Task(id, date, data) {
    _classCallCheck(this, OD_Task);

    this.id = id;
    this.date = date;
    this.selected = false;
    this.data = data;
  };

  var Task = exports.Task = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper, _aureliaDialog.DialogService), _dec(_class = function () {
    function Task(DialogController, http, helper, DialogService) {
      _classCallCheck(this, Task);

      this.selectedTask = null;
      this.taskResults = [];
      this.filteredTasks = [];
      this.taskStatusList = ["ASSIGNED", "COMPLETED"];
      this.popupLR = 0;
      this.popupTB = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;
      this.openPatientOnClose = false;
      this.launchPatientId = null;
      this.tasksToUpdate = [];
      this.filterStatus = 'assigned';

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
      this.dialogService = DialogService;
    }

    Task.prototype.close = function close() {
      var self = this;
      self.dialogController.close(true, { 'launchPatientId': self.launchPatientId });
    };

    Task.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    Task.prototype.launchPatient = function launchPatient(task) {
      this.launchPatientId = task.data.PatientID;
      this.close();
    };

    Task.prototype.addToUpdate = function addToUpdate(task) {
      var index = _.findIndex(this.tasksToUpdate, function (o) {
        return o.TaskID == task.id;
      });
      if (index == -1) {
        this.tasksToUpdate.push(task.data);
      } else {
        this.tasksToUpdate.splice(index, 1, task.data);
      }
    };

    Task.prototype.saveAndClose = function saveAndClose() {
      var self = this;
      self.saveTasks(function (res) {
        self.close();
      });
    };

    Task.prototype.saveTasks = function saveTasks(callback) {
      var self = this;

      if (self.tasksToUpdate.length == 0) {
        callback();
        return;
      }

      var url = "tasks";

      var toUpdate = {
        'tasks': []
      };

      for (var i = 0; i < self.tasksToUpdate.length; i++) {
        var aTask = {
          'Id': self.tasksToUpdate[i].TaskID,
          'Description': self.tasksToUpdate[i].Description,
          'Status': self.tasksToUpdate[i].Status,
          'AssignedToID': self.tasksToUpdate[i].AssignedToID
        };
        toUpdate.tasks.push(aTask);
      }

      self.http.put(self.helper.getApiUrl(url), toUpdate, function (res) {
        if (callback != undefined && callback != null) {
          callback(res);
        }

        self.tasksToUpdate = [];
      }, function (err) {
        if (callback != undefined && callback != null) {
          callback(err);
        }
      });
    };

    Task.prototype.activate = function activate(obj) {
      var self = this;

      self.popupWidth = obj.popupWidth * .8;
      self.popupHeight = (obj.popupHeight - 75) * .8;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = (obj.popupWidth - self.popupWidth) / 2;

      self.getTaskByUserId();
    };

    Task.prototype.setStatus = function setStatus(task, status) {
      task.data.Status = status;
      this.addToUpdate(task);
    };

    Task.prototype.toggleFilterStatus = function toggleFilterStatus() {
      var self = this;
      self.filterStatus = self.filterStatus == 'assigned' ? 'completed' : 'assigned';
      self.refreshFilteredTasks(self.filterStatus);
    };

    Task.prototype.refreshFilteredTasks = function refreshFilteredTasks(status) {
      var self = this;
      var tStatus = status == undefined ? 'assigned' : self.filterStatus;
      var filtered = _.filter(self.taskResults, function (t) {
        return t.data.Status.toLowerCase() == tStatus;
      });
      self.filteredTasks = filtered;
    };

    Task.prototype.setDescription = function setDescription(task) {
      this.addToUpdate(task);
    };

    Task.prototype.forwardTask = function forwardTask(task) {
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth / 2;

      var self = this;
      self.dialogService.open({ viewModel: _userSearch.UserSearch, model: { popupWidth: 250, popupHeight: windowHeight, taskpop: self.taskdialog } }).whenClosed(function (response) {
        var res = response.output;
        if (res != null) {
          task.data.AssignedToID = res.id;
          task.data.Status = 'ASSIGNED';
          self.addToUpdate(task);
          self.saveTasks(function (res) {
            var indexToRemove = _.findIndex(self.taskResults, function (o) {
              return o.id == task.id;
            });
            if (indexToRemove > -1) {
              self.taskResults.splice(indexToRemove, 1);
            }

            self.refreshFilteredTasks(self.filterStatus);

            self.tasksToUpdate = [];
          });
        }
      });
    };

    Task.prototype.getTaskByUserId = function getTaskByUserId() {
      var self = this;
      self.taskResults = [];
      self.filteredTasks = [];
      var url = 'tasks?userId=' + self.helper._user.UserID;
      self.http.get(self.helper.getApiUrl(url), function (res) {

        for (var i = 0; i < res.length; i++) {
          var aTask = res[i];
          var date = self.helper.getISODateToFormat(aTask.DateCreated, "MM/DD/YYYY");
          self.taskResults.push(new OD_Task(aTask.TaskID, date, aTask));
        }

        self.refreshFilteredTasks('assigned');
      });
    };

    Task.prototype.rowClicked = function rowClicked(r) {
      this.selectedTask = r;
      for (var i = 0; i < this.filteredTasks.length; i++) {
        if (this.filteredTasks[i].id == r.id) {
          this.filteredTasks[i].selected = true;
        } else {
          this.filteredTasks[i].selected = false;
        }
      }
    };

    return Task;
  }()) || _class);
});;
define('text!phxTelemed/task.html',[],function(){return "<template><ux-dialog ref=\"taskdialog\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\">Tasking</h4><i class=\"fa fa-times fa-lg\" style=\"cursor:pointer;float:right\" click.delegate=\"saveAndClose()\"></i></ux-dialog-header><ux-dialog-body style=\"position:absolute;width:100%;height:70%\"><div class=\"tableFixHeadLight\" css=\"height: ${popupHeight - 198}px;\"><table class=\"table table-sm table-striped\"><thead><tr><th scope=\"col\"></th><th scope=\"col\">Date</th><th scope=\"col\">Patient</th><th scope=\"col\">Description</th><th scope=\"col\" click.delegate=\"toggleFilterStatus()\" style=\"cursor:pointer\">Status <i class=\"fa fa-filter\"></i></th><th scope=\"col\"></th></tr></thead><tbody><template repeat.for=\"s of filteredTasks\"><tr click.delegate=\"rowClicked(s)\" class.bind=\"s.selected ? 'table-primary' : 'table-light'\"><td><i class=\"fa fa-folder-open fa-lg\" style=\"padding-left:10px;cursor:pointer\" click.delegate=\"launchPatient(s)\"></i></td><td>${s.date}</td><td>${s.data.Patient_Name}</td><td><textarea class=\"form-control\" value.bind=\"s.data.Description\" input.delegate=\"setDescription(s)\" rows=\"2\" maxlength=\"8000\"></textarea></td><td><div class=\"btn-group\"><button class=\"btn btn-default btn-sm dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"> ${s.data.Status} <span class=\"caret\"></span></button><ul class=\"dropdown-menu\"><template repeat.for=\"m of taskStatusList\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"setStatus(s, m)\">${m}</a></template></ul></div></td><td><i class=\"fa fa-reply fa-lg\" style=\"cursor:pointer\" click.delegate=\"forwardTask(s)\"></i></td></tr></template></tbody></table></div></ux-dialog-body><ux-dialog-footer style=\"position:absolute;width:100%;bottom:0;padding-right:15px\"></ux-dialog-footer></ux-dialog></template>";});;
define('phxTelemed/testBlockData',['exports', 'moment', 'lodash', '../helpers/helper', '../helpers/http', 'aurelia-framework'], function (exports, _moment, _lodash, _helper, _http, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TestBlockData = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var BlockData = function () {
    function BlockData(description, columnWidth, row) {
      _classCallCheck(this, BlockData);

      this.description = description;
      this.width = columnWidth;
      this.editing = false;
      this.id = 0;
      this.row = row;
      this.blockType = 'plan';
    }

    BlockData.prototype.toggleEditing = function toggleEditing() {
      this.editing = this.editing ? false : true;
    };

    return BlockData;
  }();

  var Row = function () {
    function Row() {
      _classCallCheck(this, Row);

      this.blocks = [];
    }

    Row.prototype.addBlock = function addBlock(block) {
      this.blocks.push(block);
    };

    Row.prototype.deleteBlock = function deleteBlock(block) {
      for (var i = 0; i < this.blocks.length; i++) {
        var aBlock = this.blocks[i];
        if (aBlock.id == block.id) {
          this.blocks.splice(i, 1);
        }
      }
    };

    return Row;
  }();

  var Board = function Board(description, rows) {
    _classCallCheck(this, Board);

    this.description = description;
    this.rows = rows;
  };

  var TestBlockData = exports.TestBlockData = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http), _dec(_class = function () {
    function TestBlockData(helper, http) {
      _classCallCheck(this, TestBlockData);

      this.blockIdCounter = 0;
      this.blockTypes = ["Procedure", "Plan", "Exam", "Diagnosis", "medAllergy"];

      this.helper = helper;
      this.http = http;
    }

    TestBlockData.prototype.addRow = function addRow(board) {
      board.rows.push(new Row());
    };

    TestBlockData.prototype.addBlock = function addBlock(row, type) {
      var bData = this.createBlock(type, 4, row, type);
      bData.editing = true;
      row.addBlock(bData);
    };

    TestBlockData.prototype.createBlock = function createBlock(description, colWidth, row, type) {
      var bData = new BlockData(description, colWidth);
      this.blockIdCounter++;
      bData.id = this.blockIdCounter;
      bData.row = row;
      bData.blockType = type ? type : "plan";
      return bData;
    };

    TestBlockData.prototype.deleteRow = function deleteRow(board, index) {
      board.rows.splice(index, 1);
    };

    TestBlockData.prototype.setupSampleData = function setupSampleData() {

      var row1 = new Row();
      var bData = this.createBlock("Something", 4, row1);
      var bData1 = this.createBlock("Wow", 6, row1);
      var bData4 = this.createBlock("noice", 2, row1);

      var row2 = new Row();
      var bData2 = this.createBlock("Yahoo", 6, row2);
      var bData3 = this.createBlock("GetIT", 6, row2);

      var row3 = new Row();
      var bData6 = this.createBlock("Ahah", 3, row3);
      var bData7 = this.createBlock("Swank!", 4, row3, "medAllergy");

      row1.addBlock(bData);
      row1.addBlock(bData1);
      row1.addBlock(bData4);

      row2.addBlock(bData2);
      row2.addBlock(bData3);

      row3.addBlock(bData6);
      row3.addBlock(bData7);

      var rows = [];
      rows.push(row1);
      rows.push(row2);

      var rows2 = [];
      rows2.push(row3);

      var boards = [];

      var aBoard = new Board("Sample Board", rows);
      var aBoard2 = new Board("Test Board #2", rows2);
      boards.push(aBoard);
      boards.push(aBoard2);

      return boards;
    };

    return TestBlockData;
  }()) || _class);
});;
define('phxTelemed/userSearch',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper', 'lodash'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.UserSearch = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  var _dec, _class;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var User = function User(id, name) {
    _classCallCheck(this, User);

    this.id = id;
    this.name = name;
    this.selected = false;
  };

  var UserSearch = exports.UserSearch = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
    function UserSearch(DialogController, http, helper) {
      _classCallCheck(this, UserSearch);

      this.selectedUser = null;
      this.searchResults = [];
      this.searchString = "";
      this.users = [];
      this.popupLR = 0;
      this.popupTB = 0;
      this.popupWidth = 0;
      this.popupHeight = 0;

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
    }

    UserSearch.prototype.searchStringResult = function searchStringResult(val) {
      this.searchString = val;
      this.filter();
    };

    UserSearch.prototype.searchStringResult = function searchStringResult() {
      return this.searchString;
    };

    UserSearch.prototype.close = function close() {
      var self = this;
      self.dialogController.close(true, self.selectedUser);
    };

    UserSearch.prototype.activate = function activate(obj) {
      var self = this;
      self.taskDialog = obj.taskpop;
      self.popupWidth = obj.popupWidth;
      self.popupHeight = (obj.popupHeight - 75) * .8;
      self.popupTop = (obj.popupHeight - self.popupHeight) / 2;
      self.popupLeft = obj.taskpop.offsetLeft + obj.taskpop.offsetWidth - self.popupWidth;

      self.getUsers();
    };

    UserSearch.prototype.getUsers = function getUsers() {
      var self = this;

      var n = self.helper.createNoty("loading users...", 10000);
      n.show();

      self.http.get(self.helper.getApiUrl('users'), function (res) {
        self.users = _.filter(res, function (o) {
          return o.LastName != null && o.LastName.trim().length > 0;
        });

        self.helper.notySuccess(n, "users loaded");
        n.close();
      });
    };

    UserSearch.prototype.filter = function filter(val) {
      var self = this;
      self.searchResults = [];

      var res = _.filter(self.users, function (o) {
        return o.LastName.toLowerCase().startsWith(self.searchString.toLowerCase()) || o.FirstName.toLowerCase().startsWith(self.searchString.toLowerCase());
      });
      var startsWith = _.filter(res, function (o) {
        return o.LastName.toLowerCase().startsWith(self.searchString.toLowerCase());
      });
      var notStartWith = _.filter(res, function (o) {
        return !o.LastName.toLowerCase().startsWith(self.searchString.toLowerCase());
      });

      startsWith = _.sortBy(startsWith, [function (o) {
        return o.LastName;
      }]);
      notStartWith = _.sortBy(notStartWith, [function (o) {
        return o.LastName;
      }]);

      for (var i = 0; i < startsWith.length; i++) {
        var aUser = startsWith[i];
        self.searchResults.push(new User(aUser.UserID, aUser.LastName + ", " + aUser.FirstName));
      }
      for (var i = 0; i < notStartWith.length; i++) {
        var aUser = notStartWith[i];
        self.searchResults.push(new User(aUser.UserID, aUser.LastName + ", " + aUser.FirstName));
      }
    };

    UserSearch.prototype.rowClicked = function rowClicked(r) {
      this.selectedUser = r;
      for (var i = 0; i < this.searchResults.length; i++) {
        if (this.searchResults[i].id == r.id) {
          this.searchResults[i].selected = true;
        } else {
          this.searchResults[i].selected = false;
        }
      }
    };

    return UserSearch;
  }()) || _class);
});;
define('text!phxTelemed/userSearch.html',[],function(){return "<template><ux-dialog css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header><h4 style=\"display:inline-block;margin-bottom:0\"><i class=\"fa fa-reply\"></i>Reply</h4><i class=\"fa fa-times fa-lg\" style=\"cursor:pointer;float:right\" click.delegate=\"close()\"></i></ux-dialog-header><ux-dialog-body style=\"position:absolute;width:100%;height:70%\"><div><span style=\"position:absolute;margin-left:8px;height:38px;display:flex;align-items:center;color:grey\"><i class=\"fa fa-search\" aria-hidden=\"true\"></i> </span><input type=\"text\" class=\"form-control\" placeholder=\"search user...\" aria-label=\"search user...\" aria-describedby=\"searchIcon\" value.bind=\"searchString\" input.delegate=\"filter($this)\" style=\"padding-left:25px\"></div><div class=\"tableFixHeadLight\" css=\"height: ${popupHeight - 198}px;\"><table class=\"table table-sm\"><thead><tr><th scope=\"col\">Name</th></tr></thead><tbody><template repeat.for=\"s of searchResults\"><tr click.delegate=\"rowClicked(s)\" class.bind=\"s.selected ? 'table-primary' : 'table-light'\"><td>${s.name}</td></tr></template></tbody></table></div></ux-dialog-body><ux-dialog-footer style=\"position:absolute;width:100%;bottom:0;padding-right:15px\"><button click.delegate=\"close()\">Reply</button></ux-dialog-footer></ux-dialog></template>";});;
define('ptdaysheet/alertPopup',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AlertPopup = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var AlertPopup = exports.AlertPopup = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
    function AlertPopup(DialogController, http, helper) {
      _classCallCheck(this, AlertPopup);

      this.alertText = "";
      this.alertTitle = "";
      this.color = "";
      this.iconClass = "";
      this.showOk = true;
      this.showCancel = false;

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
    }

    AlertPopup.prototype.close = function close() {
      var self = this;
      self.dialogController.close(true, self.selectedTabs);
    };

    AlertPopup.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    AlertPopup.prototype.activate = function activate(alertObject) {
      var self = this;
      self.alertText = alertObject.text;
      self.alertTitle = alertObject.title;
      self.color = alertObject.iconColor;
      self.iconClass = alertObject.iconClass;
      self.showCancel = alertObject.showCancel ? alertObject.showCancel : false;
    };

    return AlertPopup;
  }()) || _class);
});;
define('text!ptdaysheet/alertPopup.html',[],function(){return "<template><ux-dialog><ux-dialog-header><i class.bind=\"iconClass\" aria-hidden=\"true\" css=\"color: ${color};\" style=\"padding:5px 5px 5px 0;vertical-align:baseline\"></i><h4 style=\"display:inline-block;margin-bottom:0\">${alertTitle}</h4></ux-dialog-header><ux-dialog-body><h7>${alertText}</h7></ux-dialog-body><ux-dialog-footer><button if.bind=\"showOk\" click.delegate=\"close()\">OK</button> <button if.bind=\"showCancel\" click.delegate=\"cancel()\">Cancel</button></ux-dialog-footer></ux-dialog></template>";});;
define('ptdaysheet/authorizePop',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper', './ptAuthData', 'lodash'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper, _ptAuthData, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AuthorizePop = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _desc, _value, _class, _descriptor, _dec, _class3;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var AuthorizeRow = function AuthorizeRow(id, authDate, side, part, authDays, authVisits, type, authNumber, caseId, comments, status) {
    _classCallCheck(this, AuthorizeRow);

    this.authDate = authDate;
    this.side = side;
    this.part = part;
    this.authDays = authDays;
    this.authVisits = authVisits;
    this.type = type;
    this.authNumber = authNumber;
    this.caseId = caseId;
    this.comments = comments;
    this.status = status;
    this.data = null;
    this.id = id;
  };

  var BindableDatepicker = (_class = function BindableDatepicker() {
    _classCallCheck(this, BindableDatepicker);

    _initDefineProp(this, 'datepicker', _descriptor, this);
  }, (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'datepicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  })), _class);
  var AuthorizePop = exports.AuthorizePop = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper, _ptAuthData.PtAuthData), _dec(_class3 = function () {
    function AuthorizePop(DialogController, http, helper, PtAuthData) {
      _classCallCheck(this, AuthorizePop);

      this.datepickers = [];
      this.sides = ['Right', "Left", 'Bilateral'];
      this.parts = ['Ankle', 'Cervical', 'Clavicle', 'Elbow', 'Foot', 'Forearm', 'Hand', 'Hip', 'Knee', 'Lowerleg', 'Lumbar', 'Pelvis', 'Shoulder', 'Thigh', 'Thoracic', 'Upperarm', 'Wrist'];
      this.types = ['PT', 'OT'];
      this.statusList = ['ACT', 'DEL', 'EXP'];
      this.inputFieldHeight = 38;
      this.authorizations = [];
      this.filtered = [];

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
      this.data = PtAuthData;
    }

    AuthorizePop.prototype.getAuthorizeRow = function getAuthorizeRow() {
      var a = new AuthorizeRow();
      a.id = 0;
      return a;
    };

    AuthorizePop.prototype.addRow = function addRow() {
      var self = this;

      var aAuth = self.getAuthorizeRow();
      aAuth.authDate = moment().format("MM/DD/YYYY");
      aAuth.status = 'ACT';


      self.authorizations.push(aAuth);
      self.datepickers.push(new BindableDatepicker());

      self.authorizations.push();
    };

    AuthorizePop.prototype.deleteRow = function deleteRow(index) {
      var self = this;
      self.authorizations.splice(index, 1);
      self.datepickers.splice(index, 1);
    };

    AuthorizePop.prototype.close = function close() {
      var self = this;

      self.data.save(self.authorizations, self.patientId, self.userId, function (res) {});

      self.dialogController.close();
    };

    AuthorizePop.prototype.cancel = function cancel() {
      var self = this;
      self.dialogController.cancel();
    };

    AuthorizePop.prototype.openCalendar = function openCalendar(index) {
      this.datepickers[index].datepicker.methods.toggle();
    };

    AuthorizePop.prototype.activate = function activate(obj) {
      var self = this;

      var width = obj.parentWidth * 0.95;
      var height = obj.parentHeight * 0.50;

      self.popupWidth = width;
      self.popupHeight = height;
      self.popupTop = obj.parentHeight / 2 - height / 2;
      self.popupLeft = 10;

      self.patientId = obj.patientId;
      self.userId = obj.userId;
      self.loadGrid(self.patientId);
    };

    AuthorizePop.prototype.filter = function filter(status) {
      var self = this;
      self.datepickers = [];
      self.filtered = [];

      self.filtered = _.filter(self.authorizations, function (a) {
        return a.status == status;
      });
      for (var i = 0; i < self.filtered.length; i++) {
        self.datepickers.push(new BindableDatepicker());
      }
    };

    AuthorizePop.prototype.loadGrid = function loadGrid(patientId) {
      var self = this;

      self.authorizations = [];
      self.datepickers = [];
      self.filtered = [];

      self.data.getWithPatientId(patientId, function (res) {
        for (var i = 0; i < res.length; i++) {
          var a = res[i];

          var aAuth = self.getAuthorizeRow();
          aAuth.authDate = self.helper.getISODateToFormat(a.AuthDate, "MM/DD/YYYY");
          aAuth.side = a.BodySide;
          aAuth.part = a.BodyPart;
          aAuth.authDays = a.AuthDays;
          aAuth.authVisits = a.AuthVisits;
          aAuth.type = a.Type;
          aAuth.authNumber = a.AuthNumber;
          aAuth.caseId = a.ClaimID;
          aAuth.comments = a.Comments;
          aAuth.status = a.Status;
          aAuth.data = a;
          aAuth.id = a.Id;

          self.authorizations.push(aAuth);
        }

        self.filter('ACT');
      });
    };

    return AuthorizePop;
  }()) || _class3);
});;
define('text!ptdaysheet/authorizePop.html',[],function(){return "<template><ux-dialog style=\"box-shadow:5px 5px 4px rgba(0,0,0,.25);margin:20px\" css=\"position: absolute; top: ${popupTop}px; left: ${popupLeft}px; width: ${popupWidth}px; height: ${popupHeight}px;\"><ux-dialog-header class=\"py-0\"><div class=\"row\"><div class=\"col-sm-12 d-flex\"><h4 style=\"padding-top:6px\">PT Auth</h4><div class=\"btn-group\" role=\"group\" aria-label=\"Button group with nested dropdown\"><button type=\"button\" class=\"btn\" click.delegate=\"addRow()\"><i class=\"fa fa-plus fa-2x text-primary\" aria-hidden=\"true\"></i></button><div class=\"btn-group\" role=\"group\"><button id=\"btnGroupDrop1\" type=\"button\" class=\"btn dropdown-toggle pl-0\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"fa fa-filter fa-2x text-secondary\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\" aria-labelledby=\"btnGroupDrop1\"><a repeat.for=\"s of statusList\" class=\"dropdown-item\" href=\"#\" click.delegate=\"filter(s)\">${s}</a></div></div></div><i class=\"fa fa-times fa-2x ml-auto\" click.delegate=\"cancel()\"></i></div></div></ux-dialog-header><ux-dialog-body class=\"py-0\"><table class=\"table table-sm ptAuthTable\"><thead><tr><th scope=\"col\"></th><th scope=\"col\">Auth Date</th><th scope=\"col\">Side</th><th scope=\"col\">Part</th><th scope=\"col\">Days</th><th scope=\"col\">Visits</th><th scope=\"col\">Type</th><th scope=\"col\">Auth #</th><th scope=\"col\">CaseID</th><th scope=\"col\">Comments</th><th scope=\"col\">Status</th></tr></thead><tbody><template repeat.for=\"a of filtered\"><tr><th scope=\"row\"><i class=\"fa fa-trash-o fa-2x ml-auto text-danger\" click.delegate=\"deleteRow($index)\"></i></th><td><div class=\"input-group\" style=\"flex-wrap:inherit;width:150px\"><abp-datetime-picker icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"datepickers[$index].datepicker\" value.bind=\"a.authDate\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary\" type=\"button\" click.delegate=\"openCalendar($index)\"><i class=\"fa fa-calendar\"></i></button></div></div></td><td><select class=\"ptTableInput\" value.bind=\"a.side\"><option model.bind=\"null\">Select...</option><option repeat.for=\"s of sides\" model.bind=\"s\"> ${s} </option></select></td><td><select class=\"ptTableInput\" value.bind=\"a.part\"><option model.bind=\"null\">Select...</option><option repeat.for=\"p of parts\" model.bind=\"p\"> ${p} </option></select></td><td><input class=\"ptTableInput\" type=\"number\" id=\"authdays\" name=\"authdays\" min=\"1\" max=\"31\" value.bind=\"a.authDays\" style=\"width:55px\"></td><td><input class=\"ptTableInput\" type=\"number\" id=\"authVisits\" name=\"authVisits\" value.bind=\"a.authVisits\" style=\"width:55px\"></td><td><select class=\"ptTableInput\" value.bind=\"a.type\" style=\"width:50px\"><option model.bind=\"null\">Select...</option><option repeat.for=\"t of types\" model.bind=\"t\"> ${t} </option></select></td><td><input class=\"ptTableInput\" type=\"text\" id=\"authNumber\" name=\"authNumber\" value.bind=\"a.authNumber\" style=\"width:100px\"></td><td><input class=\"ptTableInput\" type=\"text\" id=\"caseId\" name=\"caseId\" value.bind=\"a.caseId\" style=\"width:75px\"></td><td><input class=\"ptTableInput\" type=\"text\" id=\"comments\" name=\"comments\" value.bind=\"a.comments\"></td><td><select class=\"ptTableInput\" value.bind=\"a.status\" style=\"width:55px\"><option model.bind=\"null\">Select...</option><option repeat.for=\"s of statusList\" model.bind=\"s\"> ${s} </option></select></td></tr></template></tbody></table></ux-dialog-body><ux-dialog-footer style=\"left:0;bottom:0;right:0;position:absolute\"><button click.delegate=\"close()\">Save</button></ux-dialog-footer></ux-dialog></template>";});;
define('ptdaysheet/calculator',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Calculator = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var Calculator = exports.Calculator = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
    function Calculator(DialogController, http, helper) {
      _classCallCheck(this, Calculator);

      this.row = null;
      this.cell = null;
      this.rowIndex = -1;
      this.cellIndex = -1;
      this.value = null;
      this.activity = null;
      this.actPass = null;
      this.backgroundColor = "transparent";
      this.dgHelper = null;

      this.message = "test login message";
      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
    }

    Calculator.prototype.close = function close() {
      var self = this;
      self.dialogController.close(true, { "activity": self.activity, "value": self.value, "actPass": self.actPass, "backgroundColor": self.backgroundColor });
    };

    Calculator.prototype.activate = function activate(model) {
      var self = this;
      self.dgHelper = model.helper;
      self.activity = model.activity;
      self.value = model.activity.value;
      self.actPass = model.activity.data == null ? null : model.activity.data.ActPass;
      if (self.actPass != null) {
        self.backgroundColor = self.dgHelper ? self.dgHelper.getActivityBackgroundColorByActPass(self.actPass) : self.backgroundColor;
      }
    };

    Calculator.prototype.valueClick = function valueClick(dom) {
      var v = dom.target.value;
      var tValue = this.value + " " + v;
      this.value = tValue;
    };

    Calculator.prototype.clear = function clear() {
      this.value = "";
      this.actPass = null;
    };

    Calculator.prototype.numberClick = function numberClick(dom) {
      var v = dom.target.value;
      var tValue;

      if (this.value == undefined || this.value == null) {
        this.value = "";
      }

      if (this.afterText()) {
        tValue = this.value + " " + v;
      } else {
        tValue = this.value + v;
      }

      this.value = tValue;
    };

    Calculator.prototype.linkClick = function linkClick(e) {
      var txt = e.target.text;
      var tTxt = this.value + " " + txt;
      this.value = tTxt;
    };

    Calculator.prototype.afterText = function afterText() {
      var aList = ["reps", "lbs", "to"];
      for (var i = 0; i < aList.length; i++) {
        if (this.value.toLowerCase().endsWith(aList[i])) {
          return true;
        }
      }
      return false;
    };

    Calculator.prototype.actPassClick = function actPassClick(val) {
      this.actPass = val;
      this.backgroundColor = this.dgHelper ? this.dgHelper.getActivityBackgroundColorByActPass(this.actPass) : this.backgroundColor;
      ;
    };

    return Calculator;
  }()) || _class);
});;
define('text!ptdaysheet/calculator.html',[],function(){return "<template><ux-dialog><ux-dialog-header><div class=\"row\"><div class=\"col-sm-12 d-flex\"><h4>Calculator</h4><i class=\"fa fa-times ml-auto\" click.delegate=\"close()\"></i></div></div></ux-dialog-header><ux-dialog-body><div class=\"row\"><div class=\"col-sm-8\"><div class=\"row\"><div class=\"col-sm-12\"><input class=\"form-control form-control-sm\" type=\"text\" value.bind=\"value\" css=\"background-color:${backgroundColor}\"></div></div><div class=\"row\"><div class=\"col-sm-12 d-flex justify-content-between\"><button type=\"button\" class=\"btn btn-secondary flex-fill my-1\" value=\"1\" click.delegate=\"numberClick($event)\">1</button> <button type=\"button\" class=\"btn btn-secondary flex-fill m-1\" value=\"2\" click.delegate=\"numberClick($event)\">2</button> <button type=\"button\" class=\"btn btn-secondary flex-fill my-1\" value=\"3\" click.delegate=\"numberClick($event)\">3</button></div></div><div class=\"row\"><div class=\"col-sm-12 d-flex justify-content-between\"><button type=\"button\" class=\"btn btn-secondary flex-fill my-1\" value=\"4\" click.delegate=\"numberClick($event)\">4</button> <button type=\"button\" class=\"btn btn-secondary flex-fill m-1\" value=\"5\" click.delegate=\"numberClick($event)\">5</button> <button type=\"button\" class=\"btn btn-secondary flex-fill my-1\" value=\"6\" click.delegate=\"numberClick($event)\">6</button></div></div><div class=\"row\"><div class=\"col-sm-12 d-flex justify-content-between\"><button type=\"button\" class=\"btn btn-secondary flex-fill my-1\" value=\"7\" click.delegate=\"numberClick($event)\">7</button> <button type=\"button\" class=\"btn btn-secondary flex-fill m-1\" value=\"8\" click.delegate=\"numberClick($event)\">8</button> <button type=\"button\" class=\"btn btn-secondary flex-fill my-1\" value=\"9\" click.delegate=\"numberClick($event)\">9</button></div></div><div class=\"row\"><div class=\"col-sm-12 d-flex justify-content-around\"><button type=\"button\" class=\"btn btn-success flex-fill my-1\" click.delegate=\"close()\"><i class=\"fa fa-check\"></i></button> <button type=\"button\" class=\"btn btn-secondary flex-fill m-1\" value=\"0\" click.delegate=\"numberClick($event)\">0</button> <button type=\"button\" class=\"btn btn-danger flex-fill my-1\" click.delegate=\"clear()\">CE</button></div></div></div><div class=\"col-sm-4 d-flex flex-column\"><div class=\"dropdown\"><button class=\"btn btn-primary btn-sm btn-block dropdown-toggle mb-1\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">A-P</button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"actPassClick('ACT')\">ACT</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"actPassClick('PASS')\">PASS</a></div></div><button type=\"button\" class=\"btn btn-primary btn-sm mb-1\" value=\"to\" click.delegate=\"valueClick($event)\">TO</button> <button type=\"button\" class=\"btn btn-primary btn-sm mb-1\" value=\"reps\" click.delegate=\"valueClick($event)\">Rep</button><div class=\"dropdown\"><button class=\"btn btn-primary btn-sm btn-block dropdown-toggle mb-1\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Dist</button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"linkClick($event)\">Feet</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"linkClick($event)\">Step(s)</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"linkClick($event)\">Mile(s)</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"linkClick($event)\">Block(s)</a></div></div><button type=\"button\" class=\"btn btn-primary btn-sm mb-1\" value=\"lbs\" click.delegate=\"valueClick($event)\">LBS</button><div class=\"dropdown\"><button class=\"btn btn-primary btn-sm btn-block dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Time</button><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"linkClick($event)\">Second(s)</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"linkClick($event)\">Minute(s)</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"linkClick($event)\">Hour(s)</a></div></div></div></div></ux-dialog-body></ux-dialog></template>";});;
define('ptdaysheet/cell',['exports', 'aurelia-framework'], function (exports, _aureliaFramework) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CellCustomAttribute = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _dec2, _class;

  var CellCustomAttribute = exports.CellCustomAttribute = (_dec = (0, _aureliaFramework.customAttribute)('my-cell-attribute'), _dec2 = (0, _aureliaFramework.inject)(_aureliaFramework.DOM.Element), _dec(_class = _dec2(_class = function () {
    function CellCustomAttribute(element) {
      _classCallCheck(this, CellCustomAttribute);

      this.element = element;
    }

    CellCustomAttribute.prototype.bind = function bind(bindingContext, overridingContext) {
      var activity = bindingContext.r;
      var dgHelper = overridingContext.parentOverrideContext.bindingContext.datagridHelper;
      var sTab = dgHelper.selectedGoal.selectedTab;

      var charWidth = 10;
      var txtWidth = 0;
      if (activity.description) {
        txtWidth = charWidth * activity.description.length;
      }
      if (txtWidth > sTab.activityColumnWidth) {
        sTab.activityColumnWidth = txtWidth;
      }
    };

    return CellCustomAttribute;
  }()) || _class) || _class);
});;
define('ptdaysheet/datagrid',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', './ptDatagridHelper', 'aurelia-dialog', '../ptdaysheet/calculator', 'aurelia-templating-resources', '../ptdaysheet/tabPopup', '../ptdaysheet/datePopup', '../ptdaysheet/alertPopup', 'moment', 'aurelia-event-aggregator', '../ptdaysheet/dayTimePopup', '../ptdaysheet/stopwatchHelper', 'lodash', './editingHelper', '../ptdaysheet/authorizePop'], function (exports, _helper, _http, _aureliaFramework, _ptDatagridHelper, _aureliaDialog, _calculator, _aureliaTemplatingResources, _tabPopup, _datePopup, _alertPopup, _moment, _aureliaEventAggregator, _dayTimePopup, _stopwatchHelper, _lodash, _editingHelper, _authorizePop) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Datagrid = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  var _dec, _dec2, _class, _desc, _value, _class2;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var AlertObject = function AlertObject(title, text, iconClass, iconColor) {
    _classCallCheck(this, AlertObject);

    this.title = title;
    this.text = text;
    this.iconColor = iconColor ? iconColor : 'black';
    this.iconClass = iconClass;
    this.showCancel = false;
  };

  var Datagrid = exports.Datagrid = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _ptDatagridHelper.PtDatagridHelper, _aureliaDialog.DialogService, _aureliaTemplatingResources.BindingSignaler, _aureliaEventAggregator.EventAggregator, _stopwatchHelper.StopwatchHelper), _dec2 = (0, _aureliaFramework.computedFrom)('selectedProvider', 'datagridHelper.bodyPart'), _dec(_class = (_class2 = function () {
    _createClass(Datagrid, [{
      key: 'canCreateNewPref',
      get: function get() {
        var self = this;
        if (self.selectedProvider && self.datagridHelper.bodyPart) {
          return true;
        } else {
          return false;
        }
      }
    }]);

    function Datagrid(helper, http, PtDatagridHelper, dialogService, bindingSignaler, eventAggregator, StopwatchHelper) {
      _classCallCheck(this, Datagrid);

      this.therapyTimer = null;
      this.lapsedTime = 0;
      this.activityColumnWidth = 100;
      this.gridMaxHeight = 300;
      this.screenWidth = 500;
      this.screenHeight = 500;
      this.goalDropdownItems = ["Short-Term Goal", "Mid-Term Goal", "Long-Term Goal"];
      this.bodypartList = ['Foot', 'Ankle', 'Knee', 'Hip', 'Hand', 'Wrist', 'Elbow', 'Shoulder', 'Cervical', 'Thoracic', 'Lumbar'];
      this.displayDebugTools = false;
      this.displayPreferences = false;
      this.dayColumnWidth = 200;
      this.columnWidthProperty = "width:200px;";
      this.displayAuthorizationButton = false;
      this.displayCloseButton = false;
      this.parent = null;
      this.prefSaveSubscriber = null;
      this.assessmentHeight = 0;
      this.addGoalPlusEnabled = true;
      this.dialog = false;
      this.providerList = [];
      this.selectedProvider = null;

      this.helper = helper;
      this.http = http;
      this.datagridHelper = PtDatagridHelper;
      this.dialogService = dialogService;
      this.bindingSignaler = bindingSignaler;
      this.ea = eventAggregator;
      this.stopwatch = StopwatchHelper;
    }

    Datagrid.prototype.activate = function activate(params) {

      if (params == undefined) return;


      var self = this;

      if (typeof this.helper.jwt() === 'undefined' || this.helper.jwt() == null) {
        if (params.hasOwnProperty("jwt")) {
          this.helper.processToken(params.jwt);
        }
      } else {}

      if (params.hasOwnProperty("displayPreferences")) {
        this.displayPreferences = params.displayPreferences;
      }

      if (params.hasOwnProperty("patientid")) {
        this.datagridHelper.patientId = params.patientid;
      }

      if (params.hasOwnProperty("providerid")) {
        this.datagridHelper.providerId = params.providerid;
      }

      if (params.hasOwnProperty("bodypart")) {
        this.datagridHelper.bodyPart = params.bodypart;
      }

      if (params.hasOwnProperty("userid")) {
        this.datagridHelper.userId = params.userid;
      }

      if (params.hasOwnProperty("visitdate")) {
        this.datagridHelper.visitDate = params.visitdate;
      }

      if (params.hasOwnProperty("type")) {
        this.datagridHelper.daysheetType = params.type;
      }

      if (params.hasOwnProperty("displayCloseButton")) {
        this.displayCloseButton = params.displayCloseButton;
      }
      if (params.hasOwnProperty("parent")) {
        this.parent = params.parent;
      }

      if (params.hasOwnProperty("dialog")) {
        self.dialog = params.dialog;
      }

      if (params.hasOwnProperty("providers")) {
        for (var i = 0; i < params.providers.length; i++) {
          var pro = params.providers[i];

          if (pro.ProviderEntity != 'All') {
            self.providerList.push(pro);
          }
          if (self.datagridHelper.providerId != null && pro.ProviderID == self.datagridHelper.providerId) {
            self.selectedProvider = pro;
          }
        }
      }

      if (params.hasOwnProperty("editMode")) {
        this.datagridHelper.editMode = params.editMode;
        this.datagridHelper.displayAssessment = true;
      }

      this.datagridHelper.activate(function () {});

      self.ea.subscribeOnce('showAlert', function (alertObject) {
        self.showAlertPopup(alertObject);
      });

      self.prefSaveSubscriber = self.ea.subscribe('preferenceMessage', function (obj) {
        if (obj.message == 'create') {
          var pid = obj.prefId;
          var desc = obj.description;
          var bp = obj.bodypart;
          var proId = self.selectedProvider ? self.selectedProvider.ProviderID : null;
          self.datagridHelper.saveNewPreference(desc, pid, bp, proId);
        } else if (obj.message == 'update') {
          var pid = obj.prefId;
          var _desc2 = obj.description;
          var _bp = obj.bodypart;
          self.datagridHelper.updatePreference(_desc2, pid, _bp);
        } else if (obj.message == 'load') {
          var pid = obj.prefId;
          self.datagridHelper.selectPreferenceByPrefId(pid);
        }
      });

      self.ea.subscribe('resizeDatagrid', function () {
        self.resizeDatagrid();
      });

      self.ea.subscribe('savedaysheet', function () {
        self.datagridHelper.saveDaysheet();
      });

      window.onmessage = function (event) {
        if (event.data == 'savedaysheet') {
          self.datagridHelper.saveDaysheet(function () {
            window.top.postMessage('savedaysheetcomplete', '*');
          });
        }
        if (event.data == 'gosetup') {
          self.displayAuthorizationButton = true;
        }
      };
    };

    Datagrid.prototype.providerSelected = function providerSelected() {
      var self = this;
      if (self.selectedProvider) {
        self.datagridHelper.loadProviderPrefsWithIdAndBodypart(self.selectedProvider.ProviderID, self.datagridHelper.bodyPart);
      }
    };

    Datagrid.prototype.providerPrefSelected = function providerPrefSelected() {
      var self = this;
      self.datagridHelper.selectPreferenceByPrefId(self.datagridHelper.selectedProviderPref.PrefID);
    };

    Datagrid.prototype.closeButtonClick = function closeButtonClick() {

      if (!this.datagridHelper.editMode) {
        this.prefSaveSubscriber.dispose();
        this.datagridHelper.saveDaysheet();
      }

      this.parent.daysheetParams = null;
      this.parent.displayDaysheet = false;

      if (this.dialog) {
        this.dialog.close();
      }
    };

    Datagrid.prototype.deactivate = function deactivate() {
      if (!this.datagridHelper.editMode) {
        this.datagridHelper.saveDaysheet();
      }
    };

    Datagrid.prototype.detached = function detached() {
      if (!this.datagridHelper.editMode) {
        this.datagridHelper.saveDaysheet();
      }
    };

    Datagrid.prototype.unbind = function unbind() {
      if (!this.datagridHelper.editMode) {
        this.datagridHelper.saveDaysheet();
      }
    };

    Datagrid.prototype.showAlertPopup = function showAlertPopup(alertObject, callback) {
      var self = this;
      self.dialogService.open({ viewModel: _alertPopup.AlertPopup, model: alertObject }).whenClosed(function (response) {
        var r = response;
        if (callback) {
          callback(response);
        }
      });
    };

    Datagrid.prototype.showHideDebugTools = function showHideDebugTools() {
      this.displayDebugTools = this.displayDebugTools ? false : true;
    };

    Datagrid.prototype.showDatePopup = function showDatePopup() {
      var self = this;
      self.dialogService.open({ viewModel: _datePopup.DatePopup, model: null }).whenClosed(function (response) {

        var display = response.output.display;
        var value = response.output.date;

        var result = "";
        if (display === "days" || display === "weeks") {
          result = value;
        } else {
          var d = (0, _moment2.default)(response.output.date, "MM/DD/YYYY");
          result = d.format("MM/DD/YYYY");
        }
        self.datagridHelper.selectedGoal.dueDate = result;
        self.datagridHelper.selectedGoal.dateFormat = display;

        self.datagridHelper.calculateGoalAlertTime(self.datagridHelper.selectedGoal);

        self.datagridHelper.saveGoal(self.datagridHelper.selectedGoal, function (res) {});
      });
    };

    Datagrid.prototype.attached = function attached() {
      console.log("daysheet LOADED");

      var self = this;

      $('#dischargeDropdownItems').click(function (e) {
        e.stopPropagation();
      });

      this.resizeDatagrid();

      this.screenWidth = $(window).width();
      this.screenHeight = $(window).height();

      $('html').css('overflow', 'hidden');

      var dt = $('[data-toggle="tooltip"]');
      if (dt) {
        if (dt[0].tooltip) {
          dt[0].tooltip();
        }
      }

      self.resizeActivityColumn(self);

      window.top.postMessage('datagridattached', '*');

      if (self.datagridHelper.displayAssessment) {
        self.assessmentHeight = self.assessmentdiv.clientHeight;
      } else {
        self.assessmentHeight = 0;
      }
    };

    Datagrid.prototype.showCalculator = function showCalculator(d) {};

    Datagrid.prototype.setupPopovers = function setupPopovers() {
      $('#assessmentDropdownItems').on('click', function (event) {
        if (event.target.className == 'fa fa-eye mx-1 au-target') {

          $(event.target).popover('toggle');
          event.stopPropagation();
        }
      });

      $('#assessmentDropdown').on('hide.bs.dropdown', function () {
        $('.popover').remove();
      });
    };

    Datagrid.prototype.resizeDatagrid = function resizeDatagrid() {

      var self = this;

      if (this.mainCard && this.toolbar) {
        this.gridMaxHeight = this.toolbar.clientHeight - (54 + 44);
      }
    };

    Datagrid.prototype.dischargeClick = function dischargeClick(event) {
      if (event.target.className == 'fa fa-eye mx-1 au-target') {

        $(event.target).popover('toggle');
      }
    };

    Datagrid.prototype.blockClose = function blockClose(e) {
      e.preventDefault();
    };

    Datagrid.prototype.editDayTimeClick = function editDayTimeClick(day) {
      var self = this;
      self.dialogService.open({ viewModel: _dayTimePopup.DayTimePopup, model: day }).whenClosed(function (response) {
        day.totalTime = response.output;
      });
    };

    Datagrid.prototype.deleteDayClick = function deleteDayClick(day) {
      this.datagridHelper.selectedGoal.selectedTab.deleteDay(day, this.datagridHelper);
    };

    Datagrid.prototype.refreshClick = function refreshClick() {
      this.datagridHelper.activate();
    };

    Datagrid.prototype.resizeActivityColumn = function resizeActivityColumn(ctx) {

      setTimeout(function () {

        var self = ctx;
        self.activityColumnWidth = 100;

        self.columnWidthProperty = "width:200px;";

        var t = $("#daysheetTable tr");

        $("#daysheetTable tr").each(function () {
          var txtEl = $(this).find("td:first");
          if (txtEl.length > 0) {
            var font = self.getFont(txtEl);
            var txt = txtEl.text();

            var w = self.getTextWidth(txt, font);

            if (w > self.activityColumnWidth) {
              self.activityColumnWidth = w + 20;
            }
          }
        });

        if (self.datagridHelper.selectedGoal == undefined || self.datagridHelper.selectedGoal.selectedTab == null) return;

        var days = self.datagridHelper.selectedGoal.selectedTab.days.length;

        var sWidth = $(window).width();

        var totalWidth = self.activityColumnWidth + days * self.dayColumnWidth;
        if (totalWidth < sWidth) {
          self.columnWidthProperty = "";
        }

        self.setupPopovers();
      }, 1000);
    };

    Datagrid.prototype.getTextWidth = function getTextWidth(text, font) {
      var canvas = this.getTextWidth.canvas || (this.getTextWidth.canvas = document.createElement("canvas"));
      var context = canvas.getContext("2d");
      context.font = font;
      var metrics = context.measureText(text);
      return metrics.width;
    };

    Datagrid.prototype.getFont = function getFont(el) {
      var style = window.getComputedStyle(el[0], null);
      var size = style.getPropertyValue('font-size');
      var weight = style.getPropertyValue('font-weight');
      var fontSize = parseFloat(size);
      return fontSize + 1 + 'px Arial ';
    };

    Datagrid.prototype.tabClicked = function tabClicked(tab) {
      var self = this;
      this.datagridHelper.selectTab(tab);

      self.resizeActivityColumn(self);
    };

    Datagrid.prototype.sortActivitiesClick = function sortActivitiesClick() {
      this.datagridHelper.selectedGoal.selectedTab.sortActivities(_);
    };

    Datagrid.prototype.addModalityClick = function addModalityClick() {
      this.datagridHelper.addModality(null, null, null, true);

      $(this.grid).scrollTop(this.grid.offsetHeight);
    };

    Datagrid.prototype.calendarClick = function calendarClick() {
      this.datagridHelper.addEmptyDay();
    };

    Datagrid.prototype.goalClicked = function goalClicked(g) {
      this.datagridHelper.selectGoal(g);
    };

    Datagrid.prototype.selectFirstGoal = function selectFirstGoal() {
      var firstGoal = this.datagridHelper.goals[0];
      this.datagridHelper.selectGoal(firstGoal);
    };

    Datagrid.prototype.rowClicked = function rowClicked(row, day, cIndex, rIndex) {
      this.datagridHelper.selectDay(day, cIndex, rIndex);

      this.datagridHelper.selectCell(day, rIndex);
    };

    Datagrid.prototype.preferenceItemSelected = function preferenceItemSelected() {
      this.datagridHelper.preferenceSelected();
    };

    Datagrid.prototype.saveClick = function saveClick() {
      this.datagridHelper.saveDaysheet();
    };

    Datagrid.prototype.priorClick = function priorClick() {
      this.datagridHelper.populatePriorValues();
    };

    Datagrid.prototype.editGoalDescription = function editGoalDescription(g) {
      g.editingDescription = true;
      this.datagridHelper.selectGoal(g);
    };

    Datagrid.prototype.copyForwardGoalActivities = function copyForwardGoalActivities(goal, date, copyData) {
      var self = this;
      goal.startDate = date;
      goal.userId = self.datagridHelper.userId;

      for (var g = 0; g < self.datagridHelper.goals.length; g++) {
        var aGoal = self.datagridHelper.goals[g];
        if (aGoal.id == goal.id) {

          var tGoals = _.reject(self.datagridHelper.goals, function (o) {
            return o.isDischarge;
          });
          tGoals = _.orderBy(tGoals, ['id'], ['asc']);

          var copyGoal = tGoals[tGoals.length - 1];

          if (copyGoal.description != goal.description && copyGoal.id != goal.id) {
            self.datagridHelper.copyActivityiesFromGoalToGoal(copyGoal.id, goal, copyData);
          }
        }
      }

      self.datagridHelper.toggleAssessment(true);
    };

    Datagrid.prototype.toggleGoalVisibility = function toggleGoalVisibility() {
      var self = this;
      var visible = self.datagridHelper.displayAssessment ? false : true;
      self.datagridHelper.toggleAssessment(visible);
    };

    Datagrid.prototype.goalDropDownClick = function goalDropDownClick(item, goal) {
      goal.description = item;
    };

    Datagrid.prototype.newGoalClick = function newGoalClick() {
      var aGoal = this.datagridHelper.goals[0];
      if (aGoal.id == 0 && aGoal.description == "") {
        aGoal.visible = true;
        this.editGoalDescription(aGoal);
      } else {
        aGoal = this.datagridHelper.createGoal();
        aGoal.editingDescription = true;
        this.datagridHelper.goals.push(aGoal);
        this.datagridHelper.selectGoal(aGoal);
      }

      this.addGoalPlusEnabled = false;
    };

    Datagrid.prototype.goalCreateCancelClick = function goalCreateCancelClick(goal) {
      var dischargeIndex = this.datagridHelper.getDischargeIndex();
      if (this.datagridHelper.goals.length - 1 > dischargeIndex) {
        this.datagridHelper.goals.splice(dischargeIndex + 1, 1);
      }

      var latest = this.datagridHelper.getLatestGoal();
      if (latest.id == 0 && latest.description == "") {
        latest.visible = false;
        latest.editingDescription = false;
      }

      this.datagridHelper.selectGoal(latest);
      this.addGoalPlusEnabled = true;
    };

    Datagrid.prototype.goalCheckClick = function goalCheckClick(goal) {
      var self = this;
      goal.editingDescription = false;

      self.addGoalPlusEnabled = true;

      if (goal.description.length == 0) {

        var gIndex = 0;

        var goalCount = self.datagridHelper.goals.length;
        for (var i = 0; i < goalCount; i++) {
          var aGoal = self.datagridHelper.goals[i];
          if (aGoal.id == goal.id && aGoal.description == goal.description) {
            gIndex = i;
          }
        }

        self.datagridHelper.selectGoal(self.datagridHelper.goals[gIndex]);
        self.datagridHelper.goals[gIndex].visible = false;
        return;
      }

      var goalDate = self.helper.getDateWithFormat(self.datagridHelper.visitDate, "MM/DD/YYYY");

      var legacySheet = self.datagridHelper.checkForLegacyDataOnGoal(goal);
      var copyData = false;
      if (legacySheet != null) {
        goalDate = self.helper.getISODateToFormat(legacySheet.ExamDateTime, "MM/DD/YYYY");
        copyData = true;
      }

      self.datagridHelper.checkForExistingGoal(goal.description, self.datagridHelper.sheetId, function (res) {
        if (res == null) {
          self.copyForwardGoalActivities(goal, goalDate, copyData);

          if (legacySheet != null) {
            goal.StartDate = goalDate;
            goal.sheetId = legacySheet.SheetID;
            self.datagridHelper.saveGoal(goal, function (res) {
              self.datagridHelper.updateDaysheetWithGoalIds(goal.sheetId, res.Id);
            });
          }
        } else {
          var warningDesc = "Goal already exists!";
          var bodyText = res.Description + " exists for patient on: " + self.helper.getISODateToFormat(res.StartDate, "MM/DD/YY") + ".";

          var alert = new AlertObject(warningDesc, bodyText, "fa fa-lg fa-hand-paper-o", "orange");
          self.showAlertPopup(alert, function (r) {
            if (!r.wasCancelled) {
              goal.visible = false;
              goal.description = "";
            }
          });
        }
      });
    };

    Datagrid.prototype.dayClockClicked = function dayClockClicked(day, goal) {

      var self = this;

      if (self.datagridHelper.stopwatchInstance == null) {
        self.datagridHelper.stopwatchInstance = self.stopwatch;
      }

      self.stopwatch.displayStopwatch = true;

      self.stopwatch.show({ "day": day, "goal": goal, "helper": self.datagridHelper }, function () {
        self.stopwatch.displayStopwatch = false;
      });
    };

    Datagrid.prototype.subtractInOutTime = function subtractInOutTime(day) {
      var testDiff = _moment2.default.duration(day.timeOut.diff(day.timeIn));

      if (day.totalTime != null) {
        var tt = (0, _moment2.default)(day.totalTime, ":ss");
        var m = _moment2.default.duration({
          seconds: tt.second(),
          minutes: tt.minute(),
          hours: tt.hour()
        });
        testDiff.add(m);
      }

      day.totalTime = this.formatTimeWihDuration(testDiff);

      this.datagridHelper.updateDayTotalTimeAcrossAllGoals(day);
    };

    Datagrid.prototype.formatTimeWihDuration = function formatTimeWihDuration(duration) {
      var dSec = duration.get('seconds');
      var dMin = duration.get('minutes');
      var dHr = duration.get('hours');
      var time = (0, _moment2.default)().set({ 'hour': dHr, 'minute': dMin, 'second': dSec });
      var format = "";
      if (dHr > 0) {
        format = "hh:";
      }
      if (dMin > 0) {
        format += "mm:";
      }

      format += dMin > 0 ? "ss" : ":ss";
      return time.format(format);
    };

    Datagrid.prototype.formatTime = function formatTime(ticks) {
      var duration = _moment2.default.duration(ticks * 1000);
      var dSec = duration.get('seconds');
      var dMin = duration.get('minutes');
      var dHr = duration.get('hours');
      var time = (0, _moment2.default)().set({ 'hour': dHr, 'minute': dMin, 'second': dSec });
      var format = "";
      if (dHr > 0) {
        format = "hh:";
      }
      if (dMin > 0) {
        format += "mm:";
      }

      format += dMin > 0 ? "ss" : ":ss";
      return time.format(format);
    };

    Datagrid.prototype.addAssessmentPrefClick = function addAssessmentPrefClick(d) {
      this.datagridHelper.setCurrentGoalAssessmsnetWithSelectedAssessmentPref(d);
    };

    Datagrid.prototype.assessmentGoalCheck = function assessmentGoalCheck() {
      var self = this;
      var alert = new AlertObject("Create Goal", "You must create a goal before saving Assessment data", "fa fa-lg fa-file-o", "green");
      alert.showCancel = true;

      var sGoal = self.datagridHelper.selectedGoal;
      if (sGoal == null || sGoal == undefined || sGoal.description.length == 0) {

        this.showAlertPopup(alert, function (r) {
          if (!r.wasCancelled) {
            self.newGoalClick();
          } else {
            sGoal.assessment = "";
          }
        });
      } else {
        self.datagridHelper.saveGoal(self.datagridHelper.selectedGoal, function (res) {});
      }
    };

    Datagrid.prototype.addDischargePrefClick = function addDischargePrefClick(d) {
      var self = this;
      var alert = new AlertObject("warning", "Continue will disconnect future PT visits from Prior Day Sheet Data", "fa fa-lg fa-hand-paper-o", "orange");
      alert.showCancel = true;
      this.showAlertPopup(alert, function (r) {
        if (!r.wasCancelled) {
          self.datagridHelper.setDischargeWithPref(d);
        }
      });
    };

    Datagrid.prototype.saveAssessmentPrefClick = function saveAssessmentPrefClick() {
      var txt = this.assessmentTextarea;
      var input = this.assessmentInput;

      var aPref = this.datagridHelper.checkForExistingPref(input.value);
      this.datagridHelper.saveAssessmentPref(input.value, txt.value, aPref);
    };

    Datagrid.prototype.saveDischargePrefClick = function saveDischargePrefClick() {
      var txt = this.dischargeTextarea;
      var input = this.dischargeInput;

      var aPref = this.datagridHelper.checkForExistingDischargePref(input.value);
      this.datagridHelper.saveDischargePref(input.value, txt.value, aPref);
    };

    Datagrid.prototype.prefLoad = function prefLoad() {
      this.datagridHelper.selectPreferenceByPrefId(13);
    };

    Datagrid.prototype.therapyTimerTick = function therapyTimerTick(a) {
      a.lapsedTime += 1;
    };

    Datagrid.prototype.addToActivitiesToUpdate = function addToActivitiesToUpdate(day, activitySelected) {
      var self = this;

      var foundActivity = _.find(day.activitiesToUpdate, { 'description': activitySelected.description, 'id': activitySelected.id });
      if (foundActivity == undefined) {
        day.activitiesToUpdate.push(activitySelected);
      } else {
        foundActivity.value = activitySelected.value;
        foundActivity.actPass = activitySelected.actPass;
      }
      self.bindingSignaler.signal("my-refresh");
    };

    Datagrid.prototype.cellDoubleClickedNoCalc = function cellDoubleClickedNoCalc(day, activitySelected) {
      var self = this;
      var goal = self.datagridHelper.goals.find(function (g) {
        return g.selected === true;
      });
      var tab = goal.tabs.find(function (t) {
        return t.selected === true;
      });

      (0, _editingHelper.setIsEditing)(true, function () {
        var dayId = day.id;
        var activityId = activitySelected.id;
        var goalId = goal.id;
        var tabId = tab.id;

        var getDayAndActivity = function getDayAndActivity() {
          console.log('what up people?');
          var goal = self.datagridHelper.goals.find(function (g) {
            return g.id === goalId;
          });
          var tab = goal.tabs.find(function (t) {
            return t.id === tabId;
          });
          var day = tab.days.find(function (d) {
            return d.id === dayId;
          });
          var activity = day.activities.find(function (a) {
            return a.id === activityId;
          });
          self.addToActivitiesToUpdate(day, activity);
          (0, _editingHelper.setIsEditing)(false, null);
        };
        getDayAndActivity();
      });
    };

    Datagrid.prototype.cellDoubleClicked = function cellDoubleClicked(day, activitySelected) {
      var self = this;
      (0, _editingHelper.setIsEditing)(true);

      var dgh = this.datagridHelper;
      console.log('dgh', dgh);

      if (!activitySelected) return;

      self.dialogService.open({ viewModel: _calculator.Calculator, model: { activity: activitySelected, helper: self.datagridHelper } }).whenClosed(function (response) {
        console.log('DIALOG RETURN VALUE:', response);

        activitySelected.value = response.output.value;
        activitySelected.actPass = response.output.actPass;
        activitySelected.backgroundColor = response.output.backgroundColor;

        self.addToActivitiesToUpdate(day, activitySelected);
      });
    };

    Datagrid.prototype.displayLongDescriptions = function displayLongDescriptions() {
      this.longDescriptionsVisible = this.longDescriptionsVisible ? false : true;
    };

    Datagrid.prototype.valueChangedCallback = function valueChangedCallback(day, activityIndex) {
      var aAct = day.activities[activityIndex];

      var foundActivity = _.find(day.activitiesToUpdate, { 'description': aAct.description, 'id': aAct.id });
      if (foundActivity == undefined) {
        day.activitiesToUpdate.push(day.activities[activityIndex]);
      }

      this.datagridHelper.selectedGoalHasValues();

      (0, _editingHelper.setIsEditing)(false, null);
    };

    Datagrid.prototype.authorizePopup = function authorizePopup() {
      var self = this;
      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;
      var data = {
        patientId: self.datagridHelper.patientId,
        userId: self.datagridHelper.userId,
        parentWidth: windowWidth,
        parentHeight: windowHeight
      };
      self.dialogService.open({ viewModel: _authorizePop.AuthorizePop, model: data }).whenClosed(function (response) {});
    };

    return Datagrid;
  }(), (_applyDecoratedDescriptor(_class2.prototype, 'canCreateNewPref', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'canCreateNewPref'), _class2.prototype)), _class2)) || _class);
});;
define('text!ptdaysheet/datagrid.html',[],function(){return "<template><require from=\"./cell\"></require><require from=\"./draggable\"></require><div class=\"daysheet-timer\" if.bind=\"stopwatch.displayStopwatch\" draggable><i class.bind=\"stopwatch.btnClass\" style=\"padding-left:5px\" css=\"color: ${stopwatch.btnColor};\" click.delegate=\"stopwatch.timerClick()\"></i> <span style=\"padding-left:10px\">${stopwatch.displayTime}</span><i class=\"fa fa-times ml-auto\" style=\"float:right;padding-right:5px;padding-top:3px\" click.delegate=\"stopwatch.close()\"></i></div><div class=\"card\" style=\"position:absolute;top:0;left:0;right:0;bottom:0\" ref=\"mainCard\"><div class=\"card-header\"><ul class=\"nav nav-tabs card-header-tabs\"><li class=\"nav-item\" if.bind=\"datagridHelper.editMode\" style=\"font-size:medium;padding:.5rem 1rem\">Daysheet Editor</li><li class=\"nav-item\" click.delegate=\"selectFirstGoal()\"><span style=\"display:block;padding:.5rem 1rem\" click.delegate=\"toggleGoalVisibility()\"><b>Goals</b> <i class=\"fa ${datagridHelper.displayAssessment ? 'fa-caret-down' : 'fa-caret-up'} ml-1\"></i></span></li><template repeat.for=\"g of datagridHelper.goals\"><div if.bind=\"!g.editingDescription\"><div if.bind=\"g.visible\"><li class=\"nav-item\"><a click.delegate=\"goalClicked(g)\" class=\"nav-link\" class.bind=\"g.selected ? 'active' : ''\">${g.description}</a></li></div></div><div class=\"nav-link\" class.bind=\"g.selected ? 'active' : ''\" style=\"display:inline-flex\" else><div class=\"dropdown\" style=\"display:inline-block\" id=\"goalDropdown\"><button class=\"btn dropdown-toggle\" style=\"border:1px solid #d3d3d3;padding:1px 10px 0 4px\" type=\"button\" id=\"goalDropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><input type=\"text\" style=\"border:none\" ref=\"assessmentInput\" placeholder=\"Enter Goal Description...\" value.bind=\"g.description\"></button><div class=\"dropdown-menu\" id=\"goalDropdownItems\" aria-labelledby=\"dropdownAssessment\" style=\"width:max-content\"><div repeat.for=\"i of goalDropdownItems\"><a class=\"dropdown-item\" click.delegate=\"goalDropDownClick(i, g)\"> ${i} </a></div></div></div><i class=\"fa fa-check-square fa-lg\" style=\"color:green;padding:7px 0 7px 7px\" aria-hidden=\"true\" click.delegate=\"goalCheckClick(g)\"></i> <i class=\"fa fa-times-circle fa-lg\" style=\"color:grey;padding:7px 0 7px 7px\" aria-hidden=\"true\" click.delegate=\"goalCreateCancelClick(g)\"></i></div></template><li class=\"nav-item\"><a class=\"nav-link ${!addGoalPlusEnabled ? 'disabled' : '' }\" click.delegate=\"newGoalClick()\"><i class=\"fa fa-plus fa-lg\" css=\"color: ${addGoalPlusEnabled ? 'grey' : 'lightgrey'};\" style=\"color:grey\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Add Goal\"></i></a></li><li class=\"nav-item\" if.bind=\"displayAuthorizationButton\"><button type=\"button\" class=\"btn btn-outline-primary\" click.delegate=\"authorizePopup()\"><i class=\"fa fa-thumbs-o-up mr-1\"></i>Authorize</button></li><li class=\"nav-item\" if.bind=\"displayDebugTools\"><i class=\"fa fa-floppy-o fa-lg mx-1\" style=\"color:green;padding-top:13px\" click.delegate=\"saveClick()\"></i></li><li class=\"nav-item\" if.bind=\"displayDebugTools\"><i class=\"fa fa-refresh fa-lg mx-1\" style=\"color:#00f;padding-top:13px\" click.delegate=\"refreshClick()\"></i></li><li class=\"nav-item\" if.bind=\"displayDebugTools\"><i class=\"fa fa-folder-open fa-lg mx-1\" style=\"padding-top:13px\" click.delegate=\"prefLoad()\"></i></li><li class=\"nav-item ml-auto\" if.bind=\"datagridHelper.editMode\"><select value.bind=\"selectedProvider\" class=\"custom-select form-control ${!selectedProvider ? 'is-invalid' : ''}\" change.delegate=\"providerSelected()\"><option model.bind=\"null\">Provider...</option><option repeat.for=\"p of providerList\" model.bind=\"p\">${p.ProviderEntity}</option></select></li><li class=\"nav-item px-1\" if.bind=\"datagridHelper.editMode\"><select value.bind=\"datagridHelper.bodyPart\" class=\"custom-select form-control ${!datagridHelper.bodyPart ? 'is-invalid' : ''}\" change.delegate=\"providerSelected()\"><option model.bind=\"null\">Bodypart...</option><option repeat.for=\"b of bodypartList\" model.bind=\"b\">${b}</option></select></li><li class=\"nav-item mr-5\" if.bind=\"datagridHelper.editMode\"><div class=\"input-group\" style=\"width:200px\"><select value.bind=\"datagridHelper.selectedProviderPref\" class=\"custom-select form-control\" id=\"exampleFormControlSelect1\" change.delegate=\"providerPrefSelected()\"><option model.bind=\"null\">Prefs...</option><option repeat.for=\"p of datagridHelper.preferenceList\" model.bind=\"p\">${p.PrefDescription}</option></select><div class=\"input-group-append\"><div class=\"dropdown\"><button class=\"btn btn-outline-secondary dropdown-toggle\" style=\"border-top-left-radius:0;border-bottom-left-radius:0\" type=\"button\" id=\"prefDropDown\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-user\"></i></button><div class=\"dropdown-menu\" aria-labelledby=\"prefDropDown\"><a class=\"dropdown-item px-3 ${!canCreateNewPref ? 'disabled' : ''}\" href=\"#\" click.delegate=\"datagridHelper.newPreferenceClick()\"><i class=\"fa fa-plus fa-fw pr-2\" aria-hidden=\"true\"></i>New Pref</a> <a class=\"dropdown-item px-3 ${!datagridHelper.selectedProviderPref ? 'disabled' : ''}\" href=\"#\" click.delegate=\"datagridHelper.updatePreferenceClick()\"><i class=\"fa fa-plus fa-fw pr-2\" aria-hidden=\"true\"></i>Update Pref</a></div></div></div></div></li><li class=\"nav-item\" if.bind=\"displayCloseButton\" style=\"position:absolute;right:0;margin-right:12px\"><i class=\"fa fa-close fa-2x\" click.delegate=\"closeButtonClick()\"></i></li></ul></div><div if.bind=\"datagridHelper.selectedGoal\" class=\"card-body\" style=\"padding:0\"><div if.bind=\"datagridHelper.displayAssessment\" ref=\"assessmentdiv\" style=\"padding:10px 10px 10px 10px\"><div class=\"row justify-content-between\" style=\"margin-bottom:10px\"><div class=\"col-6\"><label class=\"my-1 mr-2\"><b>Assessment</b></label><div class=\"dropdown\" style=\"display:inline-block\" id=\"assessmentDropdown\"><button class=\"btn dropdown-toggle\" style=\"border:1px solid #d3d3d3;padding:1px 10px 0 4px\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><input type=\"text\" style=\"border:none\" ref=\"assessmentInput\" value.one-way=\"datagridHelper.selectedAssessmentPref.Description1\"></button><div class=\"dropdown-menu\" id=\"assessmentDropdownItems\" aria-labelledby=\"dropdownAssessment\" style=\"width:max-content\"><div repeat.for=\"mod of datagridHelper.assessmentPrefList\"><a class=\"dropdown-item\" style=\"display:inline-block;width:auto\" click.delegate=\"addAssessmentPrefClick(mod)\"> ${mod.Description1} </a><i class=\"fa fa-eye mx-1\" style=\"float:right;padding:7px 14px;color:#d3d3d3\" role=\"button\" data-toggle=\"popover\" data-trigger=\"focus\" data-content.bind=\"mod.Description3\"></i></div></div></div><i class=\"fa fa-male fa-lg mx-1\" click.delegate=\"saveAssessmentPrefClick()\"></i></div><div class=\"col-6 py-1\">Due Date: <i class=\"fa fa-calendar-plus-o\" click.delegate=\"showDatePopup()\"></i> <span if.bind=\"datagridHelper.selectedGoal.dueDate\">${datagridHelper.selectedGoal.displayDueDate}</span><br><span if.bind=\"datagridHelper.selectedGoal.dueDate\" style=\"color:red\">${datagridHelper.selectedGoal.alertTime}</span></div></div><textarea class=\"form-control\" change.delegate=\"assessmentGoalCheck()\" value.bind=\"datagridHelper.selectedGoal.assessment\" ref=\"assessmentTextarea\"></textarea></div><div if.bind=\"datagridHelper.selectedGoal.isDischarge\" style=\"padding:10px 10px 10px 10px\"><div class=\"row justify-content-between\" style=\"margin-bottom:10px\"><div class=\"col-12\"><label class=\"my-1 mr-2\"><b>Reason</b></label><div class=\"dropdown\" style=\"display:inline-block\" id=\"dischargeDropdown\"><button class=\"btn dropdown-toggle\" style=\"border:1px solid #d3d3d3;padding:1px 10px 0 4px\" type=\"button\" id=\"dischargeDropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><input type=\"text\" style=\"border:none\" ref=\"dischargeInput\" value.one-way=\"datagridHelper.selectedDischargePref.Description1\"></button><div class=\"dropdown-menu\" id=\"dischargeDropdownItems\" aria-labelledby=\"dropdownDischarge\" style=\"width:max-content\" click.delegate=\"dischargeClick($event)\"><div repeat.for=\"mod of datagridHelper.dischargePrefList\"><a class=\"dropdown-item\" style=\"display:inline-block;width:auto\" click.delegate=\"addDischargePrefClick(mod)\"> ${mod.Description1} </a></div></div></div><i class=\"fa fa-male fa-lg mx-1\" click.delegate=\"saveDischargePrefClick()\"></i></div></div><textarea class=\"form-control\" value.bind=\"datagridHelper.selectedGoal.assessment\" ref=\"dischargeTextarea\"></textarea></div><div if.bind=\"!datagridHelper.selectedGoal.isDischarge\" class=\"card\" css=\"border: none; position: absolute; top:${datagridHelper.activityTop}px; left: 0;right: 0;bottom: 0;\" ref=\"toolbar\"><div class=\"card-header\"><ul class=\"nav nav-tabs card-header-tabs\"><li class=\"nav-item\" repeat.for=\"t of datagridHelper.selectedGoal.tabs\"><a class=\"nav-link\" class.bind=\"t.selected ? 'active' : ''\" click.delegate=\"tabClicked(t)\">${t.description}</a></li><li class=\"nav-item\"><a class=\"nav-link\" click.delegate=\"datagridHelper.newTabClick()\"><i class=\"fa fa-plus fa-lg\" style=\"color:grey\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Add Tab\"></i></a></li></ul></div><div class=\"card-body\" style=\"padding:10px 10px 10px 10px;display:flex;flex-flow:column\" if.bind=\"datagridHelper.selectedGoal.selectedTab\"><div class=\"row\"><div class=\"col-md-12\"><form class=\"form-inline\"><i if.bind=\"!datagridHelper.editMode\" class=\"fa fa-calendar fa-2x mx-1\" click.delegate=\"calendarClick()\"></i> <i if.bind=\"!datagridHelper.editMode\" class=\"fa fa-share-square fa-2x mx-1\" click.delegate=\"priorClick()\"></i> <select value.bind=\"datagridHelper.selectedModality\"><option model.bind=\"null\">Select...</option><option repeat.for=\"mod of datagridHelper.selectedGoal.selectedTab.activitylist\" model.bind=\"mod\"> ${mod.description} </option></select> <i class=\"fa fa-plus-circle fa-2x mx-1\" style=\"color:green\" click.delegate=\"addModalityClick()\"></i><div if.bind=\"!datagridHelper.editMode\" with.bind=\"datagridHelper.selectedGoal.selectedTab.currentDay\"><i class=\"fa fa-clock-o fa-2x mx-1\" style=\"color:#00f\" click.delegate=\"dayClockClicked($this, datagridHelper.selectedGoal)\"></i> <span if.bind=\"totalTime\" style=\"font-size:small;font-weight:400\" class=\"ml-2\"><span style=\"font-weight:700;color:#87cefa\">Total Time:</span> <span>${totalTime}</span></span><span else><span if.bind=\"selected\"><span if.bind=\"timeIn\" style=\"font-size:small;font-weight:400\" class=\"ml-2\"><span style=\"font-weight:700;color:#87cefa\">In:</span> <span style=\"color:#d3d3d3\">${displayTimeIn()}</span></span><span if.bind=\"timeOut\" style=\"font-size:small;font-weight:400\" class=\"ml-2\"><span style=\"font-weight:700;color:#87cefa\">Out:</span> <span style=\"color:#d3d3d3\">${displayTimeOut()}</span></span></span></span></div><div if.bind=\"displayDebugTools\"><i class=\"fa fa-floppy-o fa-lg mx-1\" style=\"color:green\" click.delegate=\"saveClick()\"></i> <i class=\"fa fa-refresh fa-lg mx-1\" style=\"color:#00f\" click.delegate=\"refreshClick()\"></i> <i class=\"fa fa-folder-open fa-lg mx-1\" click.delegate=\"prefLoad()\"></i></div></form></div></div><div class=\"tableFixHead\" style=\"overflow:auto;position:inherit;top:90px;bottom:0;left:0;right:0;flex:1 1 auto\" ref=\"grid\"><table id=\"daysheetTable\" class=\"table table-sm table-bordered table-striped table-hover daysheet-table\" style=\"margin-bottom:0;table-layout:fixed\"><thead style=\"font-weight:700;background-color:grey;color:#fff\"><tr><th click.delegate=\"sortActivitiesClick()\" style=\"vertical-align:top\" css=\"width: ${activityColumnWidth}px;\">Activity <i if.bind=\"!datagridHelper.selectedGoal.selectedTab.sortDesc\" class=\"fa fa-sort-up\"></i> <i if.bind=\"datagridHelper.selectedGoal.selectedTab.sortDesc\" class=\"fa fa-sort-down\"></i></th><template repeat.for=\"d of datagridHelper.selectedGoal.selectedTab.days\"><th style=\"vertical-align:top;min-width:200px\" css=\"${columnWidthProperty}\" class.bind=\"d.selected ? 'daysheet-day-header-active' : 'daysheet-day-header'\"><span>${d.date}</span><a class=\"btn\" style=\"float:right\" href=\"#\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><i class=\"fa fa-cog\" style=\"color:#d3d3d3\" aria-hidden=\"true\"></i></a><div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"deleteDayClick(d)\">Delete Day</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"editDayTimeClick(d)\">Edit Time</a></div></th></template></tr></thead><tbody><tr repeat.for=\"r of datagridHelper.selectedGoal.selectedTab.activitiesCompletedOnTab\"><td dblclick.delegate=\"cellDoubleClicked(datagridHelper.selectedGoal.selectedTab.currentDay, datagridHelper.selectedGoal.selectedTab.currentDay.activities[$index])\"><b my-cell-attribute>${r.description}</b><i class=\"fa fa-minus-circle fa-lg\" if.bind=\"!r.hasValue\" click.delegate=\"datagridHelper.selectedGoal.selectedTab.removeActivity(r.description, datagridHelper.selectedGoal.selectedTab.currentDay.sheetId, datagridHelper.patientId, datagridHelper)\" style=\"color:#d3d3d3;float:right;margin-top:5px\" aria-hidden=\"true\"></i></td><template repeat.for=\"d of datagridHelper.selectedGoal.selectedTab.days\"><td css=\"background-color: ${d.activities[$parent.$index].backgroundColor}\" class.bind=\"d.selected ? 'daysheet-day-active' : 'daysheet-day'\" click.delegate=\"rowClicked(r, d, $index, $parent.$index)\" dblclick.delegate=\"cellDoubleClickedNoCalc(d, d.activities[$parent.$index])\" style=\"word-wrap:break-word\"><div class=\"d-flex\"><div class=\"p-2 flex-shrink-1\"><i class=\"fa fa-calculator text-muted\" aria-hidden=\"true\" click.delegate=\"cellDoubleClicked(d, d.activities[$parent.$index])\"></i></div><div class=\"p-2 w-100\"><span if.bind=\"!d.activities[$parent.$index].selected\"> ${d.activities[$parent.$index].value} </span><span if.bind=\"d.activities[$parent.$index].selected\"><textarea rows=\"2\" cols=\"100\" maxlength=\"500\" style=\"border:0;background-color:transparent;width:100%\" type=\"text\" value.bind=\"d.activities[$parent.$index].value & signal:'my-refresh'\" change.delegate=\"valueChangedCallback(d, $parent.$index)\"></textarea></span></div></div></td></template></tr></tbody></table></div></div></div></div></div></template>";});;
define('ptdaysheet/datePopup',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DatePopup = undefined;

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _class, _desc, _value, _class2, _descriptor;

  var DatePopup = exports.DatePopup = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = (_class2 = function () {
    function DatePopup(DialogController, http, helper) {
      _classCallCheck(this, DatePopup);

      _initDefineProp(this, 'datepicker', _descriptor, this);

      this.dateDisplayOptions = ['days', 'weeks', 'date'];
      this.dateDisplay = null;
      this.pickerOptions = {
        format: 'MM/DD/YYYY'
      };

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
    }

    DatePopup.prototype.close = function close() {
      var self = this;
      self.dialogController.close(true, { "date": self.selectedDate, "display": self.dateDisplay });
    };

    DatePopup.prototype.showPicker = function showPicker() {
      this.datepicker.methods.toggle();
    };

    DatePopup.prototype.activate = function activate(obj) {
      var self = this;
    };

    return DatePopup;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'datepicker', [_aureliaFramework.bindable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class);
});;
define('text!ptdaysheet/datePopup.html',[],function(){return "<template><ux-dialog><ux-dialog-header><div class=\"row\"><div class=\"col-sm-12 d-flex\"><h4>Due Date</h4><i class=\"fa fa-times ml-auto\" click.delegate=\"close()\"></i></div></div></ux-dialog-header><ux-dialog-body><div class=\"form-group\" style=\"margin-bottom:0\"><div class=\"form-check form-check-inline\" repeat.for=\"o of dateDisplayOptions\"><input class=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio1\" checked.bind=\"dateDisplay\" value.bind=\"o\"> <label class=\"form-check-label\" for=\"inlineRadio1\">${o}</label></div></div><form class=\"form-inline my-2 my-lg-0\" if.bind=\"dateDisplay=='date'\"><div class=\"input-group\"><abp-datetime-picker icon-base=\"font-awesome\" with-date-icon=\"false\" element.bind=\"datepicker\" value.bind=\"selectedDate\" options.bind=\"{ format: 'MM/DD/YYYY' }\"></abp-datetime-picker><div class=\"input-group-append\"><button class=\"btn btn-outline-secondary\" type=\"button\" click.delegate=\"showPicker()\"><i class=\"fa fa-calendar\"></i></button></div></div></form><div class=\"input-group mb-3\" if.bind=\"dateDisplay=='days'\"><input type=\"number\" class=\"form-control\" placeholder=\"number of days...\" aria-label=\"Number of Days\" value.bind=\"selectedDate\"><div class=\"input-group-append\"><span class=\"input-group-text\">Days</span></div></div><div class=\"input-group mb-3\" if.bind=\"dateDisplay=='weeks'\"><input type=\"number\" class=\"form-control\" placeholder=\"number of weeks...\" aria-label=\"Number of Weeks\" value.bind=\"selectedDate\"><div class=\"input-group-append\"><span class=\"input-group-text\">Weeks</span></div></div></ux-dialog-body><ux-dialog-footer><button click.delegate=\"close()\">Done</button></ux-dialog-footer></ux-dialog></template>";});;
define('ptdaysheet/dayTimePopup',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DayTimePopup = undefined;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var DayTimePopup = exports.DayTimePopup = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
    function DayTimePopup(DialogController, http, helper) {
      _classCallCheck(this, DayTimePopup);

      this.timeValue = null;

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
    }

    DayTimePopup.prototype.close = function close() {
      var self = this;
      self.dialogController.close(true, self.timeValue);
    };

    DayTimePopup.prototype.activate = function activate(day) {
      this.timeValue = day.totalTime;
    };

    return DayTimePopup;
  }()) || _class);
});;
define('text!ptdaysheet/dayTimePopup.html',[],function(){return "<template><ux-dialog><ux-dialog-header><div class=\"row\"><div class=\"col-sm-12 d-flex\"><h4>Due Date</h4><i class=\"fa fa-times ml-auto\" click.delegate=\"close()\"></i></div></div></ux-dialog-header><ux-dialog-body><div class=\"input-group mb-3\"><input type=\"text\" class=\"form-control\" placeholder=\"time...\" aria-label=\"Time\" value.bind=\"timeValue\"><div class=\"input-group-append\"><span class=\"input-group-text\">Time</span></div></div></ux-dialog-body><ux-dialog-footer><button click.delegate=\"close()\">Done</button></ux-dialog-footer></ux-dialog></template>";});;
define('ptdaysheet/draggable',['exports', 'aurelia-framework', 'hammerjs'], function (exports, _aureliaFramework, _hammerjs) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Draggable = undefined;

  var _hammerjs2 = _interopRequireDefault(_hammerjs);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _dec2, _class;

  var Draggable = exports.Draggable = (_dec = (0, _aureliaFramework.customAttribute)('draggable'), _dec2 = (0, _aureliaFramework.inject)(Element), _dec(_class = _dec2(_class = function () {
    function Draggable(element) {
      _classCallCheck(this, Draggable);

      this.element = element;
    }

    Draggable.prototype.attached = function attached() {
      var _this = this;

      console.log('attached draggable');
      console.log(document.Hammer);
      var manager = new _hammerjs2.default.Manager(this.element);
      manager.add(new _hammerjs2.default.Pan({ direction: _hammerjs2.default.DIRECTION_ALL, threshold: 0 }));
      manager.on('pan', function (e) {
        return _this.pan(e);
      });
    };

    Draggable.prototype.pan = function pan(e) {
      if (!this.element.style.top) {
        var _element$getBoundingC = this.element.getBoundingClientRect(),
            x = _element$getBoundingC.x,
            y = _element$getBoundingC.y;

        this.element.style.top = y + 'px';
        this.element.style.left = x + 'px';
        this.element.style.marginTop = '0';
        this.element.style.position = 'absolute';
      } else {
        var top = parseFloat(this.element.style.top.replace(/px/, ''));
        var left = parseFloat(this.element.style.left.replace(/px/, ''));

        this.element.style.top = top + e.srcEvent.movementY + 'px';
        this.element.style.left = left + e.srcEvent.movementX + 'px';
      }
    };

    return Draggable;
  }()) || _class) || _class);
});;
define('ptdaysheet/editingHelper',["exports"], function (exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _isEditing = false;
  var _callback = null;

  var setIsEditing = exports.setIsEditing = function setIsEditing(newValue, callback) {
    _isEditing = newValue;
    if (newValue === true) {
      _callback = callback;
    } else {
      _callback = null;
    }
  };

  var getIsEditing = exports.getIsEditing = function getIsEditing() {
    return _isEditing;
  };

  var runCallback = exports.runCallback = function runCallback() {
    if (_callback) {
      _callback();
    }
  };
});;
define('ptdaysheet/index',['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var Index = exports.Index = function () {
		function Index() {
			_classCallCheck(this, Index);

			this.message = 'HELLO FROM ptdaysheet';
			console.log('ptdaysheet INDEX LOADED!');
		}

		Index.prototype.configureRouter = function configureRouter(config, router) {
			config.title = 'ptdaysheet';
			config.map([{ route: 'datagrid', name: 'datagrid', moduleId: 'ptdaysheet/datagrid', nav: true, title: 'DataGrid' }]);
			this.router = router;
		};

		return Index;
	}();
});;
define('text!ptdaysheet/index.html',[],function(){return "<template><div class=\"container-fluid\" style=\"padding:0\"><router-view></router-view></div></template>";});;
define('ptdaysheet/ptAuthData',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'moment', 'lodash'], function (exports, _helper, _http, _aureliaFramework, _moment, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PtAuthData = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var PtAuthData = exports.PtAuthData = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http), _dec(_class = function () {
    function PtAuthData(helper, http) {
      _classCallCheck(this, PtAuthData);

      this.helper = helper;
      this.http = http;
    }

    PtAuthData.prototype.getWithPatientId = function getWithPatientId(patientId, callback) {
      var self = this;
      var url = "ptauth?patientId=" + patientId;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null && json.length > 0) {
          callback(json);
        }
      });
    };

    PtAuthData.prototype.save = function save(authorizations, patientId, userId, callback) {
      var self = this;
      var url = "ptauth";

      for (var i = 0; i < authorizations.length; i++) {

        var auth = authorizations[i];

        var OD_PT_Auth = {
          "Id": auth.id,
          PostOpId: auth.data ? auth.data.PostOpId : 0,
          BodyPart: auth.part,
          BodySide: auth.side,
          Type: auth.type,
          AuthDays: auth.authDays,
          AuthDate: auth.authDate,
          PatientId: patientId,
          UserId: userId,
          Status: auth.status,
          Comments: auth.comments,
          AuthNumber: auth.authNumber,
          JSON: auth.data ? auth.data.JSON : null,
          ClaimID: auth.caseId
        };

        if (OD_PT_Auth.Id == 0) {
          self.http.post(self.helper.getApiUrl(url), JSON.stringify(OD_PT_Auth), function (res) {
            if (callback) {
              callback(res);
            }
          }, { contentType: "application/json" }, function (err) {
            var e = 'oops';
          });
        } else {
          self.http.put(self.helper.getApiUrl(url), OD_PT_Auth, function (success) {
            if (callback) {
              callback(success);
            }
          }, function (error) {
            alert(error.responseText);
          });
        }
      }
    };

    return PtAuthData;
  }()) || _class);
});;
define('ptdaysheet/ptDatagridHelper',['exports', '../helpers/helper', '../helpers/http', 'aurelia-framework', 'moment', 'lodash', 'aurelia-event-aggregator', './editingHelper', '../go/popupHelper', 'aurelia-dialog', '../ptdaysheet/tabPopup'], function (exports, _helper, _http, _aureliaFramework, _moment, _lodash, _aureliaEventAggregator, _editingHelper, _popupHelper, _aureliaDialog, _tabPopup) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PtDatagridHelper = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _desc, _value, _class, _descriptor, _dec, _class3, _desc2, _value2, _class4, _descriptor2;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Goal = function () {
    function Goal(description, startDate) {
      _classCallCheck(this, Goal);

      this.description = description;
      this.assessment = null;
      this.tabs = [];
      this.selected = false;
      this.selectedTab = null;
      this.id = 0;
      this.editingDescription = false;
      this.dueDate = null;
      this.dateFormat = null;
      this.startDate = startDate == undefined ? null : startDate;
      this.displayDueDate = null;
      this.userId = 0;
      this.alertTime = null;
      this.sortableDate = startDate == undefined ? null : (0, _moment2.default)(startDate).format('YYYY/MM/DD');
      this.isDischarge = false;
      this.sheetId = 0;
      this.visible = true;
      this.hasData = false;
    }

    Goal.prototype.addTab = function addTab(tab) {
      for (var t = 0; t < this.tabs.length; t++) {
        var aTab = this.tabs[t];
        if (aTab.description == tab.description) {
          return;
        }
      }
      if (this.tabs.length == 0) {
        tab.selected = true;
        this.selectedTab = tab;
      }
      this.tabs.push(tab);
    };

    Goal.prototype.findTabByDescription = function findTabByDescription(description) {
      for (var i = 0; i < this.tabs.length; i++) {
        if (this.tabs[i].description === description) {
          return this.tabs[i];
        }
      }
      return null;
    };

    Goal.prototype.hasContent = function hasContent() {
      this.hasData = false;

      for (var i = 0; i < this.tabs.length; i++) {
        var aTab = this.tabs[i];
        for (var d = 0; d < aTab.days.length; d++) {
          var aDay = aTab.days[d];
          for (var a = 0; a < aDay.activities.length; a++) {
            var aAct = aDay.activities[a];
            if (aAct.data != null) {
              this.hasData = true;
              return true;
            }
          }
        }
      }
      return false;
    };

    return Goal;
  }();

  var Tab = function () {
    function Tab(description) {
      _classCallCheck(this, Tab);

      this.description = description;

      this.data;
      this.selected = false;
      this.activitylist = [];
      this.activitiesCompletedOnTab = [];
      this.days = [];
      this.currentDay;
      this.activityColumnWidth = 75;
      this.sortDesc = true;
    }

    Tab.prototype.sortActivities = function sortActivities(lodash) {
      this.sortDesc = this.sortDesc ? false : true;
      var sortStr = this.sortDesc ? 'desc' : 'asc';
      this.activitiesCompletedOnTab = lodash.orderBy(this.activitiesCompletedOnTab, ['id'], [sortStr]);
      for (var d = 0; d < this.days.length; d++) {
        this.days[d].sortActivities(lodash);
      }
    };

    Tab.prototype.addCompletedActivity = function addCompletedActivity(activity, addToTop) {
      for (var i = 0; i < this.activitiesCompletedOnTab.length; i++) {
        if (this.activitiesCompletedOnTab[i].description == activity.description) {
          return;
        }
      }

      if (addToTop) {
        this.activitiesCompletedOnTab.unshift(activity);
      } else {
        this.activitiesCompletedOnTab.push(activity);
      }
    };

    Tab.prototype.deleteDay = function deleteDay(day, dgHelper) {
      for (var d = 0; d < this.days.length; d++) {
        var aDay = this.days[d];
        if (aDay.date == day.date) {
          if (day.date === dgHelper.visitDate) {
            this.days.splice(d, 1);
          } else {
            dgHelper.displayAlert("Error", "Cannot delete prior visit", "fa fa-lg fa-exclamation-triangle", "red");
          }
        }
      }
    };

    Tab.prototype.updateDayTotalTime = function updateDayTotalTime(day) {
      for (var d = 0; d < this.days.length; d++) {
        var aDay = this.days[d];
        if (aDay.date == day.date) {
          aDay.totalTime = day.totalTime;
        }
      }
    };

    Tab.prototype.updateDayTimeIn = function updateDayTimeIn(day, timeIn) {
      for (var d = 0; d < this.days.length; d++) {
        var aDay = this.days[d];
        if (aDay.date == day.date) {
          aDay.timeIn = timeIn;
        }
      }
    };

    Tab.prototype.removeActivity = function removeActivity(activityDescription, sheetId, patientId, helper) {
      var _this = this;

      for (var i = 0; i < this.activitiesCompletedOnTab.length; i++) {
        if (this.activitiesCompletedOnTab[i].description == activityDescription) {
          (function () {

            var prefId = _this.activitiesCompletedOnTab[i].pt_daysheet_pref_ID;

            _this.activitiesCompletedOnTab.splice(i, 1);

            helper.selectedGoal.selectedTab.currentDay.deleteActivityWithIndex(i);
            helper.selectedGoal.selectedTab.currentDay.deleteActivityToUpdateWithIndex(i);

            helper.deleteModality(sheetId, patientId, activityDescription);

            if (helper.selectedProviderPref) {
              var prefToRemoveIndex = _.findIndex(helper.providerPrefs, function (p) {
                return p.ID == prefId;
              });
              helper.deleteDaySheetPref(prefId, function (res) {
                helper.providerPrefs.splice(prefToRemoveIndex, 1);
              });
            }
          })();
        }
      }
    };

    return Tab;
  }();

  var Modality = function Modality(description) {
    _classCallCheck(this, Modality);

    this.description = description;
  };

  var AlertObject = function AlertObject(title, text, iconClass, iconColor) {
    _classCallCheck(this, AlertObject);

    this.title = title;
    this.text = text;
    this.iconColor = iconColor ? iconColor : 'black';
    this.iconClass = iconClass;
  };

  var Day = function () {
    function Day(date) {
      _classCallCheck(this, Day);

      this.date = date;
      this.timeIn;
      this.timeOut;
      this.totalTime;
      this.activities = [];
      this.activitiesToUpdate = [];
      this.clockClicked = false;
      this.selected = false;
      this.id = 0;
      this.sheetId = 0;
      this.dayClass;
      this.sortableDate = (0, _moment2.default)(date).format('YYYY/MM/DD');
      this.sortActivitiesDesc = true;
    }

    Day.prototype.deleteActivityWithIndex = function deleteActivityWithIndex(index) {
      this.activities.splice(index, 1);
    };

    Day.prototype.deleteActivityToUpdateWithIndex = function deleteActivityToUpdateWithIndex(index) {
      this.activitiesToUpdate.splice(index, 1);
    };

    Day.prototype.sortActivities = function sortActivities(lodash) {
      var sortArray = [];
      for (var i = 0; i < this.activities.length; i++) {
        var sortIndex = this.sortActivitiesDesc ? this.activities.length - (i + 1) : i;
        sortArray.push({
          index: sortIndex,
          activity: this.activities[i]
        });
      }

      this.sortActivitiesDesc = this.sortActivitiesDesc ? false : true;
      var sortStr = this.sortActivitiesDesc ? 'desc' : 'asc';

      sortArray = lodash.orderBy(sortArray, ['index'], [sortStr]);

      this.activities = [];
      for (var a = 0; a < sortArray.length; a++) {
        this.activities.push(sortArray[a].activity);
      }
    };

    Day.prototype.displayTimeIn = function displayTimeIn() {
      return (0, _moment2.default)(this.timeIn).format('h:mm a');
    };

    Day.prototype.displayTimeOut = function displayTimeOut() {
      return (0, _moment2.default)(this.timeOut).format('h:mm a');
    };

    Day.prototype.activityHasValue = function activityHasValue(activityDescription) {
      for (var i = 0; i < this.activities.length; i++) {
        if (this.activities[i].description == activityDescription) {
          if (this.activities[i].value !== undefined && this.activities[i].value == null || this.activities[i].value.length == 0) {
            return false;
          }
        }
      }
      return true;
    };

    return Day;
  }();

  var Activity = (_class = function () {
    function Activity(description) {
      _classCallCheck(this, Activity);

      _initDefineProp(this, 'value', _descriptor, this);

      this.description = description;
      this.longDescription = "";

      this.selected = false;
      this.styleString = "background-color: white";
      this.selectedStyleString = "background-color: rgb(187,209,233)";
      this.data = null;
      this.id = 0;
      this.actPass = null;
      this.backgroundColor = "";
      this.hasValue = false;
      this.pt_daysheet_pref_ID;
    }

    Activity.prototype.valueChanged = function valueChanged(newval, oldval) {
      if (newval != null && newval.length > 0) {
        this.hasValue = true;
      } else {
        this.hasValue = false;
      }
    };

    return Activity;
  }(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'value', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: function initializer() {
      return "";
    }
  })), _class);
  var PtDatagridHelper = exports.PtDatagridHelper = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _http.http, _aureliaEventAggregator.EventAggregator, _popupHelper.PopupHelper, _aureliaDialog.DialogService), _dec(_class3 = (_class4 = function () {
    function PtDatagridHelper(helper, http, eventAggregator, PopupHelper, DialogService) {
      _classCallCheck(this, PtDatagridHelper);

      this.goals = [];

      _initDefineProp(this, 'selectedGoal', _descriptor2, this);

      this.allModalities = [];
      this.providerPrefs = [];
      this.preferenceList = [];
      this.assessmentPrefList = [];
      this.dischargePrefList = [];
      this.stopwatchInstance = null;
      this.displayAssessment = false;
      this.activityTop = 195;
      this.activityColumnWidth = 100;
      this.selectedPreferenceIdList = [];
      this.editMode = false;

      this.helper = helper;
      this.http = http;
      this.ea = eventAggregator;
      this.popupHelper = PopupHelper;
      this.dialogService = DialogService;
    }

    PtDatagridHelper.prototype.addIdToSelectedPreferenceList = function addIdToSelectedPreferenceList(preferenceId) {
      var self = this;
      var found = false;
      for (var i = 0; i < self.selectedPreferenceIdList.length; i++) {
        if (self.selectedPreferenceIdList[i] == preferenceId) {
          found = true;
          break;
        }
      }
      if (!found) {
        self.selectedPreferenceIdList.push(preferenceId);
      }
    };

    PtDatagridHelper.prototype.doesIdExistInSelectedPreferences = function doesIdExistInSelectedPreferences(preferenceId) {
      var self = this;
      for (var i = 0; i < self.selectedPreferenceIdList.length; i++) {
        if (self.selectedPreferenceIdList[i] == preferenceId) {
          return true;
        }
      }
      return false;
    };

    PtDatagridHelper.prototype.selectedGoalHasValues = function selectedGoalHasValues() {
      var goal = this.selectedGoal;
      if (goal == null || goal == undefined) {
        return false;
      }

      for (var i = 0; i < goal.tabs.length; i++) {
        var aTab = goal.tabs[i];
        for (var d = 0; d < aTab.days.length; d++) {
          var aDay = aTab.days[d];
          for (var a = 0; a < aDay.activities.length; a++) {
            var aAct = aDay.activities[a];
            if (aAct.value != null) {
              goal.hasData = true;
              return true;
            }
          }
        }
      }
      return false;
    };

    PtDatagridHelper.prototype.selectedGoalChanged = function selectedGoalChanged(newValue, oldValue) {

      var test = newValue;
    };

    PtDatagridHelper.prototype.getActivityBackgroundColorByActPass = function getActivityBackgroundColorByActPass(value) {
      if (value == "ACT") {
        return '#c4f987';
      } else {
        return '#ffbba2';
      }
    };

    PtDatagridHelper.prototype.findSelectedAssessmentPref = function findSelectedAssessmentPref(value) {
      for (var i = 0; i < this.assessmentPrefList.length; i++) {
        if (this.assessmentPrefList[i].Description1 === value) {
          this.selectedAssessmentPref = this.assessmentPrefList[i];
        }
      }
    };

    PtDatagridHelper.prototype.updateDayTotalTimeAcrossAllGoals = function updateDayTotalTimeAcrossAllGoals(day) {
      for (var i = 0; i < this.goals.length; i++) {
        var aGoal = this.goals[i];
        for (var t = 0; t < aGoal.tabs.length; t++) {
          var aTab = aGoal.tabs[t];
          aTab.updateDayTotalTime(day);
        }
      }
    };

    PtDatagridHelper.prototype.getUniqueTabsFromList = function getUniqueTabsFromList() {
      var r = _.uniqBy(this.allModalities, 'Description2');
      return _.reject(r, { 'Description2': '' });
    };

    PtDatagridHelper.prototype.findGoalById = function findGoalById(id) {
      for (var i = 0; i < this.goals.length; i++) {
        if (this.goals[i].id === id) {
          return this.goals[i];
        }
      }
      return null;
    };

    PtDatagridHelper.prototype.getDischargeIndex = function getDischargeIndex() {
      for (var i = 0; i < this.goals.length; i++) {
        if (this.goals[i].isDischarge) {
          return i;
        }
      }
      return null;
    };

    PtDatagridHelper.prototype.getLatestGoal = function getLatestGoal() {
      for (var i = 0; i < this.goals.length; i++) {
        if (this.goals[i].isDischarge) {
          return this.goals[i - 1];
        }
      }
      return null;
    };

    PtDatagridHelper.prototype.calculateGoalAlertTime = function calculateGoalAlertTime(g) {

      var self = this;

      if (g.startDate === "Invalid date") {
        g.displayDueDate = "";
        g.alertTime = "";
        return;
      }

      var today = (0, _moment2.default)(self.visitDate);

      if (g.dateFormat == "days") {
        var days = parseInt(g.dueDate);
        var daysLeftDays = (0, _moment2.default)().diff(today, 'days');
        daysLeftDays = days - daysLeftDays;
        daysLeftDays = daysLeftDays < 0 ? 0 : daysLeftDays;
        daysLeftDays = Math.abs(daysLeftDays);
        g.displayDueDate = daysLeftDays + " days";
        g.alertTime = daysLeftDays + " days remain";
      } else if (g.dateFormat == "weeks") {
        var weeks = parseInt(g.dueDate);
        var daysInWeeks = weeks * 7;
        var daysLeftWeeks = (0, _moment2.default)().diff(today, 'days');
        daysLeftWeeks = daysInWeeks - daysLeftWeeks;
        daysLeftWeeks = daysLeftWeeks < 0 ? 0 : daysLeftWeeks;
        daysLeftWeeks = Math.abs(daysLeftWeeks);
        g.displayDueDate = g.dueDate + " weeks";
        g.alertTime = daysLeftWeeks + " days remain";
      } else if (g.dateFormat == "date") {
        var deadline = (0, _moment2.default)(g.dueDate);
        g.displayDueDate = g.dueDate;
        var daysLeft = deadline.diff(today, 'days');
        daysLeft = daysLeft < 0 ? 0 : daysLeft;
        g.alertTime = Math.abs(daysLeft) + " days remain";
      } else {
        return "";
      }
    };

    PtDatagridHelper.prototype.addGoal = function addGoal(g) {
      var self = this;

      if (self.goals.length > 0) {
        var aGoal = self.goals[0];
        if (aGoal.id == 0 && aGoal.description == 'Short-Term Goal') {
          self.goals.splice(0, 1, g);
        } else {
          self.goals.push(g);
        }
      } else {
        self.goals.push(g);
      }

      var sortedGoals = _.orderBy(self.goals, ["sortableDate"], ["asc"]);
      self.goals = sortedGoals;
      self.selectGoal(g);
    };

    PtDatagridHelper.prototype.selectGoal = function selectGoal(g) {
      var self = this;
      for (var i = 0; i < self.goals.length; i++) {
        var aGoal = self.goals[i];
        aGoal.selected = false;
      }
      g.selected = true;
      self.selectedGoal = g;
    };

    PtDatagridHelper.prototype.selectCell = function selectCell(day, index) {
      var self = this;

      for (var d = 0; d < self.selectedGoal.selectedTab.days.length; d++) {
        var aDay = self.selectedGoal.selectedTab.days[d];
        for (var i = 0; i < aDay.activities.length; i++) {
          day.activities[i].selected = false;
        }
      }

      day.activities[index].selected = true;
    };

    PtDatagridHelper.prototype.selectDay = function selectDay(d) {
      var self = this;
      for (var i = 0; i < self.selectedGoal.selectedTab.days.length; i++) {
        self.selectedGoal.selectedTab.days[i].selected = false;
        d.dayClass = '';
      }

      d.selected = true;
      d.dayClass = 'daysheet-day-active';
      self.selectedGoal.selectedTab.currentDay = d;
    };

    PtDatagridHelper.prototype.selectTab = function selectTab(tab) {
      var self = this;
      for (var i = 0; i < self.selectedGoal.tabs.length; i++) {
        var aTab = self.selectedGoal.tabs[i];
        aTab.selected = false;
      }
      tab.selected = true;
      self.selectedGoal.selectedTab = tab;
    };

    PtDatagridHelper.prototype.findTab = function findTab(description) {
      for (var i = 0; i < this.tabs.length; i++) {
        if (this.tabs[i].description === description) {
          return this.tabs[i];
        }
      }
      return null;
    };

    PtDatagridHelper.prototype.displayAlert = function displayAlert(title, text, iconClass, iconColor) {
      var self = this;
      var alert = new AlertObject(title, text, iconClass, iconColor);
      self.ea.publish('showAlert', alert);
    };

    PtDatagridHelper.prototype.loadProviderPrefsWithIdAndBodypart = function loadProviderPrefsWithIdAndBodypart(providerId, bodypart) {
      var self = this;
      self.providerId = providerId;
      self.allModalities = [];
      self.providerPrefs = [];
      self.preferenceList = [];
      self.assessmentPrefList = [];
      self.dischargePrefList = [];

      self.getModalities(providerId, function (res) {
        self.allModalities = res;
      });

      self.getProviderPrefs(providerId, bodypart, function (prefs) {
        self.providerPrefs = prefs;
        self.preferenceList = _.uniqBy(prefs, 'PrefDescription');
      });

      self.getAssessmentPrefs(providerId, function (res) {
        self.assessmentPrefList = res;
      });

      self.getDischargePrefs(providerId, function (res) {
        self.dischargePrefList = res;
      });
    };

    PtDatagridHelper.prototype.activate = function activate(callback) {
      var self = this;

      if (self.editMode) {
        self.goals = [];
        self.tabs = [];
        self.selectedGoal = null;
      }

      self.getModalities(self.providerId, function (modRes) {

        self.allModalities = modRes;

        self.loadProviderPrefsWithIdAndBodypart(self.providerId, self.bodyPart);

        self.getDaySheets(self.patientId, function (sheetRes) {
          self.loadDaysheet(sheetRes, modRes, self.editMode);

          if (callback) {
            callback();
          }
        });
      });
    };

    PtDatagridHelper.prototype.selectPreferenceByPrefId = function selectPreferenceByPrefId(id) {
      var self = this;

      var prefRes = _.find(self.providerPrefs, { 'PrefID': id });
      this.selectedProviderPref = prefRes;
      this.preferenceSelected();
    };

    PtDatagridHelper.prototype.preferenceSelected = function preferenceSelected(prefId) {
      var p = this.selectedProviderPref;
      var id = prefId == undefined ? p.PrefID : prefId;
      var prefRes = _.filter(this.providerPrefs, { 'PrefID': id });

      this.addProviderPref(prefRes);
    };

    PtDatagridHelper.prototype.activityExists = function activityExists(a, day) {
      for (var i = 0; i < day.activities.length; i++) {
        if (day.activities[i].description === a) {
          return true;
        }
      }
      return false;
    };

    PtDatagridHelper.prototype.findDay = function findDay(date, tab) {
      for (var i = 0; i < tab.days.length; i++) {
        if (tab.days[i].date === date) {
          return tab.days[i];
        }
      }
      return null;
    };

    PtDatagridHelper.prototype.setCurrentGoalAssessmsnetWithSelectedAssessmentPref = function setCurrentGoalAssessmsnetWithSelectedAssessmentPref(pref) {
      this.selectedAssessmentPref = pref;
      this.selectedGoal.assessment = pref.Description3;
      this.selectedGoal.description = pref.Description1;
    };

    PtDatagridHelper.prototype.setDischargeWithPref = function setDischargeWithPref(pref) {
      var self = this;

      this.selectedDischargePref = pref;

      var disGoal = _.find(this.goals, function (g) {
        return g.isDischarge;
      });
      disGoal.assessment = pref.Description3;

      var aGoal = _.find(this.goals, function (g) {
        return !g.isDischarge;
      });
      if (aGoal != undefined) {
        if (aGoal.tabs.length > 0 && aGoal.tabs[0].days.length > 0) {
          var sheetId = aGoal.tabs[0].days[0].sheetId;

          var url = "ptdaysheet/discharge";
          var tSheets = {
            "Sheets": []
          };

          var newDischarge = {
            "SheetID": sheetId,

            "Discharge": pref.Description3
          };

          tSheets.Sheets.push(newDischarge);

          var n = self.helper.createNoty("Saving Discharge...", 3000);
          n.show();

          self.http.post(self.helper.getApiUrl(url), tSheets, function (res) {

            self.helper.notySuccess(n, "Discharge saved!");
          }, function (err) {

            self.helper.notyError(n, "Discharge Failed to Save");

            var e = err;
          });
        }
      }
    };

    PtDatagridHelper.prototype.saveDischargePref = function saveDischargePref(description, text, existingPref) {
      var self = this;
      var url = 'listcombo';
      var id = existingPref != null ? existingPref.ListID : 0;
      var p = self.createDischargePrefObject(id, description, null, text, self.providerId, self.bodyPart);

      var n = self.helper.createNoty("Saving Discharge Preference...", 3000);
      n.show();

      self.http.post(self.helper.getApiUrl(url), p, function (res) {

        if (id == 0) {
          self.dischargePrefList.push(res);
        }
        self.selectedDischargePref = res;

        self.helper.notySuccess(n, "Discharge Preference saved!");
      }, function (err) {

        self.helper.notyError(n, "Discharge Preference Failed to Save");

        var e = err;
      });
    };

    PtDatagridHelper.prototype.saveAssessmentPref = function saveAssessmentPref(description, text, existingPref) {
      var self = this;
      var url = 'listcombo';
      var id = existingPref != null ? existingPref.ListID : 0;
      var p = self.createAssessmentPrefObject(id, description, null, text, self.providerId, self.bodyPart);

      var n = self.helper.createNoty("Saving Preference...", 3000);
      n.show();

      self.http.post(self.helper.getApiUrl(url), p, function (res) {

        if (id == 0) {
          self.assessmentPrefList.push(res);
        }
        self.selectedAssessmentPref = res;

        self.helper.notySuccess(n, "Preference saved!");
      }, function (err) {

        self.helper.notyError(n, "Preference Failed to Save");

        var e = err;
      });
    };

    PtDatagridHelper.prototype.createAssessmentPrefObject = function createAssessmentPrefObject(id, d1, d2, d3, providerId, bodyPart) {
      var pref = {
        "ListID": id,
        "Description1": d1,
        "Description2": d2,
        "Description3": d3,
        "ListType": "Assessment",
        "ProviderID": providerId,
        "BodyPart": bodyPart
      };
      return pref;
    };

    PtDatagridHelper.prototype.createDischargePrefObject = function createDischargePrefObject(id, d1, d2, d3, providerId, bodyPart) {
      var pref = {
        "ListID": id,
        "Description1": d1,
        "Description2": d2,
        "Description3": d3,
        "ListType": "Discharge",
        "ProviderID": providerId,
        "BodyPart": bodyPart
      };
      return pref;
    };

    PtDatagridHelper.prototype.checkForExistingPref = function checkForExistingPref(description) {
      for (var i = 0; i < this.assessmentPrefList.length; i++) {
        var aPref = this.assessmentPrefList[i];
        if (aPref.Description1 === description) {
          return aPref;
        }
      }
      return null;
    };

    PtDatagridHelper.prototype.checkForExistingDischargePref = function checkForExistingDischargePref(description) {
      for (var i = 0; i < this.dischargePrefList.length; i++) {
        var aPref = this.dischargePrefList[i];
        if (aPref.Description1 === description) {
          return aPref;
        }
      }
      return null;
    };

    PtDatagridHelper.prototype.addProviderPref = function addProviderPref(pref) {
      var self = this;
      this.loadDaysheet(pref, self.allModalities, true);
    };

    PtDatagridHelper.prototype.addDischargeTab = function addDischargeTab(text) {
      var self = this;
      var dTab = new Goal("Discharge", self.visitDate);
      dTab.isDischarge = true;
      dTab.assessment = text;
      dTab.userId = self.userId;
      self.goals.push(dTab);
    };

    PtDatagridHelper.prototype.checkForLegacyDataOnGoal = function checkForLegacyDataOnGoal(goal) {
      var dataList = [];

      for (var t = 0; t < goal.tabs.length; t++) {
        var aTab = goal.tabs[t];
        for (var d = 0; d < aTab.days.length; d++) {
          var aDay = aTab.days[d];
          for (var a = 0; a < aDay.activities.length; a++) {
            var aActivity = aDay.activities[a];
            if (aActivity.data != null) {
              if (aActivity.data.GoalId == null && aActivity.data.BodyPart == this.bodyPart) {
                var sortable = {
                  "date": (0, _moment2.default)(aActivity.data.ExamDateTime),
                  "data": aActivity.data
                };
                dataList.push(sortable);
              }
            }
          }
        }
      }

      var res = _.orderBy(dataList, ["date"], ['asc']);
      return res.length > 0 ? res[0].data : null;
    };

    PtDatagridHelper.prototype.filterMostRecentGoalsByDescriptionAndDate = function filterMostRecentGoalsByDescriptionAndDate(goals, aGoal) {
      var removeDuplicateGoalsArray = [];
      var found = _.find(goals, function (o) {
        return o.OD_PT_DaySheet_Goal.Description == aGoal.OD_PT_DaySheet_Goal.Description;
      });
      if (found) {
        var fDate = new Date(found.OD_PT_DaySheet_Goal.StartDate);
        var aDate = new Date(aGoal.OD_PT_DaySheet_Goal.StartDate);
        return fDate > aDate ? found : aGoal;
      } else {
        return aGoal;
      }
    };

    PtDatagridHelper.prototype.removeGoalDataFromDaysheets = function removeGoalDataFromDaysheets(daysheets) {
      var final = [];
      for (var i = 0; i < daysheets.length; i++) {
        var item = JSON.parse(JSON.stringify(daysheets[i]));
        item.GoalId = null;
        item.OD_PT_DaySheet_Goal = null;
        final.push(item);
      }
      return final;
    };

    PtDatagridHelper.prototype.clearDaysheet = function clearDaysheet() {
      var self = this;
      self.goals = [];
      self.tabs = [];
    };

    PtDatagridHelper.prototype.loadDaysheet = function loadDaysheet(daysheets, modalities, isPreference) {
      var self = this;


      if (!isPreference || self.editMode) {
        self.goals = [];
        self.tabs = [];
      } else {
        for (var g = 0; g < self.goals.length; g++) {
          var aGoal = self.goals[g];
          if (aGoal.hasContent()) {
            return;
          }
        }
      }

      if (!isPreference) {
        daysheets = _.filter(daysheets, function (d) {
          return d.Type == self.daysheetType;
        });
      }

      var dis = _.orderBy(daysheets, [function (d) {
        return (0, _moment2.default)(d.ExamDateTime).format('YYYY/MM/DD');
      }], ['desc']);
      dis = _.find(dis, function (s) {
        return s.Discharge != null;
      });
      if (dis != undefined) {
        var dDate = new Date(dis.ExamDateTime);
        var vDate = new Date(self.visitDate);
        if (vDate > dDate) {
          daysheets = _.reject(daysheets, function (s) {
            return s.SheetID <= dis.SheetID;
          });
        }
      }

      var tGoals = _.uniqBy(daysheets, 'OD_PT_DaySheet_Goal.Id');

      var finalGoals = [];

      for (var _g = 0; _g < tGoals.length; _g++) {
        if (tGoals[_g].GoalId == null) {
          continue;
        }
        var aDate = new Date(tGoals[_g].OD_PT_DaySheet_Goal.StartDate);
        var _vDate = new Date(self.visitDate);
        if (aDate <= _vDate) {
          finalGoals.push(tGoals[_g]);
        }
      }

      tGoals = _.sortBy(finalGoals, ['OD_PT_DaySheet_Goal.Id']);

      var tSheetIds = _.orderBy(daysheets, ["SheetID"], ['desc']);

      self.sheetId = tSheetIds.length > 0 ? tSheetIds[0].SheetID : 0;

      if (tGoals.length == 0) {
        tGoals.push(self.createGoal(""));
      }

      var dischargeTxt = null;

      for (var _g2 = 0; _g2 < tGoals.length; _g2++) {
        var addGoal = false;
        var defaultGoal = false;

        var aGoalId = tGoals[_g2].OD_PT_DaySheet_Goal == null ? 0 : tGoals[_g2].OD_PT_DaySheet_Goal.Id;
        var _aGoal = null;
        if (aGoalId == 0) {
          defaultGoal = true;
          _aGoal = new Goal("", self.visitDate);
          _aGoal.userId = self.userId;
          _aGoal.visible = false;
          addGoal = true;

          var showAssessment = self.editMode ? true : false;
          self.toggleAssessment(showAssessment);
        } else {
          _aGoal = self.findGoalById(aGoalId);
          if (_aGoal == null) {
            var goalRes = self.createGoalFromExisting(tGoals[_g2].OD_PT_DaySheet_Goal, isPreference);
            _aGoal = goalRes.goal;
            addGoal = goalRes.addGoal;
          }
          self.toggleAssessment(true);
        }

        if (isPreference) {
          defaultGoal = true;
          daysheets = self.removeGoalDataFromDaysheets(daysheets);
        }

        var daysheetsByGoalId = _.filter(daysheets, { 'GoalId': defaultGoal ? null : aGoalId });
        daysheetsByGoalId = _.orderBy(daysheetsByGoalId, 'ID', 'ASC');
        var tabDescriptions = _.uniqBy(daysheetsByGoalId, 'SheetDescription');
        for (var t = 0; t < tabDescriptions.length; t++) {
          var addTab = false;
          var ts = tabDescriptions[t];

          var newTab = _aGoal.findTabByDescription(ts.SheetDescription);
          if (newTab == null) {

            var tempDesc = ts.SheetDescription == null ? 'Daysheet' : ts.SheetDescription;
            var defaultTab = ts.SheetDescription == null ? true : false;

            var finalModalityList = modalities;

            if (defaultTab) {
              finalModalityList = _.uniqBy(modalities, "Description1");
            }
            newTab = self.createNewTab(tempDesc, finalModalityList, defaultTab);
            addTab = true;
          }

          if (_aGoal.tabs.length === 0) {
            newTab.selected = true;
            _aGoal.selectedTab = newTab;
          }

          var descPred = { 'SheetDescription': ts.SheetDescription };
          if (!isPreference) {
            descPred.BodyPart = self.bodyPart;
          }

          var tDescs = _.filter(daysheetsByGoalId, descPred);
          var sortedDays = _.orderBy(tDescs, ['DayID'], ['desc']);
          var dayCount = !isPreference ? sortedDays.length : 1;

          var uniqueActivitiesAcrossAllDaysForSheetDescription = _.uniqBy(sortedDays, 'Modality');

          uniqueActivitiesAcrossAllDaysForSheetDescription = _.orderBy(uniqueActivitiesAcrossAllDaysForSheetDescription, ['ID'], ['desc']);

          var uniqueActivityList = [];
          for (var a = 0; a < uniqueActivitiesAcrossAllDaysForSheetDescription.length; a++) {
            var newAct = new Activity(uniqueActivitiesAcrossAllDaysForSheetDescription[a].Modality);
            if (uniqueActivitiesAcrossAllDaysForSheetDescription[a].hasOwnProperty('PrefID')) {
              newAct.pt_daysheet_pref_ID = uniqueActivitiesAcrossAllDaysForSheetDescription[a].ID;
            }
            uniqueActivityList.push(newAct);
          }

          for (var d = 0; d < dayCount; d++) {
            var aDaySheet = sortedDays[d];

            if (aDaySheet.Discharge != null && dischargeTxt == null) {
              dischargeTxt = aDaySheet.Discharge;
            }

            var newDay = !isPreference ? self.addDay(newTab, aDaySheet, uniqueActivityList) : self.addDayToTabFromPref(newTab, uniqueActivityList);

            if (!isPreference) {
              self.addActivityValue(newDay, aDaySheet.Modality, aDaySheet);

              _aGoal.hasData = true;
            }
          }
          if (addTab) {
            _aGoal.tabs.push(newTab);
          }
        }

        self.ea.publish('resizeDatagrid');

        if (addGoal) {

          self.calculateGoalAlertTime(_aGoal);

          self.addGoal(_aGoal);

          self.enableDisableActivityDelete();
        }
      }

      if (!isPreference) {
        self.addDischargeTab(dischargeTxt);
      }
    };

    PtDatagridHelper.prototype.toggleAssessment = function toggleAssessment(visible) {
      this.displayAssessment = visible;
      this.activityTop = visible ? 195 : 54;
    };

    PtDatagridHelper.prototype.createGoal = function createGoal(description) {
      var d = description == undefined ? "" : description;
      d = d == null ? "" : d;
      return new Goal(d);
    };

    PtDatagridHelper.prototype.createGoalFromExisting = function createGoalFromExisting(od_pt_daysheet_goal, isPreference) {
      var self = this;
      var sDate = isPreference ? self.visitDate : od_pt_daysheet_goal.StartDate == null ? self.visitDate : self.helper.getISODateToFormat(od_pt_daysheet_goal.StartDate, "MM/DD/YY");
      var aGoal = self.findGoalById(od_pt_daysheet_goal.Id);
      if (aGoal == null) {
        aGoal = new Goal(od_pt_daysheet_goal.Description, sDate);
        aGoal.assessment = od_pt_daysheet_goal.Assessment;


        if (!isPreference) {
          aGoal.id = od_pt_daysheet_goal.Id;
          aGoal.sheetId = od_pt_daysheet_goal.SheetID;
          aGoal.dueDate = od_pt_daysheet_goal.DueDate;
          aGoal.dateFormat = od_pt_daysheet_goal.DateFormat;
        }

        var goalUser = od_pt_daysheet_goal.UserId;
        if (goalUser == null || goalUser == 0) {
          goalUser = self.userId;
        }
        aGoal.userId = goalUser;
        return { "goal": aGoal, "addGoal": true };
      }
      return { "goal": aGoal, "addGoal": false };
    };

    PtDatagridHelper.prototype.addEmptyDay = function addEmptyDay() {
      return this.addDay(this.selectedGoal.selectedTab, undefined, this.selectedGoal.selectedTab.activitiesCompletedOnTab, true, true);
    };

    PtDatagridHelper.prototype.addDayToTabFromPref = function addDayToTabFromPref(tab, activities) {
      for (var i = 0; i < activities.length; i++) {
        tab.activitiesCompletedOnTab.push(activities[i]);
      }
      this.addDay(tab, undefined, tab.activitiesCompletedOnTab, true, true);
    };

    PtDatagridHelper.prototype.addDay = function addDay(tab, daysheet, uniqueActivitiesAcrossAllDaysForSheetDescription, addToTop, addActivitiesToUpdate) {
      var self = this;
      var aDate = daysheet != undefined ? self.helper.getISODateToFormat(daysheet.ExamDateTime, "MM/DD/YY") : self.visitDate;

      var foundDay = self.findDay(aDate, tab);
      if (foundDay == null) {
        foundDay = new Day(aDate);

        foundDay.id = daysheet == undefined ? 0 : daysheet.DayID;
        foundDay.sheetId = self.sheetId;
        foundDay.totalTime = daysheet != undefined ? daysheet.TotalTime : null;

        if (addToTop) {
          for (var d = 0; d < tab.days.length; d++) {
            tab.days[d].selected = false;
          }
          foundDay.selected = true;
          tab.currentDay = foundDay;
          tab.days.unshift(foundDay);
        } else {
          if (tab.days.length == 0) {
            tab.currentDay = foundDay;
            tab.currentDay.selected = true;
          }
          tab.days.push(foundDay);
        }

        var sorted = _.orderBy(tab.days, ['sortableDate'], ['desc']);
        tab.days = sorted;

        for (var a = 0; a < uniqueActivitiesAcrossAllDaysForSheetDescription.length; a++) {
          var aActivity = new Activity(uniqueActivitiesAcrossAllDaysForSheetDescription[a].description);
          foundDay.activities.push(aActivity);
          tab.addCompletedActivity(aActivity, addToTop);

          if (addActivitiesToUpdate) foundDay.activitiesToUpdate.push(aActivity);
        }
      }

      return foundDay;
    };

    PtDatagridHelper.prototype.addModality = function addModality(modality, tab, day, addToTop) {
      var modalityToUpdate = void 0,
          tabToUpdate = void 0,
          dayToUpdate = void 0;
      modalityToUpdate = modality == null ? this.selectedModality : modality;
      tabToUpdate = tab == null ? this.selectedGoal.selectedTab : tab;
      dayToUpdate = day == null ? tabToUpdate.currentDay : day;
      tabToUpdate.addCompletedActivity(modalityToUpdate, addToTop);
      if (dayToUpdate) {
        for (var d = 0; d < tabToUpdate.days.length; d++) {
          var clone = d == 0 ? modalityToUpdate : _.cloneDeep(modalityToUpdate);
          if (addToTop) {
            tabToUpdate.days[d].activities.unshift(clone);
          } else {
            tabToUpdate.days[d].activities.push(clone);
          }
        }

        dayToUpdate.activitiesToUpdate.push(modalityToUpdate);
      }
    };

    PtDatagridHelper.prototype.addActivityValue = function addActivityValue(day, activityDescription, daysheet) {
      var self = this;

      for (var d = 0; d < day.activities.length; d++) {
        if (day.activities[d].description == activityDescription) {
          day.activities[d].value = daysheet.Value;
          day.activities[d].id = daysheet.ID;
          day.activities[d].data = daysheet;
          day.activities[d].actPass = daysheet.ActPass;
          day.activities[d].backgroundColor = daysheet.ActPass == null ? '' : self.getActivityBackgroundColorByActPass(daysheet.ActPass);
        }
      }
    };

    PtDatagridHelper.prototype.enableDisableActivityDelete = function enableDisableActivityDelete() {
      var self = this;

      if (self.selectedGoal && self.selectedGoal.selectedTab) {
        for (var a = 0; a < self.selectedGoal.selectedTab.activitiesCompletedOnTab.length; a++) {
          var desc = self.selectedGoal.selectedTab.activitiesCompletedOnTab[a].description;
          for (var d = 0; d < self.selectedGoal.selectedTab.days.length; d++) {
            var aDay = self.selectedGoal.selectedTab.days[d];
            if (aDay.activityHasValue(desc)) {
              self.selectedGoal.selectedTab.activitiesCompletedOnTab[a].hasValue = true;
            }
          }
        }
      }
    };

    PtDatagridHelper.prototype.createNewTab = function createNewTab(description, modalities, addAllModalities) {
      var self = this;
      var aTab = new Tab(description);

      var filteredModalities = addAllModalities ? modalities : _.filter(modalities, function (m) {
        return m.Description2 == description && (m.BodyPart == self.bodyPart || m.BodyPart == "");
      });
      for (var m = 0; m < filteredModalities.length; m++) {
        var tMod = filteredModalities[m];
        aTab.activitylist.push(new Activity(tMod.Description1));
      }

      return aTab;
    };

    PtDatagridHelper.prototype.populatePriorValues = function populatePriorValues() {
      var self = this;
      if (self.selectedGoal && self.selectedGoal.selectedTab && self.selectedGoal.selectedTab.currentDay) {

        var dayToUpdate = self.selectedGoal.selectedTab.currentDay;

        var today = (0, _moment2.default)(self.visitDate);
        var currentDate = (0, _moment2.default)(dayToUpdate.date);
        if (today.year() != currentDate.year() || today.month() != currentDate.month() || today.date() != currentDate.date()) {
          var newDay = self.addEmptyDay();

          for (var i = 0; i < dayToUpdate.activities.length; i++) {
            var actPass = dayToUpdate.activities[i].actPass;
            if (actPass != null) {
              newDay.activities[i].backgroundColor = self.getActivityBackgroundColorByActPass(actPass);
              newDay.activities[i].actPass = actPass;
            }
            newDay.activities[i].value = dayToUpdate.activities[i].value;
          }
        } else {
          var prior = self.selectedGoal.selectedTab.days[1];
          for (var _i = 0; _i < prior.activities.length; _i++) {
            var _actPass = prior.activities[_i].actPass;
            if (_actPass != null) {
              dayToUpdate.activities[_i].backgroundColor = self.getActivityBackgroundColorByActPass(_actPass);
              dayToUpdate.activities[_i].actPass = _actPass;
            }
            dayToUpdate.activities[_i].value = prior.activities[_i].value;

            dayToUpdate.activitiesToUpdate.push(dayToUpdate.activities[_i]);
          }
        }
      }
    };

    PtDatagridHelper.prototype.copyValuesFromDayToDay = function copyValuesFromDayToDay(fromDay, toDay) {
      for (var i = 0; i < fromDay.activities.length; i++) {
        var actPass = fromDay.activities[i].actPass;
        if (actPass != null) {
          toDay.activities[i].backgroundColor = self.getActivityBackgroundColorByActPass(actPass);
          toDay.activities[i].actPass = actPass;
        }
        toDay.activities[i].value = fromDay.activities[i].value;
      }
    };

    PtDatagridHelper.prototype.copyActivityiesFromGoalToGoal = function copyActivityiesFromGoalToGoal(goalIdCopyFrom, goalObjectToCopyTo, copyData) {
      var self = this;
      for (var g = 0; g < self.goals.length; g++) {
        var aGoal = self.goals[g];
        if (aGoal.id == goalIdCopyFrom) {
          for (var t = 0; t < aGoal.tabs.length; t++) {
            var aTab = aGoal.tabs[t];
            var copiedTab = Object.assign({}, aTab);
            copiedTab.days = [];

            for (var d = 0; d < aTab.days.length; d++) {
              var aDay = aTab.days[d];
              var copiedDay = Object.assign({}, aDay);
              copiedDay.activities = [];
              for (var a = 0; a < aDay.activities.length; a++) {
                var aAct = aDay.activities[a];
                var copiedActivity = Object.assign({}, aAct);

                if (copyData) {
                  this.addActivityValue(copiedDay, aAct.description, aAct.data);
                } else {
                  copiedActivity.data = null;
                }
                copiedActivity.id = 0;
                copiedDay.activities.push(copiedActivity);
              }
              copiedTab.days.push(copiedDay);
            }
            goalObjectToCopyTo.addTab(copiedTab);
          }
        }
      }
    };

    PtDatagridHelper.prototype.updateDaysheetWithGoalIds = function updateDaysheetWithGoalIds(sheetId, goalId) {

      var goalObj = {
        "SheetId": sheetId,
        "GoalId": goalId
      };

      var self = this;
      var url = 'ptdaysheet/updategoalids';
      self.http.post(self.helper.getApiUrl(url), goalObj);
    };

    PtDatagridHelper.prototype.saveGoal = function saveGoal(goal, callback) {

      if (goal.isDischarge) return;

      var self = this;
      var url = "ptdaysheet/goal";

      var gUserId = goal.userId;
      if (gUserId == undefined || gUserId == 0 || gUserId == null) {
        gUserId = self.userId;
      }

      var tGoal = {
        "Id": goal.id,
        "Assessment": goal.assessment,
        "Description": goal.description,
        "UserId": gUserId,
        "StartDate": goal.startDate,
        "SheetID": goal.sheetId,
        "DueDate": goal.dueDate,
        "DateFormat": goal.dateFormat
      };
      self.http.post(self.helper.getApiUrl(url), tGoal, function (res) {
        callback(res);
      }, function (err) {
        var e = err;
      });
    };

    PtDatagridHelper.prototype.createPrefSaveObject = function createPrefSaveObject(prefId, description, postOpPrefId, bodypart, isNew, callback) {
      var self = this;
      var tSheets = {
        "Prefs": [],
        "PostOpPrefId": postOpPrefId
      };

      if (isNew) {
        callback(tSheets);
        return;
      }

      for (var g = 0; g < self.goals.length; g++) {
        var aGoal = self.goals[g];
        var aPref = {
          "pref": {
            "PrefID": prefId,
            "ProviderID": self.providerId,
            "UserID": self.userId,
            "PrefDescription": description,
            "ID": 0
          }
        };

        if (!aGoal.tabs || aGoal.tabs.length === 0) {
          tSheets.Prefs.push(aPref);
        }

        for (var t = 0; t < aGoal.tabs.length; t++) {
          var aTab = aGoal.tabs[t];

          if (!aTab.activitiesCompletedOnTab || aTab.activitiesCompletedOnTab.length === 0) {
            tSheets.Prefs.push(aPref);
          }

          for (var d = 0; d < aTab.activitiesCompletedOnTab.length; d++) {
            var aAct = aTab.activitiesCompletedOnTab[d];

            var foundPref = _.find(self.providerPrefs, {
              'SheetDescription': aTab.description,
              'Modality': aAct.description,
              'PrefDescription': description
            });
            var uniquePrefId = foundPref === undefined ? 0 : foundPref.ID;

            aPref = {
              "pref": {
                "PrefID": prefId,
                "ProviderID": self.providerId,
                "UserID": self.userId,
                "PrefDescription": description,
                "Modality": aAct.description,
                "SheetDescription": aTab.description,
                "GoalId": aGoal.id,
                "ID": uniquePrefId,
                "Bodypart": bodypart
              },
              "goal": {
                "Id": aGoal.id,
                "Description": aGoal.description,
                "Assessment": aGoal.assessment,
                "UserID": aGoal.userId,
                "DateFormat": aGoal.dateFormat,
                "StartDate": aGoal.startDate,
                "DueDate": aGoal.dueDate,
                "SheetID": prefId
              }
            };
            tSheets.Prefs.push(aPref);
          }
        }
      }

      callback(tSheets);
    };

    PtDatagridHelper.prototype.newPreferenceClick = function newPreferenceClick() {
      var self = this;
      self.popupHelper.openGenericInputPop("Description", ['Create New Preference'], "Create", false, function (res) {
        self.saveNewPreference(res.inputs[0].value, 0, self.bodyPart, self.providerId, function (res) {
          self.createTabWithPopup(function (tabResults) {
            res.SheetDescription = tabResults[0].description;

            self.clearDaysheet();
            self.providerPrefs.push(res);
            self.preferenceList.push(res);

            self.selectPreferenceByPrefId(res.PrefID);
          });
        });
      });
    };

    PtDatagridHelper.prototype.newTabClick = function newTabClick() {
      var self = this;

      self.createTabWithPopup(function (tabRes) {
        for (var t = 0; t < tabRes.length; t++) {
          self.selectedGoal.addTab(tabRes[t]);
        }
      });
    };

    PtDatagridHelper.prototype.createTabWithPopup = function createTabWithPopup(callback) {
      var self = this;

      var tabs = self.getUniqueTabsFromList();

      var tabResults = [];

      self.dialogService.open({ viewModel: _tabPopup.TabPopup, model: tabs }).whenClosed(function (response) {
        for (var i = 0; i < response.output.length; i++) {
          var aTab = self.createNewTab(response.output[i].Description2, self.allModalities);
          tabResults.push(aTab);
        }
        if (callback) {
          callback(tabResults);
        }
      });
    };

    PtDatagridHelper.prototype.removeActivity = function removeActivity() {
      var self = this;
      if (self.selectedProviderPref) {
        var description = self.selectedProviderPref.PrefDescription;
        self.updatePreference(description, self.selectedProviderPref.PrefID, self.bodyPart);
      }
    };

    PtDatagridHelper.prototype.saveNewPreference = function saveNewPreference(description, postOpPrefId, bodypart, providerId, callback) {
      var self = this;

      var url = "ptdaysheet/pref/new";
      self.http.get(self.helper.getApiUrl(url), function (newPref) {
        if (newPref) {
          newPref.PrefDescription = description;
          newPref.ID = postOpPrefId;
          newPref.ProviderID = providerId;
          newPref.UserID = self.userId;
          newPref.Bodypart = bodypart;

          self.selectedProviderPref = newPref;

          callback(newPref);
        }
      });
    };

    PtDatagridHelper.prototype.updatePreference = function updatePreference(description, postOpPrefId, bodypart) {
      var self = this;
      var url = "";
      var prefId = null,
          prefDescription = null;

      if (self.selectedProviderPref == null || self.selectedProviderPref == undefined) {
        var foundPref = _.find(this.preferenceList, { 'PrefDescription': description });
        if (foundPref != undefined) {
          prefId = foundPref.PrefID;
          prefDescription = foundPref.PrefDescription;
        }
      } else {
        prefId = self.selectedProviderPref.PrefID;
        prefDescription = self.selectedProviderPref.PrefDescription;
      }

      if (prefId != null && prefDescription != null) {

        var n = self.helper.createNoty("Saving Preference...", 3000);
        n.show();

        self.createPrefSaveObject(prefId, prefDescription, postOpPrefId, bodypart, false, function (saveObj) {
          url = "ptdaysheet/pref";
          self.http.post(self.helper.getApiUrl(url), saveObj, function (res) {
            self.helper.notySuccess(n, 'Preference Saved!');
          }, function (err) {

            self.helper.notyError(n, "Preference Failed to save.");
            var e = err;
          });
        });
      }
    };

    PtDatagridHelper.prototype.getBoundObject = function getBoundObject() {
      var self = this;

      var bridge = undefined;
      if (typeof bound === 'undefined') {
        if (typeof chrome !== "undefined") {
          if (chrome.webview && chrome.webview.hostObjects) {
            bridge = chrome.webview.hostObjects.bound;
            console.log('bridge from chrome.webview.hostObjects:', bridge);
            console.log('chrome', chrome);
          }
        }
      } else {
        bridge = bound;
      }
      return bridge;
    };

    PtDatagridHelper.prototype.callbackToWindowsOnSave = function callbackToWindowsOnSave() {
      var self = this;
      var bridge = self.getBoundObject();
      if (typeof bridge !== 'undefined') {
        bridge.FollowUpExam_SaveComplete();
      }
    };

    PtDatagridHelper.prototype.saveInitiated = function saveInitiated() {
      var self = this;
      var bridge = self.getBoundObject();
      if (typeof bridge !== 'undefined') {
        bridge.FollowUpExam_SaveInitiated();
      }
    };

    PtDatagridHelper.prototype.saveDaysheet = function saveDaysheet(callback) {

      var self = this;

      if ((0, _editingHelper.getIsEditing)()) {
        (0, _editingHelper.runCallback)();
        (0, _editingHelper.setIsEditing)(false, null);
      }

      var dischargeValue = null;

      var disRes = _.find(self.goals, function (g) {
        return g.isDischarge;
      });
      dischargeValue = disRes == undefined ? "" : disRes.assessment;

      var dayCountCheck = 0;

      if (this.stopwatchInstance != null && this.stopwatchInstance.displayStopwatch && this.stopwatchInstance.day.clockClicked) {
        this.stopwatchInstance.timerClick();
      }

      var url = "ptdaysheet";
      var tSheets = {
        "Sheets": []
      };
      for (var g = 0; g < self.goals.length; g++) {
        var aGoal = self.goals[g];

        if (aGoal.isDischarge) {
          continue;
        }

        for (var t = 0; t < aGoal.tabs.length; t++) {
          var aTab = aGoal.tabs[t];
          for (var d = 0; d < aTab.days.length; d++) {

            dayCountCheck++;

            var aDay = aTab.days[d];

            for (var a = 0; a < aDay.activitiesToUpdate.length; a++) {

              var aAct = aDay.activitiesToUpdate[a];

              if (aAct.data == null) {
                var newSheet = self.createDaysheetObject(0, self.bodyPart, aDay.sheetId, 0, self.providerId, self.userId, self.patientId, aDay.date, aAct.description, aAct.value, aTab.description, aGoal.id, aGoal.assessment, aGoal.description, aGoal.startDate, aGoal.dueDate, aGoal.dateFormat, aGoal.userId, aDay.totalTime, aAct.actPass, dischargeValue, self.daysheetType);
                tSheets.Sheets.push(newSheet);
              } else {
                tSheets.Sheets.push(self.createDaysheetObjectWithActivityGoalAndDay(aAct, aGoal, aDay, dischargeValue));
              }
            }

            aDay.activitiesToUpdate = [];
          }
        }
      }

      if (dayCountCheck == 0) {
        var warningDesc = "No Date Created!";
        var bodyText = "Please create Activity date to save.";
        self.displayAlert(warningDesc, bodyText, "fa fa-lg fa-hand-paper-o", "red");
        if (callback) {
          callback();
        }
        return false;
      }

      if (tSheets.Sheets.length == 0) {
        self.callbackToWindowsOnSave();
        if (callback) {
          callback();
        }
        return true;
      }

      var n = self.helper.createNoty("Saving Daysheet...", 3000);
      n.show();

      self.http.post(self.helper.getApiUrl(url), tSheets, function (res) {

        self.callbackToWindowsOnSave();

        self.ea.publish('daysheet_saved');

        if (callback) {
          callback();
        }

        self.helper.notySuccess(n, 'Daysheet Saved!');

        self.getDaySheets(self.patientId, function (r) {
          self.loadDaysheet(r, self.allModalities, false);
        });

        return true;
      }, undefined, function (err) {

        self.helper.notyError(n, "Daysheet Failed to save.");
        self.callbackToWindowsOnSave();

        if (callback) {
          callback();
        }

        return false;
      }, function () {
        self.saveInitiated();
      });
    };

    PtDatagridHelper.prototype.createDaysheetObject = function createDaysheetObject(id, bodypart, sheetId, dayId, providerId, userId, patientId, date, activity, value, sheetDescription, goalId, assessment, goalDescription, goalStartDate, goalDueDate, goalDateFormat, goalUserId, totalTime, actPass, discharge, daysheetType) {
      var newAct = {
        "ID": id,
        "BodyPart": bodypart,
        "Type": daysheetType,
        "SheetID": sheetId,
        "DayID": dayId,
        "ProviderID": providerId,
        "UserID": userId,
        "PatientID": patientId,
        "ExamDateTime": date,
        "Modality": activity,
        "Value": value,
        "SheetDescription": sheetDescription,
        "GoalId": goalId,
        "TotalTime": totalTime,
        "ActPass": actPass,
        "Discharge": discharge,
        "Goal": {
          "Assessment": assessment,
          "Description": goalDescription,
          "StartDate": goalStartDate,
          "DueDate": goalDueDate,
          "DateFormat": goalDateFormat,
          "id": goalId,
          "UserId": goalUserId,
          "SheetID": sheetId
        }
      };
      return newAct;
    };

    PtDatagridHelper.prototype.createDaysheetObjectWithActivityGoalAndDay = function createDaysheetObjectWithActivityGoalAndDay(activity, goal, day, discharge) {

      var self = this;

      var examDate = (0, _moment2.default)(activity.data.ExamDateTime);
      var startDate = (0, _moment2.default)(goal.startDate);
      var deleteGoal = false;
      if (activity.data.GoalId == null && examDate < startDate) {
        deleteGoal = true;
      }

      var daysheet = this.createDaysheetObject(activity.data.ID, activity.data.BodyPart, activity.data.SheetID, activity.data.DayID, activity.data.ProviderID, activity.data.UserID, activity.data.PatientID, activity.data.ExamDateTime, activity.data.Modality, activity.value, activity.data.SheetDescription, goal.id, goal.assessment, goal.description, goal.startDate, goal.dueDate, goal.dateFormat, goal.userId, day.totalTime, activity.actPass, discharge, self.daysheetType);

      if (deleteGoal) {
        daysheet.Goal = null;
      }

      return daysheet;
    };

    PtDatagridHelper.prototype.getAssessmentPrefs = function getAssessmentPrefs(providerId, callback) {
      var self = this;
      var url = "listcombo?listType=assessment&providerId=" + providerId;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null && json.length > 0) {
          callback(json);
        }
      });
    };

    PtDatagridHelper.prototype.getDischargePrefs = function getDischargePrefs(providerId, callback) {
      var self = this;
      var url = "listcombo?listType=discharge&providerId=" + providerId;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null && json.length > 0) {
          callback(json);
        }
      });
    };

    PtDatagridHelper.prototype.filterModalitiesByBodypartAndDescription2 = function filterModalitiesByBodypartAndDescription2(bodypart, description2) {
      var self = this;
      return _.filter(self.allModalities, function (m) {
        return m.Description2 == description2 && m.BodyPart == bodypart;
      });
    };

    PtDatagridHelper.prototype.getModalities = function getModalities(providerId, callback) {
      var self = this;
      var url = "modalities?type=&providerId=" + providerId;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {
          callback(json);
        }
      });
    };

    PtDatagridHelper.prototype.getProviderPrefs = function getProviderPrefs(providerId, bodypart, callback) {
      var self = this;
      var url = "ptdaysheet/prefs?providerId=" + providerId + "&bodypart=" + bodypart;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null && json.length > 0) {
          callback(json);
        }
      });
    };

    PtDatagridHelper.prototype.getDaySheets = function getDaySheets(patientId, callback) {
      var self = this;

      if (self.editMode) {
        callback([]);
        return;
      }

      var url = "ptdaysheet?patientId=" + patientId + "&date=" + self.visitDate + "&bodypart=" + self.bodyPart;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {
          callback(json);
        }
      });
    };

    PtDatagridHelper.prototype.deleteModality = function deleteModality(sheetId, patientId, modalityDescription) {
      var self = this;
      var url = "ptdaysheet/modality/delete";
      var toDelete = {
        "sheetId": sheetId,
        "patientId": patientId,
        "modalityDescription": modalityDescription
      };

      self.http.put(self.helper.getApiUrl(url), toDelete, function (res) {
        var success = res;
      });
    };

    PtDatagridHelper.prototype.deleteDaySheetPref = function deleteDaySheetPref(id, callback) {
      var self = this;
      var url = 'ptdaysheet/pref/delete?id=' + id;
      self.http.del(self.helper.getApiUrl(url), function (res) {
        callback(res);
      });
    };

    PtDatagridHelper.prototype.checkForExistingGoal = function checkForExistingGoal(description, sheetId, callback) {
      var self = this;
      var url = 'ptdaysheet/goal?sheetId=' + sheetId + '&description=' + description;
      self.http.get(self.helper.getApiUrl(url), function (json) {
        if (json != null) {
          callback(json);
        } else {
          callback(null);
        }
      });
    };

    return PtDatagridHelper;
  }(), (_descriptor2 = _applyDecoratedDescriptor(_class4.prototype, 'selectedGoal', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  })), _class4)) || _class3);
});;
define('ptdaysheet/stopwatchHelper',['exports', 'moment'], function (exports, _moment) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.StopwatchHelper = undefined;

  var _moment2 = _interopRequireDefault(_moment);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var StopwatchHelper = exports.StopwatchHelper = function () {
    function StopwatchHelper() {
      _classCallCheck(this, StopwatchHelper);

      this.timer = null;
      this.counter = 0;
      this.btnClass = 'fa fa-play fa-lg';
      this.btnColor = 'green';
      this.initTop = 10;
      this.initLeft = 0;
      this.displayTime = "00:00:00";
      this.day = null;
      this.goal = null;
      this.helper = null;
      this.host = null;
      this.callback = null;
      this.displayStopwatch = false;
    }

    StopwatchHelper.prototype.timerClick = function timerClick() {
      var self = this;

      if (self.day.clockClicked) {
        self.day.timeOut = (0, _moment2.default)();
        self.day.clockClicked = false;

        var tt = _moment2.default.duration({
          seconds: self.counter
        });
        self.day.totalTime = this.formatTimeWihDuration(tt);
        self.helper.updateDayTotalTimeAcrossAllGoals(self.day);
      } else {
        if (self.day.timeIn == null || self.day.timeIn == undefined) {
          self.day.timeIn = (0, _moment2.default)();

          for (var t = 0; t < self.goal.tabs.length; t++) {
            var aTab = self.goal.tabs[t];
            aTab.updateDayTimeIn(self.day, self.day.timeIn);
          }
        }
        self.day.clockClicked = true;
      }

      if (self.timer == null) {
        self.btnClass = 'fa fa-stop fa-lg';
        self.btnColor = 'red';
        self.timer = setInterval(self.timerUpdate, 1000, self);
      } else {
        self.btnClass = 'fa fa-play fa-lg';
        self.btnColor = 'green';
        clearInterval(self.timer);
        self.timer = null;
      }
    };

    StopwatchHelper.prototype.formatTimeWihDuration = function formatTimeWihDuration(duration) {
      var dSec = duration.get('seconds');
      var dMin = duration.get('minutes');
      var dHr = duration.get('hours');

      var finalTime = dHr >= 10 ? dHr + ":" : "0" + dHr + ":";
      finalTime += dMin >= 10 ? dMin + ":" : "0" + dMin + ":";
      finalTime += dSec >= 10 ? dSec : "0" + dSec;

      return finalTime;
    };

    StopwatchHelper.prototype.setDisplayTime = function setDisplayTime(t) {
      if (t == null) return;

      var s = t.split(':');

      s = _.reject(s, function (o) {
        return o.length == 0;
      });

      if (s.length == 3) {
        this.displayTime = s[0] + ":" + s[1] + ":" + s[2];

        var hms = _moment2.default.duration({
          seconds: s[2],
          minutes: s[1],
          hours: s[0]
        });

        this.counter = hms.asSeconds();
      } else if (s.length == 2) {
        this.displayTime = "00:" + s[0] + ":" + s[1];

        var ms = _moment2.default.duration({
          seconds: s[1],
          minutes: s[0]
        });

        this.counter = ms.asSeconds();
      } else if (s.length == 1) {
        this.displayTime = "00:00:" + s[0];

        var secs = _moment2.default.duration({
          seconds: s[0]
        });

        this.counter = secs.asSeconds();
      }
    };

    StopwatchHelper.prototype.timerUpdate = function timerUpdate(s) {
      s.counter++;

      var d = _moment2.default.duration(s.counter * 1000);
      var hr = d.get('hours');
      var min = d.get('minutes');
      var sec = d.get('seconds');

      if (sec < 10) {
        sec = "0" + sec;
      }
      if (min < 10) {
        min = "0" + min;
      }
      if (hr < 10) {
        hr = "0" + hr;
      }

      s.displayTime = hr + ":" + min + ":" + sec;
    };

    StopwatchHelper.prototype.show = function show(a, callback) {
      this.callback = callback;
      this.day = a.day;
      this.goal = a.goal;
      this.helper = a.helper;
      this.setDisplayTime(a.day.totalTime);
      this.timerClick();
    };

    StopwatchHelper.prototype.close = function close() {
      var self = this;
      if (self.callback != null) {
        self.callback();
      }
    };

    return StopwatchHelper;
  }();
});;
define('ptdaysheet/tabPopup',['exports', 'aurelia-dialog', 'aurelia-framework', '../helpers/http', '../helpers/helper', 'lodash'], function (exports, _aureliaDialog, _aureliaFramework, _http, _helper, _lodash) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TabPopup = undefined;

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _dec, _class;

  var TabPopup = exports.TabPopup = (_dec = (0, _aureliaFramework.inject)(_aureliaDialog.DialogController, _http.http, _helper.helper), _dec(_class = function () {
    function TabPopup(DialogController, http, helper) {
      _classCallCheck(this, TabPopup);

      this.tabOptions = [];
      this.selectedTabs = [];

      this.dialogController = DialogController;
      this.http = http;
      this.helper = helper;
    }

    TabPopup.prototype.close = function close() {
      var self = this;
      self.dialogController.close(true, self.selectedTabs);
    };

    TabPopup.prototype.activate = function activate(tabOptions) {
      var self = this;
      self.tabOptions = _.sortBy(tabOptions, ['Description2']);
    };

    TabPopup.prototype.attached = function attached() {
      var res = $(this.tabpop).closest('ux-dialog-container');
      var uxDx = res[0];
      uxDx.style.setProperty("z-index", "5001", "important");
    };

    return TabPopup;
  }()) || _class);
});;
define('text!ptdaysheet/tabPopup.html',[],function(){return "<template><ux-dialog ref=\"tabpop\"><ux-dialog-header><div class=\"row\"><div class=\"col-sm-12 d-flex\"><h4>Add Tab</h4><i class=\"fa fa-times ml-auto\" click.delegate=\"close()\"></i></div></div></ux-dialog-header><ux-dialog-body><div class=\"row\"><div class=\"col-sm-12\"><form><div class=\"form-group\"><select class=\"form-control\" multiple=\"multiple\" value.bind=\"selectedTabs\"><option repeat.for=\"t of tabOptions\" model.bind=\"t\"> ${t.Description2} </option></select></div></form></div></div></ux-dialog-body><ux-dialog-footer><button click.delegate=\"close()\">Done</button></ux-dialog-footer></ux-dialog></template>";});;
define('reportbuilder/editor',['exports', '../helpers/helper', 'aurelia-framework', '../data/go/data', 'jquery', 'aurelia-event-aggregator', '../formbuilder/formhelper', 'lodash', 'aurelia-dialog', '../go/popupHelper'], function (exports, _helper, _aureliaFramework, _data, _jquery, _aureliaEventAggregator, _formhelper, _lodash, _aureliaDialog, _popupHelper) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Editor = undefined;

  var _jquery2 = _interopRequireDefault(_jquery);

  var _ = _interopRequireWildcard(_lodash);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor) return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }

  var _dec, _dec2, _class2, _desc, _value, _class3, _descriptor;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var ReportJson = function () {
    function ReportJson(toolType, fileName, data, options, formItem) {
      _classCallCheck(this, ReportJson);

      this.toolType = toolType;
      this.fileName = fileName;
      this.item = formItem;
      this.distinct = false;
      this.width = 500;
      this.height = 500;
      this.chartJsConfig = this.initConfig(this.getChartJsTypeWithTooltype(toolType), data, options, null);
    }

    ReportJson.prototype.getChartJsTypeWithTooltype = function getChartJsTypeWithTooltype(toolType) {
      if (toolType == 'CHARTBAR') {
        return 'bar';
      }
      if (toolType == 'CHARTLINE') {
        return 'line';
      }
      return 'bar';
    };

    ReportJson.prototype.initConfig = function initConfig(type, data, options, plugins) {
      return {
        type: type ? type : 'bar',
        data: data ? data : {},
        options: options ? options : {},
        plugins: plugins ? plugins : []
      };
    };

    return ReportJson;
  }();

  var Category = function Category(data, name, id) {
    _classCallCheck(this, Category);

    this.items = [];
    this.data = data;
    this.name = name;
    this.collapseId = 'collapse' + id;
    this.dataTarget = '#collapse' + id;
    this.expanded = false;
    this.isCustom = false;
  };

  var OrderBy = function () {
    function OrderBy(data) {
      _classCallCheck(this, OrderBy);

      this.data = data;
      this.sortAscending = data.Direction == 'ASC' ? true : false;
    }

    OrderBy.prototype.toggleSort = function toggleSort() {
      this.sortAscending = this.sortAscending ? false : true;
    };

    return OrderBy;
  }();

  var Column = function () {
    function Column(data, availColumn) {
      _classCallCheck(this, Column);

      this.data = data;
      this.OD_ReportAvailableColumns = {
        ColumnID: availColumn.ColumnID,
        TableFriendlyName: availColumn.TableFriendlyName,
        TableName: availColumn.TableName,
        TableAlias: availColumn.TableAlias,
        ColumnFriendlyName: availColumn.ColumnFriendlyName,
        ColumnName: availColumn.ColumnName,
        ColumnAlias: availColumn.ColumnAlias,
        IsQuoted: availColumn.IsQuoted
      };
      this.isX = false;
      this.isY = false;
      this.dateFormat = 'month';
      this.beginAtZero = true;
      this.minScaleValue = 10;
      this.maxScaleValue = 100;
    }

    Column.prototype.updateScale = function updateScale(chartObject, reportObject) {

      if (!this.isX && !this.isY) return;

      this.updateChart(chartObject, reportObject);
    };

    Column.prototype.toggleBeginAtZero = function toggleBeginAtZero(chartObject, reportObject) {
      this.beginAtZero = this.beginAtZero ? false : true;

      this.updateChart(chartObject, reportObject);
    };

    Column.prototype.updateTimeUnit = function updateTimeUnit(chartObject) {
      chartObject.updateAxesTimeUnit(this.isX ? 'x' : 'y', this.dateFormat);
    };

    Column.prototype.toggleXAxis = function toggleXAxis(chartObject, reportObject) {
      this.isX = this.isX ? false : true;
      this.isY = this.isX ? false : true;

      for (var c = 0; c < reportObject.Columns.length; c++) {
        if (reportObject.Columns[c].OD_ReportAvailableColumns.TableAlias != this.OD_ReportAvailableColumns.TableAlias && reportObject.Columns[c].OD_ReportAvailableColumns.ColumnAlias != this.OD_ReportAvailableColumns.ColumnAlias) {
          reportObject.Columns[c].isX = false;
        }
      }

      this.updateChart(chartObject, reportObject);
    };

    Column.prototype.toggleYAxis = function toggleYAxis(chartObject, reportObject) {
      this.isY = this.isY ? false : true;
      this.isX = this.isY ? false : true;

      for (var c = 0; c < reportObject.Columns.length; c++) {
        if (reportObject.Columns[c].OD_ReportAvailableColumns.TableAlias != this.OD_ReportAvailableColumns.TableAlias && reportObject.Columns[c].OD_ReportAvailableColumns.ColumnAlias != this.OD_ReportAvailableColumns.ColumnAlias) {
          reportObject.Columns[c].isY = false;
        }
      }

      this.updateChart(chartObject, reportObject);
    };

    Column.prototype.addToDate = function addToDate(date, months) {

      var month = date.getMonth() + 1;
      month += months;
      date.setMonth(month);

      var finalMonth = date.getMonth() + 1;
      if (finalMonth.toString().length == 1) {
        finalMonth = "0" + finalMonth;
      }
      return new Date(date.getFullYear() + '-' + finalMonth + '-' + date.getDate());
    };

    Column.prototype.updateChart = function updateChart(chartObject, reportObject) {
      if (this.data.IsDate) {
        var axesCols = _.filter(reportObject.Columns, function (c) {
          return c.isX == true || c.isY == true;
        });
        if (axesCols.length == 1) {
          chartObject.removeLabels();


          var currentData = [3, 2, 7, 4, 5];

          for (var i = 0; i < currentData.length; i++) {

            var today = new Date();

            currentData[i] = {
              x: axesCols[0].isX ? this.addToDate(today, i + 1) : currentData[i],
              y: axesCols[0].isY ? this.addToDate(today, i + 1) : currentData[i]
            };
          }

          chartObject.setAxesForTime(axesCols[0].isX ? 'x' : 'y', this.dateFormat);
          chartObject.setAxesAsLinear(axesCols[0].isX ? 'y' : 'x');

          chartObject.setDataset(0, currentData);

          if (axesCols[0].isY && reportObject.Report.Json.chartJsConfig.type == 'bar') {
            chartObject.setChartType('horizontalBar');
          } else if (axesCols[0].isX && reportObject.Report.Json.chartJsConfig.type == 'horizontalBar') {
            chartObject.setChartType('bar');
          } else {
            chartObject.setChartType(reportObject.Report.Json.chartJsConfig.type);
          }

          chartObject.updateChart();
        }
      } else {

        if (!this.isX && !this.isY) return;

        var axe = this.isX ? 'x' : 'y';
        var minS = this.beginAtZero ? undefined : parseInt(this.minScaleValue);
        var maxS = this.beginAtZero ? undefined : parseInt(this.maxScaleValue);
        chartObject.setAxesScaleTicks(axe, this.beginAtZero, minS, maxS);
      }
    };

    return Column;
  }();

  var Filter = function () {
    function Filter(data) {
      _classCallCheck(this, Filter);

      this.stringFilterValues = [{
        friendlyOperator: 'Equal to',
        operator: '=',
        not: false
      }, {
        friendlyOperator: 'Not Equal to',
        operator: '!=',
        not: true
      }, {
        friendlyOperator: 'Begins with',
        operator: 'LIKE',
        not: false
      }, {
        friendlyOperator: 'Not Begins with',
        operator: 'NOT LIKE',
        not: true
      }, {
        friendlyOperator: 'Ends with',
        operator: 'LIKE',
        not: false
      }, {
        friendlyOperator: 'Not Ends with',
        operator: 'NOT LIKE',
        not: true
      }, {
        friendlyOperator: 'Contains',
        operator: 'LIKE',
        not: false
      }, {
        friendlyOperator: 'Not Contains',
        operator: 'NOT LIKE',
        not: true
      }];
      this.numberFilterValues = [{
        friendlyOperator: 'Equal to',
        operator: '=',
        not: false
      }, {
        friendlyOperator: 'Not Equal to',
        operator: '!=',
        not: true
      }, {
        friendlyOperator: 'Greater than',
        operator: '>',
        not: false
      }, {
        friendlyOperator: 'Not Greater than',
        operator: '!>',
        not: true
      }, {
        friendlyOperator: 'Less than',
        operator: '<',
        not: false
      }, {
        friendlyOperator: 'Not Less than',
        operator: '!<',
        not: true
      }, {
        friendlyOperator: 'Greater or Equal to',
        operator: '>=',
        not: false
      }, {
        friendlyOperator: 'Not Greater or Equal to',
        operator: '<',
        not: true
      }, {
        friendlyOperator: 'Less or Equal to',
        operator: '<=',
        not: false
      }, {
        friendlyOperator: 'Not Less or Equal to',
        operator: '>',
        not: true
      }];
      this.currentFilterValues = [];
      this.previousOperatorAnd = false;
      this.previousOperatorOr = false;
      this.inputType = 'text';

      this.data = data;

      if (data.OD_ReportAvailableColumns.IsString) {
        this.currentFilterValues = this.stringFilterValues;
      } else {
        this.currentFilterValues = this.numberFilterValues;
      }

      this.previousOperatorAnd = data.LogicalOperator == "AND" ? true : false;
      this.previousOperatorOr = data.LogicalOperator == "OR" ? true : false;

      var filterIndex = _.findIndex(this.currentFilterValues, function (f) {
        return f.friendlyOperator == data.FriendlyOperator;
      });
      this.currentFilter = this.currentFilterValues[filterIndex];
    }

    Filter.prototype.togglePrevious = function togglePrevious() {
      this.previousOperatorAnd = this.previousOperatorAnd ? false : true;
      this.previousOperatorOr = this.previousOperatorOr ? false : true;
    };

    return Filter;
  }();

  var Editor = exports.Editor = (_dec = (0, _aureliaFramework.inject)(_helper.helper, _data.Data, _aureliaEventAggregator.EventAggregator, _aureliaDialog.DialogService, _popupHelper.PopupHelper, _formhelper.formhelper), _dec2 = (0, _aureliaFramework.computedFrom)('reportObject', 'selectedFormTemplate'), _dec(_class2 = (_class3 = function () {
    Editor.prototype.selectedReportChanged = function selectedReportChanged(newVal, oldVal) {

      if (newVal == null) {
        return;
      }

      var rId = 0;

      if (newVal.Report) {
        rId = newVal.Report.ReportID;
      } else {
        rId = newVal.ReportID;
      }

      this.loadReport(rId);
    };

    _createClass(Editor, [{
      key: 'canRunReport',
      get: function get() {
        if (this.reportObject && this.selectedFormTemplate) {
          return true;
        } else {
          return false;
        }
      }
    }]);

    function Editor(helper, Data, EventAggregator, DialogService, PopupHelper, formhelper) {
      _classCallCheck(this, Editor);

      this.categories = [];
      this.categoriesReportingColumnInfo = [];
      this.categoriesCustomValues = [];
      this.selectedReportingColumnInfoData = null;
      this.selectedCategory = null;
      this.formTemplates = [];
      this.sidebarExpanded = true;
      this.reports = [];

      _initDefineProp(this, 'selectedReport', _descriptor, this);

      this.reportObject = {
        Report: null,
        Columns: [],
        Filters: [],
        OrderBy: []
      };
      this.deleteColumns = [];
      this.deleteOrderBy = [];
      this.deleteFilters = [];
      this.barForms = true;
      this.barDatabase = false;
      this.barSelect = false;
      this.barFormsDisabled = false;
      this.barDatabaseDisabled = true;
      this.barSelectDisabled = true;
      this.stringFilterValues = ['Begins with', 'Ends with', 'Contains'];
      this.numberFilterValues = ['Greater than', 'Less than', 'Greater or Equal to', 'Less or Equal to', 'Between'];
      this.paperOrientationList = ['Portrait', 'Landscape'];
      this.useDateRange = false;
      this.startDate = null;
      this.endDate = null;
      this.showFormatting = false;
      this.isDistinctQuery = true;
      this.isChart = false;
      this.timeFormats = ['day', 'month', 'year'];

      this.helper = helper;
      this.data = Data;
      this.ea = EventAggregator;
      this.dialogService = DialogService;
      this.popupHelper = PopupHelper;
      this.formhelper = formhelper;
    }

    Editor.prototype.activate = function activate(params) {
      var self = this;
      self.loadReportBuilderCategories();
      self.loadFormTemplates();
    };

    Editor.prototype.attached = function attached() {
      var self = this;
      self.loadReports();
    };

    Editor.prototype.getCurrentChartJsObject = function getCurrentChartJsObject() {
      var cr = this.chartref;
      return cr.au.controller.viewModel.currentViewModel;
    };

    Editor.prototype.toggleFormatting = function toggleFormatting() {
      this.showFormatting = this.showFormatting ? false : true;
    };

    Editor.prototype.toggleDistinctQuery = function toggleDistinctQuery() {
      this.isDistinctQuery = this.isDistinctQuery ? false : true;
    };

    Editor.prototype.allowDrop = function allowDrop(ev) {
      ev.preventDefault();
    };

    Editor.prototype.drag = function drag(ev, obj) {
      var jStr = JSON.stringify(obj);
      ev.dataTransfer.setData("text", jStr);
      return true;
    };

    Editor.prototype.drop = function drop(ev) {
      ev.preventDefault();
      var jStr = ev.dataTransfer.getData("text");
      var jObj = JSON.parse(jStr);
      this.addReportingColumn(jObj, ev.currentTarget.id);
    };

    Editor.prototype.newReport = function newReport(type) {
      var self = this;

      self.isChart = false;

      self.data.getWithUrl('reportbuilder', function (res) {
        self.reportObject = res;
        self.reportObject.Report.ReportName = 'New Report';
        self.reportObject.Report.ReportTitle = 'New Report';
        self.reportObject.Report.ReportTitleAlignment = 'Center';
        self.reportObject.Report.ReportSubTitle = 'Report';
        self.reportObject.Report.ReportSubTitleAlignment = 'Center';
        self.reportObject.Report.PaperOrientation = 'Portrait';

        if (type != 'table') {

          self.isChart = true;

          var toolType = null;
          var chartJsType = 'bar';
          if (type == 'chart-bar') {
            toolType = self.formhelper.getTooltype('chartbar');
            chartJsType = 'bar';
          }
          if (type == 'chart-line') {
            chartJsType = 'line';
            type = 'chart-bar';
            toolType = self.formhelper.getTooltype('chartline');
          }

          self.reportObject.Report.ReportName = 'New ' + chartJsType;
          self.reportObject.Report.ReportTitle = 'New ' + chartJsType;
          self.reportObject.Report.ReportSubTitle = 'Chart';

          self.setupChartItemForReportObject(toolType, chartJsType, self.formhelper.defaultChartOptions(chartJsType), self.formhelper.defaultChartData(chartJsType), 500, 500);
        }

        self.selectedReport = res;
      });
    };

    Editor.prototype.setupChartItemForReportObject = function setupChartItemForReportObject(toolType, chartJsType, chartOptions, chartData, width, height) {
      var self = this;

      var itm = self.formhelper.getNewItem(0, toolType, 0, 0, width, height, toolType);
      itm.addBoxClass = false;

      var reportJson = new ReportJson(toolType, 'chart-bar', chartData, chartOptions, itm);

      reportJson.chartJsConfig.options.maintainAspectRatio = false;

      itm.data = reportJson.chartJsConfig;
      self.reportObject.Report.Json = reportJson;
      self.showFormatting = true;
    };

    Editor.prototype.toggleDateRange = function toggleDateRange() {
      var self = this;
      if (self.reportObject) {
        self.useDateRange = self.useDateRange ? false : true;
      }
    };

    Editor.prototype.save = function save() {
      var self = this;

      if (!self.reportObject) return;

      var saveObj = {
        Columns: [],
        Filters: [],
        OrderBy: [],
        Report: self.formhelper.getNewOD_ReportObject()
      };

      self.setReportPropertiesWithOD_Report(saveObj.Report, self.reportObject.Report);

      var finalReportJson = null;
      if (self.isChart) {
        var currentChartJsObj = self.getCurrentChartJsObject();
        finalReportJson = self.createChartJsonSaveObject(self.reportObject.Report.Json.fileName, self.reportObject.Report.Json.toolType, currentChartJsObj.myChart);
      } else {
        finalReportJson = new ReportJson();
        finalReportJson.chartJsConfig = null;
        finalReportJson.distinct = this.isDistinctQuery;
      }

      saveObj.Report.Json = JSON.stringify(finalReportJson);

      for (var c = 0; c < self.reportObject.Columns.length; c++) {
        var colObj = self.reportObject.Columns[c].data;
        colObj.OD_ReportAvailableColumns = self.reportObject.Columns[c].OD_ReportAvailableColumns;
        colObj.Delete = false;
        colObj.Position = c;
        colObj.Json = self.createJsonColumnChartPropertiesWithColumn(self.reportObject.Columns[c]);

        saveObj.Columns.push(colObj);
      }

      for (var c = 0; c < self.deleteColumns.length; c++) {
        var colObj = self.deleteColumns[c].data;
        colObj.Delete = true;
        saveObj.Columns.push(colObj);
      }

      for (var f = 0; f < self.reportObject.Filters.length; f++) {
        var fObj = self.reportObject.Filters[f].data;
        fObj.LogicalOperator = self.reportObject.Filters[f].previousOperatorAnd ? 'AND' : 'OR';
        fObj.Operator = self.reportObject.Filters[f].currentFilter.operator, fObj.FriendlyOperator = self.reportObject.Filters[f].currentFilter.friendlyOperator, fObj.Value = self.reportObject.Filters[f].data.Value;
        fObj.Delete = false;
        saveObj.Filters.push(fObj);
      }

      for (var c = 0; c < self.deleteFilters.length; c++) {
        var colObj = self.deleteFilters[c].data;
        colObj.Delete = true;
        saveObj.Filters.push(colObj);
      }

      for (var f = 0; f < self.reportObject.OrderBy.length; f++) {
        var fObj = self.reportObject.OrderBy[f].data;
        fObj.Direction = self.reportObject.OrderBy[f].sortAscending ? 'ASC' : 'DESC';
        fObj.ColumnName = fObj.OD_ReportAvailableColumns.TableAlias + '.' + fObj.OD_ReportAvailableColumns.ColumnAlias;
        fObj.Delete = false;
        saveObj.OrderBy.push(fObj);
      }

      for (var c = 0; c < self.deleteOrderBy.length; c++) {
        var colObj = self.deleteOrderBy[c].data;
        colObj.Delete = true;
        saveObj.OrderBy.push(colObj);
      }

      var saveDescription = 'Saving ' + saveObj.Report.ReportName + '...';
      var saveDialog = self.helper.createNoty(saveDescription, 3000);
      saveDialog.show();

      self.data.postWithUrlAndData('reportbuilder', JSON.stringify(saveObj), function (res) {
        if (res != null) {
          self.helper.notySuccess(saveDialog, saveDescription + ' saved!');
          if (self.reportObject.Report.ReportID == 0) {
            self.reports.push(res.Report);

            self.reportObject.Report.ReportID = res.Report.ReportID;

            for (var c = 0; c < self.reportObject.Columns.length; c++) {
              self.reportObject.Columns[c].data.ReportID = res.Report.ReportID;
            }

            for (var f = 0; f < self.reportObject.Filters.length; f++) {
              self.reportObject.Filters[f].data.FilterID = res.Filters[f].FilterID;
              self.reportObject.Filters[f].data.ReportID = res.Report.ReportID;
            }

            for (var o = 0; o < self.reportObject.OrderBy.length; o++) {
              self.reportObject.OrderBy[o].data.ReportID = res.Report.ReportID;
            }
          }
        } else {
          self.helper.notyError(saveDialog, saveDescription + ' failed to save!');
        }
      });
    };

    Editor.prototype.createJsonColumnChartPropertiesWithColumn = function createJsonColumnChartPropertiesWithColumn(column) {
      if (column.hasOwnProperty('beginAtZero')) {
        var json = {
          beginAtZero: column.beginAtZero,
          dateFormat: column.dateFormat,
          isX: column.isX,
          isY: column.isY,
          maxScaleValue: column.maxScaleValue,
          minScaleValue: column.minScaleValue
        };
        return JSON.stringify(json);
      } else {
        return null;
      }
    };

    Editor.prototype.setReportPropertiesWithOD_Report = function setReportPropertiesWithOD_Report(newReport, oldReport) {
      newReport.ReportID = oldReport.ReportID;
      newReport.ReportName = oldReport.ReportName;
      newReport.ReportTitle = oldReport.ReportTitle;
      newReport.IsReportTitleImage = oldReport.IsReportTitleImage;
      newReport.ReportTitleAlignment = oldReport.ReportTitleAlignment;
      newReport.ReportSubTitle = oldReport.ReportSubTitle;
      newReport.ReportSubTitleAlignment = oldReport.ReportSubTitleAlignment;
      newReport.ColumnSpacing = oldReport.ColumnSpacing;
      newReport.GroupIndentation = oldReport.GroupIndentation;
      newReport.PaperOrientation = oldReport.PaperOrientation;
      newReport.OutcomeVariableWeeks = oldReport.OutcomeVariableWeeks;
      newReport.Json = oldReport.Json;
      return newReport;
    };

    Editor.prototype.createChartJsonSaveObject = function createChartJsonSaveObject(fileName, toolType, myChart) {

      var reportJson = new ReportJson();
      reportJson.chartJsConfig.type = myChart.config.type;
      reportJson.fileName = fileName;
      reportJson.toolType = toolType;
      reportJson.distinct = this.isDistinctQuery;
      reportJson.width = parseInt(this.reportObject.Report.Json.item.width);
      reportJson.height = parseInt(this.reportObject.Report.Json.item.height);

      var finalData = {
        datasets: [],
        labels: []
      };

      for (var i = 0; i < myChart.config.data.datasets.length; i++) {
        var ds = _.cloneDeep(myChart.config.data.datasets[i]);

        if (ds.hasOwnProperty('_meta')) {
          delete ds._meta;
        }

        finalData.datasets.push(ds);
      }

      if (myChart.config.data.labels) {
        for (var l = 0; l < myChart.config.data.labels.length; l++) {
          finalData.labels.push(myChart.config.data.labels[l]);
        }
      }

      reportJson.chartJsConfig.data = finalData;

      reportJson.chartJsConfig.options = {
        scales: myChart.config.options.scales
      };

      return reportJson;
    };

    Editor.prototype.openReportViewer = function openReportViewer(reportData) {

      var self = this;

      var path = '../formbuilder/viewer';

      var windowHeight = window.innerHeight;
      var windowWidth = window.innerWidth;

      var options = {
        bodyPadding: 0,
        icon: 'fa-list-alt'
      };

      var description = "Report Viewer";

      if (self.isChart) {
        var chartObj = self.getCurrentChartJsObject();
        self.reportObject.Report.Json.chartJsConfig.data.datasets[0].data = reportData;
        self.reportObject.Report.Json.chartJsConfig.options = chartObj.myChart.options;
      }

      self.popupHelper.openViewModelPop(path, {
        jwt: self.helper._jwt,
        formId: null,
        patientId: null,
        providerId: null,
        date: null,
        instanceId: null,
        showSubmit: false,
        showSubmitAsToolbar: false,
        showPreferenceToolbar: false,
        reportData: reportData,
        reportSettings: self.reportObject.Report,
        showReportToolbar: true
      }, description, windowWidth, windowHeight, 0, 0, options, function (res) {});
    };

    Editor.prototype.runReport = function runReport() {
      var self = this;

      if (!self.reportObject && self.selectedFormTemplate) return;

      self.newColumnInfoObject(function (obj) {

        var tColumnInfos = [];
        var tFilters = [];
        var tOrderBy = [];

        for (var c = 0; c < self.reportObject.Columns.length; c++) {

          var aCol = self.reportObject.Columns[c];
          var colClone = _.cloneDeep(obj);

          colClone.ColumnID = aCol.OD_ReportAvailableColumns.ColumnID;
          colClone.TableFriendlyName = aCol.OD_ReportAvailableColumns.TableFriendlyName;
          colClone.TableName = aCol.OD_ReportAvailableColumns.TableName.toUpperCase();
          colClone.TableAlias = aCol.OD_ReportAvailableColumns.TableAlias;
          colClone.ColumnFriendlyName = aCol.OD_ReportAvailableColumns.ColumnFriendlyName;
          colClone.ColumnName = aCol.OD_ReportAvailableColumns.ColumnName;
          colClone.ColumnAlias = aCol.OD_ReportAvailableColumns.ColumnAlias;
          colClone.IsQuoted = aCol.OD_ReportAvailableColumns.IsQuoted;
          colClone.Table = aCol.OD_ReportAvailableColumns.TableFriendlyName;

          colClone.IsAutoWidth = aCol.data.IsAutoWidth;
          colClone.IsMultiline = aCol.data.IsMultiline;
          colClone.Width = aCol.data.Width;
          colClone.HeaderText = aCol.data.HeaderText;
          colClone.IsDate = aCol.data.IsDate;

          if (self.isChart) {
            var chartColumnInfo = self.getChartColumnInfoObjectWithColumnInfo(colClone);
            chartColumnInfo.IsX = aCol.isX;
            chartColumnInfo.IsY = aCol.isY;
            chartColumnInfo.IncludeInReport = true;
            colClone = chartColumnInfo;
          }

          tColumnInfos.push(colClone);
        }

        for (var c = 0; c < self.reportObject.Filters.length; c++) {

          var aFilter = self.reportObject.Filters[c].data;

          var colClone = _.cloneDeep(obj);

          colClone.ColumnID = aFilter.OD_ReportAvailableColumns.ColumnID;
          colClone.TableFriendlyName = aFilter.OD_ReportAvailableColumns.TableFriendlyName;
          colClone.TableName = aFilter.OD_ReportAvailableColumns.TableName;
          colClone.TableAlias = aFilter.OD_ReportAvailableColumns.TableAlias;
          colClone.ColumnFriendlyName = aFilter.OD_ReportAvailableColumns.ColumnFriendlyName;
          colClone.ColumnName = aFilter.OD_ReportAvailableColumns.ColumnName;
          colClone.ColumnAlias = aFilter.OD_ReportAvailableColumns.ColumnAlias;
          colClone.IsQuoted = aFilter.OD_ReportAvailableColumns.IsQuoted;
          colClone.Table = aFilter.OD_ReportAvailableColumns.TableFriendlyName;
          colClone.IsString = aFilter.OD_ReportAvailableColumns.IsString;

          if (self.reportObject.Filters[c].currentFilter) {
            colClone.Filter = {
              HasPreviousFilter: false,
              LogicalOperator: null,
              Operator: self.reportObject.Filters[c].currentFilter.operator,
              FriendlyOperator: self.reportObject.Filters[c].currentFilter.friendlyOperator,
              Value: self.reportObject.Filters[c].data.Value
            };
            if (self.reportObject.Filters[c].previousOperatorAnd || self.reportObject.Filters[c].previousOperatorOr) {
              colClone.Filter.HasPreviousFilter = true;
              colClone.Filter.LogicalOperator = self.reportObject.Filters[c].previousOperatorAnd ? 'AND' : 'OR';
            }
          }

          self.checkAddToReportColumnInfos(obj, aFilter.OD_ReportAvailableColumns, tColumnInfos, self.isChart);

          tFilters.push(colClone);
        }

        for (var c = 0; c < self.reportObject.OrderBy.length; c++) {

          var aCol = self.reportObject.OrderBy[c];
          var colClone = _.cloneDeep(obj);
          colClone.TableAlias = aCol.data.OD_ReportAvailableColumns.TableAlias;
          colClone.ColumnAlias = aCol.data.OD_ReportAvailableColumns.ColumnAlias;
          colClone.SortDirection = aCol.sortAscending ? 'ASC' : 'DESC';

          self.checkAddToReportColumnInfos(obj, aCol.data.OD_ReportAvailableColumns, tColumnInfos, self.isChart);

          tOrderBy.push(colClone);
        }

        var obj = {
          columnInfos: tColumnInfos,
          filters: tFilters,
          orderBy: tOrderBy,
          fromDate: self.startDate,
          toDate: self.endDate,
          Distinct: self.isDistinctQuery
        };

        if (self.isChart) {
          self.data.postWithUrlAndData('reportbuilder/chart/run', JSON.stringify(obj), function (res) {
            self.openReportViewer(res);
          });
        } else {
          self.data.postWithUrlAndData('reportbuilder/run', JSON.stringify(obj), function (res) {
            self.openReportViewer(res);
          });
        }
      });
    };

    Editor.prototype.getChartColumnInfoObjectWithColumnInfo = function getChartColumnInfoObjectWithColumnInfo(columnInfo) {
      return {
        ColumnInfo: columnInfo,
        IsX: false,
        IsY: false
      };
    };

    Editor.prototype.checkAddToReportColumnInfos = function checkAddToReportColumnInfos(colInfoObj, OD_ReportAvailableColumns, reportColumnInfos, isChart) {

      var foundOrderColumn = null;

      if (isChart) {
        foundOrderColumn = _.find(reportColumnInfos, function (o) {
          return o.ColumnInfo.ColumnAlias == OD_ReportAvailableColumns.ColumnAlias && o.ColumnInfo.TableAlias == OD_ReportAvailableColumns.TableAlias;
        });
      } else {
        foundOrderColumn = _.find(reportColumnInfos, function (o) {
          return o.ColumnAlias == OD_ReportAvailableColumns.ColumnAlias && o.TableAlias == OD_ReportAvailableColumns.TableAlias;
        });
      }

      if (!foundOrderColumn) {
        var orderColClone = _.cloneDeep(colInfoObj);
        orderColClone.ColumnID = OD_ReportAvailableColumns.ColumnID;
        orderColClone.TableFriendlyName = OD_ReportAvailableColumns.TableFriendlyName;
        orderColClone.TableName = OD_ReportAvailableColumns.TableName.toUpperCase();
        orderColClone.TableAlias = OD_ReportAvailableColumns.TableAlias;
        orderColClone.ColumnFriendlyName = OD_ReportAvailableColumns.ColumnFriendlyName;
        orderColClone.ColumnName = OD_ReportAvailableColumns.ColumnName;
        orderColClone.ColumnAlias = OD_ReportAvailableColumns.ColumnAlias;
        orderColClone.IsQuoted = OD_ReportAvailableColumns.IsQuoted;
        orderColClone.Table = OD_ReportAvailableColumns.TableFriendlyName;

        if (isChart) {
          orderColClone = this.getChartColumnInfoObjectWithColumnInfo(orderColClone);
          orderColClone.IncludeInReport = false;
        }

        reportColumnInfos.push(orderColClone);
      }
    };

    Editor.prototype.isColumnDate = function isColumnDate(columnName) {
      return columnName.toUpperCase().indexOf("DATE") > -1 ? true : false;
    };

    Editor.prototype.newOD_ReportColumnsObject = function newOD_ReportColumnsObject(reportAvailableColumn, tableName, columnName, friendlyColumnName, columnId, reportId) {

      var colObj = {
        ColumnID: columnId,
        ColumnName: tableName + '.' + columnName,
        DepthLevel: 1,
        HeaderText: friendlyColumnName,
        IsAutoWidth: true,
        IsMultiline: false,
        OD_Reports: null,
        Position: 0,
        ReportID: reportId,
        Width: 0,
        IsDate: this.isColumnDate(columnName)
      };
      return colObj;
    };

    Editor.prototype.newOD_ReportFiltersObject = function newOD_ReportFiltersObject(rci, reportId) {
      return {
        ColumnID: rci.ColumnID,
        ColumnName: rci.TableAlias + '.' + rci.ColumnAlias,
        FilterID: 0,
        FriendlyOperator: "Contains",
        LogicalOperator: "AND",
        OD_ReportAvailableColumns: rci,
        Operator: "LIKE",
        Position: 0,
        ReportID: reportId,
        Value: null
      };
    };

    Editor.prototype.newOD_ReportOrderByColumnsObject = function newOD_ReportOrderByColumnsObject(rci, reportId) {
      return {
        ColumnID: rci.ColumnID,
        ColumnName: rci.TableName + '.' + rci.ColumnName,
        Direction: "ASC",
        OD_ReportAvailableColumns: rci,
        Position: 0,
        ReportID: reportId
      };
    };

    Editor.prototype.newColumnInfoObject = function newColumnInfoObject(callback) {
      this.data.getWithUrl('reportbuilder/columninfo', function (res) {
        callback(res);
      });
    };

    Editor.prototype.addReportingColumn = function addReportingColumn(column, targetId) {
      if (targetId == 'report-columns') {
        var c = new Column(this.newOD_ReportColumnsObject(column, column.TableName, column.ColumnAlias, column.ColumnFriendlyName, column.ColumnID, this.reportObject.Report.ReportID), column);
        this.reportObject.Columns.push(c);
      } else if (targetId == 'report-filters') {
        var f = new Filter(this.newOD_ReportFiltersObject(column, this.reportObject.Report.ReportID));
        var iType = this.isColumnDate(column.ColumnAlias) ? 'date' : 'text';
        f.inputType = iType;
        this.reportObject.Filters.push(f);
      } else {
        var o = new OrderBy(this.newOD_ReportOrderByColumnsObject(column, this.reportObject.Report.ReportID));
        this.reportObject.OrderBy.push(o);
      }
    };

    Editor.prototype.toggleSidebar = function toggleSidebar() {
      this.sidebarExpanded = this.sidebarExpanded ? false : true;
    };

    Editor.prototype.loadProviders = function loadProviders() {
      var self = this;
      self.data.getProviders(false, function (pros) {
        self.providers = pros;

        var all = { ProviderID: 0, ProviderEntity: 'All' };
        self.providers.splice(0, 0, all);
      });
    };

    Editor.prototype.loadReport = function loadReport(id) {
      var self = this;

      if (id != 0) {
        self.getReportObjectWithId(id, function (res) {

          self.reportObject = res;

          if (res.Report.Json) {
            var reportJson = JSON.parse(res.Report.Json);
            self.isChart = reportJson.chartJsConfig ? true : false;
            self.isDistinctQuery = reportJson.distinct;

            if (self.isChart) {
              self.setupChartItemForReportObject(reportJson.toolType, reportJson.chartJsConfig.type, reportJson.chartJsConfig.options, reportJson.chartJsConfig.data, reportJson.width, reportJson.height);
            }
          } else {
            self.isChart = false;
          }

          var filterObjects = [];
          var orderObjects = [];
          var columnObjects = [];

          self.deleteColumns = [];
          self.deleteFilters = [];
          self.deleteOrderBy = [];

          for (var c = 0; c < res.Columns.length; c++) {
            var col = new Column(res.Columns[c], res.Columns[c]);

            if (res.Columns[c].Json) {
              var colJson = JSON.parse(res.Columns[c].Json);
              col.beginAtZero = colJson.beginAtZero;
              col.dateFormat = colJson.dateFormat;
              col.isX = colJson.isX;
              col.isY = colJson.isY;
              col.minScaleValue = colJson.minScaleValue;
              col.maxScaleValue = colJson.maxScaleValue;
            }
            columnObjects.push(col);
          }
          self.reportObject.Columns = columnObjects;

          for (var f = 0; f < res.Filters.length; f++) {
            var filter = new Filter(res.Filters[f]);
            filterObjects.push(filter);
          }
          self.reportObject.Filters = filterObjects;

          for (var o = 0; o < res.OrderBy.length; o++) {
            var orderBy = new OrderBy(res.OrderBy[o]);
            orderObjects.push(orderBy);
          }
          self.reportObject.OrderBy = orderObjects;
        });
      }
    };

    Editor.prototype.getReportObjectWithId = function getReportObjectWithId(id, callback) {
      var self = this;
      self.data.getWithUrl('reportbuilder/report/' + id + '/object', function (res) {
        callback(res);
      });
    };

    Editor.prototype.loadReports = function loadReports() {
      var self = this;

      self.data.getWithUrl('reportbuilder/reports/all', function (res) {
        self.reports = res;
      });
    };

    Editor.prototype.loadFormTemplates = function loadFormTemplates() {
      var self = this;
      self.formTemplates = [];
      self.data.getWithUrl('goforms?type=REPORT', function (res) {
        self.formTemplates = res;
      });
    };

    Editor.prototype.loadReportBuilderCategories = function loadReportBuilderCategories() {
      var self = this;
      self.categories = [];
      self.categoriesReportingColumnInfo = [];
      self.data.getWithUrl('reportbuilder/tables', function (res) {
        for (var c = 0; c < res.length; c++) {
          var cat = new Category(res[c], res[c].TableFriendlyName, res[c].ColumnID);
          self.categoriesReportingColumnInfo.push(cat);
        }
        self.categories = self.categoriesReportingColumnInfo;
      });
    };

    Editor.prototype.getReportingColumnsWithCategory = function getReportingColumnsWithCategory(category, callback) {
      var self = this;
      var url = 'reportbuilder/columns?table=' + category.data.TableName;
      self.data.getWithUrl(url, function (res) {
        category.items = res;
        if (callback) {
          callback();
        }
      });
    };

    Editor.prototype.selectCategory = function selectCategory(category) {
      var self = this;
      for (var g = 0; g < self.categories.length; g++) {
        if (self.categories[g].name == category.name) {
          self.selectedCategory = self.categories[g];
          self.categories[g].expanded = true;
        } else {
          self.categories[g].expanded = false;
        }
      }
    };

    Editor.prototype.categoryClicked = function categoryClicked(category) {
      var self = this;
      if (category.items.length > 0) {
        self.selectCategory(category);
      } else {
        if (category.isCustom) {
          self.getCustomValuesWithCategory(category, function (res) {
            self.selectCategory(category);
          });
        } else {
          self.getReportingColumnsWithCategory(category, function (res) {
            self.selectCategory(category);
          });
        }
      }
    };

    Editor.prototype.removeColumn = function removeColumn(c, type) {

      var self = this;

      if (self.reportObject) {
        if (type == 'order') {
          var foundIndex = _.findIndex(self.reportObject.OrderBy, function (f) {
            return f.data.OD_ReportAvailableColumns.ColumnAlias == c.data.OD_ReportAvailableColumns.ColumnAlias && f.data.OD_ReportAvailableColumns.TableAlias == c.data.OD_ReportAvailableColumns.TableAlias;
          });
          if (foundIndex >= 0) {
            self.deleteOrderBy.push(self.reportObject.OrderBy[foundIndex]);
            self.reportObject.OrderBy.splice(foundIndex, 1);
          }
        } else if (type == 'column') {
          var foundIndex = _.findIndex(self.reportObject.Columns, function (f) {
            return f.OD_ReportAvailableColumns.ColumnAlias == c.OD_ReportAvailableColumns.ColumnAlias && f.OD_ReportAvailableColumns.TableAlias == c.OD_ReportAvailableColumns.TableAlias;
          });
          if (foundIndex >= 0) {
            self.deleteColumns.push(self.reportObject.Columns[foundIndex]);
            self.reportObject.Columns.splice(foundIndex, 1);
          }
        } else {
          var foundIndex = _.findIndex(self.reportObject.Filters, function (f) {
            return f.data.OD_ReportAvailableColumns.ColumnAlias == c.data.OD_ReportAvailableColumns.ColumnAlias && f.data.OD_ReportAvailableColumns.TableAlias == c.data.OD_ReportAvailableColumns.TableAlias && f.data.Operator == c.data.Operator && f.data.Value == c.data.Value;
          });
          if (foundIndex >= 0) {
            self.deleteFilters.push(self.reportObject.Filters[foundIndex]);
            self.reportObject.Filters.splice(foundIndex, 1);
          }
        }
      }
    };

    return Editor;
  }(), (_descriptor = _applyDecoratedDescriptor(_class3.prototype, 'selectedReport', [_aureliaFramework.observable], {
    enumerable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class3.prototype, 'canRunReport', [_dec2], Object.getOwnPropertyDescriptor(_class3.prototype, 'canRunReport'), _class3.prototype)), _class3)) || _class2);
});;
define('text!reportbuilder/editor.html',[],function(){return "<template><style>.page-selected{border:1px dashed #007bff}.point-three-border{border:1px solid rgba(0,0,0,.3)}.btn-outline-primary:active,.btn-outline-primary:focus{box-shadow:none!important;outline:0!important}.btn-outline-primary:hover{color:#fff;background-color:#007bff!important;border-color:#007bff}.marquee-selected{color:#fff;background-color:#007bff!important}.data-button{border-top-right-radius:0!important;border-bottom-right-radius:0!important;padding-right:.3rem}.data-button-dropdown{padding-left:0;border-top-left-radius:0!important;border-bottom-left-radius:0!important}.flex-fill{flex:1 1 auto}.form-type{color:grey}.table-cell-options{position:absolute;border-radius:4px;border:1px solid #007bff;background-color:#fff;box-shadow:#007bff 3px 3px 10px 0;z-index:2000}.container-class{height:1056px;width:816px;display:block}textarea{min-height:unset!important}.column-box{border-radius:.25rem;padding:10px 20px;display:inline-block;margin-right:1.25rem;margin-bottom:1.25rem;border:1px solid #007bff;color:#007bff;max-width:fit-content;position:relative}.close-button{position:absolute;top:4px;right:6px}.jumbotron-fill{flex:1 1 auto;margin-bottom:0;border-radius:.25rem}</style><div class=\"row\"><div id=\"formList\" show.bind=\"sidebarExpanded\" class=\"col-md-3 pr-0\" style=\"overflow-y:auto;height:90vh;position:fixed\"><div show.bind=\"barForms\"><div class=\"d-flex align-items-center mb-1\"><select value.bind=\"selectedReport\" class=\"form-control mr-1 flex-fill\"><option model.bind=\"null\">Reports...</option><option repeat.for=\"r of reports\" model.bind=\"r\">${r.ReportName}</option></select> <button class=\"btn btn-outline-primary\" type=\"button\" data-toggle=\"dropdown\" aria-expanded=\"false\"><i class=\"fa fa-plus\" aria-hidden=\"true\"></i></button><div class=\"dropdown-menu\"><a class=\"dropdown-item\" href=\"#\" click.delegate=\"newReport('table')\"><i class=\"fa fa-table fa-fw\" aria-hidden=\"true\"></i>New Table</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"newReport('chart-bar')\"><i class=\"fa fa-bar-chart fa-fw\" aria-hidden=\"true\"></i>New Bar Chart</a> <a class=\"dropdown-item\" href=\"#\" click.delegate=\"newReport('chart-line')\"><i class=\"fa fa-line-chart fa-fw\" aria-hidden=\"true\"></i>New Line Chart</a></div></div></div><div if.bind=\"reportObject\" class=\"accordion\" id=\"accordionExample\"><div repeat.for=\"c of categories\" class=\"card point-three-border\"><div class=\"card-header\"><h2 class=\"mb-0\"><button class=\"btn btn-link btn-block text-left\" type=\"button\" style=\"font-size:1.2rem;font-weight:500;line-height:1.2\" data-toggle=\"collapse\" data-target.bind=\"c.dataTarget\" aria-expanded=\"true\" click.delegate=\"categoryClicked(c)\"><i class=\"fa fa-database mr-1\" aria-hidden=\"true\"></i>${c.name} <i class=\"fa ${c.expanded ? 'fa-angle-down' : 'fa-angle-up'} float-right\" aria-hidden=\"true\"></i></button></h2></div><div id.bind=\"c.collapseId\" class=\"collapse\" data-parent=\"#accordionExample\"><ul class=\"list-group list-group-flush\"><li repeat.for=\"rc of c.items\" draggable=\"true\" dragstart.trigger=\"drag($event, rc)\" class=\"list-group-item ${rc.selected ? 'active' : ''} d-flex align-items-center\"><span class=\"mr-1\">${rc.ColumnFriendlyName}</span></li></ul></div></div></div></div><div class=\"col-md-${sidebarExpanded ? '9' : '12'} ml-auto\" style=\"overflow-y:auto;height:90vh\" scrolltop.bind=\"pageTop\"><div style=\"position:sticky;top:0;z-index:2000;padding-bottom:4px\"><div class=\"d-flex align-items-center\"><div class=\"d-flex pt-2 px-2 align-items-center\"><span class=\"h4 mb-0 mr-2\" style=\"color:#007bff\" contenteditable=\"true\" innerhtml.bind=\"reportObject.Report.ReportName\"></span> <i if.bind=\"reportObject.Report != null\" class=\"fa ${showFormatting ? 'fa-chevron-down' : 'fa-chevron-up'} text-muted\" aria-hidden=\"true\" click.delegate=\"toggleFormatting()\"></i></div><div class=\"btn-group ml-auto mr-2\" style=\"background-color:#fff\" role=\"group\" aria-label=\"Toolbar\"><button type=\"button\" class=\"btn btn-success\" disabled.bind=\"reportObject.Report==null\" click.delegate=\"runReport()\"><i class=\"fa fa-check mr-1\" aria-hidden=\"true\"></i>Run</button></div><div class=\"btn-group\" style=\"background-color:#fff\" role=\"group\"><button type=\"button\" disabled.bind=\"reportObject.Report==null\" class=\"btn btn-primary\" click.delegate=\"save()\"><i class=\"fa fa-floppy-o\" aria-hidden=\"true\"></i></button> <button type=\"button\" disabled.bind=\"reportObject.Report==null\" class=\"btn btn-primary dropdown-toggle dropdown-toggle-split pl-0\" data-toggle=\"dropdown\" aria-expanded=\"false\"><span class=\"sr-only\">Toggle Dropdown</span></button></div></div></div><template if.bind=\"showFormatting\"><div class=\"form-row\"><div class=\"form-group col\"><label>Report Title</label> <input type=\"text\" class=\"form-control\" value.bind=\"reportObject.Report.ReportTitle\" placeholder=\"report title\"></div><div class=\"form-group col\"><label>Subtitle</label> <input type=\"text\" class=\"form-control\" value.bind=\"reportObject.Report.ReportSubTitle\" placeholder=\"subtitle\"></div><div class=\"form-group col\"><label>Paper Orientation</label> <select value.bind=\"reportObject.Report.PaperOrientation\" class=\"form-control\"><option repeat.for=\"r of paperOrientationList\" model.bind=\"r\">${r}</option></select></div></div><div if.bind=\"isChart\"><div class=\"form-row\"><div class=\"form-group col\"><label>Width</label> <input type=\"number\" class=\"form-control\" value.bind=\"reportObject.Report.Json.item.width\" placeholder=\"width\"></div><div class=\"form-group col\"><label>Height</label> <input type=\"number\" class=\"form-control\" value.bind=\"reportObject.Report.Json.item.height\" placeholder=\"height\"></div></div><div class=\"form-row\"><div class=\"form-group col\"><compose ref=\"chartref\" view-model=\"../formbuilder/charts/${reportObject.Report.Json.fileName}\" model.bind=\"reportObject.Report.Json\" containerless></compose></div></div></div></template><div if.bind=\"reportObject.Report==null\" class=\"row mb-2\"><div class=\"col\"><div class=\"card\"><div class=\"card-body d-flex flex-wrap\" class=\"column-box\"><div if.bind=\"reportObject.Columns.length == 0\" class=\"jumbotron jumbotron-fill\"><h1 class=\"display-4\">No Report Selected...</h1><p class=\"lead\">Select a report from the picker to the left, or create a new one with the plus button!</p></div></div></div></div></div><div if.bind=\"reportObject.Report != null\" class=\"row mb-2\"><div class=\"col\"><div class=\"card\"><div class=\"card-header d-flex align-items-center\"><i class=\"fa fa-database mr-1\" aria-hidden=\"true\"></i> Data Columns <button class=\"btn ${isDistinctQuery ? 'btn-primary' : 'btn-outline-secondary'} ml-auto mr-2\" type=\"button\" id=\"button-addon1\" click.delegate=\"toggleDistinctQuery()\"><i class=\"fa ${isDistinctQuery ? 'fa-check-square-o' : 'fa-square-o'} mr-1\" aria-hidden=\"true\"></i> Distinct</button></div><div id=\"report-columns\" class=\"card-body d-flex flex-wrap\" class=\"column-box\" drop.trigger=\"drop($event)\" dragover.trigger=\"allowDrop($event)\"><div reorderable-repeat.for=\"c of reportObject.Columns\" class=\"column-box\"><div class=\"font-weight-bold mr-1 d-inline-block text-uppercase\">${c.OD_ReportAvailableColumns.TableFriendlyName}</div><div class=\"d-inline-block text-uppercase\">${c.OD_ReportAvailableColumns.ColumnFriendlyName}</div><div if.bind=\"c.data.IsDate\" class=\"input-group mb-1\"><div class=\"input-group-prepend\"><label class=\"input-group-text\" for=\"inputGroupSelect01\"><i class=\"fa fa-calendar mr-1\" aria-hidden=\"true\"></i>Format</label></div><select value.bind=\"c.dateFormat\" class=\"custom-select\" change.delegate=\"c.updateTimeUnit(getCurrentChartJsObject())\"><option repeat.for=\"f of timeFormats\" model.bind=\"f\">${f}</option></select></div><div if.bind=\"reportObject.Report.Json != null\" class=\"btn-group d-flex mb-1\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-secondary\" click.delegate=\"c.toggleXAxis(getCurrentChartJsObject(), reportObject)\">X Axis <i class=\"fa ${c.isX ? 'fa-check-square-o' : 'fa-square-o'} mr-1\" aria-hidden=\"true\"></i></button> <button type=\"button\" class=\"btn btn-outline-secondary\" click.delegate=\"c.toggleYAxis(getCurrentChartJsObject(), reportObject)\">Y Axis <i class=\"fa ${c.isY ? 'fa-check-square-o' : 'fa-square-o'} mr-1\" aria-hidden=\"true\"></i></button></div><div if.bind=\"reportObject.Report.Json != null && !c.data.IsDate\" class=\"input-group d-flex\"><div class=\"input-group-prepend\"><button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon1\" click.delegate=\"c.toggleBeginAtZero(getCurrentChartJsObject(), reportObject)\">Begin at Zero <i class=\"fa ${c.beginAtZero ? 'fa-check-square-o' : 'fa-square-o'} mr-1\" aria-hidden=\"true\"></i></button></div><input if.bind=\"!c.beginAtZero\" type=\"number\" class=\"form-control\" input.delegate=\"c.updateScale(getCurrentChartJsObject(), reportObject)\" style=\"width:85px\" placeholder=\"min\" aria-describedby=\"button-addon1\" value.bind=\"c.minScaleValue\"> <input if.bind=\"!c.beginAtZero\" type=\"number\" class=\"form-control\" input.delegate=\"c.updateScale(getCurrentChartJsObject(), reportObject)\" style=\"width:85px\" placeholder=\"max\" aria-describedby=\"button-addon1\" value.bind=\"c.maxScaleValue\"></div><i class=\"fa fa-times close-button ml-auto\" aria-hidden=\"true\" click.delegate=\"removeColumn(c, 'column')\"></i></div><div if.bind=\"reportObject.Columns.length == 0\" class=\"jumbotron jumbotron-fill\"><h1 class=\"display-4\">Drag columns here...</h1><p class=\"lead\">Reports are made up of data columns. Drag some here from the left!</p></div></div></div></div></div><div if.bind=\"reportObject.Report != null\" class=\"row mb-2\"><div class=\"col\"><div class=\"card\"><div class=\"card-header d-flex align-items-center\" style=\"padding-top:5px;padding-bottom:5px\"><i class=\"fa fa-filter mr-1\" aria-hidden=\"true\"></i> Filters<div class=\"input-group ml-auto\" style=\"max-width:320px\"><div class=\"input-group-prepend\"><button class=\"btn ${useDateRange ? 'btn-primary' : 'btn-outline-secondary'}\" type=\"button\" id=\"button-addon1\" click.delegate=\"toggleDateRange()\"><i class=\"fa ${useDateRange ? 'fa-check-square-o' : 'fa-square-o'} mr-1\" aria-hidden=\"true\"></i> <i class=\"fa fa-calendar mr-1\" aria-hidden=\"true\"></i></button></div><input disabled.bind=\"!useDateRange\" value.bind=\"startDate\" style=\"padding-right:0\" type=\"date\" class=\"form-control\" placeholder=\"start date...\" aria-describedby=\"button-addon1\"> <input disabled.bind=\"!useDateRange\" value.bind=\"endDate\" style=\"padding-right:0\" type=\"date\" class=\"form-control\" placeholder=\"end date...\" aria-describedby=\"button-addon1\"></div></div><div id=\"report-filters\" class=\"card-body d-flex flex-wrap\" drop.trigger=\"drop($event)\" dragover.trigger=\"allowDrop($event)\"><div repeat.for=\"f of reportObject.Filters\" class=\"column-box\"><div if.bind=\"!$first\" class=\"btn-group mr-1\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary btn-sm ${f.previousOperatorAnd ? 'active' : ''}\" click.delegate=\"f.togglePrevious()\">AND</button> <button type=\"button\" class=\"btn btn-outline-primary btn-sm ${f.previousOperatorOr ? 'active' : ''}\" click.delegate=\"f.togglePrevious()\">OR</button></div><div class=\"font-weight-bold mr-1 pb-2 d-inline-block text-uppercase\">${f.data.OD_ReportAvailableColumns.TableFriendlyName}</div><div class=\"d-inline-block text-uppercase\">${f.data.OD_ReportAvailableColumns.ColumnFriendlyName}</div><div class=\"input-group\"><div class=\"input-group-prepend\"><select value.bind=\"f.currentFilter\" class=\"custom-select\"><option repeat.for=\"v of f.currentFilterValues\" model.bind=\"v\">${v.friendlyOperator}</option></select></div><input type.bind=\"f.inputType\" class=\"form-control\" placeholder=\"value\" value.bind=\"f.data.Value\" aria-describedby=\"basic-addon1\"></div><i class=\"fa fa-times close-button ml-auto\" aria-hidden=\"true\" click.delegate=\"removeColumn(f, 'filter')\"></i></div><div if.bind=\"reportObject.Filters.length == 0\" class=\"jumbotron jumbotron-fill\"><h1 class=\"display-4\">Drag filters here...</h1><p class=\"lead\">Reports can contain additional data columns that filter your report results. Drag some here from the left!</p></div></div></div></div><div class=\"col pl-0\"><div class=\"card\"><div class=\"card-header\"><i class=\"fa fa-sort mr-1\" aria-hidden=\"true\"></i>Order</div><div id=\"report-order\" class=\"card-body d-flex flex-wrap\" drop.trigger=\"drop($event)\" dragover.trigger=\"allowDrop($event)\"><div repeat.for=\"o of reportObject.OrderBy\" class=\"column-box\"><div class=\"font-weight-bold mr-1 d-inline-block text-uppercase\">${o.data.OD_ReportAvailableColumns.TableFriendlyName}</div><div class=\"d-inline-block text-uppercase\">${o.data.OD_ReportAvailableColumns.ColumnFriendlyName}</div><div class=\"btn-group d-flex\" role=\"group\"><button type=\"button\" class=\"btn btn-outline-primary btn-sm ${o.sortAscending ? 'active' : ''}\" click.delegate=\"o.toggleSort()\">ASC</button> <button type=\"button\" class=\"btn btn-outline-primary btn-sm ${!o.sortAscending ? 'active' : ''}\" click.delegate=\"o.toggleSort()\">DESC</button></div><i class=\"fa fa-times close-button ml-auto\" aria-hidden=\"true\" click.delegate=\"removeColumn(o, 'order')\"></i></div><div if.bind=\"reportObject.OrderBy.length == 0\" class=\"jumbotron jumbotron-fill\"><h1 class=\"display-4\">Drag ording columns here...</h1><p class=\"lead\">Reports can contain additional data columns that order (or sort) your report results. Drag some here from the left!</p></div></div></div></div></div></div></div></template>";});;
define('reportbuilder/index',['exports'], function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Index = exports.Index = function () {
    function Index() {
      _classCallCheck(this, Index);

      console.log('Report Builder!');
    }

    Index.prototype.configureRouter = function configureRouter(config, router) {
      config.title = 'Report Builder';
      config.map([{ route: 'editor', name: 'editor', moduleId: 'reportbuilder/editor', nav: true, title: 'Editor' }]);
      this.router = router;
    };

    return Index;
  }();
});;
define('text!reportbuilder/index.html',[],function(){return "<template><router-view></router-view></template>";});;
define('snomed/browser',['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var Browser = exports.Browser = function Browser() {
		_classCallCheck(this, Browser);

		this.message = 'HELLO FROM SNOMED BROWSER!';
	};
});;
define('text!snomed/browser.html',[],function(){return "<template><h2>${message}</h2></template>";});;
define('snomed/index',['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var Index = exports.Index = function () {
		function Index() {
			_classCallCheck(this, Index);

			this.message = 'HELLO FROM SNOMED/INDEX';
			console.log('SNOMED INDEX LOADED!');
		}

		Index.prototype.configureRouter = function configureRouter(config, router) {
			config.title = 'Snomed';
			config.map([{ route: 'browser', name: 'browser', moduleId: 'snomed/browser', nav: true, title: 'Browser' }, { route: 'selector', name: 'selector', moduleId: 'snomed/selector', nav: true, title: 'Code Selector' }]);
			this.router = router;
		};

		return Index;
	}();
});;
define('text!snomed/index.html',[],function(){return "<template><h1>${message}</h1><div class=\"container\"><router-view></router-view></div></template>";});;
define('snomed/selector',['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var Selector = exports.Selector = function Selector() {
		_classCallCheck(this, Selector);

		this.message = 'HELLO FROM SNOMED CODE SELECTOR!';
	};
});;
define('text!snomed/selector.html',[],function(){return "<template><h2>${message}</h2></template>";});;
define('text!styles/app.css',[],function(){return ".first-class {\n    color: red;\n}\n\n.fax-parent {\n    background-color: blueviolet;\n    color: white;\n}\n.text-parent {\n    color: blueviolet;\n}\n\n.fax-child {\n    background-color: plum;\n    color: white;\n}\n.text-child {\n    color: plum;\n}\n\n.table-hover tbody tr:hover td {\n  background-color: antiquewhite;\n}\n\n\n\n.tableFixHead    { overflow-y: auto; height: 100px; }\n.tableFixHead th { position: sticky;  top: 0;} /*z-index: 1000;}*/\n\n/*!*!* Just common table stuff. Really. *!*!*/\n.tableFixHead table  { border-collapse: collapse; width: 100%; }\n.tableFixHead th     { background:grey; }\n\n\n.tableFixHeadLight    { overflow-y: auto; height: 100%; }\n.tableFixHeadLight th { position: inherit;  top: -1px;}/*z-index: 1000;*/\n.tableFixHeadLight table  { border-collapse: collapse; width: 100%; }\n.tableFixHeadLight th     { background:#f7f7f7; }\n.tableFixHeadLight thead tr     { background:#f7f7f7; }\n.tableFixHeadLightEditing { color:#dedfdf;}\n\n\n\n\n.table-fixed {\n  width: 100%;\n  background-color: #f3f3f3;\n}\n.table-fixed tbody {\n  height: 200px;\n  overflow-y: auto;\n  width: 100%;\n}\n.table-fixed thead{\n  width: inherit;\n  display: table-header-group;\n}\n\n.table-fixed thead tr th {\n   background-color: #f39c12;\n   border-color: #e67e22;\n }\n\n.table-fixed tr {\n  display: table-row;\n}\n\n.table-fixed td, .table-fixed th {\n  display: table-cell;\n  padding: 8px 16px;\n}\n\n\n.text-unlocked{\n  color: #e5e5e5 !important;\n}\n\n.demo-icon-selected{\n  border: 1px solid #007bff;\n  border-radius: 10px;\n}\n\n.create-visit-error-border{\n  border: 1px solid #dc3545;\n  height: 100%;\n  border-radius: 5px;\n}\n\n.create-visit-error-bodypart{\n  width: 100%;\n  margin-top: 0.25rem;\n  font-size: 80%;\n  color: #dc3545;\n}\n\n.grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;\n}\n\n.grid > div {\n  padding: 10px;\n}\n\n\n.card{\n  border: 1px solid rgba(0, 0, 0, 0.4);\n}\n\n\n.daysheet-modality{\n  font-weight: bold;\n}\n\n/*.daysheet-table tr:hover{*/\n/*  background: wheat; !important;*/\n/*}*/\n\n.daysheet-day-header{\n  border-top: none;\n  border-left: none;\n  border-right: none;\n}\n\n.daysheet-day-header-active{\n  border-top: 2px solid rgb(115, 182, 255) !important;\n  border-left: 2px solid rgb(115, 182, 255) !important;\n  border-right: 2px solid rgb(115, 182, 255) !important;\n}\n\n\n\n.daysheet-day{\n  border-left: none;\n  border-right: none;\n}\n\n.daysheet-day-active{\n  border-left: 2px solid rgb(115, 182, 255) !important;\n  border-right: 2px solid rgb(115, 182, 255) !important;\n}\n\n.daysheet-day-active tr td:last-of-type{\n  border-bottom: 2px solid rgb(115, 182, 255) !important;\n  border-left: 2px solid rgb(115, 182, 255) !important;\n  border-right: 2px solid rgb(115, 182, 255) !important;\n}\n\ninput::-webkit-calendar-picker-indicator {\n  opacity: 100;\n}\n\n.daysheet-timer{\n  position: absolute;\n  padding-top: 3px;\n  top: 10px;\n  right: 10px;\n  display: inline-block;\n  width: 140px;\n  height: 35px;\n  z-index: 1000;\n  border-radius: 4px;\n  background-color: white;\n  box-shadow: 0px 3px 8px rgba(0, 0, 0, 0.32);\n  border: 1px solid rgba(0, 0, 0, 0.32);\n}\n\n\n.tooltip.show {\n  opacity: 1.0;\n}\n\n.tooltip-inner {\n  background-color: #fff;\n  color: black;\n  border:  1px solid #aaaeb2;\n}\n\n.tooltip.bs-tooltip-right .arrow:before {\n  border-right-color: #aaaeb2 !important;\n}\n.tooltip.bs-tooltip-left .arrow:before {\n  border-left-color: #aaaeb2 !important;\n}\n.tooltip.bs-tooltip-bottom .arrow:before {\n  border-bottom-color: #aaaeb2 !important;\n}\n.tooltip.bs-tooltip-top .arrow:before {\n  border-top-color: #aaaeb2 !important;\n}\n\n.caret{ color: black; }\n\n.ipad .container-fluid{\n  background-image: none !important;\n  background-color: #0a0a0a;\n}\n\n.ipad .card-header{\n  background-color: #525252;\n  color: white;\n}\n\n.ipad .card-header .col-form-label{\n  color: white;\n}\n\n.ipad .card-body{\n  background-color: #f7f7f7;\n}\n\n.pack-w25{\n  width: 25%;\n}\n\n.pack-w50{\n  width: 50%;\n}\n\n.pack-w75{\n  width: 75%;\n}\n\n.pack-w100{\n  width: 100%;\n}\n\n.pack-h25{\n  height: 25%;\n}\n\n.pack-h50{\n  height: 50%;\n}\n\n.pack-h75{\n  height: 75%;\n}\n\n.pack-h100{\n  height: 100%;\n}\n\n.pack-h10{\n  height: 10%;\n}\n\n.pack-h20{\n  height: 20%;\n}\n\n.pack-h30{\n  height: 30%;\n}\n\n.pack-h40{\n  height: 40%;\n}\n\n.pack-h70{\n  height: 70%;\n}\n\n.pack-h90{\n  height: 90%;\n}\n\n.pack-h60{\n  height: 60%;\n}\n\n.pack-h80{\n  height: 80%;\n}\n\n.pack-h12-5{\n  height: 12.5%;\n}\n\n.pack-h37-5{\n  height: 37.5%;\n}\n\n.pack-h62-5{\n  height: 62.5%;\n}\n\n.pack-h87-5{\n  height: 87.5%;\n}\n\n.packery-drop-placeholder {\n  outline: 3px dashed hsla(0, 0%, 0%, 0.5);\n  outline-offset: -6px;\n  -webkit-transition: -webkit-transform 0.2s;\n          transition: transform 0.2s;\n}\n\n\n\n\n/*.pack-gutter{*/\n/*  width: 15px;*/\n/*}*/\n\n.block{\n  background: transparent;\n  /*padding: 10px;*/\n  padding-bottom: 10px;\n  padding-right: 10px;\n}\n\nux-dialog-container.active{\n  z-index: 2000 !important;\n}\n\nux-dialog-overlay.active {\n  background-color: black;\n  opacity: .5;\n}\n\n.mini{\n  width: 20%;\n  height: 100px;\n  overflow: hidden;\n}\n\n.ptTableInput{\n  height: 38px;\n  border: solid 1px lightgrey;\n}\n\n.ptAuthTable tr > th {\n  border-top: none;\n}\n\n.block-button{\n  position: absolute;\n  top: 0;\n  right: 0;\n}\n\n.message-bubble{\n  width: 75%;\n  margin-bottom: 20px;\n}\n\n.message-bubble-content{\n  padding: 10px;\n  border-radius:10px;\n}\n\n.message-bubble-tag-right{\n  right:17px;\n  -moz-transform: scale(-1, 1);\n  -webkit-transform: scale(-1, 1);\n  -o-transform: scale(-1, 1);\n  -ms-transform: scale(-1, 1);\n  transform: scale(-1, 1);\n}\n\n.message{\n  margin: 10px;\n  border: 1px solid #e6e6e6;\n  background-color: #e6e6e6;\n  border-radius: 5px;\n}\n\n.message-box:focus {\n  border-color: #ced4da;\n  box-shadow: none;\n}\n\n@keyframes SlideInRight {\n  from {\n    transform: translateX(100%);\n  }\n\n  to {\n    transform: translateX(0);\n  }\n}\n\n@keyframes SlideOutRight {\n  from {\n    transform: translateX(0);\n  }\n\n  to {\n    transform: translateX(100%);\n  }\n}\n\n/*.animate-slide-in-right.au-enter {*/\n/*  transform: translateX(100%);*/\n/*}*/\n\n.animate-swipe-row-left.au-enter-active {\n  animation: SlideInRight 0.15s;\n}\n\n.animate-swipe-row-right.au-leave-active {\n  animation: SlideOutRight 0.15s;\n}\n\n@keyframes SlideInLeft {\n  from {\n    transform: translateX(-100%);\n  }\n\n  to {\n    transform: translateX(0);\n  }\n}\n\n@keyframes SlideOutLeft {\n  from {\n    transform: translateX(0);\n  }\n\n  to {\n    transform: translateX(-100%);\n  }\n}\n\n.animate-slide-in-left.au-enter-active {\n  animation: SlideInLeft 0.15s;\n}\n\n.animate-slide-out-left.au-leave-active {\n  animation: SlideOutLeft 0.15s;\n}\n\n\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    background-color: #f5f5f5;\n}\n\n.container {\n    max-width: 500px;\n    margin: 0 auto;\n    background: white;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n}\n\n.header {\n    text-align: center;\n    padding: 40px 20px;\n    background: white;\n}\n\n.logo {\n    margin-bottom: 20px;\n}\n\n.logo-circle {\n    width: 60px;\n    height: 60px;\n    background: #dc3545;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto;\n}\n\n.header h2 {\n    color: #333;\n    font-size: 20px;\n    font-weight: 500;\n    margin: 0;\n}\n\n.actions-container {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 15px;\n}\n\n\n/* .action-button {\n    background: white;\n    border: 1px solid #E0E0E0;\n    border-radius: 25px;\n    padding: 5px 12px;\n    font-size: 14px;\n    color: #333;\n    cursor: pointer;\n    transition: all 0.2s;\n    white-space: nowrap;\n    display: inline-block;\n    width: fit-content;\n    max-width: fit-content;\n    align-self: flex-start;\n    margin-left: 30px;\n}\n.action-button:hover {\n    background: #f8f9fa;\n    border-color: #d0d0d0;\n}\n\n.action-button.active {\n    background: #e3f2fd;\n    border-color: #2196f3;\n    color: #1976d2;\n} */\n\n.detail-view {\n    padding: 20px;\n    flex: 1;\n    display: none;\n}\n\n.detail-view.show {\n    display: block;\n}\n\n.detail-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 20px;\n}\n\n.detail-header h3 {\n    margin: 0;\n    font-size: 18px;\n    font-weight: 600;\n    color: #333;\n}\n\n.close-btn {\n    background: none;\n    border: none;\n    font-size: 24px;\n    cursor: pointer;\n    color: #666;\n    width: 30px;\n    height: 30px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.detail-subtitle {\n    color: #666;\n    font-size: 14px;\n    margin-bottom: 20px;\n}\n\n.visits-table {\n    border: 1px solid #e0e0e0;\n    border-radius: 8px;\n    overflow: hidden;\n    margin-bottom: 20px;\n}\n\n.table-header {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    background: #f8f9fa;\n    padding: 12px 16px;\n    font-weight: 600;\n    font-size: 14px;\n    color: #333;\n}\n\n.table-row {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    padding: 12px 16px;\n    border-top: 1px solid #e0e0e0;\n    font-size: 14px;\n}\n\n.status.completed {\n    color: #28a745;\n}\n\n.detail-footer {\n    font-size: 14px;\n    color: #666;\n    margin-bottom: 20px;\n}\n\n.detail-footer a {\n    color: #2196f3;\n    text-decoration: none;\n}\n\n/* .action-buttons {\n    display: flex;\n    gap: 12px;\n} */\n\n.primary-button, .secondary-button {\n    padding: 12px 24px;\n    border-radius: 6px;\n    font-size: 14px;\n    font-weight: 500;\n    cursor: pointer;\n    border: 1px solid;\n}\n\n.primary-button {\n    background: #2196f3;\n    color: white;\n    border-color: #2196f3;\n}\n\n.secondary-button {\n    background: white;\n    color: #2196f3;\n    border-color: #2196f3;\n}\n\n/* .chat-input-container {\n    padding: 20px;\n    background: white;\n    border-top: 1px solid #e0e0e0;\n    margin-top: auto;\n} */\n\n.chat-input-top {\n    position: relative;\n    margin-bottom: 12px;\n}\n\n.chat-placeholder {\n    position: absolute;\n    top: 12px;\n    left: 16px;\n    color: #999;\n    font-size: 14px;\n    pointer-events: none;\n}\n\n/* .chat-textarea {\n    width: 100%;\n    min-height: 44px;\n    padding: 12px 16px;\n    border: 1px solid #e0e0e0;\n    border-radius: 22px;\n    font-size: 14px;\n    font-family: inherit;\n    resize: none;\n    outline: none;\n    background: #f8f9fa;\n    box-sizing: border-box;\n} */\n\n.voice-input {\n    padding: 12px 16px;\n    background: #f8f9fa;\n    border-radius: 22px;\n    border: 1px solid #e0e0e0;\n    display: none;\n}\n\n.voice-input.show {\n    display: block;\n}\n\n.waveform {\n    display: flex;\n    align-items: center;\n    gap: 2px;\n    height: 20px;\n    justify-content: center;\n}\n\n.wave-bar {\n    width: 3px;\n    background: #2196f3;\n    border-radius: 2px;\n    animation: wave 1.5s ease-in-out infinite;\n}\n\n.wave-bar:nth-child(2) { animation-delay: 0.1s; }\n.wave-bar:nth-child(3) { animation-delay: 0.2s; }\n.wave-bar:nth-child(4) { animation-delay: 0.3s; }\n.wave-bar:nth-child(5) { animation-delay: 0.4s; }\n\n@keyframes wave {\n    0%, 100% { height: 4px; }\n    50% { height: 16px; }\n}\n\n.chat-divider {\n    height: 1px;\n    background: #e0e0e0;\n    margin: 12px 0;\n}\n\n.chat-input-bottom {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.transcribe-label-btn {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    background: none;\n    border: none;\n    color: #666;\n    font-size: 14px;\n    cursor: pointer;\n    padding: 8px;\n}\n\n.input-controls {\n    display: flex;\n    gap: 8px;\n}\n\n.transcribe-btn, .send-btn {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    border: none;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.transcribe-btn {\n    background: #f0f0f0;\n    color: #666;\n}\n\n.transcribe-btn.recording {\n    background: #dc3545;\n    color: white;\n}\n\n.send-btn {\n    background: #2196f3;\n    color: white;\n}\n\n.expanded-container {\n    display: none;\n    height: 100vh;\n}\n\n.expanded-container.show {\n    display: flex;\n}\n\n.sidebar {\n    width: 10%;\n    background: white;\n    border-right: 1px solid #e0e0e0;\n    padding: 20px;\n}\n\n.chat-section {\n    width: 40%;\n    background: white;\n    border-right: 1px solid #e0e0e0;\n    display: flex;\n    flex-direction: column;\n}\n\n.chat-history {\n    flex: 1;\n    padding: 20px;\n    overflow-y: auto;\n}\n\n.chat-message {\n    margin-bottom: 16px;\n    padding: 12px 16px;\n    border-radius: 12px;\n    max-width: 80%;\n}\n\n.chat-message.user {\n    background: #e3f2fd;\n    color: #1976d2;\n    margin-left: auto;\n}\n\n.chat-message.assistant {\n    background: #f5f5f5;\n    color: #333;\n}\n\n.detail-section {\n    width: 50%;\n    background: white;\n    padding: 20px;\n}\n\n.hidden {\n    display: none;\n}\n\n@media (max-width: 768px) {\n    .expanded-container {\n        flex-direction: column;\n    }\n    \n    .sidebar, .chat-section, .detail-section {\n        width: 100%;\n    }\n}\n\n/* Page Content */\n.page-content {\n    padding: 20px;\n    min-height: 100vh;\n    background: #f5f5f5;\n}\n\n/* Floating Chat Button */\n.floating-chat-button {\n    position: fixed;\n    bottom: 20px;\n    right: 20px;\n    background: #dc3545;\n    color: white;\n    border-radius: 25px;\n    padding: 12px 20px;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    cursor: pointer;\n    box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);\n    transition: all 0.3s ease;\n    z-index: 1000;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    font-size: 14px;\n    font-weight: 500;\n}\n\n.floating-chat-button:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 16px rgba(220, 53, 69, 0.4);\n}\n\n.chat-button-icon {\n    width: 24px;\n    height: 24px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.chat-button-text {\n    white-space: nowrap;\n}\n\n/* Chatbot Overlay */\n.chatbot-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    display: flex\n;\n    justify-content: end;\n    z-index: 2000;\n    /* padding: 20px; */\n    /* margin-top: 10%; */\n    padding-top: 50px;\n    padding-right: 10px;\n}\n\n.chatbot-modal {\n    background: white;\n    border-radius: 12px;\n    width: 100%;\n    max-width: 400px;\n    position: relative;\n    overflow: hidden;\n    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);\n}\n\n.chatbot-close-btn {\n    position: absolute;\n    top: 15px;\n    right: 15px;\n    background: none;\n    border: none;\n    color: #666;\n    cursor: pointer;\n    z-index: 10;\n    width: 32px;\n    height: 32px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 50%;\n    transition: all 0.2s ease;\n}\n\n.chatbot-close-btn:hover {\n    background: #f0f0f0;\n    color: #333;\n}\n\n/* Override container styles for modal */\n.chatbot-modal .container {\n    max-width: none;\n    margin: 0;\n    background: white;\n    min-height: auto;\n    max-height: 85vh;\n    display: flex;\n    flex-direction: column;\n}\n\n.chatbot-modal .expanded-container {\n    height: 85vh;\n    max-height: 85vh;\n}\n\n.chatbot-modal .expanded-container.show {\n    display: flex;\n}\n\n/* Responsive design */\n@media (max-width: 768px) {\n    .chatbot-modal {\n        width: 95%;\n        max-width: none;\n        height: 90vh;\n    }\n    \n    .floating-chat-button {\n        bottom: 15px;\n        right: 15px;\n        padding: 10px 16px;\n    }\n    \n    .chat-button-text {\n        font-size: 13px;\n    }\n    \n    .chatbot-modal .expanded-container {\n        flex-direction: column;\n    }\n    \n    .chatbot-modal .sidebar, \n    .chatbot-modal .chat-section, \n    .chatbot-modal .detail-section {\n        width: 100%;\n        height: auto;\n    }\n}\n\n@media (max-width: 480px) {\n    .chat-button-text {\n        display: none;\n    }\n    \n    .floating-chat-button {\n        border-radius: 50%;\n        padding: 12px;\n        width: 48px;\n        height: 48px;\n    }\n}\n\n/* All existing CSS styles for chatboat*/\n\n.container {\n    max-width: 500px;\n    margin: 0 auto;\n    background: white;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n}\n\n.header {\n    text-align: center;\n    padding: 40px 20px;\n    background: white;\n}\n\n.logo {\n    margin-bottom: 20px;\n}\n\n.logo-circle {\n    width: 60px;\n    height: 60px;\n    background: #dc3545;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto;\n}\n\n.header h2 {\n    color: #333;\n    font-size: 20px;\n    font-weight: 500;\n    margin: 0;\n}\n\n\n.action-button {\n   background: white;\n    border: 1px solid #E0E0E0;\n    border-radius: 25px;\n    padding: 5px 12px;\n\n    font-size: 14px;\n    color: #333;\n    cursor: pointer;\n    transition: all 0.2s;\n    white-space: nowrap;\n    display: inline-block;\n    width: fit-content;\n    /* :white_check_mark: Shrinks to text width */\n    max-width: fit-content;\n    /* Optional: Prevent overflow */\n    align-self: flex-start;\n    /* :white_check_mark: Prevents stretching in column flex */\n    margin-left: 30px;\n}\n\n.action-button:hover {\n    background: #f8f9fa;\n    border-color: #d0d0d0;\n}\n\n.action-button.active {\n    background: #e3f2fd;\n    border-color: #2196f3;\n    color: #1976d2;\n}\n\n.detail-view {\n    padding: 20px;\n    flex: 1;\n    display: none;\n}\n\n.detail-view.show {\n    display: block;\n}\n\n.detail-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 20px;\n}\n\n.detail-header h3 {\n    margin: 0;\n    font-size: 18px;\n    font-weight: 600;\n    color: #333;\n}\n\n.close-btn {\n    background: none;\n    border: none;\n    font-size: 24px;\n    cursor: pointer;\n    color: #666;\n    width: 30px;\n    height: 30px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.detail-subtitle {\n    color: #666;\n    font-size: 14px;\n    margin-bottom: 20px;\n}\n\n.visits-table {\n    border: 1px solid #e0e0e0;\n    border-radius: 8px;\n    overflow: hidden;\n    margin-bottom: 20px;\n}\n\n.table-header {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    background: #f8f9fa;\n    padding: 12px 16px;\n    font-weight: 600;\n    font-size: 14px;\n    color: #333;\n}\n\n.table-row {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    padding: 12px 16px;\n    border-top: 1px solid #e0e0e0;\n    font-size: 14px;\n}\n\n.status.completed {\n    color: #28a745;\n}\n\n.detail-footer {\n    font-size: 14px;\n    color: #666;\n    margin-bottom: 20px;\n}\n\n.detail-footer a {\n    color: #2196f3;\n    text-decoration: none;\n}\n\n.action-buttons {\n    display: flex;\n    gap: 12px;\n}\n\n.primary-button, .secondary-button {\n    padding: 12px 24px;\n    border-radius: 6px;\n    font-size: 14px;\n    font-weight: 500;\n    cursor: pointer;\n    border: 1px solid;\n}\n\n.primary-button {\n    background: #2196f3;\n    color: white;\n    border-color: #2196f3;\n}\n\n.secondary-button {\n    background: white;\n    color: #2196f3;\n    border-color: #2196f3;\n}\n\n/* .chat-input-container {\n    padding: 20px;\n    background: white;\n    border-top: 1px solid #e0e0e0;\n    margin-top: auto;\n} */\n\n.chat-input-top {\n    position: relative;\n    margin-bottom: 12px;\n}\n\n.chat-placeholder {\n    position: absolute;\n    top: 12px;\n    left: 16px;\n    color: #999;\n    font-size: 14px;\n    pointer-events: none;\n}\n\n.chat-textarea\n {\n    width: 100%;\n    min-height: 100px;\n    /* padding: 12px 16px; */\n    border: none;\n    /* border-radius: 22px; */\n    font-size: 14px;\n    font-family: inherit;\n    resize: none;\n    outline: none;\n    background: none;\n    box-sizing: border-box;\n}\n\n.voice-input {\n    padding: 12px 16px;\n    background: #f8f9fa;\n    border-radius: 22px;\n    border: 1px solid #e0e0e0;\n    display: none;\n}\n\n.voice-input.show {\n    display: block;\n}\n\n.waveform {\n    display: flex;\n    align-items: center;\n    gap: 2px;\n    height: 20px;\n    justify-content: center;\n}\n\n.wave-bar {\n    width: 3px;\n    background: #2196f3;\n    border-radius: 2px;\n    animation: wave 1.5s ease-in-out infinite;\n}\n\n.wave-bar:nth-child(2) { animation-delay: 0.1s; }\n.wave-bar:nth-child(3) { animation-delay: 0.2s; }\n.wave-bar:nth-child(4) { animation-delay: 0.3s; }\n.wave-bar:nth-child(5) { animation-delay: 0.4s; }\n\n@keyframes wave {\n    0%, 100% { height: 4px; }\n    50% { height: 16px; }\n}\n\n.chat-divider {\n    height: 1px;\n    background: #e0e0e0;\n    margin: 12px 0;\n}\n\n.chat-input-bottom {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.transcribe-label-btn {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    background: none;\n    border: none;\n    color: #666;\n    font-size: 14px;\n    cursor: pointer;\n    padding: 8px;\n}\n\n.input-controls {\n    display: flex;\n    gap: 8px;\n}\n\n.transcribe-btn, .send-btn {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    border: none;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.transcribe-btn {\n    background: #f0f0f0;\n    color: #666;\n}\n\n.transcribe-btn.recording {\n    background: #dc3545;\n    color: white;\n}\n\n.send-btn {\n    background: #2196f3;\n    color: white;\n}\n\n.expanded-container {\n    display: none;\n    height: 100vh;\n}\n\n.expanded-container.show {\n    display: flex;\n}\n\n.sidebar {\n    width: 10%;\n    background: white;\n    border-right: 1px solid #e0e0e0;\n    padding: 20px;\n}\n\n.chat-section {\n    width: 40%;\n    background: white;\n    border-right: 1px solid #e0e0e0;\n    display: flex;\n    flex-direction: column;\n}\n\n.chat-history {\n    flex: 1;\n    padding: 20px;\n    overflow-y: auto;\n}\n\n.chat-message {\n    margin-bottom: 16px;\n    padding: 12px 16px;\n    border-radius: 12px;\n    max-width: 80%;\n}\n\n.chat-message.user {\n    background: #e3f2fd;\n    color: #1976d2;\n    margin-left: auto;\n}\n\n.chat-message.assistant {\n    background: #f5f5f5;\n    color: #333;\n}\n\n.detail-section {\n    width: 50%;\n    background: white;\n    padding: 20px;\n}\n\n.hidden {\n    display: none;\n}\n\n/* Add these styles to your existing CSS */\n\n.expanded-container {\n    display: none;\n    position: fixed; /* Changed from default positioning */\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    width: 100vw;\n    height: 100vh;\n    z-index: 1000; /* Ensure it's above other content */\n    background: white; /* Add background to cover underlying content */\n}\n\n.expanded-container.show {\n    display: flex;\n}\n\n/* Ensure the sidebar, chat-section, and detail-section fill the full height */\n.sidebar, .chat-section, .detail-section {\n    height: 100vh;\n}\n\n/* Make sure chat history scrolls properly within the full height */\n.chat-history {\n    flex: 1;\n    padding: 20px;\n    overflow-y: auto;\n    max-height: calc(100vh - 120px); /* Account for chat input area */\n}\n\n/* Ensure chat input stays at bottom */\n.chat-input-container {\n    padding: 20px;\n    background: white;\n    /* border-top: 1px solid #e0e0e0; */\n    /* min-height: 80px; */\n    border: 1px solid;\n    margin-top: 50px;\n    margin-bottom: -50px;\n    border-radius: 12px;\n}\n/* Optional: Add a close button for the expanded view */\n.expanded-close-btn {\n    position: absolute;\n    top: 20px;\n    right: 20px;\n    background: #f0f0f0;\n    border: none;\n    border-radius: 50%;\n    width: 40px;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    z-index: 1001;\n    color: #666;\n    font-size: 18px;\n}\n\n.expanded-close-btn:hover {\n    background: #e0e0e0;\n    color: #333;\n}\n\n/* Modal styles for office visits expanded view */\n.expanded-container-modal {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 2000;\n    background: rgba(0, 0, 0, 0.5);\n}\n\n.expanded-container-modal.show {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.modal-content {\n    background: white;\n    width: 90%;\n    height: 80%;\n    max-width: 1200px;\n    border-radius: 12px;\n    display: flex;\n    position: relative;\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n}\n\n.modal-close-btn {\n    position: absolute;\n    top: 15px;\n    right: 15px;\n    background: #f0f0f0;\n    border: none;\n    border-radius: 50%;\n    width: 35px;\n    height: 35px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    z-index: 2001;\n    color: #666;\n    font-size: 20px;\n    font-weight: bold;\n}\n\n.modal-close-btn:hover {\n    background: #e0e0e0;\n    color: #333;\n}\n\n.expanded-container-modal .chat-section {\n    width: 40%;\n    background: white;\n    border-right: 1px solid #e0e0e0;\n    display: flex;\n    flex-direction: column;\n    border-radius: 12px 0 0 12px;\n}\n\n.expanded-container-modal .detail-section {\n    width: 60%;\n    background: #f8f9fa;\n    border-radius: 0 12px 12px 0;\n    overflow: hidden;\n}\n\n.expanded-container-modal .chat-history {\n    flex: 1;\n    padding: 20px;\n    padding-top: 50px; /* Account for close button */\n    overflow-y: auto;\n}\n\n.expanded-container-modal .chat-input-container {\n    padding: 20px;\n    background: white;\n    border-top: 1px solid #e0e0e0;\n    border-radius: 0 0 0 12px;\n}\n\n/* Responsive design for modal */\n@media (max-width: 768px) {\n    .modal-content {\n        width: 95%;\n        height: 90%;\n        flex-direction: column;\n    }\n    \n    .expanded-container-modal .chat-section,\n    .expanded-container-modal .detail-section {\n        width: 100%;\n        border-radius: 0;\n    }\n    \n    .expanded-container-modal .chat-section {\n        height: 50%;\n        border-right: none;\n        border-bottom: 1px solid #e0e0e0;\n    }\n    \n    .expanded-container-modal .detail-section {\n        height: 50%;\n    }\n}\n\n\n/* Add these styles to your existing CSS file */\n/* Back button and header styles */\n.header-with-back {\n  display: flex;\n  align-items: center;\n  padding: 15px;\n  border-bottom: 1px solid #e0e0e0;\n  margin-bottom: 15px;\n}\n\n.back-button {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  background: none;\n  border: none;\n  cursor: pointer;\n  padding: 8px 12px;\n  border-radius: 6px;\n  color: #007bff;\n  font-size: 14px;\n  transition: background-color 0.2s ease;\n}\n\n.back-button:hover {\n  background-color: #f8f9fa;\n}\n\n.back-button svg {\n  flex-shrink: 0;\n}\n\n.header-with-back h2 {\n  margin: 0;\n  margin-left: 15px;\n  color: #333;\n  font-size: 18px;\n  font-weight: 600;\n}\n\n/* Chat messages styles */\n.chat-messages {\n  max-height: 300px;\n  overflow-y: auto;\n  padding: 15px;\n  margin-bottom: 20px;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  background-color: #fafafa;\n}\n\n.chat-message {\n  margin-bottom: 15px;\n  padding: 10px 15px;\n  border-radius: 18px;\n  max-width: 80%;\n  word-wrap: break-word;\n  white-space: pre-wrap;\n}\n\n.chat-message.user {\n  background-color: #007bff;\n  color: white;\n  margin-left: auto;\n  margin-right: 0;\n  text-align: right;\n}\n\n.chat-message.assistant {\n  background-color: #e9ecef;\n  color: #333;\n  margin-left: 0;\n  margin-right: auto;\n}\n\n/* Ensure chat input stays at bottom */\n\n/* Smooth transitions */\n.header-with-back,\n.chat-messages {\n  animation: fadeIn 0.3s ease-in-out;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n\n/* Voice recording styles */\n.voice-input {\n  display: none;\n  text-align: center;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  border-radius: 12px;\n  margin: 10px 0;\n}\n\n.voice-input.show {\n  display: block;\n  animation: slideDown 0.3s ease-out;\n}\n\n.recording-indicator {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n  margin-bottom: 15px;\n}\n\n.recording-dot {\n  width: 12px;\n  height: 12px;\n  background: #ff4757;\n  border-radius: 50%;\n  animation: pulse 1.5s infinite;\n}\n\n.recording-text {\n  color: white;\n  font-weight: 500;\n  font-size: 14px;\n}\n\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n    opacity: 1;\n  }\n  50% {\n    transform: scale(1.2);\n    opacity: 0.7;\n  }\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n.waveform {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 3px;\n  height: 30px;\n}\n\n.wave-bar {\n  width: 4px;\n  height: 8px;\n  background: rgba(255, 255, 255, 0.8);\n  border-radius: 2px;\n  transition: height 0.15s ease;\n}\n\n/* Recording button states */\n.transcribe-btn {\n  background: #f8f9fa;\n  border: 1px solid #dee2e6;\n  border-radius: 8px;\n  padding: 10px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.transcribe-btn:hover {\n  background: #e9ecef;\n}\n\n.transcribe-btn.recording {\n  background: #ff4757;\n  border-color: #ff4757;\n  color: white;\n  animation: recordingPulse 2s infinite;\n}\n\n.transcribe-btn.recording:hover {\n  background: #ff3742;\n}\n\n@keyframes recordingPulse {\n  0% {\n    box-shadow: 0 0 0 0 rgba(255, 71, 87, 0.7);\n  }\n  70% {\n    box-shadow: 0 0 0 10px rgba(255, 71, 87, 0);\n  }\n  100% {\n    box-shadow: 0 0 0 0 rgba(255, 71, 87, 0);\n  }\n}\n\n/* Send button enhancement */\n.send-btn {\n  background: #007bff;\n  border: none;\n  border-radius: 8px;\n  padding: 10px;\n  color: white;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.send-btn:hover {\n  background: #0056b3;\n  transform: translateY(-1px);\n}\n\n.send-btn:active {\n  transform: translateY(0);\n}\n\n/* Input controls layout */\n.input-controls {\n  display: flex;\n  gap: 10px;\n  align-items: center;\n}\n\n/* Animations */\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Textarea enhancements */\n.chat-textarea {\n  border: 1px solid #dee2e6;\n  border-radius: 8px;\n  padding: 12px;\n  resize: none;\n  min-height: 60px;\n  font-family: inherit;\n  transition: border-color 0.2s ease;\n}\n\n.chat-textarea:focus {\n  outline: none;\n  border-color: #007bff;\n  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);\n}\n\n/* Placeholder label styling */\n.chat-placeholder {\n    position: absolute;\n    top: 15px;\n    left: 20px;\n    color: #999;\n    font-size: 14px;\n    pointer-events: none;\n    z-index: 2;\n    background: white;\n    padding: 0 4px;\n}\n\n/* Textarea improvements */\n.chat-textarea {\n    width: 100%;\n    min-height: 80px;\n    padding: 15px 20px;\n    border: 2px solid #dee2e6;\n    border-radius: 12px;\n    font-size: 14px;\n    font-family: inherit;\n    resize: none;\n    outline: none;\n    background: white;\n    box-sizing: border-box;\n    transition: border-color 0.2s ease;\n}\n\n.chat-textarea:focus {\n    outline: none;\n    border-color: #007bff;\n    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);\n}\n\n/* Hide placeholder when textarea has focus or content */\n.chat-textarea:focus + .chat-placeholder,\n.chat-textarea:not(:placeholder-shown) + .chat-placeholder {\n    display: none;\n}\n\n/* Voice recording animation improvements */\n.voice-input.show {\n    display: block;\n    animation: slideDown 0.3s ease-out;\n}\n.voice-input\n.recording-indicator {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 10px;\n    margin-bottom: 15px;\n}\n\n.recording-dot {\n    width: 12px;\n    height: 12px;\n    background: #ff4757;\n    border-radius: 50%;\n    animation: pulse 1.5s infinite;\n}\n\n.recording-text {\n    color: white;\n    font-weight: 500;\n    font-size: 14px;\n}\n\n/* Button styling improvements */\n.transcribe-btn.recording {\n    background: #ff4757 !important;\n    border-color: #ff4757 !important;\n    color: white !important;\n    animation: recordingPulse 2s infinite;\n}\n\n@keyframes recordingPulse {\n    0% {\n        box-shadow: 0 0 0 0 rgba(255, 71, 87, 0.7);\n    }\n    70% {\n        box-shadow: 0 0 0 10px rgba(255, 71, 87, 0);\n    }\n    100% {\n        box-shadow: 0 0 0 0 rgba(255, 71, 87, 0);\n    }\n}";});;
define('value-converters/keys',["exports"], function (exports) {
	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var KeysValueConverter = exports.KeysValueConverter = function () {
		function KeysValueConverter() {
			_classCallCheck(this, KeysValueConverter);
		}

		KeysValueConverter.prototype.toView = function toView(obj) {
			var keys = Reflect.ownKeys(obj);
			var objs = [];
			for (var _iterator = keys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var k = _ref;

				objs.push(obj[k]);
			}
			return objs;
		};

		return KeysValueConverter;
	}();
});
//# sourceMappingURL=app-bundle.js.map